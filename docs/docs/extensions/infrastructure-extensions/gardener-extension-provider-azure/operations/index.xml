<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener â€“ Operations</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-azure/operations/</link><description>Recent content in Operations on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-azure/operations/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Deployment</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-azure/operations/deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-azure/operations/deployment/</guid><description>
&lt;h1 id="deployment-of-the-azure-provider-extension">Deployment of the Azure provider extension&lt;/h1>
&lt;p>&lt;strong>Disclaimer:&lt;/strong> This document is NOT a step by step installation guide for the Azure provider extension and only contains some configuration specifics regarding the installation of different components via the helm charts residing in the Azure provider extension &lt;a href="https://github.com/gardener/gardener-extension-provider-azure">repository&lt;/a>.&lt;/p>
&lt;h2 id="gardener-extension-admission-azure">gardener-extension-admission-azure&lt;/h2>
&lt;h3 id="authentication-against-the-garden-cluster">Authentication against the Garden cluster&lt;/h3>
&lt;p>There are several authentication possibilities depending on whether or not &lt;a href="https://github.com/gardener/garden-setup#concept-the-virtual-cluster">the concept of &lt;em>Virtual Garden&lt;/em>&lt;/a> is used.&lt;/p>
&lt;h4 id="virtual-garden-is-not-used-ie-the-runtime-garden-cluster-is-also-the-target-garden-cluster">&lt;em>Virtual Garden&lt;/em> is not used, i.e., the &lt;code>runtime&lt;/code> Garden cluster is also the &lt;code>target&lt;/code> Garden cluster.&lt;/h4>
&lt;p>&lt;strong>Automounted Service Account Token&lt;/strong>
The easiest way to deploy the &lt;code>gardener-extension-admission-azure&lt;/code> component will be to not provide &lt;code>kubeconfig&lt;/code> at all. This way in-cluster configuration and an automounted service account token will be used. The drawback of this approach is that the automounted token will not be automatically rotated.&lt;/p>
&lt;p>&lt;strong>Service Account Token Volume Projection&lt;/strong>
Another solution will be to use &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection">Service Account Token Volume Projection&lt;/a> combined with a &lt;code>kubeconfig&lt;/code> referencing a token file (see example below).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusters:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- cluster:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> certificate-authority-data: &amp;lt;CA-DATA&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server: https://default.kubernetes.svc.cluster.local
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>contexts:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- context:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster: garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user: garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>current-context: garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>users:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tokenFile: /var/run/secrets/projected/serviceaccount/token
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will allow for automatic rotation of the service account token by the &lt;code>kubelet&lt;/code>. The configuration can be achieved by setting both &lt;code>.Values.global.serviceAccountTokenVolumeProjection.enabled: true&lt;/code> and &lt;code>.Values.global.kubeconfig&lt;/code> in the respective chart&amp;rsquo;s &lt;code>values.yaml&lt;/code> file.&lt;/p>
&lt;h4 id="virtual-garden-is-used-ie-the-runtime-garden-cluster-is-different-from-the-target-garden-cluster">&lt;em>Virtual Garden&lt;/em> is used, i.e., the &lt;code>runtime&lt;/code> Garden cluster is different from the &lt;code>target&lt;/code> Garden cluster.&lt;/h4>
&lt;p>&lt;strong>Service Account&lt;/strong>
The easiest way to setup the authentication will be to create a service account and the respective roles will be bound to this service account in the &lt;code>target&lt;/code> cluster. Then use the generated service account token and craft a &lt;code>kubeconfig&lt;/code> which will be used by the workload in the &lt;code>runtime&lt;/code> cluster. This approach does not provide a solution for the rotation of the service account token. However, this setup can be achieved by setting &lt;code>.Values.global.virtualGarden.enabled: true&lt;/code> and following these steps:&lt;/p>
&lt;ol>
&lt;li>Deploy the &lt;code>application&lt;/code> part of the charts in the &lt;code>target&lt;/code> cluster.&lt;/li>
&lt;li>Get the service account token and craft the &lt;code>kubeconfig&lt;/code>.&lt;/li>
&lt;li>Set the crafted &lt;code>kubeconfig&lt;/code> and deploy the &lt;code>runtime&lt;/code> part of the charts in the &lt;code>runtime&lt;/code> cluster.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Client Certificate&lt;/strong>
Another solution will be to bind the roles in the &lt;code>target&lt;/code> cluster to a &lt;code>User&lt;/code> subject instead of a service account and use a client certificate for authentication. This approach does not provide a solution for the client certificate rotation. However, this setup can be achieved by setting both &lt;code>.Values.global.virtualGarden.enabled: true&lt;/code> and &lt;code>.Values.global.virtualGarden.user.name&lt;/code>, then following these steps:&lt;/p>
&lt;ol>
&lt;li>Generate a client certificate for the &lt;code>target&lt;/code> cluster for the respective user.&lt;/li>
&lt;li>Deploy the &lt;code>application&lt;/code> part of the charts in the &lt;code>target&lt;/code> cluster.&lt;/li>
&lt;li>Craft a &lt;code>kubeconfig&lt;/code> using the already generated client certificate.&lt;/li>
&lt;li>Set the crafted &lt;code>kubeconfig&lt;/code> and deploy the &lt;code>runtime&lt;/code> part of the charts in the &lt;code>runtime&lt;/code> cluster.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Projected Service Account Token&lt;/strong>
This approach requires an already deployed and configured &lt;a href="https://github.com/gardener/oidc-webhook-authenticator">oidc-webhook-authenticator&lt;/a> for the &lt;code>target&lt;/code> cluster. Also the &lt;code>runtime&lt;/code> cluster should be registered as a trusted identity provider in the &lt;code>target&lt;/code> cluster. Then projected service accounts tokens from the &lt;code>runtime&lt;/code> cluster can be used to authenticate against the &lt;code>target&lt;/code> cluster. The needed steps are as follows:&lt;/p>
&lt;ol>
&lt;li>Deploy &lt;a href="https://github.com/gardener/oidc-webhook-authenticator">OWA&lt;/a> and establish the needed trust.&lt;/li>
&lt;li>Set &lt;code>.Values.global.virtualGarden.enabled: true&lt;/code> and &lt;code>.Values.global.virtualGarden.user.name&lt;/code>. &lt;strong>Note:&lt;/strong> username value will depend on the trust configuration, e.g., &lt;code>&amp;lt;prefix&amp;gt;:system:serviceaccount:&amp;lt;namespace&amp;gt;:&amp;lt;serviceaccount&amp;gt;&lt;/code>&lt;/li>
&lt;li>Set &lt;code>.Values.global.serviceAccountTokenVolumeProjection.enabled: true&lt;/code> and &lt;code>.Values.global.serviceAccountTokenVolumeProjection.audience&lt;/code>. &lt;strong>Note:&lt;/strong> audience value will depend on the trust configuration, e.g., &lt;code>&amp;lt;cliend-id-from-trust-config&amp;gt;&lt;/code>.&lt;/li>
&lt;li>Craft a kubeconfig (see example below).&lt;/li>
&lt;li>Deploy the &lt;code>application&lt;/code> part of the charts in the &lt;code>target&lt;/code> cluster.&lt;/li>
&lt;li>Deploy the &lt;code>runtime&lt;/code> part of the charts in the &lt;code>runtime&lt;/code> cluster.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusters:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- cluster:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> certificate-authority-data: &amp;lt;CA-DATA&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server: https://virtual-garden.api
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: virtual-garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>contexts:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- context:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster: virtual-garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user: virtual-garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: virtual-garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>current-context: virtual-garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>users:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: virtual-garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tokenFile: /var/run/secrets/projected/serviceaccount/token
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Operations</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-azure/operations/operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-azure/operations/operations/</guid><description>
&lt;h1 id="using-the-azure-provider-extension-with-gardener-as-an-operator">Using the Azure provider extension with Gardener as an operator&lt;/h1>
&lt;p>The &lt;a href="https://github.com/gardener/gardener/blob/master/example/30-cloudprofile.yaml">&lt;code>core.gardener.cloud/v1beta1.CloudProfile&lt;/code> resource&lt;/a> declares a &lt;code>providerConfig&lt;/code> field that is meant to contain provider-specific configuration.
The &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">&lt;code>core.gardener.cloud/v1beta1.Seed&lt;/code> resource&lt;/a> is structured similarly.
Additionally, it allows configuring settings for the backups of the main etcds&amp;rsquo; data of shoot clusters control planes running in this seed cluster.&lt;/p>
&lt;p>This document explains the necessary configuration for the Azure provider extension.&lt;/p>
&lt;h2 id="cloudprofile-resource">&lt;code>CloudProfile&lt;/code> resource&lt;/h2>
&lt;p>This section describes, how the configuration for &lt;code>CloudProfile&lt;/code>s looks like for Azure by providing an example &lt;code>CloudProfile&lt;/code> manifest with minimal configuration that can be used to allow the creation of Azure shoot clusters.&lt;/p>
&lt;h3 id="cloudprofileconfig">&lt;code>CloudProfileConfig&lt;/code>&lt;/h3>
&lt;p>The cloud profile configuration contains information about the real machine image IDs in the Azure environment (image &lt;code>urn&lt;/code>, &lt;code>id&lt;/code>, &lt;code>communityGalleryImageID&lt;/code> or &lt;code>sharedGalleryImageID&lt;/code>).
You have to map every version that you specify in &lt;code>.spec.machineImages[].versions&lt;/code> to an available VM image in your subscription.
The VM image can be either from the &lt;a href="https://azuremarketplace.microsoft.com/en-us/marketplace/apps?filters=virtual-machine-images">Azure Marketplace&lt;/a> and will then get identified via a &lt;code>urn&lt;/code>, it can be a custom VM image from a shared image gallery and is then identified &lt;code>sharedGalleryImageID&lt;/code>, or it can be from a community image gallery and is then identified by its &lt;code>communityGalleryImageID&lt;/code>. You can use &lt;code>id&lt;/code> field also to specifiy the image location in the azure compute gallery (in which case it would have a different kind of path) but it is not recommended as it sometimes faces problems in cross subscription image sharing.
For each machine image version an &lt;code>architecture&lt;/code> field can be specified which specifies the CPU architecture of the machine on which given machine image can be used.&lt;/p>
&lt;p>An example &lt;code>CloudProfileConfig&lt;/code> for the Azure extension looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: CloudProfileConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>countUpdateDomains:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- region: westeurope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count: 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>countFaultDomains:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- region: westeurope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>machineTypes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: Standard_D3_v2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> acceleratedNetworking: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: Standard_X
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>machineImages:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: coreos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> versions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 2135.6.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urn: &lt;span style="color:#a31515">&amp;#34;CoreOS:CoreOS:Stable:2135.6.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># architecture: amd64 # optional&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> acceleratedNetworking: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: myimage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> versions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: &lt;span style="color:#a31515">&amp;#34;/subscriptions/&amp;lt;subscription ID where the gallery is located&amp;gt;/resourceGroups/myGalleryRG/providers/Microsoft.Compute/galleries/myGallery/images/myImageDefinition/versions/1.0.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: GardenLinuxCommunityImage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> versions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> communityGalleryImageID: &lt;span style="color:#a31515">&amp;#34;/CommunityGalleries/gardenlinux-567905d8-921f-4a85-b423-1fbf4e249d90/Images/gardenlinux/Versions/576.1.1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: SharedGalleryImageName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> versions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.0.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sharedGalleryImageID: &lt;span style="color:#a31515">&amp;#34;/SharedGalleries/sharedGalleryName/Images/sharedGalleryImageName/Versions/sharedGalleryImageVersionName&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The cloud profile configuration contains information about the update via &lt;code>.countUpdateDomains[]&lt;/code> and failure domain via &lt;code>.countFaultDomains[]&lt;/code> counts in the Azure regions you want to offer.&lt;/p>
&lt;p>The &lt;code>.machineTypes[]&lt;/code> list contain provider specific information to the machine types e.g. if the machine type support &lt;a href="https://docs.microsoft.com/en-us/azure/virtual-network/create-vm-accelerated-networking-cli">Azure Accelerated Networking&lt;/a>, see &lt;code>.machineTypes[].acceleratedNetworking&lt;/code>.&lt;/p>
&lt;p>Additionally, it contains the real machine image identifiers in the Azure environment. You can provide either URN for Azure Market Place images or id of &lt;a href="https://docs.microsoft.com/en-us/azure/virtual-machines/linux/shared-image-galleries">Shared Image Gallery&lt;/a> images.
When Shared Image Gallery is used, you have to ensure that the image is available in the desired regions and the end-user subscriptions have access to the image or to the whole gallery.
You have to map every version that you specify in &lt;code>.spec.machineImages[].versions&lt;/code> here such that the Azure extension knows the machine image identifiers for every version you want to offer.
Furthermore, you can specify for each image version via &lt;code>.machineImages[].versions[].acceleratedNetworking&lt;/code> if Azure Accelerated Networking is supported.&lt;/p>
&lt;h3 id="example-cloudprofile-manifest">Example &lt;code>CloudProfile&lt;/code> manifest&lt;/h3>
&lt;p>The possible values for &lt;code>.spec.volumeTypes[].name&lt;/code> on Azure are &lt;code>Standard_LRS&lt;/code>, &lt;code>StandardSSD_LRS&lt;/code> and &lt;code>Premium_LRS&lt;/code>. There is another volume type called &lt;code>UltraSSD_LRS&lt;/code> but this type is not supported to use as os disk. If an end user select a volume type whose name is not equal to one of the valid values then the machine will be created with the default volume type which belong to the selected machine type. Therefore it is recommended to configure only the valid values for the &lt;code>.spec.volumeType[].name&lt;/code> in the &lt;code>CloudProfile&lt;/code>.&lt;/p>
&lt;p>Please find below an example &lt;code>CloudProfile&lt;/code> manifest:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: CloudProfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> versions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.24.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.23.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> expirationDate: &lt;span style="color:#a31515">&amp;#34;2022-10-31T23:59:59Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineImages:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: coreos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> versions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 2135.6.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineTypes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: Standard_D3_v2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cpu: &lt;span style="color:#a31515">&amp;#34;4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gpu: &lt;span style="color:#a31515">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memory: 14Gi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: Standard_D4_v3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cpu: &lt;span style="color:#a31515">&amp;#34;4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gpu: &lt;span style="color:#a31515">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memory: 16Gi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumeTypes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: Standard_LRS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class: standard
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usable: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: StandardSSD_LRS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class: premium
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usable: &lt;span style="color:#00f">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: Premium_LRS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class: premium
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usable: &lt;span style="color:#00f">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> regions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: westeurope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: CloudProfileConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineTypes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: Standard_D3_v2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> acceleratedNetworking: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: Standard_D4_v3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> countUpdateDomains:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - region: westeurope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count: 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> countFaultDomains:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - region: westeurope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineImages:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: coreos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> versions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 2303.3.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urn: CoreOS:CoreOS:Stable:2303.3.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># architecture: amd64 # optional&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> acceleratedNetworking: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 2135.6.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urn: &lt;span style="color:#a31515">&amp;#34;CoreOS:CoreOS:Stable:2135.6.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># architecture: amd64 # optional&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="seed-resource">&lt;code>Seed&lt;/code> resource&lt;/h2>
&lt;p>This provider extension does not support any provider configuration for the &lt;code>Seed&lt;/code>&amp;rsquo;s &lt;code>.spec.provider.providerConfig&lt;/code> field.
However, it supports managing of backup infrastructure, i.e., you can specify a configuration for the &lt;code>.spec.backup&lt;/code> field.&lt;/p>
&lt;h3 id="backup-configuration">Backup configuration&lt;/h3>
&lt;p>A Seed of type &lt;code>azure&lt;/code> can be configured to perform backups for the main etcds&amp;rsquo; of the shoot clusters control planes using Azure Blob storage.&lt;/p>
&lt;p>The location/region where the backups will be stored defaults to the region of the Seed (&lt;code>spec.provider.region&lt;/code>), but can also be explicitly configured via the field &lt;code>spec.backup.region&lt;/code>.
The region of the backup can be different from where the Seed cluster is running.
However, usually it makes sense to pick the same region for the backup bucket as used for the Seed cluster.&lt;/p>
&lt;p>Please find below an example &lt;code>Seed&lt;/code> manifest (partly) that configures backups using Azure Blob storage.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Seed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-seed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> provider:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: westeurope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backup:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> provider: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: westeurope &lt;span style="color:#008000"># default region&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: backup-credentials
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The referenced secret has to contain the provider credentials of the Azure subscription.
Please take a look &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal">here&lt;/a> on how to create an Azure Application, Service Principle and how to obtain credentials.
The example below demonstrates how the secret has to look like.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: core-azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: Opaque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientID: base64(client-id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientSecret: base64(client-secret)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subscriptionID: base64(subscription-id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tenantID: base64(tenant-id)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="permissions-for-azure-blob-storage">Permissions for Azure Blob storage&lt;/h4>
&lt;p>Please make sure the Azure application has the following IAM roles.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#contributor">Contributor&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="miscellaneous">Miscellaneous&lt;/h2>
&lt;h3 id="gardener-managed-service-principals">Gardener managed Service Principals&lt;/h3>
&lt;p>The operators of the Gardener Azure extension can provide a list of managed service principals (technical users) that can be used for Azure Shoots.
This eliminates the need for users to provide own service principals for their clusters.&lt;/p>
&lt;p>The user would need to grant the managed service principal access to their subscription with proper permissions.&lt;/p>
&lt;p>As service principals are managed in an Azure Active Directory for each supported Active Directory, an own service principal needs to be provided.&lt;/p>
&lt;p>In case the user provides an own service principal in the Shoot secret, this one will be used instead of the managed one provided by the operator.&lt;/p>
&lt;p>Each managed service principal will be maintained in a &lt;code>Secret&lt;/code> like that:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: service-principal-my-tenant
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: extension-provider-azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> azure.provider.extensions.gardener.cloud/purpose: tenant-service-principal-secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tenantID: base64(my-tenant)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientID: base64(my-service-princiapl-id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientSecret: base64(my-service-princiapl-secret)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: Opaque
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The user needs to provide in its Shoot secret a &lt;code>tenantID&lt;/code> and &lt;code>subscriptionID&lt;/code>.&lt;/p>
&lt;p>The managed service principal will be assigned based on the &lt;code>tenantID&lt;/code>.
In case there is a managed service principal secret with a matching &lt;code>tenantID&lt;/code>, this one will be used for the Shoot.
If there is no matching managed service principal secret then the next Shoot operation will fail.&lt;/p>
&lt;p>One of the benefits of having managed service principals is that the operator controls the lifecycle of the service principal and can rotate its secrets.&lt;/p>
&lt;p>After the service principal secret has been rotated and the corresponding secret is updated, all Shoot clusters using it need to be reconciled or the last operation to be retried.&lt;/p></description></item></channel></rss>