<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Deployment on Gardener</title><link>https://gardener.cloud/docs/gardener/deployment/</link><description>Recent content in Deployment on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/gardener/deployment/index.xml" rel="self" type="application/rss+xml"/><item><title>Authentication Gardener Control Plane</title><link>https://gardener.cloud/docs/gardener/deployment/authentication_gardener_control_plane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/authentication_gardener_control_plane/</guid><description>&lt;h1 id="authentication-of-gardener-control-plane-components-against-the-garden-cluster">Authentication of Gardener Control Plane Components Against the Garden Cluster&lt;/h1>
&lt;blockquote>
 &lt;p>&lt;strong>Note:&lt;/strong> This document refers to Gardener&amp;rsquo;s API server, admission controller, controller manager and scheduler components. Any reference to the term &lt;strong>Gardener control plane component&lt;/strong> can be replaced with any of the mentioned above.&lt;/p>

&lt;/blockquote>&lt;p>There are several authentication possibilities depending on whether or not &lt;a href="https://github.com/gardener/garden-setup#concept-the-virtual-cluster">the concept of Virtual Garden&lt;/a> is used.&lt;/p>
&lt;h2 id="virtual-garden-is-not-used-ie-the-runtime-garden-cluster-is-also-the-target-garden-cluster">Virtual Garden is not used, i.e., the &lt;code>runtime&lt;/code> Garden cluster is also the &lt;code>target&lt;/code> Garden cluster.&lt;/h2>
&lt;h3 id="automounted-service-account-token">Automounted Service Account Token&lt;/h3>
&lt;p>The easiest way to deploy a &lt;strong>Gardener control plane component&lt;/strong> is to not provide a &lt;code>kubeconfig&lt;/code> at all. This way in-cluster configuration and an automounted service account token will be used. The drawback of this approach is that the automounted token will not be automatically rotated.&lt;/p></description></item><item><title>Configuring Logging</title><link>https://gardener.cloud/docs/gardener/deployment/configuring_logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/configuring_logging/</guid><description>&lt;h1 id="configuring-the-logging-stack-via-gardenlet-configurations">Configuring the Logging Stack via gardenlet Configurations&lt;/h1>
&lt;h2 id="enable-the-logging">Enable the Logging&lt;/h2>
&lt;p>In order to install the Gardener logging stack, the &lt;code>logging.enabled&lt;/code> configuration option has to be enabled in the Gardenlet configuration:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>logging:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From now on, each Seed is going to have a logging stack which will collect logs from all pods and some systemd services. Logs related to Shoots with &lt;code>testing&lt;/code> purpose are dropped in the &lt;code>fluent-bit&lt;/code> output plugin. Shoots with a purpose different than &lt;code>testing&lt;/code> have the same type of log aggregator (but different instance) as the Seed. The logs can be viewed in the Plutono in the &lt;code>garden&lt;/code> namespace for the Seed components and in the respective shoot control plane namespaces.&lt;/p></description></item><item><title>Deploy Gardenlet</title><link>https://gardener.cloud/docs/gardener/deployment/deploy_gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/deploy_gardenlet/</guid><description>&lt;h1 id="deploying-gardenlets">Deploying Gardenlets&lt;/h1>
&lt;p>Gardenlets act as decentralized agents to manage the shoot clusters of a seed cluster.&lt;/p>
&lt;h2 id="procedure">Procedure&lt;/h2>
&lt;p>After you have deployed the Gardener control plane, you need one or more seed clusters in order to be able to create shoot clusters.&lt;/p>
&lt;p>You can either register an existing cluster as &amp;ldquo;seed&amp;rdquo; (this could also be the cluster in which the control plane runs), or you can create new clusters (typically shoots, i.e., this approach registers at least one first initial seed) and then register them as &amp;ldquo;seeds&amp;rdquo;.&lt;/p></description></item><item><title>Deploy Gardenlet Automatically</title><link>https://gardener.cloud/docs/gardener/deployment/deploy_gardenlet_automatically/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/deploy_gardenlet_automatically/</guid><description>&lt;h1 id="deploy-a-gardenlet-automatically">Deploy a gardenlet Automatically&lt;/h1>
&lt;p>The gardenlet can automatically deploy itself into shoot clusters, and register them as seed clusters.
These clusters are called &amp;ldquo;managed seeds&amp;rdquo; (aka &amp;ldquo;shooted seeds&amp;rdquo;).
This procedure is the preferred way to add additional seed clusters, because shoot clusters already come with production-grade qualities that are also demanded for seed clusters.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>The only prerequisite is to register an initial cluster as a seed cluster that already has a deployed gardenlet (for available options see &lt;a href="https://gardener.cloud/docs/gardener/deployment/deploy_gardenlet/">Deploying Gardenlets&lt;/a>).&lt;/p></description></item><item><title>Deploy Gardenlet Manually</title><link>https://gardener.cloud/docs/gardener/deployment/deploy_gardenlet_manually/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/deploy_gardenlet_manually/</guid><description>&lt;h1 id="deploy-a-gardenlet-manually">Deploy a gardenlet Manually&lt;/h1>
&lt;p>Manually deploying a gardenlet is usually only required if the Kubernetes cluster to be registered as a seed cluster is managed via third-party tooling (i.e., the Kubernetes cluster is not a shoot cluster, so &lt;a href="https://gardener.cloud/docs/gardener/deployment/deploy_gardenlet_automatically/">Deploy a gardenlet Automatically&lt;/a> cannot be used).
In this case, &lt;code>gardenlet&lt;/code> needs to be deployed manually, meaning that its &lt;a href="https://github.com/gardener/gardener/tree/master/charts/gardener/gardenlet">Helm chart&lt;/a> must be installed.&lt;/p>




 &lt;blockquote class="alert alert-tip">
 &lt;p class="alert-heading">
 ðŸ’¡
 
 Tip
 
 &lt;/p>
 &lt;p>Once you&amp;rsquo;ve deployed a gardenlet manually, you can deploy new gardenlets automatically.
The manually deployed gardenlet is then used as a template for the new gardenlets.
For more information, see &lt;a href="https://gardener.cloud/docs/gardener/deployment/deploy_gardenlet_automatically/">Deploy a gardenlet Automatically&lt;/a>.&lt;/p></description></item><item><title>Deploy Gardenlet Via Operator</title><link>https://gardener.cloud/docs/gardener/deployment/deploy_gardenlet_via_operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/deploy_gardenlet_via_operator/</guid><description>&lt;h1 id="deploy-a-gardenlet-via-gardener-operator">Deploy a gardenlet Via &lt;code>gardener-operator&lt;/code>&lt;/h1>
&lt;p>The gardenlet can automatically be deployed by &lt;code>gardener-operator&lt;/code> into existing Kubernetes clusters in order to register them as seeds.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>Using this method only works when &lt;a href="https://gardener.cloud/docs/gardener/concepts/operator/">&lt;code>gardener-operator&lt;/code>&lt;/a> is managing the garden cluster.
If you have used the &lt;a href="https://github.com/gardener/gardener/tree/master/charts/gardener/controlplane">&lt;code>gardener/controlplane&lt;/code> Helm chart&lt;/a> for the deployment of the Gardener control plane, please refer to &lt;a href="https://gardener.cloud/docs/gardener/deployment/deploy_gardenlet_manually/">this document&lt;/a>.&lt;/p>




 &lt;blockquote class="alert alert-tip">
 &lt;p class="alert-heading">
 ðŸ’¡
 
 Tip
 
 &lt;/p>
 &lt;p>The initial seed cluster can be the garden cluster itself, but for better separation of concerns, it is recommended to only register other clusters as seeds.&lt;/p></description></item><item><title>Feature Gates</title><link>https://gardener.cloud/docs/gardener/deployment/feature_gates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/feature_gates/</guid><description>&lt;h1 id="feature-gates-in-gardener">Feature Gates in Gardener&lt;/h1>
&lt;p>This page contains an overview of the various feature gates an administrator can specify on different Gardener components.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Feature gates are a set of key=value pairs that describe Gardener features. You can turn these features on or off using the component configuration file for a specific component.&lt;/p>
&lt;p>Each Gardener component lets you enable or disable a set of feature gates that are relevant to that component. For example, this is the configuration of the &lt;a href="https://github.com/gardener/gardener/blob/master/example/20-componentconfig-gardenlet.yaml">gardenlet&lt;/a> component.&lt;/p></description></item><item><title>Getting Started Locally</title><link>https://gardener.cloud/docs/gardener/deployment/getting_started_locally/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/getting_started_locally/</guid><description>&lt;h1 id="deploying-gardener-locally">Deploying Gardener Locally&lt;/h1>
&lt;p>This document will walk you through deploying Gardener on your local machine.
If you encounter difficulties, please open an issue so that we can make this process easier.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Gardener runs in any Kubernetes cluster.
In this guide, we will start a &lt;a href="https://kind.sigs.k8s.io/">KinD&lt;/a> cluster which is used as both garden and seed cluster (please refer to the &lt;a href="https://gardener.cloud/docs/gardener/concepts/architecture/">architecture overview&lt;/a>) for simplicity.&lt;/p>
&lt;p>Based on &lt;a href="https://skaffold.dev/">Skaffold&lt;/a>, the container images for all required components will be built and deployed into the cluster (via their &lt;a href="https://helm.sh/">Helm charts&lt;/a>).&lt;/p></description></item><item><title>Getting Started Locally With Extensions</title><link>https://gardener.cloud/docs/gardener/deployment/getting_started_locally_with_extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/getting_started_locally_with_extensions/</guid><description>&lt;h1 id="deploying-gardener-locally-and-enabling-provider-extensions">Deploying Gardener Locally and Enabling Provider-Extensions&lt;/h1>
&lt;p>This document will walk you through deploying Gardener on your local machine and bootstrapping your own seed clusters on an existing Kubernetes cluster.
It is supposed to run your local Gardener developments on a real infrastructure. For running Gardener only entirely local, please check the &lt;a href="https://gardener.cloud/docs/gardener/deployment/getting_started_locally/">getting started locally&lt;/a> documentation.
If you encounter difficulties, please open an issue so that we can make this process easier.&lt;/p></description></item><item><title>Image Vector</title><link>https://gardener.cloud/docs/gardener/deployment/image_vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/image_vector/</guid><description>&lt;h1 id="image-vector">Image Vector&lt;/h1>
&lt;p>The Gardener components are deploying several different container images into the garden, seed, and the shoot clusters.
The image repositories and tags are defined in a &lt;a href="https://github.com/gardener/gardener/blob/master/imagevector/containers.yaml">central image vector file&lt;/a>.
Obviously, the image versions defined there must fit together with the deployment manifests (e.g., some command-line flags do only exist in certain versions).&lt;/p>
&lt;h2 id="example">Example&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>images:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: pause-container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sourceRepository: github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repository: registry.k8s.io/pause
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tag: &lt;span style="color:#a31515">&amp;#34;3.4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> targetVersion: &lt;span style="color:#a31515">&amp;#34;1.20.x&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> architectures:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - arm64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: pause-container
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sourceRepository: github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ref: registry.k8s.io/pause:3.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> targetVersion: &lt;span style="color:#a31515">&amp;#34;&amp;gt;= 1.21&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> architectures:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - arm64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That means that Gardener will use the &lt;code>pause-container&lt;/code> with tag &lt;code>3.4&lt;/code> for all clusters with Kubernetes version &lt;code>1.20.x&lt;/code>, and the image with ref &lt;code>registry.k8s.io/pause:3.5&lt;/code> for all clusters with Kubernetes &lt;code>&amp;gt;= 1.21&lt;/code>.&lt;/p></description></item><item><title>Migration V0 To V1</title><link>https://gardener.cloud/docs/gardener/deployment/migration_v0_to_v1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/migration_v0_to_v1/</guid><description>&lt;h1 id="migration-from-gardener-v0-to-v1">Migration from Gardener &lt;code>v0&lt;/code> to &lt;code>v1&lt;/code>&lt;/h1>
&lt;p>Please refer to the &lt;a href="https://github.com/gardener/gardener/blob/v1.10.1/docs/deployment/migration_v0_to_v1.md">document for older Gardener versions&lt;/a>.&lt;/p></description></item><item><title>Scoped API Access for gardenlets and Extensions</title><link>https://gardener.cloud/docs/gardener/deployment/gardenlet_api_access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/gardenlet_api_access/</guid><description>&lt;h1 id="scoped-api-access-for-gardenlets-and-extensions">Scoped API Access for gardenlets and Extensions&lt;/h1>
&lt;p>By default, &lt;code>gardenlet&lt;/code>s have administrative access in the garden cluster.
They are able to execute any API request on any object independent of whether the object is related to the seed cluster the &lt;code>gardenlet&lt;/code> is responsible for.
As RBAC is not powerful enough for fine-grained checks and for the sake of security, Gardener provides two optional but recommended configurations for your environments that scope the API access for &lt;code>gardenlet&lt;/code>s.&lt;/p></description></item><item><title>Secret Binding Provider Controller</title><link>https://gardener.cloud/docs/gardener/deployment/secret_binding_provider_controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/secret_binding_provider_controller/</guid><description>&lt;h1 id="secretbinding-provider-controller">SecretBinding Provider Controller&lt;/h1>
&lt;p>This page describes the process on how to enable the SecretBinding provider controller.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>With Gardener v1.38.0, the SecretBinding resource now contains a new optional field &lt;code>.provider.type&lt;/code> (details about the motivation can be found in &lt;a href="https://github.com/gardener/gardener/issues/4888">https://github.com/gardener/gardener/issues/4888&lt;/a>). To make the process of setting the new field automated and afterwards to enforce validation on the new field in backwards compatible manner, Gardener features the SecretBinding provider controller and a feature gate - &lt;code>SecretBindingProviderValidation&lt;/code>.&lt;/p></description></item><item><title>Setup Gardener</title><link>https://gardener.cloud/docs/gardener/deployment/setup_gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/setup_gardener/</guid><description>&lt;h1 id="deploying-gardener-into-a-kubernetes-cluster">Deploying Gardener into a Kubernetes Cluster&lt;/h1>
&lt;p>Similar to Kubernetes, Gardener consists out of control plane components (Gardener API server, Gardener controller manager, Gardener scheduler), and an agent component (gardenlet).
The control plane is deployed in the so-called garden cluster, while the agent is installed into every seed cluster.
Please note that it is possible to use the garden cluster as seed cluster by simply deploying the gardenlet into it.&lt;/p>
&lt;p>We are providing &lt;a href="https://github.com/gardener/gardener/tree/master/charts/gardener">Helm charts&lt;/a> in order to manage the various resources of the components.
Please always make sure that you use the Helm chart version that matches the Gardener version you want to deploy.&lt;/p></description></item><item><title>Version Skew Policy</title><link>https://gardener.cloud/docs/gardener/deployment/version_skew_policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/deployment/version_skew_policy/</guid><description>&lt;h1 id="version-skew-policy">Version Skew Policy&lt;/h1>
&lt;p>This document describes the maximum version skew supported between various Gardener components.&lt;/p>
&lt;h2 id="supported-gardener-versions">Supported Gardener Versions&lt;/h2>
&lt;p>Gardener versions are expressed as &lt;code>x.y.z&lt;/code>, where &lt;code>x&lt;/code> is the major version, &lt;code>y&lt;/code> is the minor version, and &lt;code>z&lt;/code> is the patch version, following Semantic Versioning terminology.&lt;/p>
&lt;p>The Gardener project maintains release branches for the three most recent minor releases.&lt;/p>
&lt;p>Applicable fixes, including security fixes, may be backported to those three release branches, depending on severity and feasibility.
Patch releases are cut from those branches at a regular cadence, plus additional urgent releases when required.&lt;/p></description></item></channel></rss>