<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced on Gardener</title><link>https://gardener.cloud/docs/gardener/advanced/</link><description>Recent content in Advanced on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/gardener/advanced/index.xml" rel="self" type="application/rss+xml"/><item><title>Cleanup of Shoot Clusters in Deletion</title><link>https://gardener.cloud/docs/gardener/advanced/shoot_cleanup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/advanced/shoot_cleanup/</guid><description>&lt;h1 id="cleanup-of-shoot-clusters-in-deletion">Cleanup of Shoot Clusters in Deletion&lt;/h1>
&lt;p>When a shoot cluster is deleted then Gardener tries to gracefully remove most of the Kubernetes resources inside the cluster.
This is to prevent that any infrastructure or other artifacts remain after the shoot deletion.&lt;/p>
&lt;p>The cleanup is performed in four steps.
Some resources are deleted with a grace period, and all resources are forcefully deleted (by removing blocking finalizers) after some time to not block the cluster deletion entirely.&lt;/p></description></item><item><title>containerd Registry Configuration</title><link>https://gardener.cloud/docs/gardener/advanced/containerd-registry-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/advanced/containerd-registry-configuration/</guid><description>&lt;h1 id="containerd-registry-configuration">&lt;code>containerd&lt;/code> Registry Configuration&lt;/h1>
&lt;p>containerd supports configuring registries and mirrors. Using this native containerd feature, Shoot owners can configure containerd to use public or private mirrors for a given upstream registry. More details about the registry configuration can be found in the &lt;a href="https://github.com/containerd/containerd/blob/main/docs/hosts.md">corresponding upstream documentation&lt;/a>.&lt;/p>
&lt;h3 id="containerd-registry-configuration-patterns">&lt;code>containerd&lt;/code> Registry Configuration Patterns&lt;/h3>
&lt;p>At the time of writing this document, containerd support two patterns for configuring registries/mirrors.&lt;/p>
&lt;blockquote>
 &lt;p>Note: Trying to use both of the patterns at the same time is not supported by containerd. Only one of the configuration patterns has to be followed strictly.&lt;/p></description></item><item><title>Control Plane Endpoints And Ports</title><link>https://gardener.cloud/docs/gardener/advanced/control-plane-endpoints-and-ports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/advanced/control-plane-endpoints-and-ports/</guid><description>&lt;h1 id="endpoints-and-ports-of-a-shoot-control-plane">Endpoints and Ports of a Shoot Control-Plane&lt;/h1>
&lt;p>With the &lt;a href="https://gardener.cloud/docs/gardener/reversed-vpn-tunnel/">reversed VPN&lt;/a> tunnel, there are no endpoints with open ports in the shoot cluster required by Gardener.
In order to allow communication to the shoots control-plane in the seed cluster, there are endpoints shared by multiple shoots of a seed cluster.
Depending on the configured zones or &lt;a href="https://gardener.cloud/docs/gardener/networking/exposureclasses/">exposure classes&lt;/a>, there are different endpoints in a seed cluster. The IP address(es) can be determined by a DNS query for the API Server URL.
The main entry-point into the seed cluster is the load balancer of the Istio ingress-gateway service. Depending on the infrastructure provider, there can be one IP address per zone.&lt;/p></description></item><item><title>Custom containerd Configuration</title><link>https://gardener.cloud/docs/gardener/advanced/custom-containerd-config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/advanced/custom-containerd-config/</guid><description>&lt;h1 id="custom-containerd-configuration">Custom &lt;code>containerd&lt;/code> Configuration&lt;/h1>
&lt;p>In case a &lt;code>Shoot&lt;/code> cluster uses &lt;code>containerd&lt;/code>, it is possible to make the &lt;code>containerd&lt;/code> process load custom configuration files.
Gardener initializes &lt;code>containerd&lt;/code> with the following statement:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>imports = [&lt;span style="color:#a31515">&amp;#34;/etc/containerd/conf.d/*.toml&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This means that all &lt;code>*.toml&lt;/code> files in the &lt;code>/etc/containerd/conf.d&lt;/code> directory will be imported and merged with the default configuration.
To prevent unintended configuration overwrites, please be aware that containerd merges config sections, not individual keys (see &lt;a href="https://github.com/containerd/containerd/issues/5837#issuecomment-894840240">here&lt;/a> and &lt;a href="https://github.com/gardener/gardener/pull/7316">here&lt;/a>).
Please consult the &lt;a href="https://github.com/containerd/containerd/blob/main/docs/man/containerd-config.toml.5.md#format">upstream &lt;code>containerd&lt;/code> documentation&lt;/a> for more information.&lt;/p></description></item><item><title>Necessary Labeling for Custom CSI Components</title><link>https://gardener.cloud/docs/gardener/advanced/csi_components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/advanced/csi_components/</guid><description>&lt;h1 id="necessary-labeling-for-custom-csi-components">Necessary Labeling for Custom CSI Components&lt;/h1>
&lt;p>Some provider extensions for Gardener are using CSI components to manage persistent volumes in the shoot clusters.
Additionally, most of the provider extensions are deploying controllers for taking volume snapshots (CSI snapshotter).&lt;/p>
&lt;p>End-users can deploy their own CSI components and controllers into shoot clusters.
In such situations, there are multiple controllers acting on the &lt;code>VolumeSnapshot&lt;/code> custom resources (each responsible for those instances associated with their respective driver provisioner types).&lt;/p></description></item><item><title>Readiness of Shoot Worker Nodes</title><link>https://gardener.cloud/docs/gardener/advanced/node-readiness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/advanced/node-readiness/</guid><description>&lt;h1 id="readiness-of-shoot-worker-nodes">Readiness of Shoot Worker Nodes&lt;/h1>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>When registering new &lt;code>Nodes&lt;/code>, kubelet adds the &lt;code>node.kubernetes.io/not-ready&lt;/code> taint to prevent scheduling workload Pods to the &lt;code>Node&lt;/code> until the &lt;code>Ready&lt;/code> condition gets &lt;code>True&lt;/code>.
However, the kubelet does not consider the readiness of node-critical Pods.
Hence, the &lt;code>Ready&lt;/code> condition might get &lt;code>True&lt;/code> and the &lt;code>node.kubernetes.io/not-ready&lt;/code> taint might get removed, for example, before the CNI daemon Pod (e.g., &lt;code>calico-node&lt;/code>) has successfully placed the CNI binaries on the machine.&lt;/p></description></item><item><title>Taints and Tolerations for Seeds and Shoots</title><link>https://gardener.cloud/docs/gardener/advanced/tolerations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/advanced/tolerations/</guid><description>&lt;h1 id="taints-and-tolerations-for-seeds-and-shoots">Taints and Tolerations for &lt;code>Seed&lt;/code>s and &lt;code>Shoot&lt;/code>s&lt;/h1>
&lt;p>Similar to &lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/">taints and tolerations&lt;/a> for &lt;code>Node&lt;/code>s and &lt;code>Pod&lt;/code>s in Kubernetes, the &lt;code>Seed&lt;/code> resource supports specifying taints (&lt;code>.spec.taints&lt;/code>, see &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml#L48-L55">this example&lt;/a>) while the &lt;code>Shoot&lt;/code> resource supports specifying tolerations (&lt;code>.spec.tolerations&lt;/code>, see &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-shoot.yaml#L268-L269">this example&lt;/a>).
The feature is used to control scheduling to seeds as well as decisions whether a shoot can use a certain seed.&lt;/p>
&lt;p>Compared to Kubernetes, Gardener&amp;rsquo;s taints and tolerations are very much down-stripped right now and have some behavioral differences.
Please read the following explanations carefully if you plan to use them.&lt;/p></description></item></channel></rss>