<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener â€“ Monitoring</title><link>https://gardener.cloud/docs/gardener/monitoring/</link><description>Recent content in Monitoring on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/gardener/monitoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Alerting</title><link>https://gardener.cloud/docs/gardener/monitoring/alerting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/monitoring/alerting/</guid><description>
&lt;h1 id="alerting">Alerting&lt;/h1>
&lt;p>Gardener uses &lt;a href="https://prometheus.io/">Prometheus&lt;/a> to gather metrics from each component. A Prometheus is deployed in each shoot control plane (on the seed) which is responsible for gathering control plane and cluster metrics. Prometheus can be configured to fire alerts based on these metrics and send them to an &lt;a href="https://prometheus.io/docs/alerting/alertmanager/">Alertmanager&lt;/a>. The Alertmanager is responsible for sending the alerts to users and operators. This document describes how to setup alerting for:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/monitoring/alerting/#alerting-for-users">end-users/stakeholders/customers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/monitoring/alerting/#alerting-for-operators">operators/administrators&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="alerting-for-users">Alerting for Users&lt;/h1>
&lt;p>To receive email alerts as a user, set the following values in the shoot spec:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> monitoring:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alerting:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> emailReceivers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - john.doe@example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>emailReceivers&lt;/code> is a list of emails that will receive alerts if something is wrong with the shoot cluster.&lt;/p>
&lt;h1 id="alerting-for-operators">Alerting for Operators&lt;/h1>
&lt;p>Currently, Gardener supports two options for alerting:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/monitoring/alerting/#email-alerting">Email Alerting&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/monitoring/alerting/#external-alertmanager">Sending Alerts to an External Alertmanager&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="email-alerting">Email Alerting&lt;/h2>
&lt;p>Gardener provides the option to deploy an Alertmanager into each seed. This Alertmanager is responsible for sending out alerts to operators for each shoot cluster in the seed. Only email alerts are supported by the Alertmanager managed by Gardener. This is configurable by setting the Gardener controller manager configuration values &lt;code>alerting&lt;/code>. See &lt;a href="https://gardener.cloud/docs/gardener/configuration/">Gardener Configuration and Usage&lt;/a> on how to configure the Gardener&amp;rsquo;s SMTP secret. If the values are set, a secret with the label &lt;code>gardener.cloud/role: alerting&lt;/code> will be created in the garden namespace of the garden cluster. This secret will be used by each Alertmanager in each seed.&lt;/p>
&lt;h2 id="external-alertmanager">External Alertmanager&lt;/h2>
&lt;p>The Alertmanager supports different kinds of &lt;a href="https://prometheus.io/docs/alerting/configuration/">alerting configurations&lt;/a>. The Alertmanager provided by Gardener only supports email alerts. If email is not sufficient, then alerts can be sent to an external Alertmanager. Prometheus will send alerts to a URL and then alerts will be handled by the external Alertmanager. This external Alertmanager is operated and configured by the operator (i.e. Gardener does not configure or deploy this Alertmanager). To configure sending alerts to an external Alertmanager, create a secret in the virtual garden cluster in the garden namespace with the label: &lt;code>gardener.cloud/role: alerting&lt;/code>. This secret needs to contain a URL to the external Alertmanager and information regarding authentication. Supported authentication types are:&lt;/p>
&lt;ul>
&lt;li>No Authentication (none)&lt;/li>
&lt;li>Basic Authentication (basic)&lt;/li>
&lt;li>Mutual TLS (certificate)&lt;/li>
&lt;/ul>
&lt;h3 id="remote-alertmanager-examples">Remote Alertmanager Examples&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> The &lt;code>url&lt;/code> value cannot be prepended with &lt;code>http&lt;/code> or &lt;code>https&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># No Authentication&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gardener.cloud/role: alerting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: alerting-auth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># No Authentication&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth_type: base64(none)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url: base64(external.alertmanager.foo)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># Basic Auth&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth_type: base64(basic)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url: base64(extenal.alertmanager.foo)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> username: base64(admin)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> password: base64(password)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># Mutual TLS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth_type: base64(certificate)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url: base64(external.alertmanager.foo)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ca.crt: base64(ca)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tls.crt: base64(certificate)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tls.key: base64(key)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> insecure_skip_verify: base64(false)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># Email Alerts (internal alertmanager)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth_type: base64(smtp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth_identity: base64(internal.alertmanager.auth_identity)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth_password: base64(internal.alertmanager.auth_password)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auth_username: base64(internal.alertmanager.auth_username)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> from: base64(internal.alertmanager.from)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> smarthost: base64(internal.alertmanager.smarthost)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> to: base64(internal.alertmanager.to)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: Opaque
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="configuring-your-external-alertmanager">Configuring Your External Alertmanager&lt;/h3>
&lt;p>Please refer to the &lt;a href="https://prometheus.io/docs/alerting/alertmanager/">Alertmanager&lt;/a> documentation on how to configure an Alertmanager.&lt;/p>
&lt;p>We recommend you use at least the following inhibition rules in your Alertmanager configuration to prevent excessive alerts:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>inhibit_rules:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Apply inhibition if the alert name is the same.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- source_match:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> severity: critical
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target_match:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> severity: warning
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> equal: [&lt;span style="color:#a31515">&amp;#39;alertname&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;service&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;cluster&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Stop all alerts for type=shoot if there are VPN problems.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- source_match:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> service: vpn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target_match_re:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> equal: [&lt;span style="color:#a31515">&amp;#39;type&amp;#39;&lt;/span>, &lt;span style="color:#a31515">&amp;#39;cluster&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Stop warning and critical alerts if there is a blocker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- source_match:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> severity: blocker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target_match_re:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> severity: ^(critical|warning)$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> equal: [&lt;span style="color:#a31515">&amp;#39;cluster&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># If the API server is down inhibit no worker nodes alert. No worker nodes depends on kube-state-metrics which depends on the API server.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- source_match:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> service: kube-apiserver
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target_match_re:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> service: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> equal: [&lt;span style="color:#a31515">&amp;#39;cluster&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># If API server is down inhibit kube-state-metrics alerts.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- source_match:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> service: kube-apiserver
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target_match_re:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> severity: info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> equal: [&lt;span style="color:#a31515">&amp;#39;cluster&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># No Worker nodes depends on kube-state-metrics. Inhibit no worker nodes if kube-state-metrics is down.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- source_match:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> service: kube-state-metrics-shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target_match_re:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> service: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> equal: [&lt;span style="color:#a31515">&amp;#39;cluster&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Below is a graph visualizing the inhibition rules:&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/alertInhibitionGraph_f32a3f.png" alt="inhibitionGraph">&lt;/p></description></item><item><title>Docs: Connectivity</title><link>https://gardener.cloud/docs/gardener/monitoring/connectivity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/monitoring/connectivity/</guid><description>
&lt;h1 id="connectivity">Connectivity&lt;/h1>
&lt;h2 id="shoot-connectivity">Shoot Connectivity&lt;/h2>
&lt;p>We measure the connectivity from the shoot to the API Server. This is done via the &lt;code>blackbox exporter&lt;/code> which is deployed in the shoot&amp;rsquo;s &lt;code>kube-system&lt;/code> namespace. Prometheus will scrape the &lt;code>blackbox exporter&lt;/code> and then the exporter will try to access the API Server. Metrics are exposed if the connection was successful or not. This can be seen in the &lt;code>Kubernetes Control Plane Status&lt;/code> dashboard under the &lt;code>API Server Connectivity&lt;/code> panel. The &lt;code>shoot&lt;/code> line represents the connectivity from the shoot.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/panel_0c0089.png" alt="image">&lt;/p>
&lt;h2 id="seed-connectivity">Seed Connectivity&lt;/h2>
&lt;p>In addition to the shoot connectivity, we also measure the seed connectivity. This means trying to reach the API Server from the seed via the external fully qualified domain name of the API server. The connectivity is also displayed in the above panel as the &lt;code>seed&lt;/code> line. Both &lt;code>seed&lt;/code> and &lt;code>shoot&lt;/code> connectivity are shown below.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/connectivity_f9f7a1.png" alt="image">&lt;/p></description></item><item><title>Docs: Monitoring</title><link>https://gardener.cloud/docs/gardener/monitoring/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/monitoring/readme/</guid><description>
&lt;h1 id="monitoring">Monitoring&lt;/h1>
&lt;h2 id="roles-of-the-different-prometheus-instances">Roles of the different Prometheus instances&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/monitoring_c368b2.png" alt="monitoring">&lt;/p>
&lt;h3 id="prometheus">Prometheus&lt;/h3>
&lt;p>Deployed in the &lt;code>garden&lt;/code> namespace. Important scrape targets:&lt;/p>
&lt;ul>
&lt;li>cadvisor&lt;/li>
&lt;li>node-exporter&lt;/li>
&lt;li>kube-state-metrics&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Purpose&lt;/strong>: Acts as a cache for other Prometheus instances. The metrics are kept for a short amount of time (~2 hours) due to the high cardinality. For example if another Prometheus needs access to cadvisor metrics it will query this Prometheus instead of the cadvisor. This also reduces load on the kubelets and API Server.&lt;/p>
&lt;p>Some of the high cardinality metrics are aggregated with recording rules. These &lt;em>pre-aggregated&lt;/em> metrics are scraped by the &lt;a href="https://gardener.cloud/docs/gardener/monitoring/readme/#aggregate-prometheus">Aggregate Prometheus&lt;/a>.&lt;/p>
&lt;p>This Prometheus is not used for alerting.&lt;/p>
&lt;h3 id="aggregate-prometheus">Aggregate Prometheus&lt;/h3>
&lt;p>Deployed in the &lt;code>garden&lt;/code> namespace. Important scrape targets:&lt;/p>
&lt;ul>
&lt;li>other prometheus instances&lt;/li>
&lt;li>logging components&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Purpose&lt;/strong>: Store pre-aggregated data from &lt;a href="https://gardener.cloud/docs/gardener/monitoring/readme/#prometheus">prometheus&lt;/a> and &lt;a href="https://gardener.cloud/docs/gardener/monitoring/readme/#shoot-prometheus">shoot prometheus&lt;/a>. An ingress exposes this Prometheus allowing it to be scraped from another cluster.&lt;/p>
&lt;h3 id="seed-prometheus">Seed Prometheus&lt;/h3>
&lt;p>Deployed in the &lt;code>garden&lt;/code> namespace. Important scrape targets:&lt;/p>
&lt;ul>
&lt;li>pods in extension namespaces annotated with:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>prometheus.io/scrape=true
prometheus.io/port=&amp;lt;port&amp;gt;
prometheus.io/name=&amp;lt;name&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>cadvisor metrics from pods in the garden and extension namespaces&lt;/li>
&lt;/ul>
&lt;p>The job name label will be applied to all metrics from that service.
&lt;strong>Purpose&lt;/strong>: Entrypoint for operators when debugging issues with extensions or other garden components.&lt;/p>
&lt;h3 id="shoot-prometheus">Shoot Prometheus&lt;/h3>
&lt;p>Deployed in the shoot control plane namespace. Important scrape targets:&lt;/p>
&lt;ul>
&lt;li>control plane components&lt;/li>
&lt;li>shoot nodes (node-exporter)&lt;/li>
&lt;li>blackbox-exporter used to measure &lt;a href="https://gardener.cloud/docs/gardener/monitoring/connectivity/">connectivity&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Purpose&lt;/strong>: Monitor all relevant components belonging to a shoot cluster managed by Gardener. Shoot owners can view the metrics in Plutono dashboards and receive alerts based on these metrics. For alerting internals refer to &lt;a href="https://gardener.cloud/docs/gardener/monitoring/alerting/">this&lt;/a> document.&lt;/p>
&lt;h2 id="collect-all-shoot-prometheus-with-remote-write">Collect all Shoot Prometheus with remote write&lt;/h2>
&lt;p>An optional collection of all Shoot Prometheus metrics to a central prometheus (or cortex) instance is possible with the &lt;code>monitoring.shoot&lt;/code> setting in &lt;code>GardenletConfiguration&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>monitoring:
shoot:
remoteWrite:
url: https://remoteWriteUrl # remote write URL
keep:# metrics that should be forwarded to the external write endpoint. If empty all metrics get forwarded
- kube_pod_container_info
externalLabels: # add additional labels to metrics to identify it on the central instance
additional: label
&lt;/code>&lt;/pre>&lt;p>If basic auth is needed it can be set via secret in garden namespace (Gardener API Server). &lt;a href="https://github.com/gardener/gardener/blob/master/example/10-secret-remote-write.yaml">Example secret&lt;/a>&lt;/p>
&lt;h2 id="disable-gardener-monitoring">Disable Gardener Monitoring&lt;/h2>
&lt;p>If you wish to disable metric collection for every shoot and roll your own then you can simply set.&lt;/p>
&lt;pre tabindex="0">&lt;code>monitoring:
shoot:
enabled: false
&lt;/code>&lt;/pre></description></item><item><title>Docs: Profiling</title><link>https://gardener.cloud/docs/gardener/monitoring/profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/monitoring/profiling/</guid><description>
&lt;h1 id="profiling-gardener-components">Profiling Gardener Components&lt;/h1>
&lt;p>Similar to Kubernetes, Gardener components support profiling using &lt;a href="https://golang.org/doc/diagnostics#profiling">standard Go tools&lt;/a> for analyzing CPU and memory usage by different code sections and more.
This document shows how to enable and use profiling handlers with Gardener components.&lt;/p>
&lt;p>Enabling profiling handlers and the ports on which they are exposed differs between components.
However, once the handlers are enabled, they provide profiles via the same HTTP endpoint paths, from which you can retrieve them via &lt;code>curl&lt;/code>/&lt;code>wget&lt;/code> or directly using &lt;code>go tool pprof&lt;/code>.
(You might need to use &lt;code>kubectl port-forward&lt;/code> in order to access HTTP endpoints of Gardener components running in clusters.)&lt;/p>
&lt;p>For example (gardener-controller-manager):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ curl http://localhost:2718/debug/pprof/heap &amp;gt; /tmp/heap-controller-manager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ go tool pprof /tmp/heap-controller-manager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type: inuse_space
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Time: Sep 3, 2021 at 10:05am (CEST)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Entering interactive mode (type &lt;span style="color:#a31515">&amp;#34;help&amp;#34;&lt;/span> &lt;span style="color:#00f">for&lt;/span> commands, &lt;span style="color:#a31515">&amp;#34;o&amp;#34;&lt;/span> &lt;span style="color:#00f">for&lt;/span> options)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(pprof)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go tool pprof http://localhost:2718/debug/pprof/heap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Fetching profile over HTTP from http://localhost:2718/debug/pprof/heap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Saved profile in /Users/timebertt/pprof/pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.008.pb.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type: inuse_space
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Time: Sep 3, 2021 at 10:05am (CEST)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Entering interactive mode (type &lt;span style="color:#a31515">&amp;#34;help&amp;#34;&lt;/span> &lt;span style="color:#00f">for&lt;/span> commands, &lt;span style="color:#a31515">&amp;#34;o&amp;#34;&lt;/span> &lt;span style="color:#00f">for&lt;/span> options)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(pprof)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="gardener-apiserver">gardener-apiserver&lt;/h2>
&lt;p>&lt;code>gardener-apiserver&lt;/code> provides the same flags as &lt;code>kube-apiserver&lt;/code> for enabling profiling handlers (enabled by default):&lt;/p>
&lt;pre tabindex="0">&lt;code>--contention-profiling Enable lock contention profiling, if profiling is enabled
--profiling Enable profiling via web interface host:port/debug/pprof/ (default true)
&lt;/code>&lt;/pre>&lt;p>The handlers are served on the same port as the API endpoints (configured via &lt;code>--secure-port&lt;/code>).
This means that you will also have to authenticate against the API server according to the configured authentication and authorization policy.&lt;/p>
&lt;h2 id="gardener-admission-controllercontroller-managerschedulerresource-manager-gardenlet">gardener-{admission-controller,controller-manager,scheduler,resource-manager}, gardenlet&lt;/h2>
&lt;p>&lt;code>gardener-controller-manager&lt;/code>, &lt;code>gardener-admission-controller&lt;/code>, &lt;code>gardener-scheduler&lt;/code>, &lt;code>gardener-resource-manager&lt;/code> and &lt;code>gardenlet&lt;/code> also allow enabling profiling handlers via their respective component configs (currently disabled by default).
Here is an example for the &lt;code>gardener-admission-controller&lt;/code>&amp;rsquo;s configuration and how to enable it (it looks similar for the other components):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: admissioncontroller.config.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: AdmissionControllerConfiguration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>server:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metrics:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> port: 2723
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>debugging:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enableProfiling: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enableContentionProfiling: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, the handlers are served on the same port as configured in &lt;code>server.metrics.port&lt;/code> via HTTP.&lt;/p>
&lt;p>For example (gardener-admission-controller):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ curl http://localhost:2723/debug/pprof/heap &amp;gt; /tmp/heap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ go tool pprof /tmp/heap
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>