<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concepts on Gardener</title><link>https://gardener.cloud/docs/gardener/concepts/</link><description>Recent content in Concepts on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/gardener/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>APIServer Admission Plugins</title><link>https://gardener.cloud/docs/gardener/concepts/apiserver-admission-plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/apiserver-admission-plugins/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>Similar to the kube-apiserver, the gardener-apiserver comes with a few in-tree managed admission plugins.
If you want to get an overview of the what and why of admission plugins then &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/">this document&lt;/a> might be a good start.&lt;/p>
&lt;p>This document lists all existing admission plugins with a short explanation of what it is responsible for.&lt;/p>
&lt;h2 id="backupbucketvalidator">&lt;code>BackupBucketValidator&lt;/code>&lt;a class="td-heading-self-link" href="#backupbucketvalidator" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>&lt;em>(enabled by default)&lt;/em>&lt;/p>
&lt;p>This admission controller reacts on &lt;code>CREATE&lt;/code> and &lt;code>UPDATE&lt;/code> operations for &lt;code>BackupBuckets&lt;/code>s.
When the backup bucket is using &lt;code>WorkloadIdentity&lt;/code> as backup credentials, the plugin ensures the backup bucket and the workload identity have the same provider type, i.e. &lt;code>backupBucket.spec.provider.type&lt;/code> and &lt;code>workloadIdentity.spec.targetSystem.type&lt;/code> have the same value.&lt;/p></description></item><item><title>Architecture</title><link>https://gardener.cloud/docs/gardener/concepts/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/architecture/</guid><description>&lt;h2 id="official-definition---what-is-kubernetes">Official Definition - What is Kubernetes?&lt;a class="td-heading-self-link" href="#official-definition---what-is-kubernetes" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;blockquote>
 &lt;p>&amp;ldquo;Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.&amp;rdquo;&lt;/p>

&lt;/blockquote>&lt;h2 id="introduction---basic-principle">Introduction - Basic Principle&lt;a class="td-heading-self-link" href="#introduction---basic-principle" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>The foundation of the Gardener (providing &lt;strong>Kubernetes Clusters as a Service&lt;/strong>) is Kubernetes itself, because Kubernetes is the go-to solution to manage software in the Cloud, even when it&amp;rsquo;s Kubernetes itself (see also OpenStack which is provisioned more and more on top of Kubernetes as well).&lt;/p></description></item><item><title>Backup and Restore</title><link>https://gardener.cloud/docs/gardener/concepts/backup-restore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/backup-restore/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>Kubernetes uses &lt;a href="https://etcd.io/">etcd&lt;/a> as the key-value store for its resource definitions. Gardener supports the backup and restore of etcd. It is the responsibility of the shoot owners to backup the workload data.&lt;/p>
&lt;p>Gardener uses an &lt;a href="https://github.com/gardener/etcd-backup-restore">etcd-backup-restore&lt;/a> component to backup the etcd backing the Shoot cluster regularly and restore it in case of disaster. It is deployed as sidecar via &lt;a href="https://github.com/gardener/etcd-druid">etcd-druid&lt;/a>. This doc mainly focuses on the backup and restore configuration used by Gardener when deploying these components. For more details on the design and internal implementation details, please refer to &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/06-etcd-druid.md">GEP-06&lt;/a> and the documentation on individual repositories.&lt;/p></description></item><item><title>Cluster API</title><link>https://gardener.cloud/docs/gardener/concepts/cluster-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/cluster-api/</guid><description>&lt;h2 id="relation-between-gardener-api-and-cluster-api-sig-cluster-lifecycle">Relation Between Gardener API and Cluster API (SIG Cluster Lifecycle)&lt;a class="td-heading-self-link" href="#relation-between-gardener-api-and-cluster-api-sig-cluster-lifecycle" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>The Cluster API (CAPI) and Gardener approach Kubernetes cluster management with different, albeit related, philosophies. In essence, &lt;strong>Cluster API primarily harmonizes &lt;em>how to get to&lt;/em> clusters, while Gardener goes a significant step further by also harmonizing &lt;em>the clusters themselves&lt;/em>.&lt;/strong>&lt;/p>
&lt;p>Gardener already provides a declarative, Kubernetes-native API to manage the full lifecycle of conformant Kubernetes clusters. This is a key distinction, as many other managed Kubernetes services are often exposed via proprietary REST APIs or imperative CLIs, whereas Gardener&amp;rsquo;s API &lt;em>is&lt;/em> Kubernetes. Gardener is inherently multi-cloud and, by design, unifies far more aspects of a cluster&amp;rsquo;s make-up and operational behavior than Cluster API currently aims to.&lt;/p></description></item><item><title>etcd</title><link>https://gardener.cloud/docs/gardener/concepts/etcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/etcd/</guid><description>&lt;h2 id="etcd---key-value-store-for-kubernetes">etcd - Key-Value Store for Kubernetes&lt;a class="td-heading-self-link" href="#etcd---key-value-store-for-kubernetes" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>&lt;a href="https://etcd.io/">etcd&lt;/a> is a strongly consistent key-value store and the most prevalent choice for the Kubernetes
persistence layer. All API cluster objects like &lt;code>Pod&lt;/code>s, &lt;code>Deployment&lt;/code>s, &lt;code>Secret&lt;/code>s, etc., are stored in &lt;code>etcd&lt;/code>, which
makes it an essential part of a &lt;a href="https://kubernetes.io/docs/concepts/overview/components/#control-plane-components">Kubernetes control plane&lt;/a>.&lt;/p>
&lt;h2 id="garden-or-shoot-cluster-persistence">Garden or Shoot Cluster Persistence&lt;a class="td-heading-self-link" href="#garden-or-shoot-cluster-persistence" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>Each garden or shoot cluster gets its very own persistence for the control plane.
It runs in the shoot namespace on the respective seed cluster (or in the &lt;code>garden&lt;/code> namespace in the garden cluster, respectively).
Concretely, there are two etcd instances per shoot cluster, which the &lt;code>kube-apiserver&lt;/code> is configured to use in the following way:&lt;/p></description></item><item><title>gardenadm</title><link>https://gardener.cloud/docs/gardener/concepts/gardenadm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/gardenadm/</guid><description>&lt;blockquote class="alert alert-caution">
 &lt;div class="alert-title">
 &lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">&lt;title>alert-octagon-outline&lt;/title>&lt;path d="M8.27,3L3,8.27V15.73L8.27,21H15.73C17.5,19.24 21,15.73 21,15.73V8.27L15.73,3M9.1,5H14.9L19,9.1V14.9L14.9,19H9.1L5,14.9V9.1M11,15H13V17H11V15M11,7H13V13H11V7" />&lt;/svg>
 &lt;p>
 
 Caution
 
 &lt;/p>
 &lt;/div>
 &lt;p>This tool is currently under development and considered highly experimental.
Do not use it in production environments.
Read more about it in &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/28-autonomous-shoot-clusters.md">GEP-28&lt;/a>.&lt;/p>

 &lt;/blockquote>

&lt;img src="https://gardener.cloud/docs/gardener/concepts/gardenadm-large.png" alt="gardenadm" width="100"/>
&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>&lt;code>gardenadm&lt;/code> is a command line tool for bootstrapping Kubernetes clusters called &amp;ldquo;Autonomous Shoot Clusters&amp;rdquo;.
In contrast to usual Gardener-managed clusters (called Shoot Clusters), the Kubernetes control plane components run as static pods on a dedicated control plane worker pool in the cluster itself (instead of running them as pods on another Kubernetes cluster (called Seed Cluster)).
Autonomous shoot clusters can be bootstrapped without an existing Gardener installation.
Hence, they can host a Gardener installation itself and/or serve as the initial seed cluster of a Gardener installation.
Furthermore, autonomous shoot clusters can only be created by the &lt;code>gardenadm&lt;/code> tool and not via an API of an existing Gardener system.&lt;/p></description></item><item><title>Gardener Admission Controller</title><link>https://gardener.cloud/docs/gardener/concepts/admission-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/admission-controller/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>While the Gardener API server works with &lt;a href="https://gardener.cloud/docs/gardener/concepts/apiserver-admission-plugins/">admission plugins&lt;/a> to validate and mutate resources belonging to Gardener related API groups, e.g. &lt;code>core.gardener.cloud&lt;/code>, the same is needed for resources belonging to non-Gardener API groups as well, e.g. secrets in the &lt;code>core&lt;/code> API group.
Therefore, the Gardener Admission Controller runs a http(s) server with the following handlers which serve as validating/mutating endpoints for &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/">admission webhooks&lt;/a>.
It is also used to serve http(s) handlers for authorization webhooks.&lt;/p></description></item><item><title>Gardener API Server</title><link>https://gardener.cloud/docs/gardener/concepts/apiserver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/apiserver/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>The Gardener API server is a Kubernetes-native extension based on its &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/apiserver-aggregation/">aggregation layer&lt;/a>.
It is registered via an &lt;code>APIService&lt;/code> object and designed to run inside a Kubernetes cluster whose API it wants to extend.&lt;/p>
&lt;p>After registration, it exposes the following resources:&lt;/p>
&lt;h2 id="cloudprofiles">&lt;code>CloudProfile&lt;/code>s&lt;a class="td-heading-self-link" href="#cloudprofiles" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>&lt;code>CloudProfile&lt;/code>s are resources that describe a specific environment of an underlying infrastructure provider, e.g. AWS, Azure, etc.
Each shoot has to reference a &lt;code>CloudProfile&lt;/code> to declare the environment it should be created in.
In a &lt;code>CloudProfile&lt;/code>, the gardener operator specifies certain constraints like available machine types, regions, which Kubernetes versions they want to offer, etc.
End-users can read &lt;code>CloudProfile&lt;/code>s to see these values, but only operators can change the content or create/delete them.
When a shoot is created or updated, then an admission plugin checks that only allowed values are used via the referenced &lt;code>CloudProfile&lt;/code>.&lt;/p></description></item><item><title>Gardener Controller Manager</title><link>https://gardener.cloud/docs/gardener/concepts/controller-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/controller-manager/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>The &lt;code>gardener-controller-manager&lt;/code> (often referred to as &amp;ldquo;GCM&amp;rdquo;) is a component that runs next to the Gardener API server, similar to the Kubernetes Controller Manager.
It runs several controllers that do not require talking to any seed or shoot cluster.
Also, as of today, it exposes an HTTP server that is serving several health check endpoints and metrics.&lt;/p>
&lt;p>This document explains the various functionalities of the &lt;code>gardener-controller-manager&lt;/code> and their purpose.&lt;/p></description></item><item><title>Gardener Node Agent</title><link>https://gardener.cloud/docs/gardener/concepts/node-agent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/node-agent/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>The goal of the &lt;code>gardener-node-agent&lt;/code> is to bootstrap a machine into a worker node and maintain node-specific components, which run on the node and are unmanaged by Kubernetes (e.g. the &lt;code>kubelet&lt;/code> service, systemd units, &amp;hellip;).&lt;/p>
&lt;p>It effectively is a Kubernetes controller deployed onto the worker node.&lt;/p>
&lt;h2 id="architecture-and-basic-design">Architecture and Basic Design&lt;a class="td-heading-self-link" href="#architecture-and-basic-design" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>&lt;img src="https://gardener.cloud/docs/gardener/concepts/images/gardener-nodeagent-architecture.svg" alt="Design">&lt;/p>
&lt;p>This figure visualizes the overall architecture of the &lt;code>gardener-node-agent&lt;/code>. On the left side, it starts with an &lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/operatingsystemconfig/">&lt;code>OperatingSystemConfig&lt;/code>&lt;/a> resource (&lt;code>OSC&lt;/code>) with a corresponding worker pool specific &lt;code>cloud-config-&amp;lt;worker-pool&amp;gt;&lt;/code> secret being passed by reference through the userdata to a machine by the &lt;code>machine-controller-manager&lt;/code> (MCM).&lt;/p></description></item><item><title>Gardener Operator</title><link>https://gardener.cloud/docs/gardener/concepts/operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/operator/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>The &lt;code>gardener-operator&lt;/code> is responsible for the garden cluster environment.
Without this component, users must deploy ETCD, the Gardener control plane, etc., manually and with separate mechanisms (not maintained in this repository).
This is quite unfortunate since this requires separate tooling, processes, etc.
A lot of production- and enterprise-grade features were built into Gardener for managing the seed and shoot clusters, so it makes sense to re-use them as much as possible also for the garden cluster.&lt;/p></description></item><item><title>Gardener Resource Manager</title><link>https://gardener.cloud/docs/gardener/concepts/resource-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/resource-manager/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>Initially, the &lt;code>gardener-resource-manager&lt;/code> was a project similar to the &lt;a href="https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/addon-manager">kube-addon-manager&lt;/a>.
It manages Kubernetes resources in a target cluster which means that it creates, updates, and deletes them.
Also, it makes sure that manual modifications to these resources are reconciled back to the desired state.&lt;/p>
&lt;p>In the Gardener project we were using the kube-addon-manager since more than two years.
While we have progressed with our &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md">extensibility story&lt;/a> (moving cloud providers out-of-tree), we had decided that the kube-addon-manager is no longer suitable for this use-case.
The problem with it is that it needs to have its managed resources on its file system.
This requires storing the resources in &lt;code>ConfigMap&lt;/code>s or &lt;code>Secret&lt;/code>s and mounting them to the kube-addon-manager pod during deployment time.
The &lt;code>gardener-resource-manager&lt;/code> uses &lt;code>CustomResourceDefinition&lt;/code>s which allows to dynamically add, change, and remove resources with immediate action and without the need to reconfigure the volume mounts/restarting the pod.&lt;/p></description></item><item><title>Gardener Scheduler</title><link>https://gardener.cloud/docs/gardener/concepts/scheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/scheduler/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>The Gardener Scheduler is in essence a controller that watches newly created shoots and assigns a seed cluster to them.
Conceptually, the task of the Gardener Scheduler is very similar to the task of the Kubernetes Scheduler: finding a seed for a shoot instead of a node for a pod.&lt;/p>
&lt;p>Either the scheduling strategy or the shoot cluster purpose hereby determines how the scheduler is operating.
The following sections explain the configuration and flow in greater detail.&lt;/p></description></item><item><title>gardenlet</title><link>https://gardener.cloud/docs/gardener/concepts/gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/concepts/gardenlet/</guid><description>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>Gardener is implemented using the &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/">operator pattern&lt;/a>:
It uses custom controllers that act on our own custom resources,
and apply Kubernetes principles to manage clusters instead of containers.
Following this analogy, you can recognize components of the Gardener architecture
as well-known Kubernetes components, for example, shoot clusters can be compared with pods,
and seed clusters can be seen as worker nodes.&lt;/p>
&lt;p>The following Gardener components play a similar role as the corresponding components
in the Kubernetes architecture:&lt;/p></description></item></channel></rss>