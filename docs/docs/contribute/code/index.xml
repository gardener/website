<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Contributing Code on Gardener</title><link>https://gardener.cloud/docs/contribute/code/</link><description>Recent content in Contributing Code on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/contribute/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Contributing Bigger Changes</title><link>https://gardener.cloud/docs/contribute/code/contributing-bigger-changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/code/contributing-bigger-changes/</guid><description>&lt;h2 id="contributing-bigger-changes">Contributing Bigger Changes&lt;/h2>
&lt;p>Here are the guidelines you should follow when contributing larger changes to Gardener:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>We strongly recommend to write a Gardener Enhancement Proposal (&lt;a href="https://github.com/gardener/gardener/tree/master/docs/proposals">GEP&lt;/a>) to get a common understanding what you want to achieve. This makes it easier for reviewers to understand the big picture.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Avoid proposing a big change in one single PR. Instead, split your work into multiple stages which are independently mergeable and create one PR for each stage. For example, if introducing a new API resource and its controller, these stages could be:&lt;/p></description></item><item><title>CI/CD</title><link>https://gardener.cloud/docs/contribute/code/cicd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/code/cicd/</guid><description>&lt;h2 id="cicd">CI/CD&lt;/h2>
&lt;p>As an execution environment for CI/CD workloads, we use &lt;a href="https://concourse-ci.org">Concourse&lt;/a>.
We however abstract from the underlying &amp;ldquo;build executor&amp;rdquo; and instead offer a
&lt;code>Pipeline Definition Contract&lt;/code>, through which components declare their build pipelines as
required.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/cicd-overview_e22adb.png" alt="Overview">&lt;/p>
&lt;p>In order to run continuous delivery workloads for all components contributing to the
&lt;a href="https://github.com/gardener">Gardener&lt;/a> project, we operate a central service.&lt;/p>
&lt;p>Typical workloads encompass the execution of tests and builds of a variety of technologies,
as well as building and publishing container images, typically containing build results.&lt;/p></description></item><item><title>Dependencies</title><link>https://gardener.cloud/docs/contribute/code/dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/code/dependencies/</guid><description>&lt;h2 id="testing">Testing&lt;/h2>
&lt;p>We follow the BDD-style testing principles and are leveraging the &lt;a href="https://onsi.github.io/ginkgo/">Ginkgo&lt;/a> framework along with &lt;a href="http://onsi.github.io/gomega/">Gomega&lt;/a> as matcher library. In order to execute the existing tests, you can use&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make test &lt;span style="color:#008000"># runs tests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make verify &lt;span style="color:#008000"># runs static code checks and test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is an additional command for analyzing the code coverage of the tests. Ginkgo will generate standard Golang cover profiles which will be translated into a HTML file by the &lt;a href="https://blog.golang.org/cover">Go Cover Tool&lt;/a>. Another command helps you to clean up the filesystem from the temporary cover profile files and the HTML report:&lt;/p></description></item></channel></rss>