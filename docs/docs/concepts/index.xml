<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Concepts</title><link>https://gardener.cloud/docs/concepts/</link><description>Recent content in Concepts on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Architecture</title><link>https://gardener.cloud/docs/concepts/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/architecture/</guid><description>
&lt;h4 id="official-definition---what-is-kubernetes">Official Definition - What is Kubernetes?&lt;/h4>
&lt;blockquote>
&lt;p>&amp;ldquo;Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;h4 id="introduction---basic-principle">Introduction - Basic Principle&lt;/h4>
&lt;p>The foundation of the Gardener (providing &lt;em>&lt;strong>Kubernetes Clusters as a Service&lt;/strong>&lt;/em>) is Kubernetes itself, because Kubernetes is the go-to solution to manage software in the Cloud, even when it&amp;rsquo;s Kubernetes itself (see also OpenStack which is provisioned more and more on top of Kubernetes as well).&lt;/p>
&lt;p>While self-hosting, meaning to run Kubernetes components inside Kubernetes, is a popular topic in the community, we apply a special pattern catering to the needs of our cloud platform to provision hundreds or even thousands of clusters. We take a so-called &amp;ldquo;seed&amp;rdquo; cluster and seed the control plane (such as the API server, scheduler, controllers, etcd persistence and others) of an end-user cluster, which we call &amp;ldquo;shoot&amp;rdquo; cluster, as pods into the &amp;ldquo;seed&amp;rdquo; cluster. That means one &amp;ldquo;seed&amp;rdquo; cluster, of which we will have one per IaaS and region, hosts the control planes of multiple &amp;ldquo;shoot&amp;rdquo; clusters. That allows us to avoid dedicated hardware/virtual machines for the &amp;ldquo;shoot&amp;rdquo; cluster control planes. We simply put the control plane into pods/containers and since the &amp;ldquo;seed&amp;rdquo; cluster watches them, they can be deployed with a replica count of 1 and only need to be scaled out when the control plane gets under pressure, but no longer for HA reasons. At the same time, the deployments get simpler (standard Kubernetes deployment) and easier to update (standard Kubernetes rolling update). The actual &amp;ldquo;shoot&amp;rdquo; cluster consists only out of the worker nodes (no control plane) and therefore the users may get full administrative access to their clusters.&lt;/p>
&lt;h4 id="setting-the-scene---components-and-procedure">Setting The Scene - Components and Procedure&lt;/h4>
&lt;p>We provide a central operator UI, which we call the &amp;ldquo;Gardener Dashboard&amp;rdquo;. It talks to a dedicated cluster, which we call the &amp;ldquo;Garden&amp;rdquo; cluster and uses custom resources managed by an &lt;a href="https://kubernetes.io/docs/concepts/api-extension/custom-resources/#api-server-aggregation">aggregated API server&lt;/a>, one of the general extension concepts of Kubernetes) to represent &amp;ldquo;shoot&amp;rdquo; clusters. In this &amp;ldquo;Garden&amp;rdquo; cluster runs the &amp;ldquo;Gardener&amp;rdquo;, which is basically a Kubernetes controller that watches the custom resources and acts upon them, i.e. creates, updates/modifies, or deletes &amp;ldquo;shoot&amp;rdquo; clusters. The creation follows basically these steps:&lt;/p>
&lt;ul>
&lt;li>Create a namespace in the &amp;ldquo;seed&amp;rdquo; cluster for the &amp;ldquo;shoot&amp;rdquo; cluster which will host the &amp;ldquo;shoot&amp;rdquo; cluster control plane&lt;/li>
&lt;li>Generate secrets and credentials which the worker nodes will need to talk to the control plane&lt;/li>
&lt;li>Create the infrastructure (using &lt;a href="https://www.terraform.io/">Terraform&lt;/a>), which basically consists out of the network setup)&lt;/li>
&lt;li>Deploy the &amp;ldquo;shoot&amp;rdquo; cluster control plane into the &amp;ldquo;shoot&amp;rdquo; namespace in the &amp;ldquo;seed&amp;rdquo; cluster, containing the &amp;ldquo;machine-controller-manager&amp;rdquo; pod&lt;/li>
&lt;li>Create machine CRDs in the &amp;ldquo;seed&amp;rdquo; cluster, describing the configuration and the number of worker machines for the &amp;ldquo;shoot&amp;rdquo; (the machine-controller-manager watches the CRDs and creates virtual machines out of it)&lt;/li>
&lt;li>Wait for the &amp;ldquo;shoot&amp;rdquo; cluster API server to become responsive (pods will be scheduled, persistent volumes and load balancers are created by Kubernetes via the respective cloud provider)&lt;/li>
&lt;li>Finally we deploy &lt;code>kube-system&lt;/code> daemons like &lt;code>kube-proxy&lt;/code> and further add-ons like the &lt;code>dashboard&lt;/code> into the &amp;ldquo;shoot&amp;rdquo; cluster and the cluster becomes active&lt;/li>
&lt;/ul>
&lt;h4 id="overview-architecture-diagram">Overview Architecture Diagram&lt;/h4>
&lt;p>&lt;img src="https://gardener.cloud/__resources/gardener-architecture-overview_353f79.png" alt="Gardener Overview Architecture Diagram">&lt;/p>
&lt;h4 id="detailed-architecture-diagram">Detailed Architecture Diagram&lt;/h4>
&lt;p>&lt;img src="https://gardener.cloud/__resources/gardener-architecture-detailed_8aedbd.png" alt="Gardener Detailed Architecture Diagram">&lt;/p>
&lt;p>Note: The &lt;code>kubelet&lt;/code> as well as the pods inside the &amp;ldquo;shoot&amp;rdquo; cluster talk through the front-door (load balancer IP; public Internet) to its &amp;ldquo;shoot&amp;rdquo; cluster API server running in the &amp;ldquo;seed&amp;rdquo; cluster. The reverse communication from the API server to the pod, service, and node networks happens through a VPN connection that we deploy into &amp;ldquo;seed&amp;rdquo; and &amp;ldquo;shoot&amp;rdquo; clusters.&lt;/p></description></item><item><title>Docs: Core Components</title><link>https://gardener.cloud/docs/concepts/core-components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/core-components/</guid><description/></item><item><title>Docs: Backup and Restore</title><link>https://gardener.cloud/docs/concepts/backup-restore/backup-restore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/backup-restore/backup-restore/</guid><description>
&lt;h1 id="backup-and-restore">Backup and restore&lt;/h1>
&lt;p>Kubernetes uses Etcd as the key-value store for its resource definitions. Gardener supports the backup and restore of etcd. It is the responsibility of the shoot owners to backup the workload data.&lt;/p>
&lt;p>Gardener uses &lt;a href="https://github.com/gardener/etcd-backup-restore">etcd-backup-restore&lt;/a> component to backup the etcd backing the Shoot cluster regularly and restore in case of disaster. It is deployed as sidecar via &lt;a href="https://github.com/gardener/etcd-druid">etcd-druid&lt;/a>. This doc mainly focuses on the backup and restore configuration used by Gardener when deploying these components. For more details on the design and internal implementation details, please refer &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/06-etcd-druid.md">GEP-06&lt;/a> and documentation on individual repository.&lt;/p>
&lt;h2 id="bucket-provisioning">Bucket provisioning&lt;/h2>
&lt;p>Refer the &lt;a href="https://gardener.cloud/docs/concepts/extensions/backupbucket">backup bucket extension document&lt;/a> to know details about configuring backup bucket.&lt;/p>
&lt;h2 id="backup-policy">Backup Policy&lt;/h2>
&lt;p>etcd-backup-restore supports full snapshot and delta snapshots over full snapshot. In Gardener, this configuration is currently hard-coded to following parameters:&lt;/p>
&lt;ul>
&lt;li>Full Snapshot Schedule:
&lt;ul>
&lt;li>Daily, &lt;code>24hr&lt;/code> interval.&lt;/li>
&lt;li>For each Shoot, the schedule time in a day is randomized based on the configured Shoot maintenance window.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Delta Snapshot schedule:
&lt;ul>
&lt;li>At &lt;code>5min&lt;/code> interval.&lt;/li>
&lt;li>If aggregated events size since last snapshot goes beyond &lt;code>100Mib&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup History / Garbage backup deletion policy:
&lt;ul>
&lt;li>Gardener configure backup restore to have &lt;code>Exponential&lt;/code> garbage collection policy.&lt;/li>
&lt;li>As per policy, following backups are retained.&lt;/li>
&lt;li>All full backups and delta backups for the previous hour.&lt;/li>
&lt;li>Latest full snapshot of each previous hour for the day.&lt;/li>
&lt;li>Latest full snapshot of each previous day for 7 days.&lt;/li>
&lt;li>Latest full snapshot of the previous 4 weeks.&lt;/li>
&lt;li>Garbage Collection is configured at &lt;code>12hr&lt;/code> interval.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Listing:
&lt;ul>
&lt;li>Gardener don&amp;rsquo;t have any API to list out the backups.&lt;/li>
&lt;li>To find the backup list, admin can checkout the &lt;code>BackupEntry&lt;/code> resource associated with Shoot which holds the bucket and prefix details on object store.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="restoration">Restoration&lt;/h2>
&lt;p>Restoration process of etcd is automated through the etcd-backup-restore component from latest snapshot. Gardener dosen&amp;rsquo;t support Point-In-Time-Recovery (PITR) of etcd. In case of etcd disaster, the etcd is recovered from latest backup automatically. For further details, please refer the &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/doc/proposals/restoration.md">doc&lt;/a>. Post restoration of etcd, the Shoot reconciliation loop brings back the cluster to same state.&lt;/p>
&lt;p>Again, Shoot owner is responsible for maintaining the backup/restore of his workload. Gardener does only take care of the cluster&amp;rsquo;s etcd.&lt;/p></description></item><item><title>Docs: Extensions</title><link>https://gardener.cloud/docs/concepts/extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/extensions/</guid><description>
&lt;h1 id="extensibility-overview">Extensibility overview&lt;/h1>
&lt;p>Initially, everything was developed in-tree in the Gardener project. All cloud providers and the configuration for all the supported operating systems were released together with the Gardener core itself.
But as the project grew, it got more and more difficult to add new providers and maintain the existing code base.
As a consequence and in order to become agile and flexible again, we proposed &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md">GEP-1&lt;/a> (Gardener Enhancement Proposal).
The document describes an out-of-tree extension architecture that keeps the Gardener core logic independent of provider-specific knowledge (similar to what Kubernetes has achieved with &lt;a href="https://github.com/kubernetes/enhancements/issues/88">out-of-tree cloud providers&lt;/a> or with &lt;a href="https://github.com/kubernetes/community/pull/1258">CSI volume plugins&lt;/a>).&lt;/p>
&lt;h2 id="basic-concepts">Basic concepts&lt;/h2>
&lt;p>Gardener keeps running in the &amp;ldquo;garden cluster&amp;rdquo; and implements the core logic of shoot cluster reconciliation/deletion.
Extensions are Kubernetes controllers themselves (like Gardener) and run in the seed clusters.
As usual, we try to use Kubernetes wherever applicable.
We rely on Kubernetes extension concepts in order to enable extensibility for Gardener.
The main ideas of GEP-1 are the following:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>During the shoot reconciliation process Gardener will write CRDs into the seed cluster that are watched and managed by the extension controllers. They will reconcile (based on the &lt;code>.spec&lt;/code>) and report whether everything went well or errors occurred in the CRD&amp;rsquo;s &lt;code>.status&lt;/code> field.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Gardener keeps deploying the provider-independent control plane components (etcd, kube-apiserver, etc.). However, some of these components might still need little customization by providers, e.g., additional configuration, flags, etc. In this case, the extension controllers register webhooks in order to manipulate the manifests.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Example 1&lt;/strong>:&lt;/p>
&lt;p>Gardener creates a new AWS shoot cluster and requires the preparation of infrastructure in order to proceed (networks, security groups, etc.).
It writes the following CRD into the seed cluster:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions.gardener.cloud/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Infrastructure&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">infrastructure&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">shoot--core--aws-01&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">aws&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">providerConfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">aws.provider.extensions.gardener.cloud/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">InfrastructureConfig&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">vpc&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cidr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10.250.0.0&lt;/span>&lt;span class="l">/16&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">internal&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">10.250.112.0&lt;/span>&lt;span class="l">/22&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">public&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">10.250.96.0&lt;/span>&lt;span class="l">/22&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">10.250.0.0&lt;/span>&lt;span class="l">/19&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">zones&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">eu-west-1a&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dns&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiserver&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">api.aws-01.core.example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">region&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">eu-west-1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-aws-credentials&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">sshPublicKey&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">base64(key)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please note that the &lt;code>.spec.providerConfig&lt;/code> is a raw blob and not evaluated or known in any way by Gardener.
Instead, it was specified by the user (in the &lt;code>Shoot&lt;/code> resource) and just &amp;ldquo;forwarded&amp;rdquo; to the extension controller.
Only the AWS controller understands this configuration and will now start provisioning/reconciling the infrastructure.
It reports in the &lt;code>.status&lt;/code> field the result:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">observedGeneration&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">state&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">lastError&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">..&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">lastOperation&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">providerStatus&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">aws.provider.extensions.gardener.cloud/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">InfrastructureStatus&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">vpc&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">vpc-1234&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">subnets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">subnet-acbd1234&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">workers&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">zone&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">eu-west-1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">securityGroups&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sg-xyz12345&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">workers&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">iam&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodesRoleARN&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;some-arn&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">instanceProfileName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ec2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">keyName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gardener waits until the &lt;code>.status.lastOperation&lt;/code>/&lt;code>.status.lastError&lt;/code> indicates that the operation reached a final state and either continuous with the next step or stops and reports the potential error.
The extension-specific output in &lt;code>.status.providerStatus&lt;/code> is - similar to &lt;code>.spec.providerConfig&lt;/code> - not evaluated and simply forwarded to CRDs in subsequent steps.&lt;/p>
&lt;p>&lt;strong>Example 2&lt;/strong>:&lt;/p>
&lt;p>Gardener deploys the control plane components into the seed cluster, e.g. the &lt;code>kube-controller-manager&lt;/code> deployment with the following flags:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">/usr/local/bin/kube-controller-manager&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="l">allocate-node-cidrs=true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="l">attach-detach-reconcile-sync-period=1m0s&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="l">controllers=*,bootstrapsigner,tokencleaner&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="l">cluster-cidr=100.96.0.0/11&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="l">cluster-name=shoot--core--aws-01&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="l">cluster-signing-cert-file=/srv/kubernetes/ca/ca.crt&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="l">cluster-signing-key-file=/srv/kubernetes/ca/ca.key&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="l">concurrent-deployment-syncs=10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="l">concurrent-replicaset-syncs=10&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The AWS controller requires some additional flags in order to make the cluster functional.
It needs to provide a Kubernetes cloud-config and also some cloud-specific flags.
Consequently, it registers a &lt;code>MutatingWebhookConfiguration&lt;/code> on &lt;code>Deployment&lt;/code>s and adds these flags to the container:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- --&lt;span class="l">cloud-provider=external&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="l">external-cloud-volume-plugin=aws&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- --&lt;span class="l">cloud-config=/etc/kubernetes/cloudprovider/cloudprovider.conf&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course, it would have needed to create a &lt;code>ConfigMap&lt;/code> containing the cloud config and to add the proper &lt;code>volume&lt;/code> and &lt;code>volumeMounts&lt;/code> to the manifest as well.&lt;/p>
&lt;p>(Please note for this special example: The Kubernetes community is also working on making the &lt;code>kube-controller-manager&lt;/code> provider-independent.
However, there will most probably be still components other than the &lt;code>kube-controller-manager&lt;/code> which need to be adapted by extensions.)&lt;/p>
&lt;p>If you are interested in writing an extension, or generally in digging deeper to find out the nitty-gritty details of the extension concepts please read &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md">GEP-1&lt;/a>.
We are truly looking forward to your feedback!&lt;/p>
&lt;h2 id="current-status">Current status&lt;/h2>
&lt;p>Meanwhile, the out-of-tree extension architecture of Gardener is in place and has been productively validated. We are tracking all internal and external extensions of Gardener in the repo: &lt;a href="https://github.com/gardener/gardener/tree/master/extensions#known-extension-implementations">Gardener Extensions Library&lt;/a>.&lt;/p></description></item><item><title>Docs: Networking</title><link>https://gardener.cloud/docs/concepts/networking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/networking/</guid><description/></item><item><title>Docs: Monitoring</title><link>https://gardener.cloud/docs/concepts/monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/monitoring/</guid><description/></item><item><title>Docs: Automatic Deployment of Gardenlets</title><link>https://gardener.cloud/docs/concepts/deployment/deploy_gardenlet_automatically/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/deployment/deploy_gardenlet_automatically/</guid><description>
&lt;h1 id="automatic-deployment-of-gardenlets">Automatic Deployment of Gardenlets&lt;/h1>
&lt;p>The gardenlet can automatically deploy itself into shoot clusters, and register this cluster as a seed cluster.
These clusters are called &amp;ldquo;managed seeds&amp;rdquo; (aka &amp;ldquo;shooted seeds&amp;rdquo;).
This procedure is the preferred way to add additional seed clusters, because shoot clusters already come with production-grade qualities that are also demanded for seed clusters.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>The only prerequisite is to register an initial cluster as a seed cluster that has already a gardenlet deployed:&lt;/p>
&lt;ul>
&lt;li>This gardenlet was either deployed as part of a Gardener installation using a setup tool (for example, &lt;code>gardener/garden-setup&lt;/code>) or&lt;/li>
&lt;li>the gardenlet was deployed manually
&lt;ul>
&lt;li>for a step-by-step manual installation Guide see: &lt;a href="https://gardener.cloud/docs/concepts/deployment/deploy_gardenlet_manually">Deploy a Gardenlet Manually&lt;/a>)&lt;/li>
&lt;li>for a Gardenlet deployment using an installation tool see: &lt;a href="https://github.com/gardener/gardener/blob/master/landscaper/pkg/gardenlet/README.md">Gardenlet landscaper component&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>The initial cluster can be the garden cluster itself.&lt;/p>
&lt;/blockquote>
&lt;h2 id="self-deployment-of-gardenlets-in-additional-managed-seed-clusters">Self-Deployment of Gardenlets in Additional Managed Seed Clusters&lt;/h2>
&lt;p>For a better scalability, you usually need more seed clusters that you can create as follows:&lt;/p>
&lt;ol>
&lt;li>Use the initial cluster as the seed cluster for other managed seed clusters. It hosts the control planes of the other seed clusters.&lt;/li>
&lt;li>The gardenlet deployed in the initial cluster deploys itself automatically into the managed seed clusters.&lt;/li>
&lt;/ol>
&lt;p>The advantage of this approach is that there’s only one initial gardenlet installation required. Every other managed seed cluster has a gardenlet deployed automatically.&lt;/p>
&lt;h2 id="related-links">Related Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/gardener/gardener/blob/master/docs/usage/managed_seed.md">Register Shoot as Seed&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://github.com/gardener/garden-setup">garden-setup&lt;/a>&lt;/p></description></item><item><title>Docs: Deploy a Gardenlet Manually</title><link>https://gardener.cloud/docs/concepts/deployment/deploy_gardenlet_manually/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/deployment/deploy_gardenlet_manually/</guid><description>
&lt;h1 id="deploy-a-gardenlet-manually">Deploy a Gardenlet Manually&lt;/h1>
&lt;p>Manually deploying a gardenlet is required in the following cases:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The Kubernetes cluster to be registered as a seed cluster has no public endpoint,
because it is behind a firewall.
The gardenlet must then be deployed into the cluster itself.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The Kubernetes cluster to be registered as a seed cluster is managed externally
(the Kubernetes cluster is not a shoot cluster, so &lt;a href="https://gardener.cloud/docs/concepts/deployment/deploy_gardenlet_automatically">Automatic Deployment of Gardenlets&lt;/a> cannot be used).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The gardenlet runs outside of the Kubernetes cluster
that should be registered as a seed cluster.
(The gardenlet is not restricted to run in the seed cluster or
to be deployed into a Kubernetes cluster at all).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Once you’ve deployed a gardenlet manually, for example, behind a firewall, you can deploy new gardenlets automatically. The manually deployed gardenlet is then used as a template for the new gardenlets. More information: &lt;a href="https://gardener.cloud/docs/concepts/deployment/deploy_gardenlet_automatically">Automatic Deployment of Gardenlets&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;h3 id="kubernetes-cluster-that-should-be-registered-as-a-seed-cluster">Kubernetes cluster that should be registered as a seed cluster&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Verify that the cluster has a &lt;a href="https://github.com/gardener/gardener/blob/master/docs/usage/supported_k8s_versions.md">supported Kubernetes version&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Determine the nodes, pods, and services CIDR of the cluster.
You need to configure this information in the &lt;code>Seed&lt;/code> configuration.
Gardener uses this information to check that the shoot cluster isn’t created with overlapping CIDR ranges.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Every Seed cluster needs an Ingress controller which distributes external requests to internal components like grafana and prometheus. Gardener supports two approaches to achieve this:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>a. Gardener managed Ingress controller and DNS records. For this configure the following lines in your &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">Seed resource&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dns&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">aws-route53&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ingress-secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ingress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">domain&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ingress.my-seed.example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">controller&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">providerConfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;some-optional-provider-specific-config-for-the-ingressController&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>⚠ Please note that if you set &lt;code>.spec.ingress&lt;/code> then &lt;code>.spec.dns.ingressDomain&lt;/code> must be &lt;code>nil&lt;/code>.&lt;/p>
&lt;p>b. Self-managed DNS record and Ingress controller:&lt;/p>
&lt;p>:warning:
There should exist a DNS record &lt;code>*.ingress.&amp;lt;SEED-CLUSTER-DOMAIN&amp;gt;&lt;/code> where &lt;code>&amp;lt;SEED-CLUSTER-DOMAIN&amp;gt;&lt;/code> is the value of the &lt;code>.dns.ingressDomain&lt;/code> field of &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">a Seed cluster resource&lt;/a> (or the &lt;a href="https://github.com/gardener/gardener/blob/master/example/20-componentconfig-gardenlet.yaml#L84-L85">respective Gardenlet configuration&lt;/a>).&lt;/p>
&lt;p>&lt;em>This is how it could be done for the Nginx ingress controller&lt;/em>&lt;/p>
&lt;p>Deploy nginx into the &lt;code>kube-system&lt;/code> namespace in the Kubernetes cluster that should be registered as a &lt;code>Seed&lt;/code>.&lt;/p>
&lt;p>Nginx will on most cloud providers create the service with type &lt;code>LoadBalancer&lt;/code> with an external ip.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">NAME TYPE CLUSTER-IP EXTERNAL-IP
nginx-ingress-controller LoadBalancer 10.0.15.46 34.200.30.30
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a wildcard &lt;code>A&lt;/code> record (e.g *.ingress.sweet-seed.&lt;my-domain>. IN A 34.200.30.30) with your DNS provider and point it to the external ip of the ingress service. This ingress domain is later required to register the &lt;code>Seed&lt;/code> cluster.&lt;/p>
&lt;p>Please configure the ingress domain in the &lt;code>Seed&lt;/code> specification as follows:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dns&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ingressDomain&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ingress.sweet-seed.&amp;lt;my-domain&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>⚠ Please note that if you set &lt;code>.spec.dns.ingressDomain&lt;/code> then &lt;code>.spec.ingress&lt;/code> must be &lt;code>nil&lt;/code>.&lt;/p>
&lt;h3 id="kubeconfig-for-the-seed-cluster">&lt;code>kubeconfig&lt;/code> for the Seed Cluster&lt;/h3>
&lt;p>The &lt;code>kubeconfig&lt;/code> is required to deploy the gardenlet Helm chart to the seed cluster.
The gardenlet requires certain privileges to be able to operate.
These privileges are described in RBAC resources in the gardenlet Helm chart (see &lt;a href="https://github.com/gardener/gardener/tree/master/charts/gardener/gardenlet/charts/runtime/templates">charts/gardener/gardenlet/charts/runtime/templates&lt;/a>).
The Helm chart contains a service account &lt;code>gardenlet&lt;/code>
that the gardenlet deployment uses by default to talk to the Seed API server.&lt;/p>
&lt;blockquote>
&lt;p>If the gardenlet isn’t deployed in the seed cluster,
the gardenlet can be configured to use a &lt;code>kubeconfig&lt;/code>,
which also requires the above-mentioned privileges, from a mounted directory.
The &lt;code>kubeconfig&lt;/code> is specified in section &lt;code>seedClientConnection.kubeconfig&lt;/code>
of the &lt;a href="https://github.com/gardener/gardener/blob/master/example/20-componentconfig-gardenlet.yaml">Gardenlet configuration&lt;/a>.
This configuration option isn’t used in the following,
as this procedure only describes the recommended setup option
where the gardenlet is running in the seed cluster itself.&lt;/p>
&lt;/blockquote>
&lt;h2 id="procedure-overview">Procedure Overview&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Prepare the garden cluster:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#create-a-bootstrap-token-secret-in-the-kube-system-namespace-of-the-garden-cluster">Create a bootstrap token secret in the &lt;code>kube-system&lt;/code> namespace of the garden cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-rbac-roles-for-the-gardenlet-to-allow-bootstrapping-in-the-garden-cluster">Create RBAC roles for the gardenlet to allow bootstrapping in the garden cluster&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#prepare-the-gardenlet-helm-chart">Prepare the gardenlet Helm chart&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#automatically-register-shoot-cluster-as-a-seed-cluster">Automatically register shoot cluster as a seed cluster&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#deploy-the-gardenlet">Deploy the gardenlet&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#check-that-the-gardenlet-is-successfully-deployed">Check that the gardenlet is successfully deployed&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="create-a-bootstrap-token-secret-in-the-kube-system-namespace-of-the-garden-cluster">Create a bootstrap token secret in the &lt;code>kube-system&lt;/code> namespace of the garden cluster&lt;/h2>
&lt;p>The gardenlet needs to talk to the &lt;a href="https://gardener.cloud/docs/concepts/core-components/api-server">Gardener API server&lt;/a> residing in the garden cluster.&lt;/p>
&lt;p>The gardenlet can be configured with an already existing garden cluster &lt;code>kubeconfig&lt;/code> in one of the following ways:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Either by specifying &lt;code>gardenClientConnection.kubeconfig&lt;/code>
in the &lt;a href="https://github.com/gardener/gardener/blob/master/example/20-componentconfig-gardenlet.yaml">Gardenlet configuration&lt;/a> or&lt;/p>
&lt;/li>
&lt;li>
&lt;p>by supplying the environment variable &lt;code>GARDEN_KUBECONFIG&lt;/code> pointing to
a mounted &lt;code>kubeconfig&lt;/code> file).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The preferred way however, is to use the gardenlets ability to request
a signed certificate for the garden cluster by leveraging
&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/certificate-signing-requests/">Kubernetes Certificate Signing Requests&lt;/a>.
The gardenlet performs a TLS bootstrapping process that is similar to the
&lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-tls-bootstrapping/">Kubelet TLS Bootstrapping&lt;/a>.
Make sure that the API server of the garden cluster has
&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/#enabling-bootstrap-token-authentication">bootstrap token authentication&lt;/a>
enabled.&lt;/p>
&lt;p>The client credentials required for the gardenlets TLS bootstrapping process,
need to be either &lt;code>token&lt;/code> or &lt;code>certificate&lt;/code> (OIDC isn’t supported) and have permissions
to create a Certificate Signing Request (&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/certificate-signing-requests/">CSR&lt;/a>).
It’s recommended to use &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/">bootstrap tokens&lt;/a>
due to their desirable security properties (such as a limited token lifetime).&lt;/p>
&lt;p>Therefore, first create a bootstrap token secret for the garden cluster:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Name MUST be of form &amp;#34;bootstrap-token-&amp;lt;token id&amp;gt;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bootstrap-token-07401b&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kube-system&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># Type MUST be &amp;#39;bootstrap.kubernetes.io/token&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bootstrap.kubernetes.io/token&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">stringData&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Human readable description. Optional.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Token to be used by the gardenlet for Seed `sweet-seed`.&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Token ID and secret. Required.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">token-id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">07401b&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 6 characters&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">token-secret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">f395accd246ae52d&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 16 characters&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Expiration. Optional.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># expiration: 2017-03-10T03:22:11Z&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Allowed usages.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">usage-bootstrap-authentication&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">usage-bootstrap-signing&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you later prepare the gardenlet Helm chart,
a &lt;code>kubeconfig&lt;/code> based on this token is shared with the gardenlet upon deployment.&lt;/p>
&lt;h2 id="create-rbac-roles-for-the-gardenlet-to-allow-bootstrapping-in-the-garden-cluster">Create RBAC roles for the gardenlet to allow bootstrapping in the garden cluster&lt;/h2>
&lt;p>This step is only required if the gardenlet you deploy is the first gardenlet
in the Gardener installation.
Additionally, when using the &lt;a href="https://github.com/gardener/gardener/tree/master/charts/gardener/controlplane">control plane chart&lt;/a>,
the following resources are already contained in the Helm chart,
that is, if you use it you can skip these steps as the needed RBAC roles already exist.&lt;/p>
&lt;p>The gardenlet uses the configured bootstrap &lt;code>kubeconfig&lt;/code> in &lt;code>gardenClientConnection.bootstrapKubeconfig&lt;/code> to request a signed certificate for the user &lt;code>gardener.cloud:system:seed:&amp;lt;seed-name&amp;gt;&lt;/code> in the group &lt;code>gardener.cloud:system:seeds&lt;/code>.&lt;/p>
&lt;p>Create a &lt;code>ClusterRole&lt;/code> and &lt;code>ClusterRoleBinding&lt;/code> that grant full admin permissions to authenticated gardenlets.&lt;/p>
&lt;p>Create the following resources in the garden cluster:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRole&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardener.cloud:system:seeds&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">apiGroups&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">verbs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="s1">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRoleBinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardener.cloud:system:seeds&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">roleRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRole&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardener.cloud:system:seeds&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">subjects&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Group&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardener.cloud:system:seeds&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRole&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardener.cloud:system:seed-bootstrapper&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">apiGroups&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">certificates.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">certificatesigningrequests&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">verbs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">create&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">get&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">apiGroups&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">certificates.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">certificatesigningrequests/seedclient&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">verbs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">create&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># A kubelet/gardenlet authenticating using bootstrap tokens is authenticated as a user in the group system:bootstrappers&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># Allows the Gardenlet to create a CSR&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRoleBinding&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardener.cloud:system:seed-bootstrapper&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">roleRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ClusterRole&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardener.cloud:system:seed-bootstrapper&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">subjects&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Group&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">system:bootstrappers&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">rbac.authorization.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ℹ️ After bootstrapping, the gardenlet has full administrative access to the garden cluster.
You might be interested to harden this and limit its permissions to only resources related to the seed cluster it is responsible for.
Please take a look into &lt;a href="https://github.com/gardener/gardener/blob/master/docs/deployment/gardenlet_api_access.md">this document&lt;/a>.&lt;/p>
&lt;h2 id="prepare-the-gardenlet-helm-chart">Prepare the gardenlet Helm chart&lt;/h2>
&lt;p>This section only describes the minimal configuration,
using the global configuration values of the gardenlet Helm chart.
For an overview over all values, see the &lt;a href="https://github.com/gardener/gardener/blob/master/charts/gardener/gardenlet/values.yaml">configuration values&lt;/a>.
We refer to the global configuration values as &lt;em>gardenlet configuration&lt;/em> in the remaining procedure.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a gardenlet configuration &lt;code>gardenlet-values.yaml&lt;/code> based on &lt;a href="https://github.com/gardener/gardener/blob/master/charts/gardener/gardenlet/values.yaml">this template&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a bootstrap &lt;code>kubeconfig&lt;/code> based on the bootstrap token created in the garden cluster.&lt;/p>
&lt;p>Replace the &lt;code>&amp;lt;bootstrap-token&amp;gt;&lt;/code> with &lt;code>token-id.token-secret&lt;/code> (from our previous example: &lt;code>07401b.f395accd246ae52d&lt;/code>) from the bootstrap token secret.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">current-context&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-bootstrap@default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">clusters&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">cluster&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">certificate-authority-data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;ca-of-garden-cluster&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://&amp;lt;endpoint-of-garden-cluster&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">contexts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">context&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cluster&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-bootstrap&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-bootstrap@default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">users&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-bootstrap&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;bootstrap-token&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>In section &lt;code>gardenClientConnection.bootstrapKubeconfig&lt;/code> of your gardenlet configuration, provide the bootstrap &lt;code>kubeconfig&lt;/code> together with a name and namespace to the gardenlet Helm chart.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">gardenClientConnection&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">bootstrapKubeconfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-kubeconfig-bootstrap&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kubeconfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;bootstrap-kubeconfig&amp;gt; &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># will be base64 encoded by helm&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The bootstrap &lt;code>kubeconfig&lt;/code> is stored in the specified secret.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In section &lt;code>gardenClientConnection.kubeconfigSecret&lt;/code> of your gardenlet configuration,
define a name and a namespace where the gardenlet stores
the real &lt;code>kubeconfig&lt;/code> that it creates during the bootstrap process. If the secret doesn&amp;rsquo;t exist,
the gardenlet creates it for you.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">gardenClientConnection&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kubeconfigSecret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-kubeconfig&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="automatically-register-shoot-cluster-as-a-seed-cluster">Automatically register shoot cluster as a seed cluster&lt;/h2>
&lt;p>A seed cluster can either be registered by manually creating
the &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">&lt;code>Seed&lt;/code> resource&lt;/a>
or automatically by the gardenlet.
This functionality is useful for managed seed clusters,
as the gardenlet in the garden cluster deploys a copy of itself
into the cluster with automatic registration of the &lt;code>Seed&lt;/code> configured.
However, it can also be used to have a streamlined seed cluster registration process when manually deploying the gardenlet.&lt;/p>
&lt;blockquote>
&lt;p>This procedure doesn’t describe all the possible configurations
for the &lt;code>Seed&lt;/code> resource. For more information, see:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">Example Seed resource&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/docs/usage/seed_settings.md">Configurable Seed settings&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="adjust-the-gardenlet-component-configuration">Adjust the gardenlet component configuration&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Supply the &lt;code>Seed&lt;/code> resource in section &lt;code>seedConfig&lt;/code> of your gardenlet configuration &lt;code>gardenlet-values.yaml&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Add the &lt;code>seedConfig&lt;/code> to your gardenlet configuration &lt;code>gardenlet-values.yaml&lt;/code>.
The field &lt;code>seedConfig.spec.provider.type&lt;/code> specifies the infrastructure provider type (for example, &lt;code>aws&lt;/code>) of the seed cluster.
For all supported infrastructure providers, see &lt;a href="https://github.com/gardener/gardener/blob/master/extensions/README.md#known-extension-implementations">Known Extension Implementations&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nn">...&lt;/span>&lt;span class="l">.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">seedConfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sweet-seed&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dns&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ingressDomain&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ingress.sweet-seed.&amp;lt;my-domain&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># see prerequisites&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># see prerequisites&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10.240.0.0&lt;/span>&lt;span class="l">/16&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pods&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">100.244.0.0&lt;/span>&lt;span class="l">/16&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">100.32.0.0&lt;/span>&lt;span class="l">/13&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">shootDefaults: # optional&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">non-overlapping default CIDRs for shoot clusters of that Seed&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pods&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">100.96.0.0&lt;/span>&lt;span class="l">/11&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">100.64.0.0&lt;/span>&lt;span class="l">/13&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">region&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">eu-west-1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;provider&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="optional-enable-backup-and-restore">Optional: Enable backup and restore&lt;/h3>
&lt;p>The seed cluster can be set up with backup and restore
for the main &lt;code>etcds&lt;/code> of shoot clusters.&lt;/p>
&lt;p>Gardener uses &lt;a href="https://github.com/gardener/etcd-backup-restore">etcd-backup-restore&lt;/a>
that &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/doc/usage/getting_started.md#usage">integrates with different storage providers&lt;/a>
to store the shoot cluster&amp;rsquo;s main &lt;code>etcd&lt;/code> backups.
Make sure to obtain client credentials that have sufficient permissions with the chosen storage provider.&lt;/p>
&lt;p>Create a secret in the garden cluster with client credentials for the storage provider.
The format of the secret is cloud provider specific and can be found
in the repository of the respective Gardener extension.
For example, the secret for AWS S3 can be found in the AWS provider extension
(&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/blob/master/example/30-etcd-backup-secret.yaml">30-etcd-backup-secret.yaml&lt;/a>).&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sweet-seed-backup&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Opaque&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># client credentials format is provider specific&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Configure the &lt;code>Seed&lt;/code> resource in section &lt;code>seedConfig&lt;/code> of your gardenlet configuration to use backup and restore:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">seedConfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sweet-seed&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">backup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;provider&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sweet-seed-backup&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploy-the-gardenlet">Deploy the gardenlet&lt;/h2>
&lt;blockquote>
&lt;p>The gardenlet doesn’t have to run in the same Kubernetes cluster as the seed cluster
it’s registering and reconciling, but it is in most cases advantageous
to use in-cluster communication to talk to the Seed API server.
Running a gardenlet outside of the cluster is mostly used for local development.&lt;/p>
&lt;/blockquote>
&lt;p>The &lt;code>gardenlet-values.yaml&lt;/code> looks something like this
(with automatic Seed registration and backup for shoot clusters enabled):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">global&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Gardenlet configuration values&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gardenlet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;default config&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">config&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">gardenClientConnection&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">bootstrapKubeconfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-bootstrap-kubeconfig&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kubeconfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> apiVersion: v1
&lt;/span>&lt;span class="sd"> clusters:
&lt;/span>&lt;span class="sd"> - cluster:
&lt;/span>&lt;span class="sd"> certificate-authority-data: &amp;lt;dummy&amp;gt;
&lt;/span>&lt;span class="sd"> server: &amp;lt;my-garden-cluster-endpoint&amp;gt;
&lt;/span>&lt;span class="sd"> name: my-kubernetes-cluster
&lt;/span>&lt;span class="sd"> ....&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kubeconfigSecret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-kubeconfig&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;default config&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">seedConfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sweet-seed&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">dns&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ingressDomain&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ingress.sweet-seed.&amp;lt;my-domain&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">networks&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">nodes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10.240.0.0&lt;/span>&lt;span class="l">/16&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pods&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">100.244.0.0&lt;/span>&lt;span class="l">/16&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">100.32.0.0&lt;/span>&lt;span class="l">/13&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">shootDefaults&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">pods&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">100.96.0.0&lt;/span>&lt;span class="l">/11&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">100.64.0.0&lt;/span>&lt;span class="l">/13&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">region&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">eu-west-1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;provider&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">backup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;provider&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sweet-seed-backup&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Deploy the gardenlet Helm chart to the Kubernetes cluster.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">helm install gardenlet charts/gardener/gardenlet &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --namespace garden &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -f gardenlet-values.yaml &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --wait
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This helm chart creates:&lt;/p>
&lt;ul>
&lt;li>A service account &lt;code>gardenlet&lt;/code> that the gardenlet can use to talk to the Seed API server.&lt;/li>
&lt;li>RBAC roles for the service account (full admin rights at the moment).&lt;/li>
&lt;li>The secret (&lt;code>garden&lt;/code>/&lt;code>gardenlet-bootstrap-kubeconfig&lt;/code>) containing the bootstrap &lt;code>kubeconfig&lt;/code>.&lt;/li>
&lt;li>The gardenlet deployment in the &lt;code>garden&lt;/code> namespace.&lt;/li>
&lt;/ul>
&lt;h2 id="check-that-the-gardenlet-is-successfully-deployed">Check that the gardenlet is successfully deployed&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Check that the gardenlets certificate bootstrap was successful.&lt;/p>
&lt;p>Check if the secret &lt;code>gardenlet-kubeconfig&lt;/code> in the namespace &lt;code>garden&lt;/code> in the seed cluster
is created and contains a &lt;code>kubeconfig&lt;/code> with a valid certificate.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Get the &lt;code>kubeconfig&lt;/code> from the created secret.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubectl -n garden get secret gardenlet-kubeconfig -o json | jq -r .data.kubeconfig | base64 -d
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Test against the garden cluster and verify it’s working.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Extract the &lt;code>client-certificate-data&lt;/code> from the user &lt;code>gardenlet&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>View the certificate:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ openssl x509 -in ./gardenlet-cert -noout -text
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check that the certificate is valid for a year (that is the lifetime of new certificates).&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Check that the bootstrap secret &lt;code>gardenlet-bootstrap-kubeconfig&lt;/code> has been deleted from the seed cluster in namespace &lt;code>garden&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check that the seed cluster is registered and &lt;code>READY&lt;/code> in the garden cluster.&lt;/p>
&lt;p>Check that the seed cluster &lt;code>sweet-seed&lt;/code> exists and all conditions indicate that it’s available.
If so, the &lt;a href="https://github.com/gardener/gardener/blob/master/docs/concepts/gardenlet.md#heartbeats">Gardenlet is sending regular heartbeats&lt;/a> and the &lt;a href="https://github.com/gardener/gardener/blob/master/docs/usage/seed_bootstrapping.md">seed bootstrapping&lt;/a> was successful.&lt;/p>
&lt;p>Check that the conditions on the &lt;code>Seed&lt;/code> resource look similar to the following:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ kubectl get seed sweet-seed -o json &lt;span class="p">|&lt;/span> jq .status.conditions
&lt;span class="o">[&lt;/span>
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;lastTransitionTime&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;2020-07-17T09:17:29Z&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;lastUpdateTime&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;2020-07-17T09:17:29Z&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;message&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;Gardenlet is posting ready status.&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;reason&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;GardenletReady&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;status&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;type&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;GardenletReady&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;lastTransitionTime&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;2020-07-17T09:17:49Z&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;lastUpdateTime&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;2020-07-17T09:53:17Z&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;message&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;Seed cluster has been bootstrapped successfully.&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;reason&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;BootstrappingSucceeded&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;status&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;type&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;Bootstrapped&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>,
&lt;span class="o">{&lt;/span>
&lt;span class="s2">&amp;#34;lastTransitionTime&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;2020-07-17T09:17:49Z&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;lastUpdateTime&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;2020-07-17T09:53:17Z&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;message&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;Backup Buckets are available.&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;reason&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;BackupBucketsAvailable&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;status&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>,
&lt;span class="s2">&amp;#34;type&amp;#34;&lt;/span>: &lt;span class="s2">&amp;#34;BackupBucketsReady&amp;#34;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="related-links">Related Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/gardener/gardener/issues/1724">Issue #1724: Harden Gardenlet RBAC privileges&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://gardener.cloud/docs/concepts/backup-restore/backup-restore">Backup and Restore&lt;/a>.&lt;/p></description></item><item><title>Docs: Deploying Gardenlets</title><link>https://gardener.cloud/docs/concepts/deployment/deploy_gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/deployment/deploy_gardenlet/</guid><description>
&lt;h1 id="deploying-gardenlets">Deploying Gardenlets&lt;/h1>
&lt;p>Gardenlets act as decentral &amp;ldquo;agents&amp;rdquo; to manage shoot clusters of a seed cluster.&lt;/p>
&lt;p>To support scaleability in an automated way, gardenlets are deployed automatically. However, you can still deploy gardenlets manually to be more flexible, for example, when shoot clusters that need to be managed by Gardener are behind a firewall. The gardenlet only requires network connectivity from the gardenlet to the Garden cluster (not the other way round), so it can be used to register Kubernetes clusters with no public endpoint.&lt;/p>
&lt;h2 id="procedure">Procedure&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>First, an initial gardenlet needs to be deployed:&lt;/p>
&lt;ul>
&lt;li>Deploy it manually if you have special requirements. More information: &lt;a href="https://gardener.cloud/docs/concepts/deployment/deploy_gardenlet_manually">Deploy a Gardenlet Manually&lt;/a>&lt;/li>
&lt;li>Let the Gardener installer deploy it automatically otherwise. More information: &lt;a href="https://gardener.cloud/docs/concepts/deployment/deploy_gardenlet_automatically">Automatic Deployment of Gardenlets&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>To add additional seed clusters, it is recommended to use regular shoot clusters. You can do this by creating a &lt;code>ManagedSeed&lt;/code> resource with a &lt;code>gardenlet&lt;/code> section as described in &lt;a href="https://github.com/gardener/gardener/blob/master/docs/usage/managed_seed.md">Register Shoot as Seed&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs: Deploying the Gardener into a Kubernetes cluster</title><link>https://gardener.cloud/docs/concepts/deployment/setup_gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/deployment/setup_gardener/</guid><description>
&lt;h1 id="deploying-the-gardener-into-a-kubernetes-cluster">Deploying the Gardener into a Kubernetes cluster&lt;/h1>
&lt;p>Similar to Kubernetes, Gardener consists out of control plane components (Gardener API server, Gardener controller manager, Gardener scheduler), and an agent component (Gardenlet).
The control plane is deployed in the so-called garden cluster while the agent is installed into every seed cluster.
Please note that it is possible to use the garden cluster as seed cluster by simply deploying the Gardenlet into it.&lt;/p>
&lt;p>We are providing &lt;a href="https://github.com/gardener/gardener/tree/master/charts/gardener">Helm charts&lt;/a> in order to manage the various resources of the components.
Please always make sure that you use the Helm chart version that matches the Gardener version you want to deploy.&lt;/p>
&lt;h2 id="deploying-the-gardener-control-plane-api-server-admission-controller-controller-manager-scheduler">Deploying the Gardener control plane (API server, admission controller, controller manager, scheduler)&lt;/h2>
&lt;p>The &lt;a href="https://github.com/gardener/gardener/blob/master/charts/gardener/controlplane/values.yaml">configuration values&lt;/a> depict the various options to configure the different components.
Please consult &lt;a href="https://github.com/gardener/gardener/blob/master/docs/usage/configuration.md">this document&lt;/a> to get a detailed explanation of what can be configured for which component.&lt;/p>
&lt;p>Also note that all resources and deployments need to be created in the &lt;code>garden&lt;/code> namespace (not overrideable).
If you enable the Gardener admission controller as part of you setup, please make sure the &lt;code>garden&lt;/code> namespace is labelled with &lt;code>app: gardener&lt;/code>.
Otherwise, the backing service account for the admission controller Pod might not be created successfully.
No action is necessary, if you deploy the &lt;code>garden&lt;/code> namespace with the Gardener control plane Helm chart.&lt;/p>
&lt;p>After preparing your values in a separate &lt;code>controlplane-values.yaml&lt;/code> file (&lt;a href="https://github.com/gardener/gardener/blob/master/charts/gardener/controlplane/values.yaml">values.yaml&lt;/a> can be used as starting point), you can run the following command against your garden cluster:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">helm install charts/gardener/controlplane &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --namespace garden &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --name gardener-controlplane &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -f controlplane-values.yaml &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --wait
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploying-gardener-extensions">Deploying Gardener extensions&lt;/h2>
&lt;p>Gardener is an extensible system that does not contain the logic for provider-specific things like DNS management, cloud infrastructures, network plugins, operating system configs, and many more.&lt;/p>
&lt;p>You have to install extension controllers for these parts.
Please consult &lt;a href="https://gardener.cloud/docs/concepts/extensions">the documentation regarding extensions&lt;/a> to get more information.&lt;/p>
&lt;h2 id="deploying-the-gardener-agent-gardenlet">Deploying the Gardener agent (Gardenlet)&lt;/h2>
&lt;p>Please refer to &lt;a href="https://gardener.cloud/docs/concepts/deployment/deploy_gardenlet">this document&lt;/a> on how to deploy a Gardenlet.&lt;/p></description></item><item><title>Docs: Deploying the previous Gardener versions and a Seed into an AKS cluster</title><link>https://gardener.cloud/docs/concepts/deployment/aks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/deployment/aks/</guid><description>
&lt;h1 id="deploying-the-previous-gardener-versions-and-a-seed-into-an-aks-cluster">Deploying the previous Gardener versions and a Seed into an AKS cluster&lt;/h1>
&lt;p>This document demonstrates how to install Gardener into an existing
AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the
same cluster for the sake of simplicity .&lt;/p>
&lt;p>Please note that this document is to provide you an example
installation and is not to be used in a production environment since
there are some certificates hardcoded, non-HA and non-TLS-enabled etcd
setup.&lt;/p>
&lt;h1 id="high-level-overview">High Level Overview&lt;/h1>
&lt;p>In this example we&amp;rsquo;ll follow these steps to create a Seed cluster on AKS:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#deploying-the-gardener-and-a-seed-into-an-aks-cluster">Deploying the Gardener and a Seed into an AKS cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="#high-level-overview">High Level Overview&lt;/a>&lt;/li>
&lt;li>&lt;a href="#prerequisites">Prerequisites&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#aws-credentials-for-route-53-hosted-zone">AWS credentials for Route 53 Hosted Zone&lt;/a>&lt;/li>
&lt;li>&lt;a href="#deploy-aks-cluster">Deploy AKS cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#initialize-helm-on-the-cluster">Initialize Helm on the Cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="#deploy-stablenginx-ingress-chart-to-aks">Deploy stable/nginx-ingress chart to AKS&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-wildcard-dns-record-for-the-ingress">Create wildcard DNS record for the ingress&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#create-azure-service-principle-to-get-azure-credentials">Create Azure Service Principle to get Azure credentials&lt;/a>&lt;/li>
&lt;li>&lt;a href="#install-gardenctl">Install gardenctl&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#install-gardener">Install Gardener&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#create-garden-namespace">Create garden namespace&lt;/a>&lt;/li>
&lt;li>&lt;a href="#deploy-etcd">Deploy etcd&lt;/a>&lt;/li>
&lt;li>&lt;a href="#deploy-gardener-helm-chart">Deploy Gardener Helm Chart&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#create-a-cloudprofile">Create a CloudProfile&lt;/a>&lt;/li>
&lt;li>&lt;a href="#define-seed-cluster-in-gardener">Define Seed cluster in Gardener&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#create-the-seed-resource-definition-with-its-secret">Create the Seed resource definition with its Secret&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#create-a-shoot-cluster">Create a Shoot cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#create-a-project-namespace-for-shoots">Create a Project (namespace) for Shoots&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-a-secretbinding-and-related-secret">Create a SecretBinding and related Secret&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-the-shoot-resource">Create the Shoot resource&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#cluster-resources-after-shoot-is-created">Cluster Resources After Shoot is Created&lt;/a>&lt;/li>
&lt;li>&lt;a href="#troubleshooting-shoot-creation-issues">Troubleshooting Shoot Creation Issues&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#access-shoot-cluster">Access Shoot cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="#delete-shoot-cluster">Delete Shoot cluster&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="prerequisites">Prerequisites&lt;/h1>
&lt;p>Summary of prerequisites:&lt;/p>
&lt;ul>
&lt;li>An Azure AKS cluster with:
&lt;ul>
&lt;li>Helm initialized,&lt;/li>
&lt;li>an ingress controller deployed,&lt;/li>
&lt;li>a wildcard DNS record pointing the ingress,&lt;/li>
&lt;li>&lt;code>az&lt;/code> command line client configured for Azure subscription,&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>An Azure service principle to provide Azure credentials to Gardener,&lt;/li>
&lt;li>A Route53 Hosted Zone and AWS account credentials with permissions on that Route53 Zone,
&lt;ul>
&lt;li>&lt;code>aws&lt;/code> command line client configured for this account,&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>gardenctl&lt;/code> command line client configured for the AKS cluster&amp;rsquo;s kubeconfig&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>: Gardener doesn&amp;rsquo;t have support for Azure DNS yet (see
&lt;a href="https://github.com/gardener/gardener/issues/494">#494&lt;/a>). So, we use a Route53 Hosted Zone
even if we are deploying on Azure.&lt;/p>
&lt;h2 id="aws-credentials-for-route-53-hosted-zone">AWS credentials for Route 53 Hosted Zone&lt;/h2>
&lt;p>You need to provide credentials for AWS with permission to access Route53
Hosted Zone. In this example we&amp;rsquo;ll assume your domain for the Hosted
Zone is &lt;code>.your.domain.here&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">HOSTED_ZONE_ID= # place your AWS Route53 hostedZoneID here
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create an AWS user, define policy to allow permission for the Hosted
Zone and note the &lt;code>hostedZoneID&lt;/code>, &lt;code>accessKeyID&lt;/code> and &lt;code>secretAccessKey&lt;/code>
for later use.&lt;/p>
&lt;h2 id="deploy-aks-cluster">Deploy AKS cluster&lt;/h2>
&lt;p>Here you can find a summary for creating an AKS cluster, if you already
have one, skip this step.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">az group create --name garden-1 --location eastus
az aks create --resource-group garden-1 --name garden-1 \
--kubernetes-version 1.11.5 \
--node-count 2 --node-vm-size Standard_DS4_v2 \
--generate-ssh-keys
az aks get-credentials --resource-group garden-1 --name garden-1 --admin
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="initialize-helm-on-the-cluster">Initialize Helm on the Cluster&lt;/h3>
&lt;p>Since RBAC is enabled by default we need to deploy helm with an RBAC config.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f https://raw.githubusercontent.com/Azure/helm-charts/master/docs/prerequisities/helm-rbac-config.yaml
helm init --service-account tiller
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="deploy-stablenginx-ingress-chart-to-aks">Deploy stable/nginx-ingress chart to AKS&lt;/h3>
&lt;p>At the moment the &lt;code>Ingress&lt;/code> resources created by the Gardener are
expecting the nginx-ingress style annotations to work.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">helm upgrade --install \
--namespace kube-system \
nginx-ingress stable/nginx-ingress
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="create-wildcard-dns-record-for-the-ingress">Create wildcard DNS record for the ingress&lt;/h3>
&lt;p>You need to pick a wildcard subdomain matching your Route53 Hosted
Zone here. This ingress wildcard record is supposed to be part of the Seed
cluster rather than Gardener cluster, in our example we&amp;rsquo;ll use
&lt;code>*.seed-1.your.domain.here&lt;/code>.&lt;/p>
&lt;p>Assuming you have the AWS cli for your Route53 Hosted Zone is
configured on your local, here we&amp;rsquo;ll create the wildcard DNS record
using the &lt;a href="https://github.com/wallix/awless#readme">&lt;code>awless&lt;/code>&lt;/a>. You can also use the AWS
console or any other tool of your choice to create the wildcard
record:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">HOSTED_ZONE_DOMAIN=$(aws route53 get-hosted-zone --id /hostedzone/${HOSTED_ZONE_ID:?&amp;#34;HOSTED_ZONE_ID is missing&amp;#34;} --query &amp;#39;HostedZone.Name&amp;#39; --output text)
INGRESS_DOMAIN=&amp;#34;seed-1.${HOSTED_ZONE_DOMAIN%%.}&amp;#34;
# Get LB IP address from `kubectl -n kube-system get svc shared-ingress-nginx-ingress-controller`
LB_IP=$(kubectl -n kube-system get svc nginx-ingress-controller --template &amp;#39;{{(index .status.loadBalancer.ingress 0).ip}}&amp;#39;)
awless create record \
zone=$HOSTED_ZONE_ID \
name=&amp;#34;*.$INGRESS_DOMAIN&amp;#34; \
value=$LB_IP \
type=A \
ttl=300
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-azure-service-principle-to-get-azure-credentials">Create Azure Service Principle to get Azure credentials&lt;/h2>
&lt;p>We need &lt;code>client_id&lt;/code> and &lt;code>client_secret&lt;/code> to allow Gardener to reach
Azure services, we can generate a pair by creating a Service Principle
on Azure:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ az ad sp create-for-rbac --role=&amp;#34;Contributor&amp;#34;
Retrying role assignment creation: 1/36
{
&amp;#34;appId&amp;#34;: &amp;#34;xxxxxx-xxx-xxxx-xxx-xxxxx&amp;#34;, #az_client_id
&amp;#34;displayName&amp;#34;: &amp;#34;azure-cli-2018-05-23-16-15-49&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;http://azure-cli-2018-05-23-16-15-49&amp;#34;,
&amp;#34;password&amp;#34;: &amp;#34;xxxxxx-xxx-xxxx-xxx-xxxxx&amp;#34;, #az_client_secret
&amp;#34;tenant&amp;#34;: &amp;#34;xxxxxx-xxx-xxxx-xxx-xxxxx&amp;#34; #az_tenant_id
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s define some env variables for later use&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">CLIENT_ID= # place your Azure Service Principal appId
CLIENT_SECRET= # place your Azure Service Principal password here
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="install-gardenctl">Install gardenctl&lt;/h2>
&lt;p>In this example we&amp;rsquo;ll be using &lt;code>gardenctl&lt;/code> to interact with
Gardener. You can install &lt;code>gardenctl&lt;/code> following instruction in its
repo: &lt;a href="https://github.com/gardener/gardenctl">https://github.com/gardener/gardenctl&lt;/a>&lt;/p>
&lt;p>Here is a sample configuration for gardenctl:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ cat ~/.garden/config
gardenClusters:
- name: dev
kubeConfig: ~/.kube/config
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="install-gardener">Install Gardener&lt;/h1>
&lt;h2 id="create-garden-namespace">Create garden namespace&lt;/h2>
&lt;p>This is where we deploy Gardener components.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/00-namespace-garden.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploy-etcd">Deploy etcd&lt;/h2>
&lt;p>Since Gardener is an extension API Server, it can share the etcd
backing native Kubernetes cluster&amp;rsquo;s API Server, and hence explicit etcd
installation is optional. But in our case we have no access to the
control plane components of the AKS cluster and we have to deploy our
own etcd ourselves for Gardener. Lets deploy an etcd using the
&lt;a href="https://github.com/gardener/etcd-backup-restore">gardener/etcd-backup-restore&lt;/a>
project, which is also used by the Gardener for Shoot control plane.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># pull the etcd-backup-restore
git clone https://github.com/gardener/etcd-backup-restore.git
# deploy etcd
helm upgrade --install \
--namespace garden \
etcd etcd-backup-restore/chart \
--set tls=
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: This etcd installation doesn&amp;rsquo;t provide HA. But etcd will be
auto recovered by the Deployment. This could be sufficient for some
deployments but may not be suitable for production usage. Also note
that this etcd is not deployed with TLS enabled and doesn&amp;rsquo;t use
certificates for authentication.&lt;/p>
&lt;p>Check etcd pod&amp;rsquo;s health, it should have &lt;code>READY:2/2&lt;/code> and &lt;code>STATUS:Running&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubectl -n garden get pods
NAME READY STATUS RESTARTS AGE
etcd-for-test-0 2/2 Running 0 1m
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploy-gardener-helm-chart">Deploy Gardener Helm Chart&lt;/h2>
&lt;p>Check &lt;a href="https://github.com/gardener/gardener/releases">current releases&lt;/a> and
pick a suitable one to install.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">GARDENER_RELEASE=0.17.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>gardener-controller-manager will need to maintain some DNS records for Seed.
So, you need to provide Route53 credentials in the values.yaml file:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>global.controller.internalDomain.hostedZoneID&lt;/strong>&lt;/li>
&lt;li>&lt;strong>global.controller.internalDomain.domain&lt;/strong>: Here pick a subdomain for your
Gardener to maintain DNS records for your Shoot clusters. This domain has
to be within your Route53 Hosted Zone. e.g. &lt;code>garden-1.your.domain.here&lt;/code>&lt;/li>
&lt;li>&lt;strong>global.controller.internalDomain.credentials&lt;/strong>&lt;/li>
&lt;li>&lt;strong>global.controller.internalDomain.secretAccessKey&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">HOSTED_ZONE_DOMAIN=$(
aws route53 get-hosted-zone \
--id /hostedzone/${HOSTED_ZONE_ID:?&amp;#34;HOSTED_ZONE_ID is missing&amp;#34;} \
--query &amp;#39;HostedZone.Name&amp;#39; \
--output text)
HOSTED_ZONE_DOMAIN=${HOSTED_ZONE_DOMAIN%%.}
GARDENER_DOMAIN=&amp;#34;garden-1.${HOSTED_ZONE_DOMAIN}&amp;#34;
ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
cat &amp;lt;&amp;lt;EOF &amp;gt; gardener-values.yaml
global:
apiserver:
image:
tag: ${GARDENER_RELEASE:?&amp;#34;GARDENER_RELEASE is missing&amp;#34;}
etcd:
servers: http://etcd-for-test-client:2379
useSidecar: false
controller:
image:
tag: ${GARDENER_RELEASE:?&amp;#34;GARDENER_RELEASE is missing&amp;#34;}
internalDomain:
provider: aws-route53
hostedZoneID: ${HOSTED_ZONE_ID}
domain: ${HOSTED_ZONE_DOMAIN}
credentials:
AWS_ACCESS_KEY_ID: ${ACCESS_KEY_ID}
AWS_SECRET_ACCESS_KEY: ${SECRET_ACCESS_KEY}
EOF
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After creating the &lt;code>gardener-values.yaml&lt;/code> file, since chart definition in
master branch can have breaking changes after the release, checkout the
gardener tag for that release, and run:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">git checkout ${GARDENER_RELEASE:?&amp;#34;GARDENER_RELEASE is missing&amp;#34;}
helm upgrade --install \
--namespace garden \
garden charts/gardener \
-f charts/gardener/local-values.yaml \
-f gardener-values.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Validate the Gardener is deployed:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">helm status garden # Wait for `STATUS: DEPLOYED`
kubectl -n garden get deploy,pod -l app=gardener
# Better if you leave two terminals open in for below commands, and
# keep an eye on whats going on behind the scenes as you create/delete
# Gardener specific resources (Seed, CloudProfile, SecretBinding, Shoot).
kubectl -n garden logs -f deployment/gardener-apiserver # confirm no issues
kubectl -n garden logs -f deployment/gardener-controller-manager # confirm no issues, except some &amp;#34;Failed to list *v1beta1...&amp;#34; messages
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: This is not meant to be used in production. You may not want
to use &lt;code>apiserver.insecureSkipTLSVerify=true&lt;/code>, the hardcoded apiserver
certificates, and insecure (non-tls enabled) etcd. But for the sake of
keeping this example simple you can just keep those values as they
are.&lt;/p>
&lt;h1 id="create-a-cloudprofile">Create a CloudProfile&lt;/h1>
&lt;p>We need to create a CloudProfile to be referred from the Shoot
(&lt;a href="https://github.com/gardener/gardener/blob/master/example/30-cloudprofile-azure.yaml">&lt;code>example/30-cloudprofile-azure.yaml&lt;/code>&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/30-cloudprofile-azure.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Validate that CloudProfile is created:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl describe -f example/30-cloudprofile-azure.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="define-seed-cluster-in-gardener">Define Seed cluster in Gardener&lt;/h1>
&lt;p>In our setup we&amp;rsquo;ll use the cluster for Gardener also as a Seed, this
saves us from creating a new Kubernetes cluster. But you can also
create an explicit cluster for the Seed. Seed cluster can also be
placed into any other cloud provider or on prem. But keep in mind that
below steps may differ if you use a different cluster for seed.&lt;/p>
&lt;p>Currently, a Seed cluster is just a Kubeconfig for the Gardener. The
seed cluster could have been created by any tool, Gardener only cares
about having a valid Kubeconfig to talk to its API.&lt;/p>
&lt;h2 id="create-the-seed-resource-definition-with-its-secret">Create the Seed resource definition with its Secret&lt;/h2>
&lt;p>Lets start with the required seed secret first. Here we need to
provide it&amp;rsquo;s cloud provider credentials and kubeconfig in the seed
secret. Update
&lt;a href="https://github.com/gardener/gardener/blob/master/example/40-secret-seed-azure.yaml">&lt;code>example/40-secret-seed-azure.yaml&lt;/code>&lt;/a>
and place the secrets for your environment:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>data.subscriptionID&lt;/strong>: you can learn this one with &lt;code>az account show&lt;/code>&lt;/li>
&lt;li>&lt;strong>data.tenantID&lt;/strong>: from &lt;code>az ad sp create-for-rbac&lt;/code> output as you can see above&lt;/li>
&lt;li>&lt;strong>data.clientID&lt;/strong>: from &lt;code>az ad sp create-for-rbac&lt;/code> output as you can see above&lt;/li>
&lt;li>&lt;strong>data.clientSecret&lt;/strong>: from &lt;code>az ad sp create-for-rbac&lt;/code> output as you can see above&lt;/li>
&lt;li>&lt;strong>data.kubeconfig&lt;/strong>: you can get this one with &lt;code>az aks get-credentials --resource-group garden-1 --name garden-1 -f - | base64&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>: All of the above values must be base64 encoded. If you skip this it will hurt you later.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">SUBSCRIPTION_ID=$(az account list -o json | jq -r &amp;#39;.[] | select(.isDefault == true) | .id&amp;#39;)
TENANT_ID=$(az account show -o tsv --query &amp;#39;tenantId&amp;#39;)
KUBECONFIG_FOR_SEED_CLUSTER=$(az aks get-credentials --resource-group garden-1 --name garden-1 -f -)
sed -i \
-e &amp;#34;s@base64(uuid-of-subscription)@$(echo $SUBSCRIPTION_ID | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(uuid-of-tenant)@$(echo &amp;#34;$TENANT_ID&amp;#34; | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(uuid-of-client)@$(echo &amp;#34;${CLIENT_ID:?&amp;#34;CLIENT_ID is missing&amp;#34;}&amp;#34; | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(client-secret)@$(echo &amp;#34;${CLIENT_SECRET:?&amp;#34;CLIENT_SECRET is missing&amp;#34;}&amp;#34; | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(kubeconfig-for-seed-cluster)@$(echo &amp;#34;$KUBECONFIG_FOR_SEED_CLUSTER&amp;#34; | base64 -w 0)@&amp;#34; \
example/40-secret-seed-azure.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After updating the fields, create the Seed secret:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/40-secret-seed-azure.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before creating Seed, we need to update the
&lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed-azure.yaml">&lt;code>example/50-seed-azure.yaml&lt;/code>&lt;/a> file and
update:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>spec.networks&lt;/strong>: IP ranges used in your AKS cluster.&lt;/li>
&lt;li>&lt;strong>spec.ingressDomain&lt;/strong>: Place here the wildcard domain you have for
the ingress controller (we created this record in prerequisites).
Gardener doesn&amp;rsquo;t create this DNS records but assumes its created
ahead of time, Seed clusters are not provisioned by Gardener.&lt;/li>
&lt;li>&lt;strong>spec.cloud.region&lt;/strong>: &lt;code>eastus&lt;/code> (the region of the existing AKS cluster)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">HOSTED_ZONE_DOMAIN=$(aws route53 get-hosted-zone --id /hostedzone/${HOSTED_ZONE_ID:?&amp;#34;HOSTED_ZONE_ID is missing&amp;#34;} --query &amp;#39;HostedZone.Name&amp;#39; --output text)
INGRESS_DOMAIN=&amp;#34;seed-1.${HOSTED_ZONE_DOMAIN%%.}&amp;#34;
# discover AKS CIDRs
NODE_CIDR=$(az network vnet list -g MC_garden-1_garden-1_eastus -o json | jq -r &amp;#39;.[] | .subnets[] | .addressPrefix&amp;#39;)
POD_CIDR=$(kubectl -n kube-system get daemonset/kube-proxy -o yaml | grep cluster-cidr= | grep -v annotations | cut -d = -f2)
SERVICE_CIDR=10.0.0.0/16 # This one is hardcoded for now, not easy to discover
sed -i \
-e &amp;#34;s/ingressDomain: dev.azure.seed.example.com/ingressDomain: $INGRESS_DOMAIN/&amp;#34; \
-e &amp;#34;s/region: westeurope/region: eastus/&amp;#34; \
-e &amp;#34;s@nodes: 10.240.0.0/16@nodes: $NODE_CIDR@&amp;#34; \
-e &amp;#34;s@pods: 10.241.128.0/17@pods: $POD_CIDR@&amp;#34; \
-e &amp;#34;s@services: 10.241.0.0/17@services: $SERVICE_CIDR@&amp;#34; \
example/50-seed-azure.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we are ready to create the seed:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/50-seed-azure.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check the logs in gardener-controller-manager and also wait for seed
to be &lt;code>Ready: True&lt;/code>. This means gardener-controller-manager is able to
reach the Seed cluster with the credentials you provide.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ gardenctl target garden dev
KUBECONFIG=/Users/user/.kube/config
$ kubectl get seed azure
NAME CLOUDPROFILE REGION INGRESS DOMAIN AVAILABLE AGE
azure azure eastus seed-1.your.domain.here True 1m
$ gardenctl ls seeds
seeds:
- seed: azure
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If something goes wrong verify that you provided right credentials,
and base64 encoded strings of those in the secret. Also check the
status field in the Seed resource and gardener-controller-manager
logs:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubectl get seed azure -o json | jq .status
{
&amp;#34;conditions&amp;#34;: [
{
&amp;#34;lastTransitionTime&amp;#34;: &amp;#34;2018-05-31T14:56:49Z&amp;#34;,
&amp;#34;message&amp;#34;: &amp;#34;all checks passed&amp;#34;,
&amp;#34;reason&amp;#34;: &amp;#34;Passed&amp;#34;,
&amp;#34;status&amp;#34;: &amp;#34;True&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;Available&amp;#34;
}
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="create-a-shoot-cluster">Create a Shoot cluster&lt;/h1>
&lt;h2 id="create-a-project-namespace-for-shoots">Create a Project (namespace) for Shoots&lt;/h2>
&lt;p>In this step we create a namespace in Gardener cluster to keep Shoot
resource definitions. A &lt;code>project&lt;/code> in Gardener terminology is simply a
namespace that holds group of Shoots, during this example we&amp;rsquo;ll deploy
a single Shoot. (Mind the extra labels defined in
&lt;a href="https://github.com/gardener/gardener/blob/master/example/00-namespace-garden-dev.yaml">example/00-namespace-garden-dev.yaml&lt;/a>).&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/05-project-dev.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can check the projects via &lt;code>gardenctl&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ gardenctl target garden dev
$ kubectl get project dev
NAME NAMESPACE STATUS OWNER CREATOR AGE
dev garden-dev Ready john.doe@example.com client 1m
$ kubectl get ns garden-dev
NAME STATUS AGE
garden-dev Active 1m
$ gardenctl ls projects
projects:
- project: garden-dev
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-a-secretbinding-and-related-secret">Create a SecretBinding and related Secret&lt;/h2>
&lt;p>We&amp;rsquo;ll use same Azure credentials with
&lt;a href="https://github.com/gardener/gardener/blob/master/example/40-secret-seed-azure.yaml">&lt;code>example/40-secret-seed-azure.yaml&lt;/code>&lt;/a>,
this is due to the fact that we use the same Azure Subscription for
the Shoot and Seed clusters. Differently from the Seed secret, in this
one we don&amp;rsquo;t need to provide &lt;code>kubeconfig&lt;/code> since the Shoot cluster will
be provisioned by Gardener, and we need to provide credentials for
Route53 DNS records management.&lt;/p>
&lt;p>Update
&lt;a href="https://github.com/gardener/gardener/blob/master/example/70-secret-cloudprovider-azure.yaml">&lt;code>example/70-secret-cloudprovider-azure.yaml&lt;/code>&lt;/a>
and place the secrets for your environment:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>data.subscriptionID&lt;/strong>: you can learn this one with &lt;code>az account show&lt;/code>&lt;/li>
&lt;li>&lt;strong>data.tenantID&lt;/strong>: from &lt;code>az ad sp create-for-rbac&lt;/code> output as you can see above&lt;/li>
&lt;li>&lt;strong>data.clientID&lt;/strong>: from &lt;code>az ad sp create-for-rbac&lt;/code> output as you can see above&lt;/li>
&lt;li>&lt;strong>data.clientSecret&lt;/strong>: from &lt;code>az ad sp create-for-rbac&lt;/code> output as you can see above&lt;/li>
&lt;li>&lt;strong>data.accessKeyID&lt;/strong>: You need to add this field for Route53 records to be updated.&lt;/li>
&lt;li>&lt;strong>data.secretAccessKey&lt;/strong>: You need to add this field for Route53 records to be updated.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>: All of the above values must be base64 encoded. If you skip this it will hurt you later.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">SUBSCRIPTION_ID=$(az account list -o json | jq -r &amp;#39;.[] | select(.isDefault == true) | .id&amp;#39;)
TENANT_ID=$(az account show -o tsv --query &amp;#39;tenantId&amp;#39;)
ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
sed -i \
-e &amp;#34;s@base64(uuid-of-subscription)@$(echo $SUBSCRIPTION_ID | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(uuid-of-tenant)@$(echo &amp;#34;$TENANT_ID&amp;#34; | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(uuid-of-client)@$(echo &amp;#34;${CLIENT_ID:?&amp;#34;CLIENT_ID is missing&amp;#34;}&amp;#34; | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(client-secret)@$(echo &amp;#34;${CLIENT_SECRET:?&amp;#34;CLIENT_SECRET is missing&amp;#34;}&amp;#34; | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;\$a\ \ accessKeyID: $(echo $ACCESS_KEY_ID | tr -d &amp;#39;\n&amp;#39; | base64 )&amp;#34; \
-e &amp;#34;\$a\ \ secretAccessKey: $(echo $SECRET_ACCESS_KEY | tr -d &amp;#39;\n&amp;#39; | base64 )&amp;#34; \
example/70-secret-cloudprovider-azure.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After updating the fields, create the cloud provider secret:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/70-secret-cloudprovider-azure.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And create the SecretBinding resource to allow Gardener use that
secret
(&lt;a href="https://github.com/gardener/gardener/blob/master/example/80-secretbinding-cloudprovider-azure.yaml">&lt;code>example/80-secretbinding-cloudprovider-azure.yaml&lt;/code>&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">sed -i \
-e &amp;#39;s/# namespace: .*/ namespace: garden-dev/&amp;#39; \
example/80-secretbinding-cloudprovider-azure.yaml
kubectl apply -f example/80-secretbinding-cloudprovider-azure.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check the logs in gardener-controller-manager, there should not be any
problems reported.&lt;/p>
&lt;h2 id="create-the-shoot-resource">Create the Shoot resource&lt;/h2>
&lt;p>Update the fields in &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-deprecated-shoot-azure.yaml">&lt;code>example/90-deprecated-shoot-azure.yaml&lt;/code>&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>spec.cloud.region&lt;/strong>: &lt;code>eastus&lt;/code> (this must match the seed cluster&amp;rsquo;s region)&lt;/li>
&lt;li>&lt;strong>spec.dns.domain&lt;/strong>: This is used to specify the base domain for
your api (and other in the future) endpoint(s). For example when
&lt;code>johndoe-azure.garden-dev.your.domain.here&lt;/code> is used as a value, then your
apiserver is available at &lt;code>api.johndoe-azure.garden-dev.your.domain.here&lt;/code>&lt;/li>
&lt;li>&lt;strong>spec.dns.hostedZoneID&lt;/strong>: This field doesn&amp;rsquo;t exist in the example
you need to add this field and place the Route53 Hosted Zone ID.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">HOSTED_ZONE_DOMAIN=$(aws route53 get-hosted-zone --id /hostedzone/${HOSTED_ZONE_ID:?&amp;#34;HOSTED_ZONE_ID is missing&amp;#34;} --query &amp;#39;HostedZone.Name&amp;#39; --output text)
SHOOT_DOMAIN=&amp;#34;johndoe-azure.garden-dev.${HOSTED_ZONE_DOMAIN%%.}&amp;#34;
KUBE_LEGO_EMAIL=$(git config user.email)
sed -i \
-e &amp;#34;s/region: westeurope/region: eastus/&amp;#34; \
-e &amp;#34;s/domain: johndoe-azure.garden-dev.example.com/domain: $SHOOT_DOMAIN/&amp;#34; \
-e &amp;#34;/domain:/a\ \ \ \ hostedZoneID: $HOSTED_ZONE_ID&amp;#34; \
-e &amp;#34;s/email: john.doe@example.com/email: $KUBE_LEGO_EMAIL/&amp;#34; \
example/90-deprecated-shoot-azure.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And let&amp;rsquo;s create the Shoot resource:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/90-deprecated-shoot-azure.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After creating the Shoot resource, gardener-controller-manager will
pick it up and start provisioning the Shoot cluster.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubectl get -f example/90-deprecated-shoot-azure.yaml
NAME CLOUDPROFILE VERSION SEED DOMAIN OPERATION PROGRESS APISERVER CONTROL NODES SYSTEM AGE
johndoe-azure azure 1.12.3 azure johndoe-azure.garden-dev.your.domain.here Processing 15 &amp;lt;unknown&amp;gt; &amp;lt;unknown&amp;gt; &amp;lt;unknown&amp;gt; &amp;lt;unknown&amp;gt; 16s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Follow the logs in your console with gardener-controller-manager,
starting like below you&amp;rsquo;ll see plenty of &lt;code>Waiting&lt;/code> and &lt;code>Executing&lt;/code>,
etc. logs and many tasks will keep repeating:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">time=&amp;#34;2018-06-09T07:35:45Z&amp;#34; level=info msg=&amp;#34;[SHOOT RECONCILE] garden-dev/johndoe-azure&amp;#34;
time=&amp;#34;2018-06-09T07:35:46Z&amp;#34; level=info msg=&amp;#34;Starting flow Shoot cluster creation&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:46Z&amp;#34; level=info msg=&amp;#34;Executing (*Botanist).botanist.Shoot.Components.DNS.External{Provider/Entry}.Deploy&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:46Z&amp;#34; level=info msg=&amp;#34;Executing (*Botanist).DeployNamespace&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:46Z&amp;#34; level=info msg=&amp;#34;Executing (*Botanist).DeployKubeAPIServerService&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:46Z&amp;#34; level=info msg=&amp;#34;Executing (*Botanist).DeployBackupNamespaceFromShoot&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:46Z&amp;#34; level=info msg=&amp;#34;Waiting for Terraform validation Pod &amp;#39;johndoe-azure.external-dns.tf-pod-d8f66&amp;#39; to be completed...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:51Z&amp;#34; level=info msg=&amp;#34;Waiting for Terraform validation Pod &amp;#39;johndoe-azure.external-dns.tf-pod-d8f66&amp;#39; to be completed...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:51Z&amp;#34; level=info msg=&amp;#34;Executing (*Botanist).MoveBackupTerraformResources&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:52Z&amp;#34; level=info msg=&amp;#34;Executing (*Botanist).WaitUntilKubeAPIServerServiceIsReady&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:52Z&amp;#34; level=info msg=&amp;#34;Waiting until the kube-apiserver service is ready...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:52Z&amp;#34; level=info msg=&amp;#34;Waiting until the backup-infrastructure has been reconciled in the Garden cluster...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:56Z&amp;#34; level=info msg=&amp;#34;Waiting for Terraform validation Pod &amp;#39;johndoe-azure.external-dns.tf-pod-d8f66&amp;#39; to be completed...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:57Z&amp;#34; level=info msg=&amp;#34;Waiting until the kube-apiserver service is ready...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:57Z&amp;#34; level=info msg=&amp;#34;Waiting until the backup-infrastructure has been reconciled in the Garden cluster...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:36:01Z&amp;#34; level=info msg=&amp;#34;Waiting for Terraform validation Pod &amp;#39;johndoe-azure.external-dns.tf-pod-d8f66&amp;#39; to be completed...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:36:02Z&amp;#34; level=info msg=&amp;#34;Waiting until the kube-apiserver service is ready...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:36:02Z&amp;#34; level=info msg=&amp;#34;Waiting until the backup-infrastructure has been reconciled in the Garden cluster...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this stage you should be waiting for a while until the Shoot
cluster is provisioned and initial resources are deployed.&lt;/p>
&lt;p>During the provisioning you can also check output of these commands to
have a better understanding about what&amp;rsquo;s going on in the seed cluster:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ gardenctl ls shoots
projects:
- project: garden-dev
shoots:
- johndoe-azure
$ gardenctl ls issues
issues:
- project: garden-dev
seed: azure
shoot: johndoe-azure
health: Unknown
status:
lastOperation:
description: Executing DeployKubeAddonManager, ReconcileMachines.
lastUpdateTime: 2018-06-09 08:40:20 +0100 IST
progress: 74
state: Processing
type: Create
$ kubectl -n garden-dev get shoot johndoe-azure
NAMESPACE NAME SEED DOMAIN VERSION CONTROL NODES SYSTEM LATEST
garden-dev johndoe-azure azure johndoe-azure.garden-dev.your.domain.here 1.10.1 True True True Succeeded
$ kubectl -n garden-dev describe shoot johndoe-azure
...
Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Normal Reconciling 1h gardener-controller-manager [BrXWiztO] Reconciling Shoot cluster state
Normal Reconciling 59m gardener-controller-manager [rBFsfwU5] Reconciling Shoot cluster state
Normal Reconciling 59m gardener-controller-manager [2HAbm45D] Reconciling Shoot cluster state
Normal Reconciling 48m gardener-controller-manager [S1QA0ksz] Reconciling Shoot cluster state
Normal Reconciling 47m gardener-controller-manager [lvcSKy1Q] Reconciling Shoot cluster state
Normal Reconciling 47m gardener-controller-manager [MddMyk8W] Reconciling Shoot cluster state
Normal Reconciling 47m gardener-controller-manager [XDAAWABd] Reconciling Shoot cluster state
Normal Reconciling 46m gardener-controller-manager [6HYH9Psz] Reconciling Shoot cluster state
Normal Reconciling 46m gardener-controller-manager [rhL38ym4] Reconciling Shoot cluster state
Normal Reconciling 35m gardener-controller-manager [BOt4Nvso] Reconciling Shoot cluster state
Normal Reconciling 35m gardener-controller-manager [JPtmXmxD] Reconciling Shoot cluster state
Normal Reconciling 34m gardener-controller-manager [ldHsVA6G] Reconciling Shoot cluster state
Normal Reconciled 31m gardener-controller-manager [ldHsVA6G] Reconciled Shoot cluster state
Normal Reconciling 26m gardener-controller-manager [yBh2IBOF] Reconciling Shoot cluster state
Normal Reconciled 24m gardener-controller-manager [yBh2IBOF] Reconciled Shoot cluster state
Normal Reconciling 16m gardener-controller-manager [bqmFtHUA] Reconciling Shoot cluster state
Normal Reconciled 14m gardener-controller-manager [bqmFtHUA] Reconciled Shoot cluster state
Normal Reconciling 6m gardener-controller-manager [7QgHE5CH] Reconciling Shoot cluster state
Normal Reconciled 3m gardener-controller-manager [7QgHE5CH] Reconciled Shoot cluster state
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check Shoot cluster:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ gardenctl target garden dev
KUBECONFIG=/Users/user/.kube/config
$ gardenctl target project garden-dev
$ gardenctl target shoot johndoe-azure
KUBECONFIG=/Users/user/.garden/cache/projects/garden-dev/johndoe-azure/kubeconfig.yaml
$ gardenctl kubectl cluster-info
Kubernetes master is running at https://api.johndoe-azure.garden-dev.your.domain.here
CoreDNS is running at https://api.johndoe-azure.garden-dev.your.domain.here/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
kubernetes-dashboard is running at https://api.johndoe-azure.garden-dev.your.domain.here/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy
To further debug and diagnose cluster problems, use &amp;#39;kubectl cluster-info dump&amp;#39;.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cluster-resources-after-shoot-is-created">Cluster Resources After Shoot is Created&lt;/h3>
&lt;p>After the Shoot has been created the summary of the resources in the
AKS cluster handled by Gardener will be something like this:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">non-namespaced resources
CloudProfile: azure
Project: dev
Namespace: garden-dev
Seed: azure # cloud.profile:azure, cloud.region:eastus, secretRef.name:seed-azure, secretRef.namespace: garden
Namespace: garden
Secret: seed-azure # aks credentials, kubeconfig
# No other resources with any kind handled by Gardener
# Gardener components as well lives in this namespace
Namespace: garden-dev # maps to &amp;#34;project:dev&amp;#34; in Gardener
Secret: core-azure # credentials for aks + aws (for route53)
SecretBinding: core-azure # secretRef.name:core-azure
Shoot: johndoe-azure # seed:azure, secretBindingRef.name:core-azure
Namespace: shoot--dev--johndoe-azure
# These are automatically created once Shoot resource is created
AzureMachineClass: shoot--dev--johndoe-azure-cpu-worker-8506a
MachineDeployment: shoot--dev--johndoe-azure-cpu-worker
MachineSet: shoot--dev--johndoe-azure-cpu-worker-849bbbf75
Machine: shoot--dev--johndoe-azure-cpu-worker-849bbbf75-b42vh
BackupInfra: shoot--dev--johndoe-azure--c1b3b # seed:azure, shootUID: shoot.status.UID.
# Many other resources created as part of shoot cluster,
# but only above ones are handled by Gardener
Namespace: backup--shoot--dev--johndoe-azure--c1b3b
# Secrets and configMap having info related to backup infrastructure
# are created by Gardener.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="troubleshooting-shoot-creation-issues">Troubleshooting Shoot Creation Issues&lt;/h3>
&lt;p>For any issue happening during Shoot provisioning, you can consult the
gardener-controller-manager logs, or the state in the shoot resource,
&lt;code>gardenctl&lt;/code> also provides a command to check Shoot cluster states:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># check gardener-controller-manager logs
kubectl -n garden logs -f deployment/gardener-controller-manager
# kubectl describe can provide you a human readable output of
# same information in below gardenctl command.
kubectl -n garden-dev describe shoot johndoe-azure
# also try cheking the machine-controller-manager logs of the shoot
kubectl logs -n shoot--dev--johndoe-azure deployment/machine-controller-manager
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With &lt;code>gardenctl&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ gardenctl ls issues
issues:
- project: garden-dev
seed: azure
shoot:
health: Ready
status: johndoe-azure
lastError: &amp;#34;Failed to reconcile Shoot cluster state: Errors occurred during flow
execution: &amp;#39;(*Botanist).Shoot.Components.DNS.External{Provider/Entry}.Destroy&amp;#39; returned &amp;#39;Terraform execution
...
lastOperation:
description: &amp;#34;Failed to reconcile Shoot cluster state: Errors occurred during
flow execution: &amp;#39;(*Botanist).Shoot.Components.DNS.External{Provider/Entry}.Destroy&amp;#39; returned &amp;#39;Terraform
...
lastUpdateTime: 2018-06-03 09:48:00 +0100 IST
progress: 100
state: Failed
type: Reconcile
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="access-shoot-cluster">Access Shoot cluster&lt;/h1>
&lt;p>The &lt;code>gardenctl&lt;/code> tool provides a convenient wrapper to operate on both
cluster and cloud providers, here are some commands you can run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># select target shoot cluster
gardenctl ls gardens
gardenctl target garden dev
gardenctl ls projects
gardenctl target shoot johndoe-azure
# issue Azure client (az) commands on target shoot
gardenctl az aks list
# issue kubectl commands on target shoot
gardenctl kubectl -- version --short # &amp;#39;--&amp;#39; is required if you want to
# pass any args starting with &amp;#39;-&amp;#39;
# open prometheus, alertmanager, grafana without having to find
# the user/pass for each
gardenctl show prometheus
gardenctl show grafana
gardenctl show alertmanager
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easiest way to obtain &lt;code>kubeconfig&lt;/code> of the shoot cluster:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ gardenctl target shoot johndoe-azure
KUBECONFIG=/Users/user/.garden/cache/projects/garden-dev/johndoe-azure/kubeconfig.yaml
$ export KUBECONFIG=/Users/user/.garden/cache/projects/garden-dev/johndoe-azure/kubeconfig.yaml
$ # From now on your local kubectl will be operating on target shoot
$ kubectl cluster-info # will show your shoot cluster info
$ unset KUBECONFIG # reset to your default kubectl
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The shoot cluster&amp;rsquo;s kubeconfig is being kept in a secret in the
project namespace:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl -n shoot--dev--johndoe-azure get secret kubecfg -o jsonpath=&amp;#39;{.data.kubeconfig}&amp;#39; | base64 -D &amp;gt; /tmp/johndoe-azure-kubeconfig.yaml
export KUBECONFIG=/tmp/johndoe-azure-kubeconfig.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="delete-shoot-cluster">Delete Shoot cluster&lt;/h1>
&lt;p>Deleting a Shoot cluster is not straight forward, and this is to
protect users from undesired/accidental cluster deletion. One has to
place some special annotations to get a Shoot cluster removed. We use
the &lt;a href="https://github.com/gardener/gardener/blob/master/hack/usage/delete">hack/usage/delete&lt;/a> script for this purpose.&lt;/p>
&lt;p>Please refer to &lt;a href="https://github.com/gardener/gardener/blob/master/docs/usage/shoots.md">Creating / Deleting a Shoot
cluster&lt;/a> document for more details.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">hack/delete shoot johndoe-azure garden-dev
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Feature Gates</title><link>https://gardener.cloud/docs/concepts/deployment/feature_gates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/deployment/feature_gates/</guid><description>
&lt;h1 id="feature-gates-in-gardener">Feature Gates in Gardener&lt;/h1>
&lt;p>This page contains an overview of the various feature gates an administrator can specify on different Gardener components.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Feature gates are a set of key=value pairs that describe Gardener features. You can turn these features on or off using the a component configuration file for a specific component.&lt;/p>
&lt;p>Each Gardener component lets you enable or disable a set of feature gates that are relevant to that component. For example this is the configuration of the &lt;a href="https://github.com/gardener/gardener/blob/master/example/20-componentconfig-gardenlet.yaml">gardenlet&lt;/a> component.&lt;/p>
&lt;p>The following tables are a summary of the feature gates that you can set on different Gardener components.&lt;/p>
&lt;ul>
&lt;li>The “Since” column contains the Gardener release when a feature is introduced or its release stage is changed.&lt;/li>
&lt;li>The “Until” column, if not empty, contains the last Gardener release in which you can still use a feature gate.&lt;/li>
&lt;li>If a feature is in the Alpha or Beta state, you can find the feature listed in the Alpha/Beta feature gate table.&lt;/li>
&lt;li>If a feature is stable you can find all stages for that feature listed in the Graduated/Deprecated feature gate table.&lt;/li>
&lt;li>The Graduated/Deprecated feature gate table also lists deprecated and withdrawn features.&lt;/li>
&lt;/ul>
&lt;h2 id="feature-gates-for-alpha-or-beta-features">Feature gates for Alpha or Beta features&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Feature&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Stage&lt;/th>
&lt;th>Since&lt;/th>
&lt;th>Until&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Logging&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>0.13&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HVPA&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>0.31&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>HVPAForShootedSeed&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>0.32&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ManagedIstio&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>1.5&lt;/code>&lt;/td>
&lt;td>&lt;code>1.18&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ManagedIstio&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;td>&lt;code>Beta&lt;/code>&lt;/td>
&lt;td>&lt;code>1.19&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>APIServerSNI&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>1.7&lt;/code>&lt;/td>
&lt;td>&lt;code>1.18&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>APIServerSNI&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;td>&lt;code>Beta&lt;/code>&lt;/td>
&lt;td>&lt;code>1.19&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SeedChange&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>1.12&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SeedKubeScheduler&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>1.15&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ReversedVPN&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>1.22&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UseDNSRecords&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>1.27&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DisallowKubeconfigRotationForShootInDeletion&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>1.28&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RotateSSHKeypairOnMaintenance&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>1.28&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="feature-gates-for-graduated-or-deprecated-features">Feature gates for graduated or deprecated features&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Feature&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Stage&lt;/th>
&lt;th>Since&lt;/th>
&lt;th>Until&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>NodeLocalDNS&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>1.7&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>NodeLocalDNS&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;code>Removed&lt;/code>&lt;/td>
&lt;td>&lt;code>1.26&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>KonnectivityTunnel&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>1.6&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>KonnectivityTunnel&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;code>Removed&lt;/code>&lt;/td>
&lt;td>&lt;code>1.27&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MountHostCADirectories&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>1.11&lt;/code>&lt;/td>
&lt;td>&lt;code>1.25&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MountHostCADirectories&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;td>&lt;code>Beta&lt;/code>&lt;/td>
&lt;td>&lt;code>1.26&lt;/code>&lt;/td>
&lt;td>&lt;code>1.27&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MountHostCADirectories&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;td>&lt;code>GA&lt;/code>&lt;/td>
&lt;td>&lt;code>1.27&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MountHostCADirectories&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;code>Removed&lt;/code>&lt;/td>
&lt;td>&lt;code>1.30&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="using-a-feature">Using a feature&lt;/h2>
&lt;p>A feature can be in &lt;em>Alpha&lt;/em>, &lt;em>Beta&lt;/em> or &lt;em>GA&lt;/em> stage.
An &lt;em>Alpha&lt;/em> feature means:&lt;/p>
&lt;ul>
&lt;li>Disabled by default.&lt;/li>
&lt;li>Might be buggy. Enabling the feature may expose bugs.&lt;/li>
&lt;li>Support for feature may be dropped at any time without notice.&lt;/li>
&lt;li>The API may change in incompatible ways in a later software release without notice.&lt;/li>
&lt;li>Recommended for use only in short-lived testing clusters, due to increased
risk of bugs and lack of long-term support.&lt;/li>
&lt;/ul>
&lt;p>A &lt;em>Beta&lt;/em> feature means:&lt;/p>
&lt;ul>
&lt;li>Enabled by default.&lt;/li>
&lt;li>The feature is well tested. Enabling the feature is considered safe.&lt;/li>
&lt;li>Support for the overall feature will not be dropped, though details may change.&lt;/li>
&lt;li>The schema and/or semantics of objects may change in incompatible ways in a
subsequent beta or stable release. When this happens, we will provide instructions
for migrating to the next version. This may require deleting, editing, and
re-creating API objects. The editing process may require some thought.
This may require downtime for applications that rely on the feature.&lt;/li>
&lt;li>Recommended for only non-critical uses because of potential for
incompatible changes in subsequent releases.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Please do try &lt;em>Beta&lt;/em> features and give feedback on them!
After they exit beta, it may not be practical for us to make more changes.&lt;/p>
&lt;/blockquote>
&lt;p>A &lt;em>General Availability&lt;/em> (GA) feature is also referred to as a &lt;em>stable&lt;/em> feature. It means:&lt;/p>
&lt;ul>
&lt;li>The feature is always enabled; you cannot disable it.&lt;/li>
&lt;li>The corresponding feature gate is no longer needed.&lt;/li>
&lt;li>Stable versions of features will appear in released software for many subsequent versions.&lt;/li>
&lt;/ul>
&lt;h2 id="list-of-feature-gates">List of feature gates&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Logging&lt;/code> enables logging stack for Seed clusters.&lt;/li>
&lt;li>&lt;code>HVPA&lt;/code> enables simultaneous horizontal and vertical scaling in Seed Clusters.&lt;/li>
&lt;li>&lt;code>HVPAForShootedSeed&lt;/code> enables simultaneous horizontal and vertical scaling in managed seed (aka &amp;ldquo;shooted seed&amp;rdquo;) clusters.&lt;/li>
&lt;li>&lt;code>ManagedIstio&lt;/code> enables a Gardener-tailored &lt;a href="https://istio.io">Istio&lt;/a> in each Seed cluster. Disable this feature if Istio is already installed in the cluster. Istio is not automatically removed if this feature is disabled. See the &lt;a href="https://github.com/gardener/gardener/blob/master/docs/usage/istio.md">detailed documentation&lt;/a> for more information.&lt;/li>
&lt;li>&lt;code>APIServerSNI&lt;/code> enables only one LoadBalancer to be used for every Shoot cluster API server in a Seed. Enable this feature when &lt;code>ManagedIstio&lt;/code> is enabled or Istio is manually deployed in Seed cluster. See &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/08-shoot-apiserver-via-sni.md">GEP-8&lt;/a> for more details.&lt;/li>
&lt;li>&lt;code>MountHostCADirectories&lt;/code> enables mounting common CA certificate directories in the Shoot API server pod that might be required for webhooks or OIDC.&lt;/li>
&lt;li>&lt;code>SeedChange&lt;/code> enables updating the &lt;code>spec.seedName&lt;/code> field during shoot validation from a non-empty value in order to trigger shoot control plane migration.&lt;/li>
&lt;li>&lt;code>SeedKubeScheduler&lt;/code> adds custom &lt;code>kube-scheduler&lt;/code> in &lt;code>gardener-kube-scheduler&lt;/code> namespace. It schedules &lt;a href="https://github.com/gardener/gardener/blob/master/docs/concepts/seed-admission-controller.md#mutating-webhooks">pods with scheduler name&lt;/a> &lt;code>gardener-kube-scheduler&lt;/code> on Nodes with higher resource utilization. It requires Seed cluster with kubernetes version &lt;code>1.18&lt;/code> or higher.&lt;/li>
&lt;li>&lt;code>ReversedVPN&lt;/code> reverses the connection setup of the vpn tunnel between the Seed and the Shoot cluster(s). It allows Seed and Shoot clusters to be in different networks with only direct access in one direction (Shoot -&amp;gt; Seed). In addition to that, it reduces the amount of load balancers required, i.e. no load balancers are required for the vpn tunnel anymore. It requires &lt;code>APIServerSNI&lt;/code> and kubernetes version &lt;code>1.18&lt;/code> or higher to work. Details can be found in &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/14-reversed-cluster-vpn.md">GEP-14&lt;/a>.&lt;/li>
&lt;li>&lt;code>AdminKubeconfigRequest&lt;/code> enables the &lt;code>AdminKubeconfigRequest&lt;/code> endpoint on Shoot resources. See &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/16-adminkubeconfig-subresource.md">GEP-16&lt;/a> for more details.&lt;/li>
&lt;li>&lt;code>UseDNSRecords&lt;/code> enables using &lt;code>DNSRecord&lt;/code> resources for Gardener DNS records instead of &lt;code>DNSProvider&lt;/code>, &lt;code>DNSEntry&lt;/code>, and &lt;code>DNSOwner&lt;/code> resources. See &lt;a href="https://github.com/gardener/gardener/blob/master/docs/extensions/dnsrecord.md">Contract: &lt;code>DNSRecord&lt;/code> resources&lt;/a> for more details.&lt;/li>
&lt;li>&lt;code>DisallowKubeconfigRotationForShootInDeletion&lt;/code> when enabled, does not allow kubeconfig rotation to be requested for shoot cluster that is already in deletion phase, i.e. &lt;code>metadata.deletionTimestamp&lt;/code> is set.&lt;/li>
&lt;li>&lt;code>RotateSSHKeypairOnMaintenance&lt;/code> enables SSH keypair rotation in the maintenance controller of the gardener-controller-manager. Details can be found in &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/15-manage-bastions-and-ssh-key-pair-rotation.md">GEP-15&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Image Vector</title><link>https://gardener.cloud/docs/concepts/deployment/image_vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/deployment/image_vector/</guid><description>
&lt;h1 id="image-vector">Image Vector&lt;/h1>
&lt;p>The Gardenlet is deploying several different container images into the seed and the shoot clusters.
The image repositories and tags are defined in a &lt;a href="https://github.com/gardener/gardener/blob/master/charts/images.yaml">central image vector file&lt;/a>.
Obviously, the image versions defined there must fit together with the deployment manifests (e.g., some command-line flags do only exist in certain versions).&lt;/p>
&lt;h2 id="example">Example&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">images&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pause-container&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">sourceRepository&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">repository&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gcr.io/google_containers/pause-amd64&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tag&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3.0&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1.15&lt;/span>&lt;span class="l">.x&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pause-container&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">sourceRepository&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">repository&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gcr.io/google_containers/pause-amd64&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tag&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3.1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;gt;= 1.16&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That means that the Gardenlet will use the &lt;code>pause-container&lt;/code> in with tag &lt;code>3.0&lt;/code> for all seed/shoot clusters with Kubernetes version &lt;code>1.15.x&lt;/code>, and tag &lt;code>3.1&lt;/code> for all clusters with Kubernetes &lt;code>&amp;gt;= 1.16&lt;/code>.&lt;/p>
&lt;h2 id="overwrite-image-vector">Overwrite image vector&lt;/h2>
&lt;p>In some environment it is not possible to use these &amp;ldquo;pre-defined&amp;rdquo; images that come with a Gardener release.
A prominent example for that is Alicloud in China which does not allow access to Google&amp;rsquo;s GCR.
In these cases you might want to overwrite certain images, e.g., point the &lt;code>pause-container&lt;/code> to a different registry.&lt;/p>
&lt;p>:warning: If you specify an image that does not fit to the resource manifest then the seed/shoot reconciliation might fail.&lt;/p>
&lt;p>In order to overwrite the images you must provide a similar file to Gardenlet:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">images&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pause-container&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">sourceRepository&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">repository&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-custom-image-registry/pause-amd64&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tag&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3.0&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1.15&lt;/span>&lt;span class="l">.x&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pause-container&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">sourceRepository&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfile&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">repository&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-custom-image-registry/pause-amd64&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">tag&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3.1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;gt;= 1.16&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>During deployment of the gardenlet create a &lt;code>ConfigMap&lt;/code> containing the above content and mount it as a volume into the gardenlet pod.
Next, specify the environment variable &lt;code>IMAGEVECTOR_OVERWRITE&lt;/code> whose value must be the path to the file you just mounted:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ConfigMap&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-images-overwrite&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">images_overwrite.yaml&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> images:
&lt;/span>&lt;span class="sd"> - ...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IMAGEVECTOR_OVERWRITE&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/charts-overwrite/images_overwrite.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-images-overwrite&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/charts-overwrite&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-images-overwrite&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">configMap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-images-overwrite&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="image-vectors-for-dependent-components">Image vectors for dependent components&lt;/h2>
&lt;p>The gardenlet is deploying a lot of different components that might deploy other images themselves.
These components might use an image vector as well.
Operators might want to customize the image locations for these transitive images as well, hence, they might need to specify an image vector overwrite for the components directly deployed by Gardener.&lt;/p>
&lt;p>It is possible to specify the &lt;code>IMAGEVECTOR_OVERWRITE_COMPONENTS&lt;/code> environment variable to the gardenlet that points to a file with the following content:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">components&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">etcd-druid&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">imageVectorOverwrite&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> images:
&lt;/span>&lt;span class="sd"> - name: etcd
&lt;/span>&lt;span class="sd"> tag: v1.2.3
&lt;/span>&lt;span class="sd"> repository: etcd/etcd&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The gardenlet will, if supported by the directly deployed component (&lt;code>etcd-druid&lt;/code> in this example), inject the given &lt;code>imageVectorOverwrite&lt;/code> into the &lt;code>Deployment&lt;/code> manifest.
The respective component is responsible for using the overwritten images instead of its defaults.&lt;/p></description></item><item><title>Docs: Machine Controller Manager</title><link>https://gardener.cloud/docs/concepts/mcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/concepts/mcm/</guid><description>
&lt;h1 id="machine-controller-manager">machine-controller-manager&lt;/h1>
&lt;p>&lt;a href="https://concourse.ci.gardener.cloud/teams/gardener/pipelines/machine-controller-manager-master/jobs/master-head-update-job">&lt;img src="https://concourse.ci.gardener.cloud/api/v1/teams/gardener/pipelines/machine-controller-manager-master/jobs/master-head-update-job/badge" alt="CI Build status">&lt;/a>
&lt;a href="https://goreportcard.com/report/github.com/gardener/machine-controller-manager">&lt;img src="https://goreportcard.com/badge/github.com/gardener/machine-controller-manager" alt="Go Report Card">&lt;/a>&lt;/p>
&lt;p>:warning: We are in the progress of migrating and deprecating all the in-tree providers to OOT. Please avoid making any new feature enhancements to the intree providers. Kindly make it on the &lt;a href="https://github.com/gardener/?q=machine-controller-manager-provider&amp;amp;type=&amp;amp;language=">OOT providers available here&lt;/a>. More details on adding &lt;a href="https://github.com/gardener/machine-controller-manager/blob/master/docs/development/cp_support_new.md">new OOT providers can be found here&lt;/a>.&lt;/p>
&lt;p>Machine Controller Manager (MCM) manages VMs as another kubernetes custom resource. It provides a declarative way to manage VMs.&lt;/p>
&lt;p>MCM supports following providers. These provider code is maintained externally (out-of-tree), and the links for the same are linked below:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-alicloud">Alicloud&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-aws">AWS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-azure">Azure&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-equinix-metal">Equinix Metal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-gcp">GCP&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-kubevirt">KubeVirt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/metal-stack/machine-controller-manager-provider-metal">Metal Stack&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-openstack">Openstack&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-vsphere">V Sphere&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-yandex">Yandex&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>It can easily be extended to support other cloud providers as well.&lt;/p>
&lt;p>Example of managing machine:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl create/get/delete machine vm1
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="key-terminologies">Key terminologies&lt;/h3>
&lt;p>Nodes/Machines/VMs are different terminologies used to represent similar things. We use these terms in the following way&lt;/p>
&lt;ol>
&lt;li>VM: A virtual machine running on any cloud provider. It could also refer to a physical machine (PM) in case of a bare metal setup.&lt;/li>
&lt;li>Node: Native kubernetes node objects. The objects you get to see when you do a &lt;em>&amp;ldquo;kubectl get nodes&amp;rdquo;&lt;/em>. Although nodes can be either physical/virtual machines, for the purposes of our discussions it refers to a VM.&lt;/li>
&lt;li>Machine: A VM that is provisioned/managed by the Machine Controller Manager.&lt;/li>
&lt;/ol>
&lt;h2 id="design-of-machine-controller-manager">Design of Machine Controller Manager&lt;/h2>
&lt;p>See the design documentation in the &lt;code>/docs/design&lt;/code> repository, please &lt;a href="https://github.com/gardener/machine-controller-manager/blob/master/docs/design/README.md">find the design doc here&lt;/a>.&lt;/p>
&lt;h2 id="to-start-using-or-developing-the-machine-controller-manager">To start using or developing the Machine Controller Manager&lt;/h2>
&lt;p>See the documentation in the &lt;code>/docs&lt;/code> repository, please &lt;a href="https://github.com/gardener/machine-controller-manager/blob/master/docs/README.md">find the index here&lt;/a>.&lt;/p>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;p>An FAQ is available &lt;a href="https://github.com/gardener/machine-controller-manager/blob/master/docs/FAQ.md">here&lt;/a>&lt;/p>
&lt;h2 id="cluster-api-implementation">Cluster-api Implementation&lt;/h2>
&lt;ul>
&lt;li>&lt;code>cluster-api&lt;/code> branch of machine-controller-manager implements the machine-api aspect of the &lt;a href="https://github.com/kubernetes-sigs/cluster-api">cluster-api project&lt;/a>.&lt;/li>
&lt;li>Link: &lt;a href="https://github.com/gardener/machine-controller-manager/tree/cluster-api">https://github.com/gardener/machine-controller-manager/tree/cluster-api&lt;/a>&lt;/li>
&lt;li>Once cluster-api project gets stable, we may make &lt;code>master&lt;/code> branch of MCM as well cluster-api compliant, with well-defined migration notes.&lt;/li>
&lt;/ul></description></item></channel></rss>