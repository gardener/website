<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener â€“ Administer Client (Shoot) Clusters</title><link>https://gardener.cloud/docs/guides/administer_shoots/</link><description>Recent content in Administer Client (Shoot) Clusters on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/guides/administer_shoots/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Create / Delete a Shoot cluster</title><link>https://gardener.cloud/docs/guides/administer_shoots/create-delete-shoot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/guides/administer_shoots/create-delete-shoot/</guid><description>
&lt;h1 id="create-a-shoot-cluster">Create a Shoot Cluster&lt;/h1>
&lt;p>As you have already prepared an &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-shoot.yaml">example Shoot manifest&lt;/a> in the steps described in the development documentation, please
open another Terminal pane/window with the &lt;code>KUBECONFIG&lt;/code> environment variable pointing to the Garden development cluster and send the manifest to the Kubernetes API server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f your-shoot-aws.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should see that the Gardener has immediately picked up your manifest and started to deploy the Shoot cluster.&lt;/p>
&lt;p>In order to investigate what is happening in the Seed cluster, please download its proper Kubeconfig yourself (see next paragraph). The namespace of the Shoot cluster in the Seed cluster will look like that: &lt;code>shoot-johndoe-johndoe-1&lt;/code>, whereas the first &lt;code>johndoe&lt;/code> is your namespace in the Garden cluster (also called &amp;ldquo;project&amp;rdquo;) and the &lt;code>johndoe-1&lt;/code> suffix is the actual name of the Shoot cluster.&lt;/p>
&lt;p>To connect to the newly created Shoot cluster, you must download its Kubeconfig as well. Please connect to the proper Seed cluster, navigate to the Shoot namespace, and download the Kubeconfig from the &lt;code>kubecfg&lt;/code> secret in that namespace.&lt;/p>
&lt;h1 id="delete-a-shoot-cluster">Delete a Shoot Cluster&lt;/h1>
&lt;p>In order to delete your cluster, you have to set an annotation confirming the deletion first, and trigger the deletion after that. You can use the prepared &lt;code>delete shoot&lt;/code> script which takes the Shoot name as first parameter. The namespace can be specified by the second parameter, but it is optional. If you don&amp;rsquo;t state it, it defaults to your namespace (the username you are logged in with to your machine).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ./hack/usage/delete shoot johndoe-1 johndoe
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>( &lt;code>hack&lt;/code> bash script can be found here &lt;a href="https://github.com/gardener/gardener/blob/master/hack/usage/delete">https://github.com/gardener/gardener/blob/master/hack/usage/delete&lt;/a>)&lt;/p>
&lt;h1 id="configure-a-shoot-cluster-alert-receiver">Configure a Shoot cluster alert receiver&lt;/h1>
&lt;p>The receiver of the Shoot alerts can be configured from the &lt;code>.spec.monitoring.alerting.emailReceivers&lt;/code> section in the Shoot specification. The value of the field has to be a list of valid mail addresses.&lt;/p>
&lt;p>The alerting for the Shoot clusters is handled by the Prometheus Alertmanager. The Alertmanager will be deployed next to the control plane when the &lt;code>Shoot&lt;/code> resource specifies &lt;code>.spec.monitoring.alerting.emailReceivers&lt;/code> and if a &lt;a href="https://github.com/gardener/gardener/blob/master/example/10-secret-alerting.yaml">SMTP secret&lt;/a> exists.&lt;/p>
&lt;p>If the field gets removed then the Alertmanager will be also removed during the next reconcilation of the cluster. The opposite is also valid if the field is added to an existing cluster.&lt;/p></description></item><item><title>Docs: Create a Shoot Cluster into Existing AWS VPC</title><link>https://gardener.cloud/docs/guides/administer_shoots/create-shoot-into-existing-aws-vpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/guides/administer_shoots/create-shoot-into-existing-aws-vpc/</guid><description>
&lt;h1 id="create-a-shoot-cluster-into-existing-aws-vpc">Create a Shoot cluster into existing AWS VPC&lt;/h1>
&lt;p>Gardener can create a new VPC, or use an existing one for your Shoot cluster. Depending on your needs you may want to create Shoot(s) into already created VPC.
The tutorial describes how to create a Shoot cluster into existing AWS VPC. The steps are identical for Alicloud, Azure, and GCP. Please note that the existing VPC must be in the same region like the shoot cluster that you want to deploy into the VPC.&lt;/p>
&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>If &lt;code>.spec.provider.infrastructureConfig.networks.vpc.cidr&lt;/code> is specified, Gardener will create a new VPC with the given CIDR block and respectively will delete it on Shoot deletion.&lt;br>
If &lt;code>.spec.provider.infrastructureConfig.networks.vpc.id&lt;/code> is specified, Gardener will use the existing VPC and respectively won&amp;rsquo;t delete it on Shoot deletion.&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s not recommended to create a Shoot cluster into VPC that is managed by Gardener (that is created for another Shoot cluster). In this case the deletion of the initial Shoot cluster will fail to delete the VPC because there will be resources attached to it.&lt;br>
Gardener won&amp;rsquo;t delete any manually created (unmanaged) resources in your cloud provider account.&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-configure-aws-cli">1. Configure AWS CLI&lt;/h2>
&lt;p>The &lt;code>aws configure&lt;/code> command is a convenient way to setup your AWS CLI. It will prompt you for your credentials and settings which will be used in the following AWS CLI invocations.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ aws configure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AWS Access Key ID [None]: &amp;lt;ACCESS_KEY_ID&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AWS Secret Access Key [None]: &amp;lt;SECRET_ACCESS_KEY&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Default region name [None]: &amp;lt;DEFAULT_REGION&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Default output format [None]: &amp;lt;DEFAULT_OUTPUT_FORMAT&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-create-vpc">2. Create VPC&lt;/h2>
&lt;p>Create the VPC by running the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ aws ec2 create-vpc --cidr-block &amp;lt;cidr-block&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;Vpc&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;VpcId&amp;#34;&lt;/span>: &lt;span style="color:#a31515">&amp;#34;vpc-ff7bbf86&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;InstanceTenancy&amp;#34;&lt;/span>: &lt;span style="color:#a31515">&amp;#34;default&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;Tags&amp;#34;&lt;/span>: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;CidrBlockAssociations&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;AssociationId&amp;#34;&lt;/span>: &lt;span style="color:#a31515">&amp;#34;vpc-cidr-assoc-6e42b505&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;CidrBlock&amp;#34;&lt;/span>: &lt;span style="color:#a31515">&amp;#34;10.0.0.0/16&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;CidrBlockState&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;State&amp;#34;&lt;/span>: &lt;span style="color:#a31515">&amp;#34;associated&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;Ipv6CidrBlockAssociationSet&amp;#34;&lt;/span>: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;State&amp;#34;&lt;/span>: &lt;span style="color:#a31515">&amp;#34;pending&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;DhcpOptionsId&amp;#34;&lt;/span>: &lt;span style="color:#a31515">&amp;#34;dopt-38f7a057&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;CidrBlock&amp;#34;&lt;/span>: &lt;span style="color:#a31515">&amp;#34;10.0.0.0/16&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;IsDefault&amp;#34;&lt;/span>: false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gardener requires the VPC to have enabled &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html">DNS support&lt;/a>, i.e the attributes &lt;code>enableDnsSupport&lt;/code> and &lt;code>enableDnsHostnames&lt;/code> must be set to true. &lt;code>enableDnsSupport&lt;/code> attribute is enabled by default, &lt;code>enableDnsHostnames&lt;/code> - not. Set the &lt;code>enableDnsHostnames&lt;/code> attribute to true:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ aws ec2 modify-vpc-attribute --vpc-id vpc-ff7bbf86 --enable-dns-hostnames
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-create-internet-gateway">3. Create Internet Gateway&lt;/h2>
&lt;p>Gardener also requires that an internet gateway is attached to the VPC. You can create one using:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ aws ec2 create-internet-gateway
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;InternetGateway&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;Tags&amp;#34;&lt;/span>: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;InternetGatewayId&amp;#34;&lt;/span>: &lt;span style="color:#a31515">&amp;#34;igw-c0a643a9&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;Attachments&amp;#34;&lt;/span>: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and attach it to the VPC using:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ aws ec2 attach-internet-gateway --internet-gateway-id igw-c0a643a9 --vpc-id vpc-ff7bbf86
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-create-the-shoot">4. Create the Shoot&lt;/h2>
&lt;p>Prepare your Shoot manifest (you could check the &lt;a href="https://github.com/gardener/gardener/tree/master/example">example manifests&lt;/a>). Please make sure that you choose the
region in which you had created the VPC earlier (step 2). Also, put your VPC ID in the &lt;code>.spec.provider.infrastructureConfig.networks.vpc.id&lt;/code> field:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: &amp;lt;aws-region-of-vpc&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> provider:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> infrastructureConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vpc:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: vpc-ff7bbf86
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># ...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Apply your Shoot manifest.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f your-shoot-aws.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ensure that the Shoot cluster is properly created.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl get shoot $SHOOT_NAME -n $SHOOT_NAMESPACE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME CLOUDPROFILE VERSION SEED DOMAIN OPERATION PROGRESS APISERVER CONTROL NODES SYSTEM AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;SHOOT_NAME&amp;gt; aws 1.15.0 aws &amp;lt;SHOOT_DOMAIN&amp;gt; Succeeded 100 True True True True 20m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Shoot Cluster Maintenance</title><link>https://gardener.cloud/docs/guides/administer_shoots/maintain-shoot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/guides/administer_shoots/maintain-shoot/</guid><description>
&lt;h1 id="shoot-cluster-maintenance">Shoot Cluster Maintenance&lt;/h1>
&lt;p>Day two operations for shoot clusters are related to:&lt;/p>
&lt;ul>
&lt;li>The Kubernetes version of the control plane and the worker nodes&lt;/li>
&lt;li>the operating system version of the worker nodes&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info" role="alert">
When referring to an update of the "operating system version" in this document, the update of the machine image of the shoot cluster's worker nodes is meant. For example, Amazon Machine Images (AMI) for AWS.
&lt;/div>
&lt;p>The following table summarizes what options Gardener offers to maintain these versions:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:left">Auto-Update&lt;/th>
&lt;th style="text-align:left">Forceful Updates&lt;/th>
&lt;th style="text-align:left">Manual updates&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Kubernetes version&lt;/td>
&lt;td style="text-align:left">Patches only&lt;/td>
&lt;td style="text-align:left">Patches and consecutive minor updates only&lt;/td>
&lt;td style="text-align:left">yes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Operating system version&lt;/td>
&lt;td style="text-align:left">yes&lt;/td>
&lt;td style="text-align:left">yes&lt;/td>
&lt;td style="text-align:left">yes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="allowed-target-versions-in-the-cloudprofile">Allowed Target Versions in the &lt;code>CloudProfile&lt;/code>&lt;/h2>
&lt;p>Administrators maintain the allowed target versions that you can update to in the &lt;code>CloudProfile&lt;/code> for each IaaS-Provider. Users with access to a Gardener project can check supported target versions with:&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl get cloudprofile [IAAS-SPECIFIC-PROFILE] -o yaml
&lt;/code>&lt;/pre>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Path&lt;/th>
&lt;th style="text-align:left">Description&lt;/th>
&lt;th style="text-align:left">More information&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>spec.kubernetes.versions&lt;/code>&lt;/td>
&lt;td style="text-align:left">The supported Kubernetes version &lt;code>major.minor.patch&lt;/code>.&lt;/td>
&lt;td style="text-align:left">&lt;a href="https://github.com/kubernetes/design-proposals-archive/blob/main/release/versioning.md#patch-releases">Patch releases&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>spec.machineImages&lt;/code>&lt;/td>
&lt;td style="text-align:left">The supported operating system versions for worker nodes.&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Both the Kubernetes version, and the operating system version follow semantic versioning that allows Gardener to handle updates automatically.&lt;/p>
&lt;p>More information: &lt;a href="http://semver.org/">Semantic Versioning&lt;/a>.&lt;/p>
&lt;h3 id="impact-of-version-classifications-on-updates">Impact of Version Classifications on Updates&lt;/h3>
&lt;p>Gardener allows to classify versions in the &lt;code>CloudProfile&lt;/code> as &lt;code>preview&lt;/code>, &lt;code>supported&lt;/code>, &lt;code>deprecated&lt;/code>, or &lt;code>expired&lt;/code>. During maintenance operations, &lt;code>preview&lt;/code> versions are excluded from updates, because theyâ€™re often recently released versions that havenâ€™t yet undergone thorough testing and may contain bugs or security issues.&lt;/p>
&lt;p>More information: &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_versions/#version-classifications">Version Classifications&lt;/a>.&lt;/p>
&lt;h2 id="let-gardener-manage-your-updates">Let Gardener manage your updates&lt;/h2>
&lt;h3 id="the-maintenance-window">The Maintenance Window&lt;/h3>
&lt;p>Gardener can manage updates for you automatically. It offers users to specify a &lt;em>maintenance window&lt;/em> during which updates are scheduled:&lt;/p>
&lt;ul>
&lt;li>The time interval of the maintenance window canâ€™t be less than 30 minutes or more than 6 hours.&lt;/li>
&lt;li>If thereâ€™s no maintenance window specified during the creation of a shoot cluster, Gardener chooses a maintenance window randomly to spread the load.&lt;/li>
&lt;/ul>
&lt;p>You can either specify the maintenance window in the shoot cluster specification (&lt;code>.spec.maintenance.timeWindow&lt;/code>) or the start time of the maintenance window using the Gardener dashboard (&lt;strong>CLUSTERS&lt;/strong> &amp;gt; &lt;strong>[YOUR-CLUSTER]&lt;/strong> &amp;gt; &lt;strong>OVERVIEW&lt;/strong> &amp;gt; &lt;strong>Lifecycle&lt;/strong> &amp;gt; &lt;strong>Maintenance&lt;/strong>).&lt;/p>
&lt;h3 id="auto-update-and-forceful-updates">Auto-Update and Forceful Updates&lt;/h3>
&lt;p>To trigger updates during the maintenance window automatically, Gardener offers the following methods:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;em>Auto-update&lt;/em>: &lt;br>Gardener starts an update during the next maintenance window whenever thereâ€™s a version available in the &lt;code>CloudProfile&lt;/code> that is higher than the one of your shoot cluster specification, and that isnâ€™t classified as &lt;code>preview&lt;/code> version. For Kubernetes versions, auto-update only updates to higher patch levels.&lt;/p>
&lt;p>You can either activate auto-update on the Gardener dashboard (&lt;strong>CLUSTERS&lt;/strong> &amp;gt; &lt;strong>[YOUR-CLUSTER]&lt;/strong> &amp;gt; &lt;strong>OVERVIEW&lt;/strong> &amp;gt; &lt;strong>Lifecycle&lt;/strong> &amp;gt; &lt;strong>Maintenance&lt;/strong>) or in the shoot cluster specification:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.spec.maintenance.autoUpdate.kubernetesVersion: true&lt;/code>&lt;/li>
&lt;li>&lt;code>.spec.maintenance.autoUpdate.machineImageVersion: true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Forceful updates&lt;/em>: &lt;br>In the maintenance window, Gardener compares the current version given in the shoot cluster specification with the version list in the &lt;code>CloudProfile&lt;/code>. If the version has an expiration date and if the date is before the start of the maintenance window, Gardener starts an update to the highest version available in the &lt;code>CloudProfile&lt;/code> that isnâ€™t classified as &lt;code>preview&lt;/code> version. The highest version in &lt;code>CloudProfile&lt;/code> canâ€™t have an expiration date. For Kubernetes versions, Gardener only updates to higher patch levels or consecutive minor versions.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>If you donâ€™t want to wait for the next maintenance window, you can annotate the shoot cluster specification with &lt;code>shoot.gardener.cloud/operation: maintain&lt;/code>. Gardener then checks immediately if thereâ€™s an auto-update or a forceful update needed.&lt;/p>
&lt;div class="alert alert-info" role="alert">
Forceful version updates are even executed if the auto-update for the Kubernetes version, or the auto-update for the machine image version is deactivated (set to `false`).
&lt;/div>
&lt;p>With expiration dates, administrators can give shoot cluster owners more time for testing before the actual version update happens, which allows smoother transitions to new versions.&lt;/p>
&lt;h3 id="kubernetes-update-paths">Kubernetes Update Paths&lt;/h3>
&lt;p>The bigger the delta of the Kubernetes source version and the Kubernetes target version, the better it must be planned and executed by operators. Gardener only provides automatic support for updates that can be applied safely to the cluster workload:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Update Type&lt;/th>
&lt;th style="text-align:left">Example&lt;/th>
&lt;th style="text-align:left">Update method&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Patches&lt;/td>
&lt;td style="text-align:left">&lt;code>1.10.12&lt;/code> to &lt;code>1.10.13&lt;/code>&lt;/td>
&lt;td style="text-align:left">auto-update or Forceful update&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Update to consecutive minor version&lt;/td>
&lt;td style="text-align:left">&lt;code>1.10.12&lt;/code> to &lt;code>1.11.10&lt;/code>&lt;/td>
&lt;td style="text-align:left">Forceful update&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Other&lt;/td>
&lt;td style="text-align:left">&lt;code>1.10.12&lt;/code> to &lt;code>1.12.0&lt;/code>&lt;/td>
&lt;td style="text-align:left">manual update&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Gardener doesnâ€™t support automatic updates of nonconsecutive minor versions, because Kubernetes doesnâ€™t guarantee updateability in this case. However, multiple minor version updates are possible if not only the minor source version is expired, but also the minor target version is expired. Gardener then updates the Kubernetes version first to the expired target version, and waits for the next maintenance window to update this version to the next minor target version.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
The administrator who maintains the `CloudProfile` has to ensure that the list of Kubernetes versions consists of consecutive minor versions, for example, from `1.10.x` to `1.11.y`. If the minor version increases in bigger steps, for example, from `1.10.x` to `1.12.y`, shoot cluster updates fail during the maintenance window.
&lt;/div>
&lt;h2 id="manual-updates">Manual Updates&lt;/h2>
&lt;p>To update the Kubernetes version or the node operating system manually, change the &lt;code>.spec.kubernetes.version&lt;/code> field or the &lt;code>.spec.provider.workers.machine.image.version&lt;/code> field correspondingly.&lt;/p>
&lt;p>Manual updates are required if you would like to do a minor update of the Kubernetes version. Gardener doesnâ€™t do such updates automatically as they can have breaking changes that could impact the cluster workload.&lt;/p>
&lt;p>Manual updates are either executed immediately (default) or can be confined to the maintenance time window.&lt;br>
Choosing the latter option, causes changes to the cluster (for example, node pool rolling-updates) and the subsequent reconciliation, to only predictably happen during a defined time window (available since &lt;a href="https://github.com/gardener/gardener/releases/tag/v1.4.0">Gardener version 1.4&lt;/a>).&lt;/p>
&lt;p>More information: &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_maintenance/#confine-specification-changesupdates-roll-out">Confine Specification Changes/Update Roll Out&lt;/a>.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
Before applying such update on minor or major releases, operators should check for all the breaking changes introduced in the target Kubernetes release changelog.
&lt;/div>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;p>In the examples for the &lt;code>CloudProfile&lt;/code> and the shoot cluster specification, only the fields relevant for the example are shown.&lt;/p>
&lt;h3 id="auto-update-of-kubernetes-version">Auto-Update of Kubernetes Version&lt;/h3>
&lt;p>Let&amp;rsquo;s assume Kubernetes version &lt;code>1.10.5&lt;/code> and &lt;code>1.11.0&lt;/code> were added in the following &lt;code>CloudProfile&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> versions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.11.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.10.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.10.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before this change, the shoot cluster specification looked like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> version: 1.10.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maintenance:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timeWindow:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> begin: 220000+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end: 230000+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> autoUpdate:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetesVersion: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As a consequence, the shoot cluster is updated to Kubernetes version &lt;code>1.10.5&lt;/code> between 22:00-23:00 UTC. Your shoot cluster isn&amp;rsquo;t updated automatically to &lt;code>1.11.0&lt;/code> even though it&amp;rsquo;s the highest Kubernetes version in the &lt;code>CloudProfile&lt;/code>, because Gardener does only do automatic updates of the Kubernetes patch level.&lt;/p>
&lt;h3 id="forceful-update-due-to-expired-kubernetes-version">Forceful Update Due to Expired Kubernetes Version&lt;/h3>
&lt;p>Let&amp;rsquo;s assume the following &lt;code>CloudProfile&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> versions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.12.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.11.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.10.13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.10.12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> expirationDate: &lt;span style="color:#a31515">&amp;#34;2019-04-13T08:00:00Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s assume the shoot cluster has the following specification:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> version: 1.10.12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maintenance:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timeWindow:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> begin: 220000+0100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end: 230000+0100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> autoUpdate:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetesVersion: &lt;span style="color:#00f">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The shoot cluster specification refers a Kubernetes version that has an &lt;code>expirationDate&lt;/code>. In the maintenance window on &lt;code>2019-04-12&lt;/code>, the Kubernetes version stays the same as itâ€™s still not expired. But in the maintenance window on &lt;code>2019-04-14&lt;/code> the Kubernetes version of the shoot cluster is updated to &lt;code>1.10.13&lt;/code> (independently of the value of &lt;code>.spec.maintenance.autoUpdate.kubernetesVersion&lt;/code>).&lt;/p>
&lt;h3 id="forceful-update-to-new-minor-kubernetes-version">Forceful Update to New Minor Kubernetes Version&lt;/h3>
&lt;p>Let&amp;rsquo;s assume the following &lt;code>CloudProfile&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> versions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.12.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.11.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.11.09
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 1.10.12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> expirationDate: &lt;span style="color:#a31515">&amp;#34;2019-04-13T08:00:00Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s assume the shoot cluster has the following specification:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> version: 1.10.12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maintenance:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timeWindow:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> begin: 220000+0100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end: 230000+0100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> autoUpdate:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetesVersion: &lt;span style="color:#00f">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The shoot cluster specification refers a Kubernetes version that has an &lt;code>expirationDate&lt;/code>. In the maintenance window on &lt;code>2019-04-14&lt;/code>, the Kubernetes version of the shoot cluster is updated to &lt;code>1.11.10&lt;/code>, which is the highest patch version of minor target version &lt;code>1.11&lt;/code> that follows source version &lt;code>1.10&lt;/code>.&lt;/p>
&lt;h3 id="automatic-update-from-expired-machine-image-version">Automatic Update from Expired Machine Image Version&lt;/h3>
&lt;p>Let&amp;rsquo;s assume the following &lt;code>CloudProfile&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineImages:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: coreos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> versions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 2191.5.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 2191.4.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - version: 2135.6.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> expirationDate: &lt;span style="color:#a31515">&amp;#34;2019-04-13T08:00:00Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s assume the shoot cluster has the following specification:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> provider:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maximum: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minimum: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxSurge: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxUnavailable: 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: coreos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> version: 2135.6.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: m5.large
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volume:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: gp2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size: 20Gi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maintenance:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timeWindow:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> begin: 220000+0100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end: 230000+0100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> autoUpdate:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineImageVersion: &lt;span style="color:#00f">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The shoot cluster specification refers a machine image version that has an &lt;code>expirationDate&lt;/code>. In the maintenance window on &lt;code>2019-04-12&lt;/code>, the machine image version stays the same as itâ€™s still not expired. But in the maintenance window on &lt;code>2019-04-14&lt;/code> the machine image version of the shoot cluster is updated to &lt;code>2191.5.0&lt;/code> (independently of the value of &lt;code>.spec.maintenance.autoUpdate.machineImageVersion&lt;/code>) as version &lt;code>2135.6.0&lt;/code> is expired.&lt;/p></description></item></channel></rss>