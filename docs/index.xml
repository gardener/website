<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener</title><link>https://gardener.cloud/</link><description>Recent content on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 01 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://gardener.cloud/index.xml" rel="self" type="application/rss+xml"/><item><title>DNS Management</title><link>https://gardener.cloud/documentation/concepts/networking/dns-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/networking/dns-managment/</guid><description>External DNS Management The main artefact of this project is the DNS controller manager for managing DNS records, also nicknamed as the Gardener &amp;ldquo;DNS Controller&amp;rdquo;.
It contains provisioning controllers for creating DNS records in one of the DNS cloud services
Amazon Route53, Google CloudDNS, AliCloud DNS, Azure DNS, OpenStack Designate, Cloudflare DNS, Infoblox, Netlify DNS, and source controllers for services and ingresses to create DNS entries by annotations.</description></item><item><title>DNS Management</title><link>https://gardener.cloud/v1.12.8/concepts/networking/dns-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/networking/dns-managment/</guid><description>External DNS Management The main artefact of this project is the DNS controller manager for managing DNS records, also nicknamed as the Gardener &amp;ldquo;DNS Controller&amp;rdquo;.
It contains provisioning controllers for creating DNS records in one of the DNS cloud services
Amazon Route53, Google CloudDNS, AliCloud DNS, Azure DNS, OpenStack Designate, Cloudflare DNS, Infoblox, Netlify DNS, and source controllers for services and ingresses to create DNS entries by annotations.</description></item><item><title>DNS Management</title><link>https://gardener.cloud/v1.13.2/concepts/networking/dns-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/networking/dns-managment/</guid><description>External DNS Management The main artefact of this project is the DNS controller manager for managing DNS records, also nicknamed as the Gardener &amp;ldquo;DNS Controller&amp;rdquo;.
It contains provisioning controllers for creating DNS records in one of the DNS cloud services
Amazon Route53, Google CloudDNS, AliCloud DNS, Azure DNS, OpenStack Designate, Cloudflare DNS, Infoblox, Netlify DNS, and source controllers for services and ingresses to create DNS entries by annotations.</description></item><item><title>DNS Management</title><link>https://gardener.cloud/v1.14.0/concepts/networking/dns-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/networking/dns-managment/</guid><description>External DNS Management The main artefact of this project is the DNS controller manager for managing DNS records, also nicknamed as the Gardener &amp;ldquo;DNS Controller&amp;rdquo;.
It contains provisioning controllers for creating DNS records in one of the DNS cloud services
Amazon Route53, Google CloudDNS, AliCloud DNS, Azure DNS, OpenStack Designate, Cloudflare DNS, Infoblox, Netlify DNS, and source controllers for services and ingresses to create DNS entries by annotations.</description></item><item><title>DNS Management</title><link>https://gardener.cloud/v1.15.5/concepts/networking/dns-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/networking/dns-managment/</guid><description>External DNS Management The main artefact of this project is the DNS controller manager for managing DNS records, also nicknamed as the Gardener &amp;ldquo;DNS Controller&amp;rdquo;.
It contains provisioning controllers for creating DNS records in one of the DNS cloud services
Amazon Route53, Google CloudDNS, AliCloud DNS, Azure DNS, OpenStack Designate, Cloudflare DNS, Infoblox, Netlify DNS, and source controllers for services and ingresses to create DNS entries by annotations.</description></item><item><title>DNS Management</title><link>https://gardener.cloud/v1.16.3/concepts/networking/dns-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/networking/dns-managment/</guid><description>External DNS Management The main artefact of this project is the DNS controller manager for managing DNS records, also nicknamed as the Gardener &amp;ldquo;DNS Controller&amp;rdquo;.
It contains provisioning controllers for creating DNS records in one of the DNS cloud services
Amazon Route53, Google CloudDNS, AliCloud DNS, Azure DNS, OpenStack Designate, Cloudflare DNS, Infoblox, Netlify DNS, and source controllers for services and ingresses to create DNS entries by annotations.</description></item><item><title>Certificates Management</title><link>https://gardener.cloud/documentation/concepts/networking/cert-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/networking/cert-managment/</guid><description>cert-management
Manages TLS certificates in Kubernetes clusters using custom resources.
In a multi-cluster environment like Gardener, using existing open source projects for certificate management like cert-manager becomes cumbersome. With this project the separation of concerns between multiple clusters is realized more easily. The cert-controller-manager runs in a secured cluster where the issuer secrets are stored. At the same time it watches an untrusted source cluster and can provide certificates for it.</description></item><item><title>Certificates Management</title><link>https://gardener.cloud/v1.12.8/concepts/networking/cert-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/networking/cert-managment/</guid><description>cert-management
Manages TLS certificates in Kubernetes clusters using custom resources.
In a multi-cluster environment like Gardener, using existing open source projects for certificate management like cert-manager becomes cumbersome. With this project the separation of concerns between multiple clusters is realized more easily. The cert-controller-manager runs in a secured cluster where the issuer secrets are stored. At the same time it watches an untrusted source cluster and can provide certificates for it.</description></item><item><title>Certificates Management</title><link>https://gardener.cloud/v1.13.2/concepts/networking/cert-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/networking/cert-managment/</guid><description>cert-management
Manages TLS certificates in Kubernetes clusters using custom resources.
In a multi-cluster environment like Gardener, using existing open source projects for certificate management like cert-manager becomes cumbersome. With this project the separation of concerns between multiple clusters is realized more easily. The cert-controller-manager runs in a secured cluster where the issuer secrets are stored. At the same time it watches an untrusted source cluster and can provide certificates for it.</description></item><item><title>Certificates Management</title><link>https://gardener.cloud/v1.14.0/concepts/networking/cert-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/networking/cert-managment/</guid><description>cert-management
Manages TLS certificates in Kubernetes clusters using custom resources.
In a multi-cluster environment like Gardener, using existing open source projects for certificate management like cert-manager becomes cumbersome. With this project the separation of concerns between multiple clusters is realized more easily. The cert-controller-manager runs in a secured cluster where the issuer secrets are stored. At the same time it watches an untrusted source cluster and can provide certificates for it.</description></item><item><title>Certificates Management</title><link>https://gardener.cloud/v1.15.5/concepts/networking/cert-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/networking/cert-managment/</guid><description>cert-management
Manages TLS certificates in Kubernetes clusters using custom resources.
In a multi-cluster environment like Gardener, using existing open source projects for certificate management like cert-manager becomes cumbersome. With this project the separation of concerns between multiple clusters is realized more easily. The cert-controller-manager runs in a secured cluster where the issuer secrets are stored. At the same time it watches an untrusted source cluster and can provide certificates for it.</description></item><item><title>Certificates Management</title><link>https://gardener.cloud/v1.16.3/concepts/networking/cert-managment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/networking/cert-managment/</guid><description>cert-management
Manages TLS certificates in Kubernetes clusters using custom resources.
In a multi-cluster environment like Gardener, using existing open source projects for certificate management like cert-manager becomes cumbersome. With this project the separation of concerns between multiple clusters is realized more easily. The cert-controller-manager runs in a secured cluster where the issuer secrets are stored. At the same time it watches an untrusted source cluster and can provide certificates for it.</description></item><item><title>Gardener Scheduler</title><link>https://gardener.cloud/documentation/concepts/core-components/scheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/core-components/scheduler/</guid><description>Gardener Scheduler The Gardener Scheduler is in essence a controller that watches newly created shoots and assigns a seed cluster to them. Conceptually, the task of the Gardener Scheduler is very similar to the task of the Kubernetes Scheduler: finding a seed for a shoot instead of a node for a pod.
Either the scheduling strategy or the shoot cluster purpose hereby determines how the scheduler is operating. The following sections explain the configuration and flow in greater detail.</description></item><item><title>Gardener Scheduler</title><link>https://gardener.cloud/v1.12.8/concepts/core-components/scheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/core-components/scheduler/</guid><description>Gardener Scheduler The Gardener Scheduler is in essence a controller that watches newly created shoots and assigns a seed cluster to them. Conceptually, the task of the Gardener Scheduler is very similar to the task of the Kubernetes Scheduler: finding a seed for a shoot instead of a node for a pod.
Either the scheduling strategy or the shoot cluster purpose hereby determines how the scheduler is operating. The following sections explain the configuration and flow in greater detail.</description></item><item><title>Gardener Scheduler</title><link>https://gardener.cloud/v1.13.2/concepts/core-components/scheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/core-components/scheduler/</guid><description>Gardener Scheduler The Gardener Scheduler is in essence a controller that watches newly created shoots and assigns a seed cluster to them. Conceptually, the task of the Gardener Scheduler is very similar to the task of the Kubernetes Scheduler: finding a seed for a shoot instead of a node for a pod.
Either the scheduling strategy or the shoot cluster purpose hereby determines how the scheduler is operating. The following sections explain the configuration and flow in greater detail.</description></item><item><title>Gardener Scheduler</title><link>https://gardener.cloud/v1.14.0/concepts/core-components/scheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/core-components/scheduler/</guid><description>Gardener Scheduler The Gardener Scheduler is in essence a controller that watches newly created shoots and assigns a seed cluster to them. Conceptually, the task of the Gardener Scheduler is very similar to the task of the Kubernetes Scheduler: finding a seed for a shoot instead of a node for a pod.
Either the scheduling strategy or the shoot cluster purpose hereby determines how the scheduler is operating. The following sections explain the configuration and flow in greater detail.</description></item><item><title>Gardener Scheduler</title><link>https://gardener.cloud/v1.15.5/concepts/core-components/scheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/core-components/scheduler/</guid><description>Gardener Scheduler The Gardener Scheduler is in essence a controller that watches newly created shoots and assigns a seed cluster to them. Conceptually, the task of the Gardener Scheduler is very similar to the task of the Kubernetes Scheduler: finding a seed for a shoot instead of a node for a pod.
Either the scheduling strategy or the shoot cluster purpose hereby determines how the scheduler is operating. The following sections explain the configuration and flow in greater detail.</description></item><item><title>Gardener Scheduler</title><link>https://gardener.cloud/v1.16.3/concepts/core-components/scheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/core-components/scheduler/</guid><description>Gardener Scheduler The Gardener Scheduler is in essence a controller that watches newly created shoots and assigns a seed cluster to them. Conceptually, the task of the Gardener Scheduler is very similar to the task of the Kubernetes Scheduler: finding a seed for a shoot instead of a node for a pod.
Either the scheduling strategy or the shoot cluster purpose hereby determines how the scheduler is operating. The following sections explain the configuration and flow in greater detail.</description></item><item><title>Gardener Seed Admission Controller</title><link>https://gardener.cloud/documentation/concepts/core-components/seed-admission-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/core-components/seed-admission-controller/</guid><description>Gardener Seed Admission Controller The Gardener Seed admission controller is deployed by the Gardenlet as part of its seed bootstrapping phase and, consequently, running in every seed cluster. It&amp;rsquo;s main purpose is to serve webhooks (validating or mutating) in order to admit or deny certain requests to the seed&amp;rsquo;s API server.
What is it doing concretely? Validating Webhooks Unconfirmed Deletion Prevention As part of Gardener&amp;rsquo;s extensibility concepts a lot of CustomResourceDefinitions are deployed to the seed clusters that serve as extension points for provider-specific controllers.</description></item><item><title>Gardener Seed Admission Controller</title><link>https://gardener.cloud/v1.12.8/concepts/core-components/seed-admission-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/core-components/seed-admission-controller/</guid><description>Gardener Seed Admission Controller The Gardener Seed admission controller is deployed by the Gardenlet as part of its seed bootstrapping phase and, consequently, running in every seed cluster. It&amp;rsquo;s main purpose is to serve webhooks (validating or mutating) in order to admit or deny certain requests to the seed&amp;rsquo;s API server.
What is it doing concretely? Validating Webhooks Unconfirmed Deletion Prevention As part of Gardener&amp;rsquo;s extensibility concepts a lot of CustomResourceDefinitions are deployed to the seed clusters that serve as extension points for provider-specific controllers.</description></item><item><title>Gardener Seed Admission Controller</title><link>https://gardener.cloud/v1.13.2/concepts/core-components/seed-admission-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/core-components/seed-admission-controller/</guid><description>Gardener Seed Admission Controller The Gardener Seed admission controller is deployed by the Gardenlet as part of its seed bootstrapping phase and, consequently, running in every seed cluster. It&amp;rsquo;s main purpose is to serve webhooks (validating or mutating) in order to admit or deny certain requests to the seed&amp;rsquo;s API server.
What is it doing concretely? Validating Webhooks Unconfirmed Deletion Prevention As part of Gardener&amp;rsquo;s extensibility concepts a lot of CustomResourceDefinitions are deployed to the seed clusters that serve as extension points for provider-specific controllers.</description></item><item><title>Gardener Seed Admission Controller</title><link>https://gardener.cloud/v1.14.0/concepts/core-components/seed-admission-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/core-components/seed-admission-controller/</guid><description>Gardener Seed Admission Controller The Gardener Seed admission controller is deployed by the Gardenlet as part of its seed bootstrapping phase and, consequently, running in every seed cluster. It&amp;rsquo;s main purpose is to serve webhooks (validating or mutating) in order to admit or deny certain requests to the seed&amp;rsquo;s API server.
What is it doing concretely? Validating Webhooks Unconfirmed Deletion Prevention As part of Gardener&amp;rsquo;s extensibility concepts a lot of CustomResourceDefinitions are deployed to the seed clusters that serve as extension points for provider-specific controllers.</description></item><item><title>Gardener Seed Admission Controller</title><link>https://gardener.cloud/v1.15.5/concepts/core-components/seed-admission-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/core-components/seed-admission-controller/</guid><description>Gardener Seed Admission Controller The Gardener Seed admission controller is deployed by the Gardenlet as part of its seed bootstrapping phase and, consequently, running in every seed cluster. It&amp;rsquo;s main purpose is to serve webhooks (validating or mutating) in order to admit or deny certain requests to the seed&amp;rsquo;s API server.
What is it doing concretely? Validating Webhooks Unconfirmed Deletion Prevention As part of Gardener&amp;rsquo;s extensibility concepts a lot of CustomResourceDefinitions are deployed to the seed clusters that serve as extension points for provider-specific controllers.</description></item><item><title>Gardener Seed Admission Controller</title><link>https://gardener.cloud/v1.16.3/concepts/core-components/seed-admission-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/core-components/seed-admission-controller/</guid><description>Gardener Seed Admission Controller The Gardener Seed admission controller is deployed by the Gardenlet as part of its seed bootstrapping phase and, consequently, running in every seed cluster. It&amp;rsquo;s main purpose is to serve webhooks (validating or mutating) in order to admit or deny certain requests to the seed&amp;rsquo;s API server.
What is it doing concretely? Validating Webhooks Unconfirmed Deletion Prevention As part of Gardener&amp;rsquo;s extensibility concepts a lot of CustomResourceDefinitions are deployed to the seed clusters that serve as extension points for provider-specific controllers.</description></item><item><title>gardenlet</title><link>https://gardener.cloud/documentation/concepts/core-components/gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/core-components/gardenlet/</guid><description>Gardenlet Gardener is implemented using the operator pattern: It uses custom controllers that act on our own custom resources, and apply Kubernetes principles to manage clusters instead of containers. Following this analogy, you can recognize components of the Gardener architecture as well-known Kubernetes components, for example, shoot clusters can be compared with pods, and seed clusters can be seen as worker nodes.
The following Gardener components play a similar role as the corresponding components in the Kubernetes architecture:</description></item><item><title>gardenlet</title><link>https://gardener.cloud/v1.12.8/concepts/core-components/gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/core-components/gardenlet/</guid><description>Gardenlet Gardener is implemented using the operator pattern: It uses custom controllers that act on our own custom resources, and apply Kubernetes principles to manage clusters instead of containers. Following this analogy, you can recognize components of the Gardener architecture as well-known Kubernetes components, for example, shoot clusters can be compared with pods, and seed clusters can be seen as worker nodes.
The following Gardener components play a similar role as the corresponding components in the Kubernetes architecture:</description></item><item><title>gardenlet</title><link>https://gardener.cloud/v1.13.2/concepts/core-components/gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/core-components/gardenlet/</guid><description>Gardenlet Gardener is implemented using the operator pattern: It uses custom controllers that act on our own custom resources, and apply Kubernetes principles to manage clusters instead of containers. Following this analogy, you can recognize components of the Gardener architecture as well-known Kubernetes components, for example, shoot clusters can be compared with pods, and seed clusters can be seen as worker nodes.
The following Gardener components play a similar role as the corresponding components in the Kubernetes architecture:</description></item><item><title>gardenlet</title><link>https://gardener.cloud/v1.14.0/concepts/core-components/gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/core-components/gardenlet/</guid><description>Gardenlet Gardener is implemented using the operator pattern: It uses custom controllers that act on our own custom resources, and apply Kubernetes principles to manage clusters instead of containers. Following this analogy, you can recognize components of the Gardener architecture as well-known Kubernetes components, for example, shoot clusters can be compared with pods, and seed clusters can be seen as worker nodes.
The following Gardener components play a similar role as the corresponding components in the Kubernetes architecture:</description></item><item><title>gardenlet</title><link>https://gardener.cloud/v1.15.5/concepts/core-components/gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/core-components/gardenlet/</guid><description>Gardenlet Gardener is implemented using the operator pattern: It uses custom controllers that act on our own custom resources, and apply Kubernetes principles to manage clusters instead of containers. Following this analogy, you can recognize components of the Gardener architecture as well-known Kubernetes components, for example, shoot clusters can be compared with pods, and seed clusters can be seen as worker nodes.
The following Gardener components play a similar role as the corresponding components in the Kubernetes architecture:</description></item><item><title>gardenlet</title><link>https://gardener.cloud/v1.16.3/concepts/core-components/gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/core-components/gardenlet/</guid><description>Gardenlet Gardener is implemented using the operator pattern: It uses custom controllers that act on our own custom resources, and apply Kubernetes principles to manage clusters instead of containers. Following this analogy, you can recognize components of the Gardener architecture as well-known Kubernetes components, for example, shoot clusters can be compared with pods, and seed clusters can be seen as worker nodes.
The following Gardener components play a similar role as the corresponding components in the Kubernetes architecture:</description></item><item><title>Network Policies</title><link>https://gardener.cloud/documentation/concepts/networking/network_policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/networking/network_policies/</guid><description>Network Policies in Gardener As Seed clusters can host the Kubernetes control planes of many Shoot clusters, it is necessary to isolate the control planes from each other for security reasons. Besides deploying each control plane in its own namespace, Gardener creates network policies to also isolate the networks. Essentially, network policies make sure that pods can only talk to other pods over the network they are supposed to. As such, network policies are an important part of Gardener&amp;rsquo;s tenant isolation.</description></item><item><title>Network Policies</title><link>https://gardener.cloud/v1.12.8/concepts/networking/network_policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/networking/network_policies/</guid><description>Network Policies in Gardener As Seed clusters can host the Kubernetes control planes of many Shoot clusters, it is necessary to isolate the control planes from each other for security reasons. Besides deploying each control plane in its own namespace, Gardener creates network policies to also isolate the networks. Essentially, network policies make sure that pods can only talk to other pods over the network they are supposed to. As such, network policies are an important part of Gardener&amp;rsquo;s tenant isolation.</description></item><item><title>Network Policies</title><link>https://gardener.cloud/v1.13.2/concepts/networking/network_policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/networking/network_policies/</guid><description>Network Policies in Gardener As Seed clusters can host the Kubernetes control planes of many Shoot clusters, it is necessary to isolate the control planes from each other for security reasons. Besides deploying each control plane in its own namespace, Gardener creates network policies to also isolate the networks. Essentially, network policies make sure that pods can only talk to other pods over the network they are supposed to. As such, network policies are an important part of Gardener&amp;rsquo;s tenant isolation.</description></item><item><title>Network Policies</title><link>https://gardener.cloud/v1.14.0/concepts/networking/network_policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/networking/network_policies/</guid><description>Network Policies in Gardener As Seed clusters can host the Kubernetes control planes of many Shoot clusters, it is necessary to isolate the control planes from each other for security reasons. Besides deploying each control plane in its own namespace, Gardener creates network policies to also isolate the networks. Essentially, network policies make sure that pods can only talk to other pods over the network they are supposed to. As such, network policies are an important part of Gardener&amp;rsquo;s tenant isolation.</description></item><item><title>Network Policies</title><link>https://gardener.cloud/v1.15.5/concepts/networking/network_policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/networking/network_policies/</guid><description>Network Policies in Gardener As Seed clusters can host the Kubernetes control planes of many Shoot clusters, it is necessary to isolate the control planes from each other for security reasons. Besides deploying each control plane in its own namespace, Gardener creates network policies to also isolate the networks. Essentially, network policies make sure that pods can only talk to other pods over the network they are supposed to. As such, network policies are an important part of Gardener&amp;rsquo;s tenant isolation.</description></item><item><title>Network Policies</title><link>https://gardener.cloud/v1.16.3/concepts/networking/network_policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/networking/network_policies/</guid><description>Network Policies in Gardener As Seed clusters can host the Kubernetes control planes of many Shoot clusters, it is necessary to isolate the control planes from each other for security reasons. Besides deploying each control plane in its own namespace, Gardener creates network policies to also isolate the networks. Essentially, network policies make sure that pods can only talk to other pods over the network they are supposed to. As such, network policies are an important part of Gardener&amp;rsquo;s tenant isolation.</description></item><item><title>Backup and Restore</title><link>https://gardener.cloud/documentation/concepts/backup-restore/backup-restore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/backup-restore/backup-restore/</guid><description>Backup and restore Kubernetes uses Etcd as the key-value store for its resource definitions. Gardener supports the backup and restore of etcd. It is the responsibility of the shoot owners to backup the workload data.
Gardener uses etcd-backup-restore component to backup the etcd backing the Shoot cluster regularly and restore in case of disaster. It is deployed as sidecar via etcd-druid. This doc mainly focuses on the backup and restore configuration used by Gardener when deploying these components.</description></item><item><title>Backup and Restore</title><link>https://gardener.cloud/v1.12.8/concepts/backup-restore/backup-restore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/backup-restore/backup-restore/</guid><description>Backup and restore Kubernetes uses Etcd as the key-value store for its resource definitions. Gardener supports the backup and restore of etcd. It is the responsibility of the shoot owners to backup the workload data.
Gardener uses etcd-backup-restore component to backup the etcd backing the Shoot cluster regularly and restore in case of disaster. It is deployed as sidecar via etcd-druid. This doc mainly focuses on the backup and restore configuration used by Gardener when deploying these components.</description></item><item><title>Backup and Restore</title><link>https://gardener.cloud/v1.13.2/concepts/backup-restore/backup-restore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/backup-restore/backup-restore/</guid><description>Backup and restore Kubernetes uses Etcd as the key-value store for its resource definitions. Gardener supports the backup and restore of etcd. It is the responsibility of the shoot owners to backup the workload data.
Gardener uses etcd-backup-restore component to backup the etcd backing the Shoot cluster regularly and restore in case of disaster. It is deployed as sidecar via etcd-druid. This doc mainly focuses on the backup and restore configuration used by Gardener when deploying these components.</description></item><item><title>Backup and Restore</title><link>https://gardener.cloud/v1.14.0/concepts/backup-restore/backup-restore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/backup-restore/backup-restore/</guid><description>Backup and restore Kubernetes uses Etcd as the key-value store for its resource definitions. Gardener supports the backup and restore of etcd. It is the responsibility of the shoot owners to backup the workload data.
Gardener uses etcd-backup-restore component to backup the etcd backing the Shoot cluster regularly and restore in case of disaster. It is deployed as sidecar via etcd-druid. This doc mainly focuses on the backup and restore configuration used by Gardener when deploying these components.</description></item><item><title>Backup and Restore</title><link>https://gardener.cloud/v1.15.5/concepts/backup-restore/backup-restore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/backup-restore/backup-restore/</guid><description>Backup and restore Kubernetes uses Etcd as the key-value store for its resource definitions. Gardener supports the backup and restore of etcd. It is the responsibility of the shoot owners to backup the workload data.
Gardener uses etcd-backup-restore component to backup the etcd backing the Shoot cluster regularly and restore in case of disaster. It is deployed as sidecar via etcd-druid. This doc mainly focuses on the backup and restore configuration used by Gardener when deploying these components.</description></item><item><title>Backup and Restore</title><link>https://gardener.cloud/v1.16.3/concepts/backup-restore/backup-restore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/backup-restore/backup-restore/</guid><description>Backup and restore Kubernetes uses Etcd as the key-value store for its resource definitions. Gardener supports the backup and restore of etcd. It is the responsibility of the shoot owners to backup the workload data.
Gardener uses etcd-backup-restore component to backup the etcd backing the Shoot cluster regularly and restore in case of disaster. It is deployed as sidecar via etcd-druid. This doc mainly focuses on the backup and restore configuration used by Gardener when deploying these components.</description></item><item><title>New Website, Same Green Flower</title><link>https://gardener.cloud/blog/2020_week_20/00/</link><pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate><guid>https://gardener.cloud/blog/2020_week_20/00/</guid><description>The Gardener project website just received a serious facelift. Here are some of the highlights:
A completely new landing page, emphasizing both on Gardener&amp;rsquo;s value proposition and the open community behind it. The Community page was reconstructed for quick access to the various community channels and will soon merge the Adopters page. It will provide a better insight into success stories from the communty. A completely new News section and content type available at /documentation/news.</description></item><item><title>Alerting</title><link>https://gardener.cloud/documentation/concepts/monitoring/alerting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/monitoring/alerting/</guid><description>Alerting Gardener uses Prometheus to gather metrics from each component. A Prometheus is deployed in each shoot control plane (on the seed) which is responsible for gathering control plane and cluster metrics. Prometheus can be configured to fire alerts based on these metrics and send them to an alertmanager. The alertmanager is responsible for sending the alerts to users and operators. This document describes how to setup alerting for:
end-users/stakeholders/customers operators/administrators Alerting for Users To receive email alerts as a user set the following values in the shoot spec:</description></item><item><title>Alerting</title><link>https://gardener.cloud/v1.12.8/concepts/monitoring/alerting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/monitoring/alerting/</guid><description>Alerting Gardener uses Prometheus to gather metrics from each component. A Prometheus is deployed in each shoot control plane (on the seed) which is responsible for gathering control plane and cluster metrics. Prometheus can be configured to fire alerts based on these metrics and send them to an alertmanager. The alertmanager is responsible for sending the alerts to users and operators. This document describes how to setup alerting for:
end-users/stakeholders/customers operators/administrators Alerting for Users To receive email alerts as a user set the following values in the shoot spec:</description></item><item><title>Alerting</title><link>https://gardener.cloud/v1.13.2/concepts/monitoring/alerting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/monitoring/alerting/</guid><description>Alerting Gardener uses Prometheus to gather metrics from each component. A Prometheus is deployed in each shoot control plane (on the seed) which is responsible for gathering control plane and cluster metrics. Prometheus can be configured to fire alerts based on these metrics and send them to an alertmanager. The alertmanager is responsible for sending the alerts to users and operators. This document describes how to setup alerting for:
end-users/stakeholders/customers operators/administrators Alerting for Users To receive email alerts as a user set the following values in the shoot spec:</description></item><item><title>Alerting</title><link>https://gardener.cloud/v1.14.0/concepts/monitoring/alerting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/monitoring/alerting/</guid><description>Alerting Gardener uses Prometheus to gather metrics from each component. A Prometheus is deployed in each shoot control plane (on the seed) which is responsible for gathering control plane and cluster metrics. Prometheus can be configured to fire alerts based on these metrics and send them to an alertmanager. The alertmanager is responsible for sending the alerts to users and operators. This document describes how to setup alerting for:
end-users/stakeholders/customers operators/administrators Alerting for Users To receive email alerts as a user set the following values in the shoot spec:</description></item><item><title>Alerting</title><link>https://gardener.cloud/v1.15.5/concepts/monitoring/alerting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/monitoring/alerting/</guid><description>Alerting Gardener uses Prometheus to gather metrics from each component. A Prometheus is deployed in each shoot control plane (on the seed) which is responsible for gathering control plane and cluster metrics. Prometheus can be configured to fire alerts based on these metrics and send them to an alertmanager. The alertmanager is responsible for sending the alerts to users and operators. This document describes how to setup alerting for:
end-users/stakeholders/customers operators/administrators Alerting for Users To receive email alerts as a user set the following values in the shoot spec:</description></item><item><title>Alerting</title><link>https://gardener.cloud/v1.16.3/concepts/monitoring/alerting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/monitoring/alerting/</guid><description>Alerting Gardener uses Prometheus to gather metrics from each component. A Prometheus is deployed in each shoot control plane (on the seed) which is responsible for gathering control plane and cluster metrics. Prometheus can be configured to fire alerts based on these metrics and send them to an alertmanager. The alertmanager is responsible for sending the alerts to users and operators. This document describes how to setup alerting for:
end-users/stakeholders/customers operators/administrators Alerting for Users To receive email alerts as a user set the following values in the shoot spec:</description></item><item><title>Automatic Deployment of Gardenlets</title><link>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet_automatically/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet_automatically/</guid><description>Automatic Deployment of Gardenlets The gardenlet can automatically deploy itself into shoot clusters, and register this cluster as a seed cluster. These clusters are called &amp;ldquo;managed seeds&amp;rdquo; (aka &amp;ldquo;shooted seeds&amp;rdquo;). This procedure is the preferred way to add additional seed clusters, because shoot clusters already come with production-grade qualities that are also demanded for seed clusters.
Prerequisites The only prerequisite is to register an initial cluster as a seed cluster that has already a gardenlet deployed:</description></item><item><title>Automatic Deployment of Gardenlets</title><link>https://gardener.cloud/v1.12.8/concepts/deployment/deploy_gardenlet_automatically/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/deployment/deploy_gardenlet_automatically/</guid><description>Automatic Deployment of Gardenlets The gardenlet can automatically deploy itself into shoot clusters, and register this cluster as a seed cluster. These clusters are called &amp;ldquo;managed seeds&amp;rdquo; (aka &amp;ldquo;shooted seeds&amp;rdquo;). This procedure is the preferred way to add additional seed clusters, because shoot clusters already come with production-grade qualities that are also demanded for seed clusters.
Prerequisites The only prerequisite is to register an initial cluster as a seed cluster that has already a gardenlet deployed:</description></item><item><title>Automatic Deployment of Gardenlets</title><link>https://gardener.cloud/v1.13.2/concepts/deployment/deploy_gardenlet_automatically/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/deployment/deploy_gardenlet_automatically/</guid><description>Automatic Deployment of Gardenlets The gardenlet can automatically deploy itself into shoot clusters, and register this cluster as a seed cluster. These clusters are called &amp;ldquo;managed seeds&amp;rdquo; (aka &amp;ldquo;shooted seeds&amp;rdquo;). This procedure is the preferred way to add additional seed clusters, because shoot clusters already come with production-grade qualities that are also demanded for seed clusters.
Prerequisites The only prerequisite is to register an initial cluster as a seed cluster that has already a gardenlet deployed:</description></item><item><title>Automatic Deployment of Gardenlets</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/deploy_gardenlet_automatically/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/deploy_gardenlet_automatically/</guid><description>Automatic Deployment of Gardenlets The gardenlet can automatically deploy itself into shoot clusters, and register this cluster as a seed cluster. These clusters are called &amp;ldquo;managed seeds&amp;rdquo; (aka &amp;ldquo;shooted seeds&amp;rdquo;). This procedure is the preferred way to add additional seed clusters, because shoot clusters already come with production-grade qualities that are also demanded for seed clusters.
Prerequisites The only prerequisite is to register an initial cluster as a seed cluster that has already a gardenlet deployed:</description></item><item><title>Automatic Deployment of Gardenlets</title><link>https://gardener.cloud/v1.15.5/concepts/deployment/deploy_gardenlet_automatically/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/deployment/deploy_gardenlet_automatically/</guid><description>Automatic Deployment of Gardenlets The gardenlet can automatically deploy itself into shoot clusters, and register this cluster as a seed cluster. These clusters are called &amp;ldquo;managed seeds&amp;rdquo; (aka &amp;ldquo;shooted seeds&amp;rdquo;). This procedure is the preferred way to add additional seed clusters, because shoot clusters already come with production-grade qualities that are also demanded for seed clusters.
Prerequisites The only prerequisite is to register an initial cluster as a seed cluster that has already a gardenlet deployed:</description></item><item><title>Automatic Deployment of Gardenlets</title><link>https://gardener.cloud/v1.16.3/concepts/deployment/deploy_gardenlet_automatically/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/deployment/deploy_gardenlet_automatically/</guid><description>Automatic Deployment of Gardenlets The gardenlet can automatically deploy itself into shoot clusters, and register this cluster as a seed cluster. These clusters are called &amp;ldquo;managed seeds&amp;rdquo; (aka &amp;ldquo;shooted seeds&amp;rdquo;). This procedure is the preferred way to add additional seed clusters, because shoot clusters already come with production-grade qualities that are also demanded for seed clusters.
Prerequisites The only prerequisite is to register an initial cluster as a seed cluster that has already a gardenlet deployed:</description></item><item><title>BackupBucket resource</title><link>https://gardener.cloud/documentation/concepts/extensions/backupbucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/backupbucket/</guid><description>Contract: BackupBucket resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) to be created and configured externally with appropriate credentials. The BackupBucket resource takes this responsibility in Gardener.
Before introducing the BackupBucket extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here).</description></item><item><title>BackupBucket resource</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/backupbucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/backupbucket/</guid><description>Contract: BackupBucket resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) to be created and configured externally with appropriate credentials. The BackupBucket resource takes this responsibility in Gardener.
Before introducing the BackupBucket extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here).</description></item><item><title>BackupBucket resource</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/backupbucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/backupbucket/</guid><description>Contract: BackupBucket resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) to be created and configured externally with appropriate credentials. The BackupBucket resource takes this responsibility in Gardener.
Before introducing the BackupBucket extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here).</description></item><item><title>BackupBucket resource</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/backupbucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/backupbucket/</guid><description>Contract: BackupBucket resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) to be created and configured externally with appropriate credentials. The BackupBucket resource takes this responsibility in Gardener.
Before introducing the BackupBucket extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here).</description></item><item><title>BackupBucket resource</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/backupbucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/backupbucket/</guid><description>Contract: BackupBucket resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) to be created and configured externally with appropriate credentials. The BackupBucket resource takes this responsibility in Gardener.
Before introducing the BackupBucket extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here).</description></item><item><title>BackupBucket resource</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/backupbucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/backupbucket/</guid><description>Contract: BackupBucket resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) to be created and configured externally with appropriate credentials. The BackupBucket resource takes this responsibility in Gardener.
Before introducing the BackupBucket extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here).</description></item><item><title>BackupEntry resource</title><link>https://gardener.cloud/documentation/concepts/extensions/backupentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/backupentry/</guid><description>Contract: BackupEntry resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) access credentials to be created and configured externally with appropriate credentials. The BackupEntry resource takes this responsibility in Gardener to provide this information by creating a secret specific to the component. Said that, the core motivation for introducing this resource was to support retention of backups post deletion of Shoot.</description></item><item><title>BackupEntry resource</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/backupentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/backupentry/</guid><description>Contract: BackupEntry resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) access credentials to be created and configured externally with appropriate credentials. The BackupEntry resource takes this responsibility in Gardener to provide this information by creating a secret specific to the component. Said that, the core motivation for introducing this resource was to support retention of backups post deletion of Shoot.</description></item><item><title>BackupEntry resource</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/backupentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/backupentry/</guid><description>Contract: BackupEntry resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) access credentials to be created and configured externally with appropriate credentials. The BackupEntry resource takes this responsibility in Gardener to provide this information by creating a secret specific to the component. Said that, the core motivation for introducing this resource was to support retention of backups post deletion of Shoot.</description></item><item><title>BackupEntry resource</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/backupentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/backupentry/</guid><description>Contract: BackupEntry resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) access credentials to be created and configured externally with appropriate credentials. The BackupEntry resource takes this responsibility in Gardener to provide this information by creating a secret specific to the component. Said that, the core motivation for introducing this resource was to support retention of backups post deletion of Shoot.</description></item><item><title>BackupEntry resource</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/backupentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/backupentry/</guid><description>Contract: BackupEntry resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) access credentials to be created and configured externally with appropriate credentials. The BackupEntry resource takes this responsibility in Gardener to provide this information by creating a secret specific to the component. Said that, the core motivation for introducing this resource was to support retention of backups post deletion of Shoot.</description></item><item><title>BackupEntry resource</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/backupentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/backupentry/</guid><description>Contract: BackupEntry resource The Gardener project features a sub-project called etcd-backup-restore to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) access credentials to be created and configured externally with appropriate credentials. The BackupEntry resource takes this responsibility in Gardener to provide this information by creating a secret specific to the component. Said that, the core motivation for introducing this resource was to support retention of backups post deletion of Shoot.</description></item><item><title>Bouquet</title><link>https://gardener.cloud/components/bouquet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/bouquet/</guid><description>Bouquet Bouquet is a draft addon manager for the Gardener. It incorporates some of the requested features of the community but not yet all of them.
Caution: This software is early alpha. It is not meant for production use and shall (currently) only serve as a possible outlook of what is possible with pre-deployed software on Gardener Kubernetes clusters.
Installation If you want to deploy Bouquet on a target Gardener cluster, run the following:</description></item><item><title>Bouquet</title><link>https://gardener.cloud/components/bouquet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/bouquet/</guid><description>Bouquet Bouquet is a draft addon manager for the Gardener. It incorporates some of the requested features of the community but not yet all of them.
Caution: This software is early alpha. It is not meant for production use and shall (currently) only serve as a possible outlook of what is possible with pre-deployed software on Gardener Kubernetes clusters.
Installation If you want to deploy Bouquet on a target Gardener cluster, run the following:</description></item><item><title>Bouquet</title><link>https://gardener.cloud/components/bouquet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/bouquet/</guid><description>Bouquet Bouquet is a draft addon manager for the Gardener. It incorporates some of the requested features of the community but not yet all of them.
Caution: This software is early alpha. It is not meant for production use and shall (currently) only serve as a possible outlook of what is possible with pre-deployed software on Gardener Kubernetes clusters.
Installation If you want to deploy Bouquet on a target Gardener cluster, run the following:</description></item><item><title>Bouquet</title><link>https://gardener.cloud/components/bouquet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/bouquet/</guid><description>Bouquet Bouquet is a draft addon manager for the Gardener. It incorporates some of the requested features of the community but not yet all of them.
Caution: This software is early alpha. It is not meant for production use and shall (currently) only serve as a possible outlook of what is possible with pre-deployed software on Gardener Kubernetes clusters.
Installation If you want to deploy Bouquet on a target Gardener cluster, run the following:</description></item><item><title>Bouquet</title><link>https://gardener.cloud/components/bouquet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/bouquet/</guid><description>Bouquet Bouquet is a draft addon manager for the Gardener. It incorporates some of the requested features of the community but not yet all of them.
Caution: This software is early alpha. It is not meant for production use and shall (currently) only serve as a possible outlook of what is possible with pre-deployed software on Gardener Kubernetes clusters.
Installation If you want to deploy Bouquet on a target Gardener cluster, run the following:</description></item><item><title>Bouquet</title><link>https://gardener.cloud/components/bouquet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/bouquet/</guid><description>Bouquet Bouquet is a draft addon manager for the Gardener. It incorporates some of the requested features of the community but not yet all of them.
Caution: This software is early alpha. It is not meant for production use and shall (currently) only serve as a possible outlook of what is possible with pre-deployed software on Gardener Kubernetes clusters.
Installation If you want to deploy Bouquet on a target Gardener cluster, run the following:</description></item><item><title>Cluster Overprovisioning</title><link>https://gardener.cloud/documentation/tutorials/node-overprovisioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/tutorials/node-overprovisioning/</guid><description>Cluster Overprovisioning This tutorial describes how to overprovisioning of cluster nodes for scaling and failover. This is desired when you have work loads that need to scale up quickly without waiting for the new cluster nodes to be created and join the cluster.
A similar problem occurs when crashing a node from the Hyperscaler. This must be replaced by Kubernetes as fast as possible. The solution can be overprovisioning of nodes</description></item><item><title>Cluster Overprovisioning</title><link>https://gardener.cloud/v1.12.8/tutorials/node-overprovisioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/tutorials/node-overprovisioning/</guid><description>Cluster Overprovisioning This tutorial describes how to overprovisioning of cluster nodes for scaling and failover. This is desired when you have work loads that need to scale up quickly without waiting for the new cluster nodes to be created and join the cluster.
A similar problem occurs when crashing a node from the Hyperscaler. This must be replaced by Kubernetes as fast as possible. The solution can be overprovisioning of nodes</description></item><item><title>Cluster Overprovisioning</title><link>https://gardener.cloud/v1.13.2/tutorials/node-overprovisioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/tutorials/node-overprovisioning/</guid><description>Cluster Overprovisioning This tutorial describes how to overprovisioning of cluster nodes for scaling and failover. This is desired when you have work loads that need to scale up quickly without waiting for the new cluster nodes to be created and join the cluster.
A similar problem occurs when crashing a node from the Hyperscaler. This must be replaced by Kubernetes as fast as possible. The solution can be overprovisioning of nodes</description></item><item><title>Cluster Overprovisioning</title><link>https://gardener.cloud/v1.14.0/tutorials/node-overprovisioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/tutorials/node-overprovisioning/</guid><description>Cluster Overprovisioning This tutorial describes how to overprovisioning of cluster nodes for scaling and failover. This is desired when you have work loads that need to scale up quickly without waiting for the new cluster nodes to be created and join the cluster.
A similar problem occurs when crashing a node from the Hyperscaler. This must be replaced by Kubernetes as fast as possible. The solution can be overprovisioning of nodes</description></item><item><title>Cluster Overprovisioning</title><link>https://gardener.cloud/v1.15.5/tutorials/node-overprovisioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/tutorials/node-overprovisioning/</guid><description>Cluster Overprovisioning This tutorial describes how to overprovisioning of cluster nodes for scaling and failover. This is desired when you have work loads that need to scale up quickly without waiting for the new cluster nodes to be created and join the cluster.
A similar problem occurs when crashing a node from the Hyperscaler. This must be replaced by Kubernetes as fast as possible. The solution can be overprovisioning of nodes</description></item><item><title>Cluster Overprovisioning</title><link>https://gardener.cloud/v1.16.3/tutorials/node-overprovisioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/tutorials/node-overprovisioning/</guid><description>Cluster Overprovisioning This tutorial describes how to overprovisioning of cluster nodes for scaling and failover. This is desired when you have work loads that need to scale up quickly without waiting for the new cluster nodes to be created and join the cluster.
A similar problem occurs when crashing a node from the Hyperscaler. This must be replaced by Kubernetes as fast as possible. The solution can be overprovisioning of nodes</description></item><item><title>Cluster resource</title><link>https://gardener.cloud/documentation/concepts/extensions/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/cluster/</guid><description>Cluster resource As part of the extensibility epic a lot of responsibility that was previously taken over by Gardener directly has now been shifted to extension controllers running in the seed clusters. These extensions often serve a well-defined purpose, e.g. the management of DNS records, infrastructure, etc. We have introduced a couple of extension CRDs in the seeds whose specification is written by Gardener, and which are acted up by the extensions.</description></item><item><title>Cluster resource</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/cluster/</guid><description>Cluster resource As part of the extensibility epic a lot of responsibility that was previously taken over by Gardener directly has now been shifted to extension controllers running in the seed clusters. These extensions often serve a well-defined purpose, e.g. the management of DNS records, infrastructure, etc. We have introduced a couple of extension CRDs in the seeds whose specification is written by Gardener, and which are acted up by the extensions.</description></item><item><title>Cluster resource</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/cluster/</guid><description>Cluster resource As part of the extensibility epic a lot of responsibility that was previously taken over by Gardener directly has now been shifted to extension controllers running in the seed clusters. These extensions often serve a well-defined purpose, e.g. the management of DNS records, infrastructure, etc. We have introduced a couple of extension CRDs in the seeds whose specification is written by Gardener, and which are acted up by the extensions.</description></item><item><title>Cluster resource</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/cluster/</guid><description>Cluster resource As part of the extensibility epic a lot of responsibility that was previously taken over by Gardener directly has now been shifted to extension controllers running in the seed clusters. These extensions often serve a well-defined purpose, e.g. the management of DNS records, infrastructure, etc. We have introduced a couple of extension CRDs in the seeds whose specification is written by Gardener, and which are acted up by the extensions.</description></item><item><title>Cluster resource</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/cluster/</guid><description>Cluster resource As part of the extensibility epic a lot of responsibility that was previously taken over by Gardener directly has now been shifted to extension controllers running in the seed clusters. These extensions often serve a well-defined purpose, e.g. the management of DNS records, infrastructure, etc. We have introduced a couple of extension CRDs in the seeds whose specification is written by Gardener, and which are acted up by the extensions.</description></item><item><title>Cluster resource</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/cluster/</guid><description>Cluster resource As part of the extensibility epic a lot of responsibility that was previously taken over by Gardener directly has now been shifted to extension controllers running in the seed clusters. These extensions often serve a well-defined purpose, e.g. the management of DNS records, infrastructure, etc. We have introduced a couple of extension CRDs in the seeds whose specification is written by Gardener, and which are acted up by the extensions.</description></item><item><title>Contributing to shoot health status conditions</title><link>https://gardener.cloud/documentation/concepts/extensions/shoot-health-status-conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/shoot-health-status-conditions/</guid><description>Contributing to shoot health status conditions Gardener checks regularly (every minute by default) the health status of all shoot clusters. It categorizes its checks into four different types:
APIServerAvailable: This type indicates whether the shoot&amp;rsquo;s kube-apiserver is available or not. ControlPlaneHealthy: This type indicates whether all the control plane components deployed to the shoot&amp;rsquo;s namespace in the seed do exist and are running fine. EveryNodeReady: This type indicates whether all Nodes and all Machine objects report healthiness.</description></item><item><title>Contributing to shoot health status conditions</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/shoot-health-status-conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/shoot-health-status-conditions/</guid><description>Contributing to shoot health status conditions Gardener checks regularly (every minute by default) the health status of all shoot clusters. It categorizes its checks into four different types:
APIServerAvailable: This type indicates whether the shoot&amp;rsquo;s kube-apiserver is available or not. ControlPlaneHealthy: This type indicates whether all the control plane components deployed to the shoot&amp;rsquo;s namespace in the seed do exist and are running fine. EveryNodeReady: This type indicates whether all Nodes and all Machine objects report healthiness.</description></item><item><title>Contributing to shoot health status conditions</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/shoot-health-status-conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/shoot-health-status-conditions/</guid><description>Contributing to shoot health status conditions Gardener checks regularly (every minute by default) the health status of all shoot clusters. It categorizes its checks into four different types:
APIServerAvailable: This type indicates whether the shoot&amp;rsquo;s kube-apiserver is available or not. ControlPlaneHealthy: This type indicates whether all the control plane components deployed to the shoot&amp;rsquo;s namespace in the seed do exist and are running fine. EveryNodeReady: This type indicates whether all Nodes and all Machine objects report healthiness.</description></item><item><title>Contributing to shoot health status conditions</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/shoot-health-status-conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/shoot-health-status-conditions/</guid><description>Contributing to shoot health status conditions Gardener checks regularly (every minute by default) the health status of all shoot clusters. It categorizes its checks into four different types:
APIServerAvailable: This type indicates whether the shoot&amp;rsquo;s kube-apiserver is available or not. ControlPlaneHealthy: This type indicates whether all the control plane components deployed to the shoot&amp;rsquo;s namespace in the seed do exist and are running fine. EveryNodeReady: This type indicates whether all Nodes and all Machine objects report healthiness.</description></item><item><title>Contributing to shoot health status conditions</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/shoot-health-status-conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/shoot-health-status-conditions/</guid><description>Contributing to shoot health status conditions Gardener checks regularly (every minute by default) the health status of all shoot clusters. It categorizes its checks into four different types:
APIServerAvailable: This type indicates whether the shoot&amp;rsquo;s kube-apiserver is available or not. ControlPlaneHealthy: This type indicates whether all the control plane components deployed to the shoot&amp;rsquo;s namespace in the seed do exist and are running fine. EveryNodeReady: This type indicates whether all Nodes and all Machine objects report healthiness.</description></item><item><title>Contributing to shoot health status conditions</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/shoot-health-status-conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/shoot-health-status-conditions/</guid><description>Contributing to shoot health status conditions Gardener checks regularly (every minute by default) the health status of all shoot clusters. It categorizes its checks into four different types:
APIServerAvailable: This type indicates whether the shoot&amp;rsquo;s kube-apiserver is available or not. ControlPlaneHealthy: This type indicates whether all the control plane components deployed to the shoot&amp;rsquo;s namespace in the seed do exist and are running fine. EveryNodeReady: This type indicates whether all Nodes and all Machine objects report healthiness.</description></item><item><title>Controlplane customization webhooks</title><link>https://gardener.cloud/documentation/concepts/extensions/controlplane-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/controlplane-webhooks/</guid><description>Controlplane customization webhooks Gardener creates the Shoot controlplane in several steps of the Shoot flow. At different point of this flow, it:
deploys standard controlplane components such as kube-apiserver, kube-controller-manager, and kube-scheduler by creating the corresponding deployments, services, and other resources in the Shoot namespace. initiates the deployment of custom controlplane components by ControlPlane controllers by creating a ControlPlane resource in the Shoot namespace. In order to apply any provider-specific changes to the configuration provided by Gardener for the standard controlplane components, cloud extension providers can install mutating admission webhooks for the resources created by Gardener in the Shoot namespace.</description></item><item><title>Controlplane customization webhooks</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/controlplane-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/controlplane-webhooks/</guid><description>Controlplane customization webhooks Gardener creates the Shoot controlplane in several steps of the Shoot flow. At different point of this flow, it:
deploys standard controlplane components such as kube-apiserver, kube-controller-manager, and kube-scheduler by creating the corresponding deployments, services, and other resources in the Shoot namespace. initiates the deployment of custom controlplane components by ControlPlane controllers by creating a ControlPlane resource in the Shoot namespace. In order to apply any provider-specific changes to the configuration provided by Gardener for the standard controlplane components, cloud extension providers can install mutating admission webhooks for the resources created by Gardener in the Shoot namespace.</description></item><item><title>Controlplane customization webhooks</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/controlplane-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/controlplane-webhooks/</guid><description>Controlplane customization webhooks Gardener creates the Shoot controlplane in several steps of the Shoot flow. At different point of this flow, it:
deploys standard controlplane components such as kube-apiserver, kube-controller-manager, and kube-scheduler by creating the corresponding deployments, services, and other resources in the Shoot namespace. initiates the deployment of custom controlplane components by ControlPlane controllers by creating a ControlPlane resource in the Shoot namespace. In order to apply any provider-specific changes to the configuration provided by Gardener for the standard controlplane components, cloud extension providers can install mutating admission webhooks for the resources created by Gardener in the Shoot namespace.</description></item><item><title>Controlplane customization webhooks</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/controlplane-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/controlplane-webhooks/</guid><description>Controlplane customization webhooks Gardener creates the Shoot controlplane in several steps of the Shoot flow. At different point of this flow, it:
deploys standard controlplane components such as kube-apiserver, kube-controller-manager, and kube-scheduler by creating the corresponding deployments, services, and other resources in the Shoot namespace. initiates the deployment of custom controlplane components by ControlPlane controllers by creating a ControlPlane resource in the Shoot namespace. In order to apply any provider-specific changes to the configuration provided by Gardener for the standard controlplane components, cloud extension providers can install mutating admission webhooks for the resources created by Gardener in the Shoot namespace.</description></item><item><title>Controlplane customization webhooks</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/controlplane-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/controlplane-webhooks/</guid><description>Controlplane customization webhooks Gardener creates the Shoot controlplane in several steps of the Shoot flow. At different point of this flow, it:
deploys standard controlplane components such as kube-apiserver, kube-controller-manager, and kube-scheduler by creating the corresponding deployments, services, and other resources in the Shoot namespace. initiates the deployment of custom controlplane components by ControlPlane controllers by creating a ControlPlane resource in the Shoot namespace. In order to apply any provider-specific changes to the configuration provided by Gardener for the standard controlplane components, cloud extension providers can install mutating admission webhooks for the resources created by Gardener in the Shoot namespace.</description></item><item><title>Controlplane customization webhooks</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/controlplane-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/controlplane-webhooks/</guid><description>Controlplane customization webhooks Gardener creates the Shoot controlplane in several steps of the Shoot flow. At different point of this flow, it:
deploys standard controlplane components such as kube-apiserver, kube-controller-manager, and kube-scheduler by creating the corresponding deployments, services, and other resources in the Shoot namespace. initiates the deployment of custom controlplane components by ControlPlane controllers by creating a ControlPlane resource in the Shoot namespace. In order to apply any provider-specific changes to the configuration provided by Gardener for the standard controlplane components, cloud extension providers can install mutating admission webhooks for the resources created by Gardener in the Shoot namespace.</description></item><item><title>ControlPlane resource</title><link>https://gardener.cloud/documentation/concepts/extensions/controlplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/controlplane/</guid><description>Contract: ControlPlane resource Most Kubernetes clusters require a cloud-controller-manager or CSI drivers in order to work properly. Before introducing the ControlPlane extension resource Gardener was having several different Helm charts for the cloud-controller-manager deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane customization webhooks document Gardener shall not deploy any cloud-controller-manager or any other provider-specific component.</description></item><item><title>ControlPlane resource</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/controlplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/controlplane/</guid><description>Contract: ControlPlane resource Most Kubernetes clusters require a cloud-controller-manager or CSI drivers in order to work properly. Before introducing the ControlPlane extension resource Gardener was having several different Helm charts for the cloud-controller-manager deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane customization webhooks document Gardener shall not deploy any cloud-controller-manager or any other provider-specific component.</description></item><item><title>ControlPlane resource</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/controlplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/controlplane/</guid><description>Contract: ControlPlane resource Most Kubernetes clusters require a cloud-controller-manager or CSI drivers in order to work properly. Before introducing the ControlPlane extension resource Gardener was having several different Helm charts for the cloud-controller-manager deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane customization webhooks document Gardener shall not deploy any cloud-controller-manager or any other provider-specific component.</description></item><item><title>ControlPlane resource</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/controlplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/controlplane/</guid><description>Contract: ControlPlane resource Most Kubernetes clusters require a cloud-controller-manager or CSI drivers in order to work properly. Before introducing the ControlPlane extension resource Gardener was having several different Helm charts for the cloud-controller-manager deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane customization webhooks document Gardener shall not deploy any cloud-controller-manager or any other provider-specific component.</description></item><item><title>ControlPlane resource</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/controlplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/controlplane/</guid><description>Contract: ControlPlane resource Most Kubernetes clusters require a cloud-controller-manager or CSI drivers in order to work properly. Before introducing the ControlPlane extension resource Gardener was having several different Helm charts for the cloud-controller-manager deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane customization webhooks document Gardener shall not deploy any cloud-controller-manager or any other provider-specific component.</description></item><item><title>ControlPlane resource</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/controlplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/controlplane/</guid><description>Contract: ControlPlane resource Most Kubernetes clusters require a cloud-controller-manager or CSI drivers in order to work properly. Before introducing the ControlPlane extension resource Gardener was having several different Helm charts for the cloud-controller-manager deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane customization webhooks document Gardener shall not deploy any cloud-controller-manager or any other provider-specific component.</description></item><item><title>ControlPlane resource with purpose exposure</title><link>https://gardener.cloud/documentation/concepts/extensions/controlplane-exposure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/controlplane-exposure/</guid><description>Contract: ControlPlane resource with purpose exposure Some Kubernetes clusters require an additional deployments required by the seed cloud provider in order to work properly, e.g. AWS Load Balancer Readvertiser. Before using ControlPlane resources with purpose exposure Gardener was having different Helm charts for the deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane document Gardener shall not deploy any other provider-specific component.</description></item><item><title>ControlPlane resource with purpose exposure</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/controlplane-exposure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/controlplane-exposure/</guid><description>Contract: ControlPlane resource with purpose exposure Some Kubernetes clusters require an additional deployments required by the seed cloud provider in order to work properly, e.g. AWS Load Balancer Readvertiser. Before using ControlPlane resources with purpose exposure Gardener was having different Helm charts for the deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane document Gardener shall not deploy any other provider-specific component.</description></item><item><title>ControlPlane resource with purpose exposure</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/controlplane-exposure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/controlplane-exposure/</guid><description>Contract: ControlPlane resource with purpose exposure Some Kubernetes clusters require an additional deployments required by the seed cloud provider in order to work properly, e.g. AWS Load Balancer Readvertiser. Before using ControlPlane resources with purpose exposure Gardener was having different Helm charts for the deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane document Gardener shall not deploy any other provider-specific component.</description></item><item><title>ControlPlane resource with purpose exposure</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/controlplane-exposure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/controlplane-exposure/</guid><description>Contract: ControlPlane resource with purpose exposure Some Kubernetes clusters require an additional deployments required by the seed cloud provider in order to work properly, e.g. AWS Load Balancer Readvertiser. Before using ControlPlane resources with purpose exposure Gardener was having different Helm charts for the deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane document Gardener shall not deploy any other provider-specific component.</description></item><item><title>ControlPlane resource with purpose exposure</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/controlplane-exposure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/controlplane-exposure/</guid><description>Contract: ControlPlane resource with purpose exposure Some Kubernetes clusters require an additional deployments required by the seed cloud provider in order to work properly, e.g. AWS Load Balancer Readvertiser. Before using ControlPlane resources with purpose exposure Gardener was having different Helm charts for the deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane document Gardener shall not deploy any other provider-specific component.</description></item><item><title>ControlPlane resource with purpose exposure</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/controlplane-exposure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/controlplane-exposure/</guid><description>Contract: ControlPlane resource with purpose exposure Some Kubernetes clusters require an additional deployments required by the seed cloud provider in order to work properly, e.g. AWS Load Balancer Readvertiser. Before using ControlPlane resources with purpose exposure Gardener was having different Helm charts for the deployments for the various providers. Now, Gardener commissions an external, provider-specific controller to take over this task.
Which control plane resources are required? As mentioned in the controlplane document Gardener shall not deploy any other provider-specific component.</description></item><item><title>Dashboard</title><link>https://gardener.cloud/components/dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/dashboard/</guid><description>Gardener Dashboard
Demo Development Setup Install Install all dependencies
yarn Configuration KUBECONFIG If the dashboard is not running in the Garden Cluster you have to point the kubeconfig to Garden Cluster. This can be done in the default kubeconfig file in ${HOME}/.kube/config or by the KUBECONFIG environment variable.
GARDENER_CONFIG The configuration file of the Gardener Dashboard can be specified as first command line argument or as environment variable GARDENER_CONFIG at the server process.</description></item><item><title>Dashboard</title><link>https://gardener.cloud/components/dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/dashboard/</guid><description>Gardener Dashboard
Demo Development Setup Install Install all dependencies
yarn Configuration KUBECONFIG If the dashboard is not running in the Garden Cluster you have to point the kubeconfig to Garden Cluster. This can be done in the default kubeconfig file in ${HOME}/.kube/config or by the KUBECONFIG environment variable.
GARDENER_CONFIG The configuration file of the Gardener Dashboard can be specified as first command line argument or as environment variable GARDENER_CONFIG at the server process.</description></item><item><title>Dashboard</title><link>https://gardener.cloud/components/dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/dashboard/</guid><description>Gardener Dashboard
Demo Development Setup Install Install all dependencies
yarn Configuration KUBECONFIG If the dashboard is not running in the Garden Cluster you have to point the kubeconfig to Garden Cluster. This can be done in the default kubeconfig file in ${HOME}/.kube/config or by the KUBECONFIG environment variable.
GARDENER_CONFIG The configuration file of the Gardener Dashboard can be specified as first command line argument or as environment variable GARDENER_CONFIG at the server process.</description></item><item><title>Dashboard</title><link>https://gardener.cloud/components/dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/dashboard/</guid><description>Gardener Dashboard
Demo Development Setup Install Install all dependencies
yarn Configuration KUBECONFIG If the dashboard is not running in the Garden Cluster you have to point the kubeconfig to Garden Cluster. This can be done in the default kubeconfig file in ${HOME}/.kube/config or by the KUBECONFIG environment variable.
GARDENER_CONFIG The configuration file of the Gardener Dashboard can be specified as first command line argument or as environment variable GARDENER_CONFIG at the server process.</description></item><item><title>Dashboard</title><link>https://gardener.cloud/components/dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/dashboard/</guid><description>Gardener Dashboard
Demo Development Setup Install Install all dependencies
yarn Configuration KUBECONFIG If the dashboard is not running in the Garden Cluster you have to point the kubeconfig to Garden Cluster. This can be done in the default kubeconfig file in ${HOME}/.kube/config or by the KUBECONFIG environment variable.
GARDENER_CONFIG The configuration file of the Gardener Dashboard can be specified as first command line argument or as environment variable GARDENER_CONFIG at the server process.</description></item><item><title>Dashboard</title><link>https://gardener.cloud/components/dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/dashboard/</guid><description>Gardener Dashboard
Demo Development Setup Install Install all dependencies
yarn Configuration KUBECONFIG If the dashboard is not running in the Garden Cluster you have to point the kubeconfig to Garden Cluster. This can be done in the default kubeconfig file in ${HOME}/.kube/config or by the KUBECONFIG environment variable.
GARDENER_CONFIG The configuration file of the Gardener Dashboard can be specified as first command line argument or as environment variable GARDENER_CONFIG at the server process.</description></item><item><title>Deploy a Gardenlet Manually</title><link>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet_manually/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet_manually/</guid><description>Deploy a Gardenlet Manually Manually deploying a gardenlet is required in the following cases:
The Kubernetes cluster to be registered as a seed cluster has no public endpoint, because it is behind a firewall. The gardenlet must then be deployed into the cluster itself.
The Kubernetes cluster to be registered as a seed cluster is managed externally (the Kubernetes cluster is not a shoot cluster, so Automatic Deployment of Gardenlets cannot be used).</description></item><item><title>Deploy a Gardenlet Manually</title><link>https://gardener.cloud/v1.12.8/concepts/deployment/deploy_gardenlet_manually/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/deployment/deploy_gardenlet_manually/</guid><description>Deploy a Gardenlet Manually Manually deploying a gardenlet is required in the following cases:
The Kubernetes cluster to be registered as a seed cluster has no public endpoint, because it is behind a firewall. The gardenlet must then be deployed into the cluster itself.
The Kubernetes cluster to be registered as a seed cluster is managed externally (the Kubernetes cluster is not a shoot cluster, so Automatic Deployment of Gardenlets cannot be used).</description></item><item><title>Deploy a Gardenlet Manually</title><link>https://gardener.cloud/v1.13.2/concepts/deployment/deploy_gardenlet_manually/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/deployment/deploy_gardenlet_manually/</guid><description>Deploy a Gardenlet Manually Manually deploying a gardenlet is required in the following cases:
The Kubernetes cluster to be registered as a seed cluster has no public endpoint, because it is behind a firewall. The gardenlet must then be deployed into the cluster itself.
The Kubernetes cluster to be registered as a seed cluster is managed externally (the Kubernetes cluster is not a shoot cluster, so Automatic Deployment of Gardenlets cannot be used).</description></item><item><title>Deploy a Gardenlet Manually</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/deploy_gardenlet_manually/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/deploy_gardenlet_manually/</guid><description>Deploy a Gardenlet Manually Manually deploying a gardenlet is required in the following cases:
The Kubernetes cluster to be registered as a seed cluster has no public endpoint, because it is behind a firewall. The gardenlet must then be deployed into the cluster itself.
The Kubernetes cluster to be registered as a seed cluster is managed externally (the Kubernetes cluster is not a shoot cluster, so Automatic Deployment of Gardenlets cannot be used).</description></item><item><title>Deploy a Gardenlet Manually</title><link>https://gardener.cloud/v1.15.5/concepts/deployment/deploy_gardenlet_manually/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/deployment/deploy_gardenlet_manually/</guid><description>Deploy a Gardenlet Manually Manually deploying a gardenlet is required in the following cases:
The Kubernetes cluster to be registered as a seed cluster has no public endpoint, because it is behind a firewall. The gardenlet must then be deployed into the cluster itself.
The Kubernetes cluster to be registered as a seed cluster is managed externally (the Kubernetes cluster is not a shoot cluster, so Automatic Deployment of Gardenlets cannot be used).</description></item><item><title>Deploy a Gardenlet Manually</title><link>https://gardener.cloud/v1.16.3/concepts/deployment/deploy_gardenlet_manually/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/deployment/deploy_gardenlet_manually/</guid><description>Deploy a Gardenlet Manually Manually deploying a gardenlet is required in the following cases:
The Kubernetes cluster to be registered as a seed cluster has no public endpoint, because it is behind a firewall. The gardenlet must then be deployed into the cluster itself.
The Kubernetes cluster to be registered as a seed cluster is managed externally (the Kubernetes cluster is not a shoot cluster, so Automatic Deployment of Gardenlets cannot be used).</description></item><item><title>Deploying Gardenlets</title><link>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/deploy_gardenlet/</guid><description>Deploying Gardenlets Gardenlets act as decentral &amp;ldquo;agents&amp;rdquo; to manage shoot clusters of a seed cluster.
To support scaleability in an automated way, gardenlets are deployed automatically. However, you can still deploy gardenlets manually to be more flexible, for example, when shoot clusters that need to be managed by Gardener are behind a firewall. The gardenlet only requires network connectivity from the gardenlet to the Garden cluster (not the other way round), so it can be used to register Kubernetes clusters with no public endpoint.</description></item><item><title>Deploying Gardenlets</title><link>https://gardener.cloud/v1.12.8/concepts/deployment/deploy_gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/deployment/deploy_gardenlet/</guid><description>Deploying Gardenlets Gardenlets act as decentral &amp;ldquo;agents&amp;rdquo; to manage shoot clusters of a seed cluster.
To support scaleability in an automated way, gardenlets are deployed automatically. However, you can still deploy gardenlets manually to be more flexible, for example, when shoot clusters that need to be managed by Gardener are behind a firewall. The gardenlet only requires network connectivity from the gardenlet to the Garden cluster (not the other way round), so it can be used to register Kubernetes clusters with no public endpoint.</description></item><item><title>Deploying Gardenlets</title><link>https://gardener.cloud/v1.13.2/concepts/deployment/deploy_gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/deployment/deploy_gardenlet/</guid><description>Deploying Gardenlets Gardenlets act as decentral &amp;ldquo;agents&amp;rdquo; to manage shoot clusters of a seed cluster.
To support scaleability in an automated way, gardenlets are deployed automatically. However, you can still deploy gardenlets manually to be more flexible, for example, when shoot clusters that need to be managed by Gardener are behind a firewall. The gardenlet only requires network connectivity from the gardenlet to the Garden cluster (not the other way round), so it can be used to register Kubernetes clusters with no public endpoint.</description></item><item><title>Deploying Gardenlets</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/deploy_gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/deploy_gardenlet/</guid><description>Deploying Gardenlets Gardenlets act as decentral &amp;ldquo;agents&amp;rdquo; to manage shoot clusters of a seed cluster.
To support scaleability in an automated way, gardenlets are deployed automatically. However, you can still deploy gardenlets manually to be more flexible, for example, when shoot clusters that need to be managed by Gardener are behind a firewall. The gardenlet only requires network connectivity from the gardenlet to the Garden cluster (not the other way round), so it can be used to register Kubernetes clusters with no public endpoint.</description></item><item><title>Deploying Gardenlets</title><link>https://gardener.cloud/v1.15.5/concepts/deployment/deploy_gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/deployment/deploy_gardenlet/</guid><description>Deploying Gardenlets Gardenlets act as decentral &amp;ldquo;agents&amp;rdquo; to manage shoot clusters of a seed cluster.
To support scaleability in an automated way, gardenlets are deployed automatically. However, you can still deploy gardenlets manually to be more flexible, for example, when shoot clusters that need to be managed by Gardener are behind a firewall. The gardenlet only requires network connectivity from the gardenlet to the Garden cluster (not the other way round), so it can be used to register Kubernetes clusters with no public endpoint.</description></item><item><title>Deploying Gardenlets</title><link>https://gardener.cloud/v1.16.3/concepts/deployment/deploy_gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/deployment/deploy_gardenlet/</guid><description>Deploying Gardenlets Gardenlets act as decentral &amp;ldquo;agents&amp;rdquo; to manage shoot clusters of a seed cluster.
To support scaleability in an automated way, gardenlets are deployed automatically. However, you can still deploy gardenlets manually to be more flexible, for example, when shoot clusters that need to be managed by Gardener are behind a firewall. The gardenlet only requires network connectivity from the gardenlet to the Garden cluster (not the other way round), so it can be used to register Kubernetes clusters with no public endpoint.</description></item><item><title>Deploying the Gardener into a Kubernetes cluster</title><link>https://gardener.cloud/documentation/concepts/deployment/setup_gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/setup_gardener/</guid><description>Deploying the Gardener into a Kubernetes cluster Similar to Kubernetes, Gardener consists out of control plane components (Gardener API server, Gardener controller manager, Gardener scheduler), and an agent component (Gardenlet). The control plane is deployed in the so-called garden cluster while the agent is installed into every seed cluster. Please note that it is possible to use the garden cluster as seed cluster by simply deploying the Gardenlet into it.</description></item><item><title>Deploying the Gardener into a Kubernetes cluster</title><link>https://gardener.cloud/v1.12.8/concepts/deployment/setup_gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/deployment/setup_gardener/</guid><description>Deploying the Gardener into a Kubernetes cluster Similar to Kubernetes, Gardener consists out of control plane components (Gardener API server, Gardener controller manager, Gardener scheduler), and an agent component (Gardenlet). The control plane is deployed in the so-called garden cluster while the agent is installed into every seed cluster. Please note that it is possible to use the garden cluster as seed cluster by simply deploying the Gardenlet into it.</description></item><item><title>Deploying the Gardener into a Kubernetes cluster</title><link>https://gardener.cloud/v1.13.2/concepts/deployment/setup_gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/deployment/setup_gardener/</guid><description>Deploying the Gardener into a Kubernetes cluster Similar to Kubernetes, Gardener consists out of control plane components (Gardener API server, Gardener controller manager, Gardener scheduler), and an agent component (Gardenlet). The control plane is deployed in the so-called garden cluster while the agent is installed into every seed cluster. Please note that it is possible to use the garden cluster as seed cluster by simply deploying the Gardenlet into it.</description></item><item><title>Deploying the Gardener into a Kubernetes cluster</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/setup_gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/setup_gardener/</guid><description>Deploying the Gardener into a Kubernetes cluster Similar to Kubernetes, Gardener consists out of control plane components (Gardener API server, Gardener controller manager, Gardener scheduler), and an agent component (Gardenlet). The control plane is deployed in the so-called garden cluster while the agent is installed into every seed cluster. Please note that it is possible to use the garden cluster as seed cluster by simply deploying the Gardenlet into it.</description></item><item><title>Deploying the Gardener into a Kubernetes cluster</title><link>https://gardener.cloud/v1.15.5/concepts/deployment/setup_gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/deployment/setup_gardener/</guid><description>Deploying the Gardener into a Kubernetes cluster Similar to Kubernetes, Gardener consists out of control plane components (Gardener API server, Gardener controller manager, Gardener scheduler), and an agent component (Gardenlet). The control plane is deployed in the so-called garden cluster while the agent is installed into every seed cluster. Please note that it is possible to use the garden cluster as seed cluster by simply deploying the Gardenlet into it.</description></item><item><title>Deploying the Gardener into a Kubernetes cluster</title><link>https://gardener.cloud/v1.16.3/concepts/deployment/setup_gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/deployment/setup_gardener/</guid><description>Deploying the Gardener into a Kubernetes cluster Similar to Kubernetes, Gardener consists out of control plane components (Gardener API server, Gardener controller manager, Gardener scheduler), and an agent component (Gardenlet). The control plane is deployed in the so-called garden cluster while the agent is installed into every seed cluster. Please note that it is possible to use the garden cluster as seed cluster by simply deploying the Gardenlet into it.</description></item><item><title>Deploying the previous Gardener versions and a Seed into an AKS cluster</title><link>https://gardener.cloud/documentation/concepts/deployment/aks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/aks/</guid><description>Deploying the previous Gardener versions and a Seed into an AKS cluster This document demonstrates how to install Gardener into an existing AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the same cluster for the sake of simplicity .
Please note that this document is to provide you an example installation and is not to be used in a production environment since there are some certificates hardcoded, non-HA and non-TLS-enabled etcd setup.</description></item><item><title>Deploying the previous Gardener versions and a Seed into an AKS cluster</title><link>https://gardener.cloud/v1.12.8/concepts/deployment/aks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/deployment/aks/</guid><description>Deploying the previous Gardener versions and a Seed into an AKS cluster This document demonstrates how to install Gardener into an existing AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the same cluster for the sake of simplicity .
Please note that this document is to provide you an example installation and is not to be used in a production environment since there are some certificates hardcoded, non-HA and non-TLS-enabled etcd setup.</description></item><item><title>Deploying the previous Gardener versions and a Seed into an AKS cluster</title><link>https://gardener.cloud/v1.13.2/concepts/deployment/aks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/deployment/aks/</guid><description>Deploying the previous Gardener versions and a Seed into an AKS cluster This document demonstrates how to install Gardener into an existing AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the same cluster for the sake of simplicity .
Please note that this document is to provide you an example installation and is not to be used in a production environment since there are some certificates hardcoded, non-HA and non-TLS-enabled etcd setup.</description></item><item><title>Deploying the previous Gardener versions and a Seed into an AKS cluster</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/aks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/aks/</guid><description>Deploying the previous Gardener versions and a Seed into an AKS cluster This document demonstrates how to install Gardener into an existing AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the same cluster for the sake of simplicity .
Please note that this document is to provide you an example installation and is not to be used in a production environment since there are some certificates hardcoded, non-HA and non-TLS-enabled etcd setup.</description></item><item><title>Deploying the previous Gardener versions and a Seed into an AKS cluster</title><link>https://gardener.cloud/v1.15.5/concepts/deployment/aks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/deployment/aks/</guid><description>Deploying the previous Gardener versions and a Seed into an AKS cluster This document demonstrates how to install Gardener into an existing AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the same cluster for the sake of simplicity .
Please note that this document is to provide you an example installation and is not to be used in a production environment since there are some certificates hardcoded, non-HA and non-TLS-enabled etcd setup.</description></item><item><title>Deploying the previous Gardener versions and a Seed into an AKS cluster</title><link>https://gardener.cloud/v1.16.3/concepts/deployment/aks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/deployment/aks/</guid><description>Deploying the previous Gardener versions and a Seed into an AKS cluster This document demonstrates how to install Gardener into an existing AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the same cluster for the sake of simplicity .
Please note that this document is to provide you an example installation and is not to be used in a production environment since there are some certificates hardcoded, non-HA and non-TLS-enabled etcd setup.</description></item><item><title>DNSProvider and DNSEntry resources</title><link>https://gardener.cloud/documentation/concepts/extensions/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/dns/</guid><description>Contract: DNSProvider and DNSEntry resources Every shoot cluster requires external DNS records that are publicly resolvable. The management of these DNS records requires provider-specific knowledge which is to be developed outside of the Gardener&amp;rsquo;s core repository.
What does Gardener create DNS records for? Internal domain name Every shoot cluster&amp;rsquo;s kube-apiserver running in the seed is exposed via a load balancer that has a public endpoint (IP or hostname). This endpoint is used by end-users and also by system components (that are running in another network, e.</description></item><item><title>DNSProvider and DNSEntry resources</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/dns/</guid><description>Contract: DNSProvider and DNSEntry resources Every shoot cluster requires external DNS records that are publicly resolvable. The management of these DNS records requires provider-specific knowledge which is to be developed outside of the Gardener&amp;rsquo;s core repository.
What does Gardener create DNS records for? Internal domain name Every shoot cluster&amp;rsquo;s kube-apiserver running in the seed is exposed via a load balancer that has a public endpoint (IP or hostname). This endpoint is used by end-users and also by system components (that are running in another network, e.</description></item><item><title>DNSProvider and DNSEntry resources</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/dns/</guid><description>Contract: DNSProvider and DNSEntry resources Every shoot cluster requires external DNS records that are publicly resolvable. The management of these DNS records requires provider-specific knowledge which is to be developed outside of the Gardener&amp;rsquo;s core repository.
What does Gardener create DNS records for? Internal domain name Every shoot cluster&amp;rsquo;s kube-apiserver running in the seed is exposed via a load balancer that has a public endpoint (IP or hostname). This endpoint is used by end-users and also by system components (that are running in another network, e.</description></item><item><title>DNSProvider and DNSEntry resources</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/dns/</guid><description>Contract: DNSProvider and DNSEntry resources Every shoot cluster requires external DNS records that are publicly resolvable. The management of these DNS records requires provider-specific knowledge which is to be developed outside of the Gardener&amp;rsquo;s core repository.
What does Gardener create DNS records for? Internal domain name Every shoot cluster&amp;rsquo;s kube-apiserver running in the seed is exposed via a load balancer that has a public endpoint (IP or hostname). This endpoint is used by end-users and also by system components (that are running in another network, e.</description></item><item><title>DNSProvider and DNSEntry resources</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/dns/</guid><description>Contract: DNSProvider and DNSEntry resources Every shoot cluster requires external DNS records that are publicly resolvable. The management of these DNS records requires provider-specific knowledge which is to be developed outside of the Gardener&amp;rsquo;s core repository.
What does Gardener create DNS records for? Internal domain name Every shoot cluster&amp;rsquo;s kube-apiserver running in the seed is exposed via a load balancer that has a public endpoint (IP or hostname). This endpoint is used by end-users and also by system components (that are running in another network, e.</description></item><item><title>DNSProvider and DNSEntry resources</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/dns/</guid><description>Contract: DNSProvider and DNSEntry resources Every shoot cluster requires external DNS records that are publicly resolvable. The management of these DNS records requires provider-specific knowledge which is to be developed outside of the Gardener&amp;rsquo;s core repository.
What does Gardener create DNS records for? Internal domain name Every shoot cluster&amp;rsquo;s kube-apiserver running in the seed is exposed via a load balancer that has a public endpoint (IP or hostname). This endpoint is used by end-users and also by system components (that are running in another network, e.</description></item><item><title>Extending project roles</title><link>https://gardener.cloud/documentation/concepts/extensions/project-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/project-roles/</guid><description>Extending project roles The Project resource allows to specify a list of roles for every member (.spec.members[*].roles). There are a few standard roles defined by Gardener itself. Please consult this document for further information.
However, extension controllers running in the garden cluster may also create CustomResourceDefinitions that project members might be able to CRUD. For this purpose Gardener also allows to specify extension roles.
An extension role is prefixed with extension:, e.</description></item><item><title>Extending project roles</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/project-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/project-roles/</guid><description>Extending project roles The Project resource allows to specify a list of roles for every member (.spec.members[*].roles). There are a few standard roles defined by Gardener itself. Please consult this document for further information.
However, extension controllers running in the garden cluster may also create CustomResourceDefinitions that project members might be able to CRUD. For this purpose Gardener also allows to specify extension roles.
An extension role is prefixed with extension:, e.</description></item><item><title>Extending project roles</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/project-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/project-roles/</guid><description>Extending project roles The Project resource allows to specify a list of roles for every member (.spec.members[*].roles). There are a few standard roles defined by Gardener itself. Please consult this document for further information.
However, extension controllers running in the garden cluster may also create CustomResourceDefinitions that project members might be able to CRUD. For this purpose Gardener also allows to specify extension roles.
An extension role is prefixed with extension:, e.</description></item><item><title>Extending project roles</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/project-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/project-roles/</guid><description>Extending project roles The Project resource allows to specify a list of roles for every member (.spec.members[*].roles). There are a few standard roles defined by Gardener itself. Please consult this document for further information.
However, extension controllers running in the garden cluster may also create CustomResourceDefinitions that project members might be able to CRUD. For this purpose Gardener also allows to specify extension roles.
An extension role is prefixed with extension:, e.</description></item><item><title>Extending project roles</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/project-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/project-roles/</guid><description>Extending project roles The Project resource allows to specify a list of roles for every member (.spec.members[*].roles). There are a few standard roles defined by Gardener itself. Please consult this document for further information.
However, extension controllers running in the garden cluster may also create CustomResourceDefinitions that project members might be able to CRUD. For this purpose Gardener also allows to specify extension roles.
An extension role is prefixed with extension:, e.</description></item><item><title>Extending project roles</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/project-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/project-roles/</guid><description>Extending project roles The Project resource allows to specify a list of roles for every member (.spec.members[*].roles). There are a few standard roles defined by Gardener itself. Please consult this document for further information.
However, extension controllers running in the garden cluster may also create CustomResourceDefinitions that project members might be able to CRUD. For this purpose Gardener also allows to specify extension roles.
An extension role is prefixed with extension:, e.</description></item><item><title>Extending the Monitoring Stack</title><link>https://gardener.cloud/documentation/concepts/monitoring/extending/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/monitoring/extending/</guid><description>Extending the Monitoring Stack This document provides instructions to extend the Shoot cluster monitoring stack by integrating new scrape targets, alerts and dashboards.
Please ensure that you have understood the basic principles of Prometheus and its ecosystem before you continue.
:bangbang: The purpose of the monitoring stack is to observe the behaviour of the control plane and the system components deployed by Gardener onto the worker nodes. Monitoring of custom workloads running in the cluster is out of scope.</description></item><item><title>Extending the Monitoring Stack</title><link>https://gardener.cloud/v1.12.8/concepts/monitoring/extending/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/monitoring/extending/</guid><description>Extending the Monitoring Stack This document provides instructions to extend the Shoot cluster monitoring stack by integrating new scrape targets, alerts and dashboards.
Please ensure that you have understood the basic principles of Prometheus and its ecosystem before you continue.
:bangbang: The purpose of the monitoring stack is to observe the behaviour of the control plane and the system components deployed by Gardener onto the worker nodes. Monitoring of custom workloads running in the cluster is out of scope.</description></item><item><title>Extending the Monitoring Stack</title><link>https://gardener.cloud/v1.13.2/concepts/monitoring/extending/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/monitoring/extending/</guid><description>Extending the Monitoring Stack This document provides instructions to extend the Shoot cluster monitoring stack by integrating new scrape targets, alerts and dashboards.
Please ensure that you have understood the basic principles of Prometheus and its ecosystem before you continue.
:bangbang: The purpose of the monitoring stack is to observe the behaviour of the control plane and the system components deployed by Gardener onto the worker nodes. Monitoring of custom workloads running in the cluster is out of scope.</description></item><item><title>Extending the Monitoring Stack</title><link>https://gardener.cloud/v1.14.0/concepts/monitoring/extending/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/monitoring/extending/</guid><description>Extending the Monitoring Stack This document provides instructions to extend the Shoot cluster monitoring stack by integrating new scrape targets, alerts and dashboards.
Please ensure that you have understood the basic principles of Prometheus and its ecosystem before you continue.
:bangbang: The purpose of the monitoring stack is to observe the behaviour of the control plane and the system components deployed by Gardener onto the worker nodes. Monitoring of custom workloads running in the cluster is out of scope.</description></item><item><title>Extending the Monitoring Stack</title><link>https://gardener.cloud/v1.15.5/concepts/monitoring/extending/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/monitoring/extending/</guid><description>Extending the Monitoring Stack This document provides instructions to extend the Shoot cluster monitoring stack by integrating new scrape targets, alerts and dashboards.
Please ensure that you have understood the basic principles of Prometheus and its ecosystem before you continue.
:bangbang: The purpose of the monitoring stack is to observe the behaviour of the control plane and the system components deployed by Gardener onto the worker nodes. Monitoring of custom workloads running in the cluster is out of scope.</description></item><item><title>Extending the Monitoring Stack</title><link>https://gardener.cloud/v1.16.3/concepts/monitoring/extending/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/monitoring/extending/</guid><description>Extending the Monitoring Stack This document provides instructions to extend the Shoot cluster monitoring stack by integrating new scrape targets, alerts and dashboards.
Please ensure that you have understood the basic principles of Prometheus and its ecosystem before you continue.
:bangbang: The purpose of the monitoring stack is to observe the behaviour of the control plane and the system components deployed by Gardener onto the worker nodes. Monitoring of custom workloads running in the cluster is out of scope.</description></item><item><title>Extensibility overview</title><link>https://gardener.cloud/documentation/concepts/extensions/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/overview/</guid><description>Extensibility overview Initially, everything was developed in-tree in the Gardener project. All cloud providers and the configuration for all the supported operating systems were released together with the Gardener core itself. But as the project grew, it got more and more difficult to add new providers and maintain the existing code base. As a consequence and in order to become agile and flexible again, we proposed GEP-1 (Gardener Enhancement Proposal). The document describes an out-of-tree extension architecture that keeps the Gardener core logic independent of provider-specific knowledge (similar to what Kubernetes has achieved with out-of-tree cloud providers or with CSI volume plugins).</description></item><item><title>Extensibility overview</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/overview/</guid><description>Extensibility overview Initially, everything was developed in-tree in the Gardener project. All cloud providers and the configuration for all the supported operating systems were released together with the Gardener core itself. But as the project grew, it got more and more difficult to add new providers and maintain the existing code base. As a consequence and in order to become agile and flexible again, we proposed GEP-1 (Gardener Enhancement Proposal). The document describes an out-of-tree extension architecture that keeps the Gardener core logic independent of provider-specific knowledge (similar to what Kubernetes has achieved with out-of-tree cloud providers or with CSI volume plugins).</description></item><item><title>Extensibility overview</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/overview/</guid><description>Extensibility overview Initially, everything was developed in-tree in the Gardener project. All cloud providers and the configuration for all the supported operating systems were released together with the Gardener core itself. But as the project grew, it got more and more difficult to add new providers and maintain the existing code base. As a consequence and in order to become agile and flexible again, we proposed GEP-1 (Gardener Enhancement Proposal). The document describes an out-of-tree extension architecture that keeps the Gardener core logic independent of provider-specific knowledge (similar to what Kubernetes has achieved with out-of-tree cloud providers or with CSI volume plugins).</description></item><item><title>Extensibility overview</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/overview/</guid><description>Extensibility overview Initially, everything was developed in-tree in the Gardener project. All cloud providers and the configuration for all the supported operating systems were released together with the Gardener core itself. But as the project grew, it got more and more difficult to add new providers and maintain the existing code base. As a consequence and in order to become agile and flexible again, we proposed GEP-1 (Gardener Enhancement Proposal). The document describes an out-of-tree extension architecture that keeps the Gardener core logic independent of provider-specific knowledge (similar to what Kubernetes has achieved with out-of-tree cloud providers or with CSI volume plugins).</description></item><item><title>Extensibility overview</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/overview/</guid><description>Extensibility overview Initially, everything was developed in-tree in the Gardener project. All cloud providers and the configuration for all the supported operating systems were released together with the Gardener core itself. But as the project grew, it got more and more difficult to add new providers and maintain the existing code base. As a consequence and in order to become agile and flexible again, we proposed GEP-1 (Gardener Enhancement Proposal). The document describes an out-of-tree extension architecture that keeps the Gardener core logic independent of provider-specific knowledge (similar to what Kubernetes has achieved with out-of-tree cloud providers or with CSI volume plugins).</description></item><item><title>Extensibility overview</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/overview/</guid><description>Extensibility overview Initially, everything was developed in-tree in the Gardener project. All cloud providers and the configuration for all the supported operating systems were released together with the Gardener core itself. But as the project grew, it got more and more difficult to add new providers and maintain the existing code base. As a consequence and in order to become agile and flexible again, we proposed GEP-1 (Gardener Enhancement Proposal). The document describes an out-of-tree extension architecture that keeps the Gardener core logic independent of provider-specific knowledge (similar to what Kubernetes has achieved with out-of-tree cloud providers or with CSI volume plugins).</description></item><item><title>Extension resource</title><link>https://gardener.cloud/documentation/concepts/extensions/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/extension/</guid><description>Contract: Extension resource Gardener defines common procedures which must be passed to create a functioning shoot cluster. Well known steps are represented by special resources like Infrastructure, OperatingSystemConfig or DNS. These resources are typically reconciled by dedicated controllers setting up the infrastructure on the hyperscaler or managing DNS entries, etc..
But, some requirements don&amp;rsquo;t match with those special resources or don&amp;rsquo;t depend on being proceeded at a specific step in the creation / deletion flow of the shoot.</description></item><item><title>Extension resource</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/extension/</guid><description>Contract: Extension resource Gardener defines common procedures which must be passed to create a functioning shoot cluster. Well known steps are represented by special resources like Infrastructure, OperatingSystemConfig or DNS. These resources are typically reconciled by dedicated controllers setting up the infrastructure on the hyperscaler or managing DNS entries, etc..
But, some requirements don&amp;rsquo;t match with those special resources or don&amp;rsquo;t depend on being proceeded at a specific step in the creation / deletion flow of the shoot.</description></item><item><title>Extension resource</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/extension/</guid><description>Contract: Extension resource Gardener defines common procedures which must be passed to create a functioning shoot cluster. Well known steps are represented by special resources like Infrastructure, OperatingSystemConfig or DNS. These resources are typically reconciled by dedicated controllers setting up the infrastructure on the hyperscaler or managing DNS entries, etc..
But, some requirements don&amp;rsquo;t match with those special resources or don&amp;rsquo;t depend on being proceeded at a specific step in the creation / deletion flow of the shoot.</description></item><item><title>Extension resource</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/extension/</guid><description>Contract: Extension resource Gardener defines common procedures which must be passed to create a functioning shoot cluster. Well known steps are represented by special resources like Infrastructure, OperatingSystemConfig or DNS. These resources are typically reconciled by dedicated controllers setting up the infrastructure on the hyperscaler or managing DNS entries, etc..
But, some requirements don&amp;rsquo;t match with those special resources or don&amp;rsquo;t depend on being proceeded at a specific step in the creation / deletion flow of the shoot.</description></item><item><title>Extension resource</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/extension/</guid><description>Contract: Extension resource Gardener defines common procedures which must be passed to create a functioning shoot cluster. Well known steps are represented by special resources like Infrastructure, OperatingSystemConfig or DNS. These resources are typically reconciled by dedicated controllers setting up the infrastructure on the hyperscaler or managing DNS entries, etc..
But, some requirements don&amp;rsquo;t match with those special resources or don&amp;rsquo;t depend on being proceeded at a specific step in the creation / deletion flow of the shoot.</description></item><item><title>Extension resource</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/extension/</guid><description>Contract: Extension resource Gardener defines common procedures which must be passed to create a functioning shoot cluster. Well known steps are represented by special resources like Infrastructure, OperatingSystemConfig or DNS. These resources are typically reconciled by dedicated controllers setting up the infrastructure on the hyperscaler or managing DNS entries, etc..
But, some requirements don&amp;rsquo;t match with those special resources or don&amp;rsquo;t depend on being proceeded at a specific step in the creation / deletion flow of the shoot.</description></item><item><title>Feature Flags in Kubernetes Applications</title><link>https://gardener.cloud/documentation/tutorials/kube-featureflag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/tutorials/kube-featureflag/</guid><description>Feature Flags in Kubernetes Applications Feature flags are used to change the behavior of a program at runtime without forcing a restart.
Although they are essential in a native cloud environment, they cannot be implemented without significant effort on some platforms. Kubernetes has made this trivial. Here we will implement them through labels and annotations, but you can also implement them by connecting directly to the Kubernetes API Server.
In Kubernetes, labels are part of the identity of a resource and can be used through selectors.</description></item><item><title>Feature Flags in Kubernetes Applications</title><link>https://gardener.cloud/v1.12.8/tutorials/kube-featureflag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/tutorials/kube-featureflag/</guid><description>Feature Flags in Kubernetes Applications Feature flags are used to change the behavior of a program at runtime without forcing a restart.
Although they are essential in a native cloud environment, they cannot be implemented without significant effort on some platforms. Kubernetes has made this trivial. Here we will implement them through labels and annotations, but you can also implement them by connecting directly to the Kubernetes API Server.
In Kubernetes, labels are part of the identity of a resource and can be used through selectors.</description></item><item><title>Feature Flags in Kubernetes Applications</title><link>https://gardener.cloud/v1.13.2/tutorials/kube-featureflag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/tutorials/kube-featureflag/</guid><description>Feature Flags in Kubernetes Applications Feature flags are used to change the behavior of a program at runtime without forcing a restart.
Although they are essential in a native cloud environment, they cannot be implemented without significant effort on some platforms. Kubernetes has made this trivial. Here we will implement them through labels and annotations, but you can also implement them by connecting directly to the Kubernetes API Server.
In Kubernetes, labels are part of the identity of a resource and can be used through selectors.</description></item><item><title>Feature Flags in Kubernetes Applications</title><link>https://gardener.cloud/v1.14.0/tutorials/kube-featureflag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/tutorials/kube-featureflag/</guid><description>Feature Flags in Kubernetes Applications Feature flags are used to change the behavior of a program at runtime without forcing a restart.
Although they are essential in a native cloud environment, they cannot be implemented without significant effort on some platforms. Kubernetes has made this trivial. Here we will implement them through labels and annotations, but you can also implement them by connecting directly to the Kubernetes API Server.
In Kubernetes, labels are part of the identity of a resource and can be used through selectors.</description></item><item><title>Feature Flags in Kubernetes Applications</title><link>https://gardener.cloud/v1.15.5/tutorials/kube-featureflag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/tutorials/kube-featureflag/</guid><description>Feature Flags in Kubernetes Applications Feature flags are used to change the behavior of a program at runtime without forcing a restart.
Although they are essential in a native cloud environment, they cannot be implemented without significant effort on some platforms. Kubernetes has made this trivial. Here we will implement them through labels and annotations, but you can also implement them by connecting directly to the Kubernetes API Server.
In Kubernetes, labels are part of the identity of a resource and can be used through selectors.</description></item><item><title>Feature Flags in Kubernetes Applications</title><link>https://gardener.cloud/v1.16.3/tutorials/kube-featureflag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/tutorials/kube-featureflag/</guid><description>Feature Flags in Kubernetes Applications Feature flags are used to change the behavior of a program at runtime without forcing a restart.
Although they are essential in a native cloud environment, they cannot be implemented without significant effort on some platforms. Kubernetes has made this trivial. Here we will implement them through labels and annotations, but you can also implement them by connecting directly to the Kubernetes API Server.
In Kubernetes, labels are part of the identity of a resource and can be used through selectors.</description></item><item><title>Feature Gates</title><link>https://gardener.cloud/documentation/concepts/deployment/feature_gates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/feature_gates/</guid><description>Feature Gates in Gardener This page contains an overview of the various feature gates an administrator can specify on different Gardener components.
Overview Feature gates are a set of key=value pairs that describe Gardener features. You can turn these features on or off using the a component configuration file for a specific component.
Each Gardener component lets you enable or disable a set of feature gates that are relevant to that component.</description></item><item><title>Feature Gates</title><link>https://gardener.cloud/v1.12.8/concepts/deployment/feature_gates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/deployment/feature_gates/</guid><description>Feature Gates in Gardener This page contains an overview of the various feature gates an administrator can specify on different Gardener components.
Overview Feature gates are a set of key=value pairs that describe Gardener features. You can turn these features on or off using the a component configuration file for a specific component.
Each Gardener component lets you enable or disable a set of feature gates that are relevant to that component.</description></item><item><title>Feature Gates</title><link>https://gardener.cloud/v1.13.2/concepts/deployment/feature_gates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/deployment/feature_gates/</guid><description>Feature Gates in Gardener This page contains an overview of the various feature gates an administrator can specify on different Gardener components.
Overview Feature gates are a set of key=value pairs that describe Gardener features. You can turn these features on or off using the a component configuration file for a specific component.
Each Gardener component lets you enable or disable a set of feature gates that are relevant to that component.</description></item><item><title>Feature Gates</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/feature_gates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/feature_gates/</guid><description>Feature Gates in Gardener This page contains an overview of the various feature gates an administrator can specify on different Gardener components.
Overview Feature gates are a set of key=value pairs that describe Gardener features. You can turn these features on or off using the a component configuration file for a specific component.
Each Gardener component lets you enable or disable a set of feature gates that are relevant to that component.</description></item><item><title>Feature Gates</title><link>https://gardener.cloud/v1.15.5/concepts/deployment/feature_gates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/deployment/feature_gates/</guid><description>Feature Gates in Gardener This page contains an overview of the various feature gates an administrator can specify on different Gardener components.
Overview Feature gates are a set of key=value pairs that describe Gardener features. You can turn these features on or off using the a component configuration file for a specific component.
Each Gardener component lets you enable or disable a set of feature gates that are relevant to that component.</description></item><item><title>Feature Gates</title><link>https://gardener.cloud/v1.16.3/concepts/deployment/feature_gates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/deployment/feature_gates/</guid><description>Feature Gates in Gardener This page contains an overview of the various feature gates an administrator can specify on different Gardener components.
Overview Feature gates are a set of key=value pairs that describe Gardener features. You can turn these features on or off using the a component configuration file for a specific component.
Each Gardener component lets you enable or disable a set of feature gates that are relevant to that component.</description></item><item><title>gardenctl</title><link>https://gardener.cloud/components/gardenctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardenctl/</guid><description>Gardenctl
What is gardenctl? gardenctl is a command-line client for administrative purposes for the Gardener. It facilitates the administration of one or many garden, seed and shoot clusters, e.g. to check for issues which occured in one of these clusters. Details about the concept behind the Gardener are described in the Gardener wiki.
Installation gardenctl is shipped for mac and linux in a binary format.
Option 1: Install the latest release with Homebrew (macOS and Linux) as follows:</description></item><item><title>gardenctl</title><link>https://gardener.cloud/components/gardenctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardenctl/</guid><description>Gardenctl
What is gardenctl? gardenctl is a command-line client for administrative purposes for the Gardener. It facilitates the administration of one or many garden, seed and shoot clusters, e.g. to check for issues which occured in one of these clusters. Details about the concept behind the Gardener are described in the Gardener wiki.
Installation gardenctl is shipped for mac and linux in a binary format.
Option 1: Install the latest release with Homebrew (macOS and Linux) as follows:</description></item><item><title>gardenctl</title><link>https://gardener.cloud/components/gardenctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardenctl/</guid><description>Gardenctl
What is gardenctl? gardenctl is a command-line client for administrative purposes for the Gardener. It facilitates the administration of one or many garden, seed and shoot clusters, e.g. to check for issues which occured in one of these clusters. Details about the concept behind the Gardener are described in the Gardener wiki.
Installation gardenctl is shipped for mac and linux in a binary format.
Option 1: Install the latest release with Homebrew (macOS and Linux) as follows:</description></item><item><title>gardenctl</title><link>https://gardener.cloud/components/gardenctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardenctl/</guid><description>Gardenctl
What is gardenctl? gardenctl is a command-line client for administrative purposes for the Gardener. It facilitates the administration of one or many garden, seed and shoot clusters, e.g. to check for issues which occured in one of these clusters. Details about the concept behind the Gardener are described in the Gardener wiki.
Installation gardenctl is shipped for mac and linux in a binary format.
Option 1: Install the latest release with Homebrew (macOS and Linux) as follows:</description></item><item><title>gardenctl</title><link>https://gardener.cloud/components/gardenctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardenctl/</guid><description>Gardenctl
What is gardenctl? gardenctl is a command-line client for administrative purposes for the Gardener. It facilitates the administration of one or many garden, seed and shoot clusters, e.g. to check for issues which occured in one of these clusters. Details about the concept behind the Gardener are described in the Gardener wiki.
Installation gardenctl is shipped for mac and linux in a binary format.
Option 1: Install the latest release with Homebrew (macOS and Linux) as follows:</description></item><item><title>gardenctl</title><link>https://gardener.cloud/components/gardenctl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardenctl/</guid><description>Gardenctl
What is gardenctl? gardenctl is a command-line client for administrative purposes for the Gardener. It facilitates the administration of one or many garden, seed and shoot clusters, e.g. to check for issues which occured in one of these clusters. Details about the concept behind the Gardener are described in the Gardener wiki.
Installation gardenctl is shipped for mac and linux in a binary format.
Option 1: Install the latest release with Homebrew (macOS and Linux) as follows:</description></item><item><title>Gardener</title><link>https://gardener.cloud/components/gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardener/</guid><description>Gardener
Gardener implements the automated management and operation of Kubernetes clusters as a service and provides a fully validated extensibility framework that can be adjusted to any programmatic cloud or infrastructure provider.
Gardener is 100% Kubernets-native and exposes its own Cluster API to create homogeneous clusters on all supported infrastructures. This API differs from SIG Cluster Lifecycle&amp;rsquo;s Cluster API that only harmonizes how to get to clusters, while Gardener&amp;rsquo;s Cluster API goes one step further and also harmonizes the make-up of the clusters themselves.</description></item><item><title>Gardener</title><link>https://gardener.cloud/components/gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardener/</guid><description>Gardener
Gardener implements the automated management and operation of Kubernetes clusters as a service and provides a fully validated extensibility framework that can be adjusted to any programmatic cloud or infrastructure provider.
Gardener is 100% Kubernets-native and exposes its own Cluster API to create homogeneous clusters on all supported infrastructures. This API differs from SIG Cluster Lifecycle&amp;rsquo;s Cluster API that only harmonizes how to get to clusters, while Gardener&amp;rsquo;s Cluster API goes one step further and also harmonizes the make-up of the clusters themselves.</description></item><item><title>Gardener</title><link>https://gardener.cloud/components/gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardener/</guid><description>Gardener
Gardener implements the automated management and operation of Kubernetes clusters as a service and provides a fully validated extensibility framework that can be adjusted to any programmatic cloud or infrastructure provider.
Gardener is 100% Kubernets-native and exposes its own Cluster API to create homogeneous clusters on all supported infrastructures. This API differs from SIG Cluster Lifecycle&amp;rsquo;s Cluster API that only harmonizes how to get to clusters, while Gardener&amp;rsquo;s Cluster API goes one step further and also harmonizes the make-up of the clusters themselves.</description></item><item><title>Gardener</title><link>https://gardener.cloud/components/gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardener/</guid><description>Gardener
Gardener implements the automated management and operation of Kubernetes clusters as a service and provides a fully validated extensibility framework that can be adjusted to any programmatic cloud or infrastructure provider.
Gardener is 100% Kubernets-native and exposes its own Cluster API to create homogeneous clusters on all supported infrastructures. This API differs from SIG Cluster Lifecycle&amp;rsquo;s Cluster API that only harmonizes how to get to clusters, while Gardener&amp;rsquo;s Cluster API goes one step further and also harmonizes the make-up of the clusters themselves.</description></item><item><title>Gardener</title><link>https://gardener.cloud/components/gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardener/</guid><description>Gardener
Gardener implements the automated management and operation of Kubernetes clusters as a service and provides a fully validated extensibility framework that can be adjusted to any programmatic cloud or infrastructure provider.
Gardener is 100% Kubernets-native and exposes its own Cluster API to create homogeneous clusters on all supported infrastructures. This API differs from SIG Cluster Lifecycle&amp;rsquo;s Cluster API that only harmonizes how to get to clusters, while Gardener&amp;rsquo;s Cluster API goes one step further and also harmonizes the make-up of the clusters themselves.</description></item><item><title>Gardener</title><link>https://gardener.cloud/components/gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/gardener/</guid><description>Gardener
Gardener implements the automated management and operation of Kubernetes clusters as a service and provides a fully validated extensibility framework that can be adjusted to any programmatic cloud or infrastructure provider.
Gardener is 100% Kubernets-native and exposes its own Cluster API to create homogeneous clusters on all supported infrastructures. This API differs from SIG Cluster Lifecycle&amp;rsquo;s Cluster API that only harmonizes how to get to clusters, while Gardener&amp;rsquo;s Cluster API goes one step further and also harmonizes the make-up of the clusters themselves.</description></item><item><title>Gardener Container Runtime Extension</title><link>https://gardener.cloud/documentation/concepts/extensions/containerruntime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/containerruntime/</guid><description>Gardener Container Runtime Extension At the lowest layers of a Kubernetes node is the software that, among other things, starts and stops containers. It is called “Container Runtime”. The most widely known container runtime is Docker, but it is not alone in this space. In fact, the container runtime space has been rapidly evolving.
Kubernetes supports different container runtimes using Container Runtime Interface (CRI) – a plugin interface which enables kubelet to use a wide variety of container runtimes.</description></item><item><title>Gardener Container Runtime Extension</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/containerruntime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/containerruntime/</guid><description>Gardener Container Runtime Extension At the lowest layers of a Kubernetes node is the software that, among other things, starts and stops containers. It is called “Container Runtime”. The most widely known container runtime is Docker, but it is not alone in this space. In fact, the container runtime space has been rapidly evolving.
Kubernetes supports different container runtimes using Container Runtime Interface (CRI) – a plugin interface which enables kubelet to use a wide variety of container runtimes.</description></item><item><title>Gardener Container Runtime Extension</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/containerruntime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/containerruntime/</guid><description>Gardener Container Runtime Extension At the lowest layers of a Kubernetes node is the software that, among other things, starts and stops containers. It is called “Container Runtime”. The most widely known container runtime is Docker, but it is not alone in this space. In fact, the container runtime space has been rapidly evolving.
Kubernetes supports different container runtimes using Container Runtime Interface (CRI) – a plugin interface which enables kubelet to use a wide variety of container runtimes.</description></item><item><title>Gardener Container Runtime Extension</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/containerruntime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/containerruntime/</guid><description>Gardener Container Runtime Extension At the lowest layers of a Kubernetes node is the software that, among other things, starts and stops containers. It is called “Container Runtime”. The most widely known container runtime is Docker, but it is not alone in this space. In fact, the container runtime space has been rapidly evolving.
Kubernetes supports different container runtimes using Container Runtime Interface (CRI) – a plugin interface which enables kubelet to use a wide variety of container runtimes.</description></item><item><title>Gardener Container Runtime Extension</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/containerruntime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/containerruntime/</guid><description>Gardener Container Runtime Extension At the lowest layers of a Kubernetes node is the software that, among other things, starts and stops containers. It is called “Container Runtime”. The most widely known container runtime is Docker, but it is not alone in this space. In fact, the container runtime space has been rapidly evolving.
Kubernetes supports different container runtimes using Container Runtime Interface (CRI) – a plugin interface which enables kubelet to use a wide variety of container runtimes.</description></item><item><title>Gardener Container Runtime Extension</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/containerruntime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/containerruntime/</guid><description>Gardener Container Runtime Extension At the lowest layers of a Kubernetes node is the software that, among other things, starts and stops containers. It is called “Container Runtime”. The most widely known container runtime is Docker, but it is not alone in this space. In fact, the container runtime space has been rapidly evolving.
Kubernetes supports different container runtimes using Container Runtime Interface (CRI) – a plugin interface which enables kubelet to use a wide variety of container runtimes.</description></item><item><title>Gardener DNS Management for Shoots</title><link>https://gardener.cloud/documentation/guides/install_gardener/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/guides/install_gardener/setup/</guid><description>Gardener DNS Management for Shoots Introduction Gardener allows Shoot clusters to request DNS names for Ingresses and Services out of the box. To support this the gardener must be installed with the shoot-dns-service extension. This extension uses the seed&amp;rsquo;s dns management infrastructure to maintain DNS names for shoot clusters. So, far only the external DNS domain of a shoot (already used for the kubernetes api server and ingress DNS names) can be used for managed DNS names.</description></item><item><title>Gardener DNS Management for Shoots</title><link>https://gardener.cloud/v1.12.8/guides/install_gardener/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/guides/install_gardener/setup/</guid><description>Gardener DNS Management for Shoots Introduction Gardener allows Shoot clusters to request DNS names for Ingresses and Services out of the box. To support this the gardener must be installed with the shoot-dns-service extension. This extension uses the seed&amp;rsquo;s dns management infrastructure to maintain DNS names for shoot clusters. So, far only the external DNS domain of a shoot (already used for the kubernetes api server and ingress DNS names) can be used for managed DNS names.</description></item><item><title>Gardener DNS Management for Shoots</title><link>https://gardener.cloud/v1.13.2/guides/install_gardener/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/guides/install_gardener/setup/</guid><description>Gardener DNS Management for Shoots Introduction Gardener allows Shoot clusters to request DNS names for Ingresses and Services out of the box. To support this the gardener must be installed with the shoot-dns-service extension. This extension uses the seed&amp;rsquo;s dns management infrastructure to maintain DNS names for shoot clusters. So, far only the external DNS domain of a shoot (already used for the kubernetes api server and ingress DNS names) can be used for managed DNS names.</description></item><item><title>Gardener DNS Management for Shoots</title><link>https://gardener.cloud/v1.14.0/guides/install_gardener/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/guides/install_gardener/setup/</guid><description>Gardener DNS Management for Shoots Introduction Gardener allows Shoot clusters to request DNS names for Ingresses and Services out of the box. To support this the gardener must be installed with the shoot-dns-service extension. This extension uses the seed&amp;rsquo;s dns management infrastructure to maintain DNS names for shoot clusters. So, far only the external DNS domain of a shoot (already used for the kubernetes api server and ingress DNS names) can be used for managed DNS names.</description></item><item><title>Gardener DNS Management for Shoots</title><link>https://gardener.cloud/v1.15.5/guides/install_gardener/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/guides/install_gardener/setup/</guid><description>Gardener DNS Management for Shoots Introduction Gardener allows Shoot clusters to request DNS names for Ingresses and Services out of the box. To support this the gardener must be installed with the shoot-dns-service extension. This extension uses the seed&amp;rsquo;s dns management infrastructure to maintain DNS names for shoot clusters. So, far only the external DNS domain of a shoot (already used for the kubernetes api server and ingress DNS names) can be used for managed DNS names.</description></item><item><title>Gardener DNS Management for Shoots</title><link>https://gardener.cloud/v1.16.3/guides/install_gardener/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/guides/install_gardener/setup/</guid><description>Gardener DNS Management for Shoots Introduction Gardener allows Shoot clusters to request DNS names for Ingresses and Services out of the box. To support this the gardener must be installed with the shoot-dns-service extension. This extension uses the seed&amp;rsquo;s dns management infrastructure to maintain DNS names for shoot clusters. So, far only the external DNS domain of a shoot (already used for the kubernetes api server and ingress DNS names) can be used for managed DNS names.</description></item><item><title>Gardener Network Extension</title><link>https://gardener.cloud/documentation/concepts/extensions/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/network/</guid><description>Gardener Network Extension Gardener is an open-source project that provides a nested user model. Basically, there are two types of services provided by Gardener to its users:
Managed: end-users only request a Kubernetes cluster (Clusters-as-a-Service) Hosted: operators utilize Gardener to provide their own managed version of Kubernetes (Cluster-Provisioner-as-a-service) Whether an operator or an end-user, it makes sense to provide choice. For example, for an end-user it might make sense to choose a network-plugin that would support enforcing network policies (some plugins does not come with network-policy support by default).</description></item><item><title>Gardener Network Extension</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/network/</guid><description>Gardener Network Extension Gardener is an open-source project that provides a nested user model. Basically, there are two types of services provided by Gardener to its users:
Managed: end-users only request a Kubernetes cluster (Clusters-as-a-Service) Hosted: operators utilize Gardener to provide their own managed version of Kubernetes (Cluster-Provisioner-as-a-service) Whether an operator or an end-user, it makes sense to provide choice. For example, for an end-user it might make sense to choose a network-plugin that would support enforcing network policies (some plugins does not come with network-policy support by default).</description></item><item><title>Gardener Network Extension</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/network/</guid><description>Gardener Network Extension Gardener is an open-source project that provides a nested user model. Basically, there are two types of services provided by Gardener to its users:
Managed: end-users only request a Kubernetes cluster (Clusters-as-a-Service) Hosted: operators utilize Gardener to provide their own managed version of Kubernetes (Cluster-Provisioner-as-a-service) Whether an operator or an end-user, it makes sense to provide choice. For example, for an end-user it might make sense to choose a network-plugin that would support enforcing network policies (some plugins does not come with network-policy support by default).</description></item><item><title>Gardener Network Extension</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/network/</guid><description>Gardener Network Extension Gardener is an open-source project that provides a nested user model. Basically, there are two types of services provided by Gardener to its users:
Managed: end-users only request a Kubernetes cluster (Clusters-as-a-Service) Hosted: operators utilize Gardener to provide their own managed version of Kubernetes (Cluster-Provisioner-as-a-service) Whether an operator or an end-user, it makes sense to provide choice. For example, for an end-user it might make sense to choose a network-plugin that would support enforcing network policies (some plugins does not come with network-policy support by default).</description></item><item><title>Gardener Network Extension</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/network/</guid><description>Gardener Network Extension Gardener is an open-source project that provides a nested user model. Basically, there are two types of services provided by Gardener to its users:
Managed: end-users only request a Kubernetes cluster (Clusters-as-a-Service) Hosted: operators utilize Gardener to provide their own managed version of Kubernetes (Cluster-Provisioner-as-a-service) Whether an operator or an end-user, it makes sense to provide choice. For example, for an end-user it might make sense to choose a network-plugin that would support enforcing network policies (some plugins does not come with network-policy support by default).</description></item><item><title>Gardener Network Extension</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/network/</guid><description>Gardener Network Extension Gardener is an open-source project that provides a nested user model. Basically, there are two types of services provided by Gardener to its users:
Managed: end-users only request a Kubernetes cluster (Clusters-as-a-Service) Hosted: operators utilize Gardener to provide their own managed version of Kubernetes (Cluster-Provisioner-as-a-service) Whether an operator or an end-user, it makes sense to provide choice. For example, for an end-user it might make sense to choose a network-plugin that would support enforcing network policies (some plugins does not come with network-policy support by default).</description></item><item><title>General conventions</title><link>https://gardener.cloud/documentation/concepts/extensions/conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/conventions/</guid><description>General conventions All the extensions that are registered to Gardener are deployed to the seed clusters (at the moment, every extension is installed to every seed cluster, however, in the future Gardener will be more smart to determine which extensions needs to be placed into which seed).
Some of these extensions might need to create global resources in the seed (e.g., ClusterRoles), i.e., it&amp;rsquo;s important to have a naming scheme to avoid conflicts as it cannot be checked or validated upfront that two extensions don&amp;rsquo;t use the same names.</description></item><item><title>General conventions</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/conventions/</guid><description>General conventions All the extensions that are registered to Gardener are deployed to the seed clusters (at the moment, every extension is installed to every seed cluster, however, in the future Gardener will be more smart to determine which extensions needs to be placed into which seed).
Some of these extensions might need to create global resources in the seed (e.g., ClusterRoles), i.e., it&amp;rsquo;s important to have a naming scheme to avoid conflicts as it cannot be checked or validated upfront that two extensions don&amp;rsquo;t use the same names.</description></item><item><title>General conventions</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/conventions/</guid><description>General conventions All the extensions that are registered to Gardener are deployed to the seed clusters (at the moment, every extension is installed to every seed cluster, however, in the future Gardener will be more smart to determine which extensions needs to be placed into which seed).
Some of these extensions might need to create global resources in the seed (e.g., ClusterRoles), i.e., it&amp;rsquo;s important to have a naming scheme to avoid conflicts as it cannot be checked or validated upfront that two extensions don&amp;rsquo;t use the same names.</description></item><item><title>General conventions</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/conventions/</guid><description>General conventions All the extensions that are registered to Gardener are deployed to the seed clusters (at the moment, every extension is installed to every seed cluster, however, in the future Gardener will be more smart to determine which extensions needs to be placed into which seed).
Some of these extensions might need to create global resources in the seed (e.g., ClusterRoles), i.e., it&amp;rsquo;s important to have a naming scheme to avoid conflicts as it cannot be checked or validated upfront that two extensions don&amp;rsquo;t use the same names.</description></item><item><title>General conventions</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/conventions/</guid><description>General conventions All the extensions that are registered to Gardener are deployed to the seed clusters (at the moment, every extension is installed to every seed cluster, however, in the future Gardener will be more smart to determine which extensions needs to be placed into which seed).
Some of these extensions might need to create global resources in the seed (e.g., ClusterRoles), i.e., it&amp;rsquo;s important to have a naming scheme to avoid conflicts as it cannot be checked or validated upfront that two extensions don&amp;rsquo;t use the same names.</description></item><item><title>General conventions</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/conventions/</guid><description>General conventions All the extensions that are registered to Gardener are deployed to the seed clusters (at the moment, every extension is installed to every seed cluster, however, in the future Gardener will be more smart to determine which extensions needs to be placed into which seed).
Some of these extensions might need to create global resources in the seed (e.g., ClusterRoles), i.e., it&amp;rsquo;s important to have a naming scheme to avoid conflicts as it cannot be checked or validated upfront that two extensions don&amp;rsquo;t use the same names.</description></item><item><title>Health Check Library</title><link>https://gardener.cloud/documentation/concepts/extensions/healthcheck-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/healthcheck-library/</guid><description>Health Check Library Goal Typically an extension reconciles a specific resource (Custom Resource Definitions (CRDs)) and creates/modifies resources in the cluster (via helm, managed resources, kubectl, &amp;hellip;). We call these API Objects &amp;lsquo;dependent objects&amp;rsquo; - as they are bound to the lifecycle of the extension.
The goal of this library is to enable extensions to setup health checks for their &amp;lsquo;dependent objects&amp;rsquo; with minimal effort.
Usage The library provides a generic controller with the ability to register any resource that satisfies the extension object interface.</description></item><item><title>Health Check Library</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/healthcheck-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/healthcheck-library/</guid><description>Health Check Library Goal Typically an extension reconciles a specific resource (Custom Resource Definitions (CRDs)) and creates/modifies resources in the cluster (via helm, managed resources, kubectl, &amp;hellip;). We call these API Objects &amp;lsquo;dependent objects&amp;rsquo; - as they are bound to the lifecycle of the extension.
The goal of this library is to enable extensions to setup health checks for their &amp;lsquo;dependent objects&amp;rsquo; with minimal effort.
Usage The library provides a generic controller with the ability to register any resource that satisfies the extension object interface.</description></item><item><title>Health Check Library</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/healthcheck-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/healthcheck-library/</guid><description>Health Check Library Goal Typically an extension reconciles a specific resource (Custom Resource Definitions (CRDs)) and creates/modifies resources in the cluster (via helm, managed resources, kubectl, &amp;hellip;). We call these API Objects &amp;lsquo;dependent objects&amp;rsquo; - as they are bound to the lifecycle of the extension.
The goal of this library is to enable extensions to setup health checks for their &amp;lsquo;dependent objects&amp;rsquo; with minimal effort.
Usage The library provides a generic controller with the ability to register any resource that satisfies the extension object interface.</description></item><item><title>Health Check Library</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/healthcheck-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/healthcheck-library/</guid><description>Health Check Library Goal Typically an extension reconciles a specific resource (Custom Resource Definitions (CRDs)) and creates/modifies resources in the cluster (via helm, managed resources, kubectl, &amp;hellip;). We call these API Objects &amp;lsquo;dependent objects&amp;rsquo; - as they are bound to the lifecycle of the extension.
The goal of this library is to enable extensions to setup health checks for their &amp;lsquo;dependent objects&amp;rsquo; with minimal effort.
Usage The library provides a generic controller with the ability to register any resource that satisfies the extension object interface.</description></item><item><title>Health Check Library</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/healthcheck-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/healthcheck-library/</guid><description>Health Check Library Goal Typically an extension reconciles a specific resource (Custom Resource Definitions (CRDs)) and creates/modifies resources in the cluster (via helm, managed resources, kubectl, &amp;hellip;). We call these API Objects &amp;lsquo;dependent objects&amp;rsquo; - as they are bound to the lifecycle of the extension.
The goal of this library is to enable extensions to setup health checks for their &amp;lsquo;dependent objects&amp;rsquo; with minimal effort.
Usage The library provides a generic controller with the ability to register any resource that satisfies the extension object interface.</description></item><item><title>Health Check Library</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/healthcheck-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/healthcheck-library/</guid><description>Health Check Library Goal Typically an extension reconciles a specific resource (Custom Resource Definitions (CRDs)) and creates/modifies resources in the cluster (via helm, managed resources, kubectl, &amp;hellip;). We call these API Objects &amp;lsquo;dependent objects&amp;rsquo; - as they are bound to the lifecycle of the extension.
The goal of this library is to enable extensions to setup health checks for their &amp;lsquo;dependent objects&amp;rsquo; with minimal effort.
Usage The library provides a generic controller with the ability to register any resource that satisfies the extension object interface.</description></item><item><title>HTTPS with self Signed Certificate</title><link>https://gardener.cloud/documentation/guides/applications/https/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/guides/applications/https/</guid><description>Configuring ingress with front-end TLS It is alyways recommended to enable encryption for services to prevent traffic interception and man-in-the-middle attacks - even in DEV environments.
You should configure front-end Transport Layer Security (TLS) so that the ingress controller can secure access to a service from the client to the load balancer by using HTTPS.
We will use basic procedure here. If your configuration requires advanced security options, please refer to official CloudFlare&amp;rsquo;s cfssl documentation.</description></item><item><title>HTTPS with self Signed Certificate</title><link>https://gardener.cloud/v1.12.8/guides/applications/https/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/guides/applications/https/</guid><description>Configuring ingress with front-end TLS It is alyways recommended to enable encryption for services to prevent traffic interception and man-in-the-middle attacks - even in DEV environments.
You should configure front-end Transport Layer Security (TLS) so that the ingress controller can secure access to a service from the client to the load balancer by using HTTPS.
We will use basic procedure here. If your configuration requires advanced security options, please refer to official CloudFlare&amp;rsquo;s cfssl documentation.</description></item><item><title>HTTPS with self Signed Certificate</title><link>https://gardener.cloud/v1.13.2/guides/applications/https/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/guides/applications/https/</guid><description>Configuring ingress with front-end TLS It is alyways recommended to enable encryption for services to prevent traffic interception and man-in-the-middle attacks - even in DEV environments.
You should configure front-end Transport Layer Security (TLS) so that the ingress controller can secure access to a service from the client to the load balancer by using HTTPS.
We will use basic procedure here. If your configuration requires advanced security options, please refer to official CloudFlare&amp;rsquo;s cfssl documentation.</description></item><item><title>HTTPS with self Signed Certificate</title><link>https://gardener.cloud/v1.14.0/guides/applications/https/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/guides/applications/https/</guid><description>Configuring ingress with front-end TLS It is alyways recommended to enable encryption for services to prevent traffic interception and man-in-the-middle attacks - even in DEV environments.
You should configure front-end Transport Layer Security (TLS) so that the ingress controller can secure access to a service from the client to the load balancer by using HTTPS.
We will use basic procedure here. If your configuration requires advanced security options, please refer to official CloudFlare&amp;rsquo;s cfssl documentation.</description></item><item><title>HTTPS with self Signed Certificate</title><link>https://gardener.cloud/v1.15.5/guides/applications/https/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/guides/applications/https/</guid><description>Configuring ingress with front-end TLS It is alyways recommended to enable encryption for services to prevent traffic interception and man-in-the-middle attacks - even in DEV environments.
You should configure front-end Transport Layer Security (TLS) so that the ingress controller can secure access to a service from the client to the load balancer by using HTTPS.
We will use basic procedure here. If your configuration requires advanced security options, please refer to official CloudFlare&amp;rsquo;s cfssl documentation.</description></item><item><title>HTTPS with self Signed Certificate</title><link>https://gardener.cloud/v1.16.3/guides/applications/https/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/guides/applications/https/</guid><description>Configuring ingress with front-end TLS It is alyways recommended to enable encryption for services to prevent traffic interception and man-in-the-middle attacks - even in DEV environments.
You should configure front-end Transport Layer Security (TLS) so that the ingress controller can secure access to a service from the client to the load balancer by using HTTPS.
We will use basic procedure here. If your configuration requires advanced security options, please refer to official CloudFlare&amp;rsquo;s cfssl documentation.</description></item><item><title>Image Vector</title><link>https://gardener.cloud/documentation/concepts/deployment/image_vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/deployment/image_vector/</guid><description>Image Vector The Gardenlet is deploying several different container images into the seed and the shoot clusters. The image repositories and tags are defined in a central image vector file. Obviously, the image versions defined there must fit together with the deployment manifests (e.g., some command-line flags do only exist in certain versions).
Example images:- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.0&amp;#34;version:1.11.x- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.1&amp;#34;version:&amp;#34;&amp;gt;= 1.12&amp;#34;...That means that the Gardenlet will use the pause-container in with tag 3.0 for all seed/shoot clusters with Kubernetes version 1.</description></item><item><title>Image Vector</title><link>https://gardener.cloud/v1.12.8/concepts/deployment/image_vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/deployment/image_vector/</guid><description>Image Vector The Gardenlet is deploying several different container images into the seed and the shoot clusters. The image repositories and tags are defined in a central image vector file. Obviously, the image versions defined there must fit together with the deployment manifests (e.g., some command-line flags do only exist in certain versions).
Example images:- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.0&amp;#34;version:1.11.x- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.1&amp;#34;version:&amp;#34;&amp;gt;= 1.12&amp;#34;...That means that the Gardenlet will use the pause-container in with tag 3.0 for all seed/shoot clusters with Kubernetes version 1.</description></item><item><title>Image Vector</title><link>https://gardener.cloud/v1.13.2/concepts/deployment/image_vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/deployment/image_vector/</guid><description>Image Vector The Gardenlet is deploying several different container images into the seed and the shoot clusters. The image repositories and tags are defined in a central image vector file. Obviously, the image versions defined there must fit together with the deployment manifests (e.g., some command-line flags do only exist in certain versions).
Example images:- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.0&amp;#34;version:1.11.x- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.1&amp;#34;version:&amp;#34;&amp;gt;= 1.12&amp;#34;...That means that the Gardenlet will use the pause-container in with tag 3.0 for all seed/shoot clusters with Kubernetes version 1.</description></item><item><title>Image Vector</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/image_vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/image_vector/</guid><description>Image Vector The Gardenlet is deploying several different container images into the seed and the shoot clusters. The image repositories and tags are defined in a central image vector file. Obviously, the image versions defined there must fit together with the deployment manifests (e.g., some command-line flags do only exist in certain versions).
Example images:- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.0&amp;#34;version:1.11.x- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.1&amp;#34;version:&amp;#34;&amp;gt;= 1.12&amp;#34;...That means that the Gardenlet will use the pause-container in with tag 3.0 for all seed/shoot clusters with Kubernetes version 1.</description></item><item><title>Image Vector</title><link>https://gardener.cloud/v1.15.5/concepts/deployment/image_vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/deployment/image_vector/</guid><description>Image Vector The Gardenlet is deploying several different container images into the seed and the shoot clusters. The image repositories and tags are defined in a central image vector file. Obviously, the image versions defined there must fit together with the deployment manifests (e.g., some command-line flags do only exist in certain versions).
Example images:- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.0&amp;#34;version:1.11.x- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.1&amp;#34;version:&amp;#34;&amp;gt;= 1.12&amp;#34;...That means that the Gardenlet will use the pause-container in with tag 3.0 for all seed/shoot clusters with Kubernetes version 1.</description></item><item><title>Image Vector</title><link>https://gardener.cloud/v1.16.3/concepts/deployment/image_vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/deployment/image_vector/</guid><description>Image Vector The Gardenlet is deploying several different container images into the seed and the shoot clusters. The image repositories and tags are defined in a central image vector file. Obviously, the image versions defined there must fit together with the deployment manifests (e.g., some command-line flags do only exist in certain versions).
Example images:- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.0&amp;#34;version:1.11.x- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.1&amp;#34;version:&amp;#34;&amp;gt;= 1.12&amp;#34;...That means that the Gardenlet will use the pause-container in with tag 3.0 for all seed/shoot clusters with Kubernetes version 1.</description></item><item><title>In-Tree Admission Plugins</title><link>https://gardener.cloud/documentation/concepts/core-components/api-server/apiserver_admission_plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/core-components/api-server/apiserver_admission_plugins/</guid><description>Admission Plugins Similar to the kube-apiserver, the gardener-apiserver comes with a few in-tree managed admission plugins. If you want to get an overview of the what and why of admission plugins then this document might be a good start.
This document lists all existing admission plugins with a short explanation of what it is responsible for.
ClusterOpenIDConnectPreset, OpenIDConnectPreset (both enabled by default)
These admission controllers react on CREATE operations for Shoots.</description></item><item><title>In-Tree Admission Plugins</title><link>https://gardener.cloud/v1.12.8/concepts/core-components/api-server/apiserver_admission_plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/core-components/api-server/apiserver_admission_plugins/</guid><description>Admission Plugins Similar to the kube-apiserver, the gardener-apiserver comes with a few in-tree managed admission plugins. If you want to get an overview of the what and why of admission plugins then this document might be a good start.
This document lists all existing admission plugins with a short explanation of what it is responsible for.
ClusterOpenIDConnectPreset, OpenIDConnectPreset (both enabled by default)
These admission controllers react on CREATE operations for Shoots.</description></item><item><title>In-Tree Admission Plugins</title><link>https://gardener.cloud/v1.13.2/concepts/core-components/api-server/apiserver_admission_plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/core-components/api-server/apiserver_admission_plugins/</guid><description>Admission Plugins Similar to the kube-apiserver, the gardener-apiserver comes with a few in-tree managed admission plugins. If you want to get an overview of the what and why of admission plugins then this document might be a good start.
This document lists all existing admission plugins with a short explanation of what it is responsible for.
ClusterOpenIDConnectPreset, OpenIDConnectPreset (both enabled by default)
These admission controllers react on CREATE operations for Shoots.</description></item><item><title>In-Tree Admission Plugins</title><link>https://gardener.cloud/v1.14.0/concepts/core-components/api-server/apiserver_admission_plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/core-components/api-server/apiserver_admission_plugins/</guid><description>Admission Plugins Similar to the kube-apiserver, the gardener-apiserver comes with a few in-tree managed admission plugins. If you want to get an overview of the what and why of admission plugins then this document might be a good start.
This document lists all existing admission plugins with a short explanation of what it is responsible for.
ClusterOpenIDConnectPreset, OpenIDConnectPreset (both enabled by default)
These admission controllers react on CREATE operations for Shoots.</description></item><item><title>In-Tree Admission Plugins</title><link>https://gardener.cloud/v1.15.5/concepts/core-components/api-server/apiserver_admission_plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/core-components/api-server/apiserver_admission_plugins/</guid><description>Admission Plugins Similar to the kube-apiserver, the gardener-apiserver comes with a few in-tree managed admission plugins. If you want to get an overview of the what and why of admission plugins then this document might be a good start.
This document lists all existing admission plugins with a short explanation of what it is responsible for.
ClusterOpenIDConnectPreset, OpenIDConnectPreset (both enabled by default)
These admission controllers react on CREATE operations for Shoots.</description></item><item><title>In-Tree Admission Plugins</title><link>https://gardener.cloud/v1.16.3/concepts/core-components/api-server/apiserver_admission_plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/core-components/api-server/apiserver_admission_plugins/</guid><description>Admission Plugins Similar to the kube-apiserver, the gardener-apiserver comes with a few in-tree managed admission plugins. If you want to get an overview of the what and why of admission plugins then this document might be a good start.
This document lists all existing admission plugins with a short explanation of what it is responsible for.
ClusterOpenIDConnectPreset, OpenIDConnectPreset (both enabled by default)
These admission controllers react on CREATE operations for Shoots.</description></item><item><title>Index</title><link>https://gardener.cloud/documentation/guides/administer_shoots/gardener_azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/guides/administer_shoots/gardener_azure/</guid><description>Create shoot clusters in Azure Prerequisites You need an Azure account. You have access to the Gardener dashboard and have permissions to create projects. Before you can provision and access a Kubernetes cluster on Azure, you need to add the account credentials in Gardener. Gardener needs the credentials to provision and operate the Azure infrastructure for your Kubernetes cluster.
Ensure that the account has the contributor role.</description></item><item><title>Index</title><link>https://gardener.cloud/v1.12.8/guides/administer_shoots/gardener_azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/guides/administer_shoots/gardener_azure/</guid><description>Create shoot clusters in Azure Prerequisites You need an Azure account. You have access to the Gardener dashboard and have permissions to create projects. Before you can provision and access a Kubernetes cluster on Azure, you need to add the account credentials in Gardener. Gardener needs the credentials to provision and operate the Azure infrastructure for your Kubernetes cluster.
Ensure that the account has the contributor role.</description></item><item><title>Index</title><link>https://gardener.cloud/v1.13.2/guides/administer_shoots/gardener_azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/guides/administer_shoots/gardener_azure/</guid><description>Create shoot clusters in Azure Prerequisites You need an Azure account. You have access to the Gardener dashboard and have permissions to create projects. Before you can provision and access a Kubernetes cluster on Azure, you need to add the account credentials in Gardener. Gardener needs the credentials to provision and operate the Azure infrastructure for your Kubernetes cluster.
Ensure that the account has the contributor role.</description></item><item><title>Index</title><link>https://gardener.cloud/v1.14.0/guides/administer_shoots/gardener_azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/guides/administer_shoots/gardener_azure/</guid><description>Create shoot clusters in Azure Prerequisites You need an Azure account. You have access to the Gardener dashboard and have permissions to create projects. Before you can provision and access a Kubernetes cluster on Azure, you need to add the account credentials in Gardener. Gardener needs the credentials to provision and operate the Azure infrastructure for your Kubernetes cluster.
Ensure that the account has the contributor role.</description></item><item><title>Index</title><link>https://gardener.cloud/v1.15.5/guides/administer_shoots/gardener_azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/guides/administer_shoots/gardener_azure/</guid><description>Create shoot clusters in Azure Prerequisites You need an Azure account. You have access to the Gardener dashboard and have permissions to create projects. Before you can provision and access a Kubernetes cluster on Azure, you need to add the account credentials in Gardener. Gardener needs the credentials to provision and operate the Azure infrastructure for your Kubernetes cluster.
Ensure that the account has the contributor role.</description></item><item><title>Index</title><link>https://gardener.cloud/v1.16.3/guides/administer_shoots/gardener_azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/guides/administer_shoots/gardener_azure/</guid><description>Create shoot clusters in Azure Prerequisites You need an Azure account. You have access to the Gardener dashboard and have permissions to create projects. Before you can provision and access a Kubernetes cluster on Azure, you need to add the account credentials in Gardener. Gardener needs the credentials to provision and operate the Azure infrastructure for your Kubernetes cluster.
Ensure that the account has the contributor role.</description></item><item><title>Infrastructure resource</title><link>https://gardener.cloud/documentation/concepts/extensions/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/infrastructure/</guid><description>Contract: Infrastructure resource Every Kubernetes cluster requires some low-level infrastructure to be setup in order to work properly. Examples for that are networks, routing entries, security groups, IAM roles, etc. Before introducing the Infrastructure extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here). Now, Gardener commissions an external, provider-specific controller to take over this task.
Which infrastructure resources are required? Unfortunately, there is no general answer to this question as it is highly provider specific.</description></item><item><title>Infrastructure resource</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/infrastructure/</guid><description>Contract: Infrastructure resource Every Kubernetes cluster requires some low-level infrastructure to be setup in order to work properly. Examples for that are networks, routing entries, security groups, IAM roles, etc. Before introducing the Infrastructure extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here). Now, Gardener commissions an external, provider-specific controller to take over this task.
Which infrastructure resources are required? Unfortunately, there is no general answer to this question as it is highly provider specific.</description></item><item><title>Infrastructure resource</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/infrastructure/</guid><description>Contract: Infrastructure resource Every Kubernetes cluster requires some low-level infrastructure to be setup in order to work properly. Examples for that are networks, routing entries, security groups, IAM roles, etc. Before introducing the Infrastructure extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here). Now, Gardener commissions an external, provider-specific controller to take over this task.
Which infrastructure resources are required? Unfortunately, there is no general answer to this question as it is highly provider specific.</description></item><item><title>Infrastructure resource</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/infrastructure/</guid><description>Contract: Infrastructure resource Every Kubernetes cluster requires some low-level infrastructure to be setup in order to work properly. Examples for that are networks, routing entries, security groups, IAM roles, etc. Before introducing the Infrastructure extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here). Now, Gardener commissions an external, provider-specific controller to take over this task.
Which infrastructure resources are required? Unfortunately, there is no general answer to this question as it is highly provider specific.</description></item><item><title>Infrastructure resource</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/infrastructure/</guid><description>Contract: Infrastructure resource Every Kubernetes cluster requires some low-level infrastructure to be setup in order to work properly. Examples for that are networks, routing entries, security groups, IAM roles, etc. Before introducing the Infrastructure extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here). Now, Gardener commissions an external, provider-specific controller to take over this task.
Which infrastructure resources are required? Unfortunately, there is no general answer to this question as it is highly provider specific.</description></item><item><title>Infrastructure resource</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/infrastructure/</guid><description>Contract: Infrastructure resource Every Kubernetes cluster requires some low-level infrastructure to be setup in order to work properly. Examples for that are networks, routing entries, security groups, IAM roles, etc. Before introducing the Infrastructure extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see here). Now, Gardener commissions an external, provider-specific controller to take over this task.
Which infrastructure resources are required? Unfortunately, there is no general answer to this question as it is highly provider specific.</description></item><item><title>kubify</title><link>https://gardener.cloud/components/kubify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/kubify/</guid><description>Kubify Kubify is a Terraform based provisioning project for setting up production ready Kubernetes clusters on public and private Cloud infrastructures. Kubify currently supports:
OpenStack AWS Azure Key features of Kubify are:
Kubernetes v1.10.12 Etcd v3.3.10 multi master node setup Etcd backup and restore Supports rolling updates To start using or developing Kubify locally See our documentation in the /docs repository or find the main documentation here.</description></item><item><title>kubify</title><link>https://gardener.cloud/components/kubify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/kubify/</guid><description>Kubify Kubify is a Terraform based provisioning project for setting up production ready Kubernetes clusters on public and private Cloud infrastructures. Kubify currently supports:
OpenStack AWS Azure Key features of Kubify are:
Kubernetes v1.10.12 Etcd v3.3.10 multi master node setup Etcd backup and restore Supports rolling updates To start using or developing Kubify locally See our documentation in the /docs repository or find the main documentation here.</description></item><item><title>kubify</title><link>https://gardener.cloud/components/kubify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/kubify/</guid><description>Kubify Kubify is a Terraform based provisioning project for setting up production ready Kubernetes clusters on public and private Cloud infrastructures. Kubify currently supports:
OpenStack AWS Azure Key features of Kubify are:
Kubernetes v1.10.12 Etcd v3.3.10 multi master node setup Etcd backup and restore Supports rolling updates To start using or developing Kubify locally See our documentation in the /docs repository or find the main documentation here.</description></item><item><title>kubify</title><link>https://gardener.cloud/components/kubify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/kubify/</guid><description>Kubify Kubify is a Terraform based provisioning project for setting up production ready Kubernetes clusters on public and private Cloud infrastructures. Kubify currently supports:
OpenStack AWS Azure Key features of Kubify are:
Kubernetes v1.10.12 Etcd v3.3.10 multi master node setup Etcd backup and restore Supports rolling updates To start using or developing Kubify locally See our documentation in the /docs repository or find the main documentation here.</description></item><item><title>kubify</title><link>https://gardener.cloud/components/kubify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/kubify/</guid><description>Kubify Kubify is a Terraform based provisioning project for setting up production ready Kubernetes clusters on public and private Cloud infrastructures. Kubify currently supports:
OpenStack AWS Azure Key features of Kubify are:
Kubernetes v1.10.12 Etcd v3.3.10 multi master node setup Etcd backup and restore Supports rolling updates To start using or developing Kubify locally See our documentation in the /docs repository or find the main documentation here.</description></item><item><title>kubify</title><link>https://gardener.cloud/components/kubify/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/components/kubify/</guid><description>Kubify Kubify is a Terraform based provisioning project for setting up production ready Kubernetes clusters on public and private Cloud infrastructures. Kubify currently supports:
OpenStack AWS Azure Key features of Kubify are:
Kubernetes v1.10.12 Etcd v3.3.10 multi master node setup Etcd backup and restore Supports rolling updates To start using or developing Kubify locally See our documentation in the /docs repository or find the main documentation here.</description></item><item><title>Landscape Setup</title><link>https://gardener.cloud/documentation/guides/landscape-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/guides/landscape-setup/</guid><description>&amp;mdash;DEPRECATED&amp;mdash; This project is outdated and won&amp;rsquo;t be updated anymore. Please use https://github.com/gardener/garden-setup instead!
Gardener Setup Scripts This README is the installation manual for a simple Gardener setup. The installation scripts in this repo are embedded in a configuration template in the landscape-setup-template project. You can find further information there.
We do recommend this simplified setup for demonstration purposes only. For productive workloads we do recommend that all components (Gardener/Seed/Shoot) run in their own IaaS accounts and that network policies are enabled and properly tested on the seed clusters.</description></item><item><title>Landscape Setup</title><link>https://gardener.cloud/v1.12.8/guides/landscape-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/guides/landscape-setup/</guid><description>&amp;mdash;DEPRECATED&amp;mdash; This project is outdated and won&amp;rsquo;t be updated anymore. Please use https://github.com/gardener/garden-setup instead!
Gardener Setup Scripts This README is the installation manual for a simple Gardener setup. The installation scripts in this repo are embedded in a configuration template in the landscape-setup-template project. You can find further information there.
We do recommend this simplified setup for demonstration purposes only. For productive workloads we do recommend that all components (Gardener/Seed/Shoot) run in their own IaaS accounts and that network policies are enabled and properly tested on the seed clusters.</description></item><item><title>Landscape Setup</title><link>https://gardener.cloud/v1.13.2/guides/landscape-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/guides/landscape-setup/</guid><description>&amp;mdash;DEPRECATED&amp;mdash; This project is outdated and won&amp;rsquo;t be updated anymore. Please use https://github.com/gardener/garden-setup instead!
Gardener Setup Scripts This README is the installation manual for a simple Gardener setup. The installation scripts in this repo are embedded in a configuration template in the landscape-setup-template project. You can find further information there.
We do recommend this simplified setup for demonstration purposes only. For productive workloads we do recommend that all components (Gardener/Seed/Shoot) run in their own IaaS accounts and that network policies are enabled and properly tested on the seed clusters.</description></item><item><title>Landscape Setup</title><link>https://gardener.cloud/v1.14.0/guides/landscape-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/guides/landscape-setup/</guid><description>&amp;mdash;DEPRECATED&amp;mdash; This project is outdated and won&amp;rsquo;t be updated anymore. Please use https://github.com/gardener/garden-setup instead!
Gardener Setup Scripts This README is the installation manual for a simple Gardener setup. The installation scripts in this repo are embedded in a configuration template in the landscape-setup-template project. You can find further information there.
We do recommend this simplified setup for demonstration purposes only. For productive workloads we do recommend that all components (Gardener/Seed/Shoot) run in their own IaaS accounts and that network policies are enabled and properly tested on the seed clusters.</description></item><item><title>Landscape Setup</title><link>https://gardener.cloud/v1.15.5/guides/landscape-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/guides/landscape-setup/</guid><description>&amp;mdash;DEPRECATED&amp;mdash; This project is outdated and won&amp;rsquo;t be updated anymore. Please use https://github.com/gardener/garden-setup instead!
Gardener Setup Scripts This README is the installation manual for a simple Gardener setup. The installation scripts in this repo are embedded in a configuration template in the landscape-setup-template project. You can find further information there.
We do recommend this simplified setup for demonstration purposes only. For productive workloads we do recommend that all components (Gardener/Seed/Shoot) run in their own IaaS accounts and that network policies are enabled and properly tested on the seed clusters.</description></item><item><title>Landscape Setup</title><link>https://gardener.cloud/v1.16.3/guides/landscape-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/guides/landscape-setup/</guid><description>&amp;mdash;DEPRECATED&amp;mdash; This project is outdated and won&amp;rsquo;t be updated anymore. Please use https://github.com/gardener/garden-setup instead!
Gardener Setup Scripts This README is the installation manual for a simple Gardener setup. The installation scripts in this repo are embedded in a configuration template in the landscape-setup-template project. You can find further information there.
We do recommend this simplified setup for demonstration purposes only. For productive workloads we do recommend that all components (Gardener/Seed/Shoot) run in their own IaaS accounts and that network policies are enabled and properly tested on the seed clusters.</description></item><item><title>Logging and Monitoring for Extensions</title><link>https://gardener.cloud/documentation/concepts/extensions/logging-and-monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/logging-and-monitoring/</guid><description>Logging and Monitoring for Extensions Gardener provides an integrated logging and monitoring stack for alerting, monitoring and troubleshooting of its managed components by operators or end users. For further information how to make use of it in these roles, refer to the corresponding guides for exploring logs and for monitoring with Grafana.
The components that constitute the logging and monitoring stack are managed by Gardener. By default, it deploys Prometheus, Alertmanager and Grafana into the garden namespace of all seed clusters.</description></item><item><title>Logging and Monitoring for Extensions</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/logging-and-monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/logging-and-monitoring/</guid><description>Logging and Monitoring for Extensions Gardener provides an integrated logging and monitoring stack for alerting, monitoring and troubleshooting of its managed components by operators or end users. For further information how to make use of it in these roles, refer to the corresponding guides for exploring logs and for monitoring with Grafana.
The components that constitute the logging and monitoring stack are managed by Gardener. By default, it deploys Prometheus, Alertmanager and Grafana into the garden namespace of all seed clusters.</description></item><item><title>Logging and Monitoring for Extensions</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/logging-and-monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/logging-and-monitoring/</guid><description>Logging and Monitoring for Extensions Gardener provides an integrated logging and monitoring stack for alerting, monitoring and troubleshooting of its managed components by operators or end users. For further information how to make use of it in these roles, refer to the corresponding guides for exploring logs and for monitoring with Grafana.
The components that constitute the logging and monitoring stack are managed by Gardener. By default, it deploys Prometheus, Alertmanager and Grafana into the garden namespace of all seed clusters.</description></item><item><title>Logging and Monitoring for Extensions</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/logging-and-monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/logging-and-monitoring/</guid><description>Logging and Monitoring for Extensions Gardener provides an integrated logging and monitoring stack for alerting, monitoring and troubleshooting of its managed components by operators or end users. For further information how to make use of it in these roles, refer to the corresponding guides for exploring logs and for monitoring with Grafana.
The components that constitute the logging and monitoring stack are managed by Gardener. By default, it deploys Prometheus, Alertmanager and Grafana into the garden namespace of all seed clusters.</description></item><item><title>Logging and Monitoring for Extensions</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/logging-and-monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/logging-and-monitoring/</guid><description>Logging and Monitoring for Extensions Gardener provides an integrated logging and monitoring stack for alerting, monitoring and troubleshooting of its managed components by operators or end users. For further information how to make use of it in these roles, refer to the corresponding guides for exploring logs and for monitoring with Grafana.
The components that constitute the logging and monitoring stack are managed by Gardener. By default, it deploys Prometheus, Alertmanager and Grafana into the garden namespace of all seed clusters.</description></item><item><title>Logging and Monitoring for Extensions</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/logging-and-monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/logging-and-monitoring/</guid><description>Logging and Monitoring for Extensions Gardener provides an integrated logging and monitoring stack for alerting, monitoring and troubleshooting of its managed components by operators or end users. For further information how to make use of it in these roles, refer to the corresponding guides for exploring logs and for monitoring with Grafana.
The components that constitute the logging and monitoring stack are managed by Gardener. By default, it deploys Prometheus, Alertmanager and Grafana into the garden namespace of all seed clusters.</description></item><item><title>Machine Controller Manager</title><link>https://gardener.cloud/documentation/concepts/mcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/mcm/</guid><description>machine-controller-manager
:warning: We are in the progress of migrating and deprecating all the in-tree providers to OOT. Please avoid making any new feature enhancements to the intree providers. Kindly make it on the OOT providers available here. More details on adding new OOT providers can be found here.
Machine Controller Manager (MCM) manages VMs as another kubernetes custom resource. It provides a declarative way to manage VMs.
MCM supports following providers:</description></item><item><title>Machine Controller Manager</title><link>https://gardener.cloud/v1.12.8/concepts/mcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/mcm/</guid><description>machine-controller-manager
:warning: We are in the progress of migrating and deprecating all the in-tree providers to OOT. Please avoid making any new feature enhancements to the intree providers. Kindly make it on the OOT providers available here. More details on adding new OOT providers can be found here.
Machine Controller Manager (MCM) manages VMs as another kubernetes custom resource. It provides a declarative way to manage VMs.
MCM supports following providers:</description></item><item><title>Machine Controller Manager</title><link>https://gardener.cloud/v1.13.2/concepts/mcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/mcm/</guid><description>machine-controller-manager
:warning: We are in the progress of migrating and deprecating all the in-tree providers to OOT. Please avoid making any new feature enhancements to the intree providers. Kindly make it on the OOT providers available here. More details on adding new OOT providers can be found here.
Machine Controller Manager (MCM) manages VMs as another kubernetes custom resource. It provides a declarative way to manage VMs.
MCM supports following providers:</description></item><item><title>Machine Controller Manager</title><link>https://gardener.cloud/v1.14.0/concepts/mcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/mcm/</guid><description>machine-controller-manager
:warning: We are in the progress of migrating and deprecating all the in-tree providers to OOT. Please avoid making any new feature enhancements to the intree providers. Kindly make it on the OOT providers available here. More details on adding new OOT providers can be found here.
Machine Controller Manager (MCM) manages VMs as another kubernetes custom resource. It provides a declarative way to manage VMs.
MCM supports following providers:</description></item><item><title>Machine Controller Manager</title><link>https://gardener.cloud/v1.15.5/concepts/mcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/mcm/</guid><description>machine-controller-manager
:warning: We are in the progress of migrating and deprecating all the in-tree providers to OOT. Please avoid making any new feature enhancements to the intree providers. Kindly make it on the OOT providers available here. More details on adding new OOT providers can be found here.
Machine Controller Manager (MCM) manages VMs as another kubernetes custom resource. It provides a declarative way to manage VMs.
MCM supports following providers:</description></item><item><title>Machine Controller Manager</title><link>https://gardener.cloud/v1.16.3/concepts/mcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/mcm/</guid><description>machine-controller-manager
:warning: We are in the progress of migrating and deprecating all the in-tree providers to OOT. Please avoid making any new feature enhancements to the intree providers. Kindly make it on the OOT providers available here. More details on adding new OOT providers can be found here.
Machine Controller Manager (MCM) manages VMs as another kubernetes custom resource. It provides a declarative way to manage VMs.
MCM supports following providers:</description></item><item><title>Manage DNS Providers</title><link>https://gardener.cloud/documentation/guides/administer_shoots/dns_providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/guides/administer_shoots/dns_providers/</guid><description>DNS Providers Introduction Gardener can manage DNS records on your behalf, so that you can request them via different resource types (see here) within the shoot cluster. The domains for which you are permitted to request records, are however restricted and depend on the DNS provider configuration.
Shoot provider By default, every shoot cluster is equipped with a default provider. It is the very same provider that manages the shoot cluster&amp;rsquo;s kube-apiserver public DNS record (DNS address in your Kubeconfig).</description></item><item><title>Manage DNS Providers</title><link>https://gardener.cloud/v1.12.8/guides/administer_shoots/dns_providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/guides/administer_shoots/dns_providers/</guid><description>DNS Providers Introduction Gardener can manage DNS records on your behalf, so that you can request them via different resource types (see here) within the shoot cluster. The domains for which you are permitted to request records, are however restricted and depend on the DNS provider configuration.
Shoot provider By default, every shoot cluster is equipped with a default provider. It is the very same provider that manages the shoot cluster&amp;rsquo;s kube-apiserver public DNS record (DNS address in your Kubeconfig).</description></item><item><title>Manage DNS Providers</title><link>https://gardener.cloud/v1.13.2/guides/administer_shoots/dns_providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/guides/administer_shoots/dns_providers/</guid><description>DNS Providers Introduction Gardener can manage DNS records on your behalf, so that you can request them via different resource types (see here) within the shoot cluster. The domains for which you are permitted to request records, are however restricted and depend on the DNS provider configuration.
Shoot provider By default, every shoot cluster is equipped with a default provider. It is the very same provider that manages the shoot cluster&amp;rsquo;s kube-apiserver public DNS record (DNS address in your Kubeconfig).</description></item><item><title>Manage DNS Providers</title><link>https://gardener.cloud/v1.14.0/guides/administer_shoots/dns_providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/guides/administer_shoots/dns_providers/</guid><description>DNS Providers Introduction Gardener can manage DNS records on your behalf, so that you can request them via different resource types (see here) within the shoot cluster. The domains for which you are permitted to request records, are however restricted and depend on the DNS provider configuration.
Shoot provider By default, every shoot cluster is equipped with a default provider. It is the very same provider that manages the shoot cluster&amp;rsquo;s kube-apiserver public DNS record (DNS address in your Kubeconfig).</description></item><item><title>Manage DNS Providers</title><link>https://gardener.cloud/v1.15.5/guides/administer_shoots/dns_providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/guides/administer_shoots/dns_providers/</guid><description>DNS Providers Introduction Gardener can manage DNS records on your behalf, so that you can request them via different resource types (see here) within the shoot cluster. The domains for which you are permitted to request records, are however restricted and depend on the DNS provider configuration.
Shoot provider By default, every shoot cluster is equipped with a default provider. It is the very same provider that manages the shoot cluster&amp;rsquo;s kube-apiserver public DNS record (DNS address in your Kubeconfig).</description></item><item><title>Manage DNS Providers</title><link>https://gardener.cloud/v1.16.3/guides/administer_shoots/dns_providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/guides/administer_shoots/dns_providers/</guid><description>DNS Providers Introduction Gardener can manage DNS records on your behalf, so that you can request them via different resource types (see here) within the shoot cluster. The domains for which you are permitted to request records, are however restricted and depend on the DNS provider configuration.
Shoot provider By default, every shoot cluster is equipped with a default provider. It is the very same provider that manages the shoot cluster&amp;rsquo;s kube-apiserver public DNS record (DNS address in your Kubeconfig).</description></item><item><title>OperatingSystemConfig resource</title><link>https://gardener.cloud/documentation/concepts/extensions/operatingsystemconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/operatingsystemconfig/</guid><description>Contract: OperatingSystemConfig resource Gardener uses the machine API and leverages the functionalities of the machine-controller-manager (MCM) in order to manage the worker nodes of a shoot cluster. The machine-controller-manager itself simply takes a reference to an OS-image and (optionally) some user-data (a script or configuration that is executed when a VM is bootstrapped), and forwards both to the provider&amp;rsquo;s API when creating VMs. MCM does not have any restrictions regarding supported operating systems as it does not modify or influence the machine&amp;rsquo;s configuration in any way - it just creates/deletes machines with the provided metadata.</description></item><item><title>OperatingSystemConfig resource</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/operatingsystemconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/operatingsystemconfig/</guid><description>Contract: OperatingSystemConfig resource Gardener uses the machine API and leverages the functionalities of the machine-controller-manager (MCM) in order to manage the worker nodes of a shoot cluster. The machine-controller-manager itself simply takes a reference to an OS-image and (optionally) some user-data (a script or configuration that is executed when a VM is bootstrapped), and forwards both to the provider&amp;rsquo;s API when creating VMs. MCM does not have any restrictions regarding supported operating systems as it does not modify or influence the machine&amp;rsquo;s configuration in any way - it just creates/deletes machines with the provided metadata.</description></item><item><title>OperatingSystemConfig resource</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/operatingsystemconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/operatingsystemconfig/</guid><description>Contract: OperatingSystemConfig resource Gardener uses the machine API and leverages the functionalities of the machine-controller-manager (MCM) in order to manage the worker nodes of a shoot cluster. The machine-controller-manager itself simply takes a reference to an OS-image and (optionally) some user-data (a script or configuration that is executed when a VM is bootstrapped), and forwards both to the provider&amp;rsquo;s API when creating VMs. MCM does not have any restrictions regarding supported operating systems as it does not modify or influence the machine&amp;rsquo;s configuration in any way - it just creates/deletes machines with the provided metadata.</description></item><item><title>OperatingSystemConfig resource</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/operatingsystemconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/operatingsystemconfig/</guid><description>Contract: OperatingSystemConfig resource Gardener uses the machine API and leverages the functionalities of the machine-controller-manager (MCM) in order to manage the worker nodes of a shoot cluster. The machine-controller-manager itself simply takes a reference to an OS-image and (optionally) some user-data (a script or configuration that is executed when a VM is bootstrapped), and forwards both to the provider&amp;rsquo;s API when creating VMs. MCM does not have any restrictions regarding supported operating systems as it does not modify or influence the machine&amp;rsquo;s configuration in any way - it just creates/deletes machines with the provided metadata.</description></item><item><title>OperatingSystemConfig resource</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/operatingsystemconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/operatingsystemconfig/</guid><description>Contract: OperatingSystemConfig resource Gardener uses the machine API and leverages the functionalities of the machine-controller-manager (MCM) in order to manage the worker nodes of a shoot cluster. The machine-controller-manager itself simply takes a reference to an OS-image and (optionally) some user-data (a script or configuration that is executed when a VM is bootstrapped), and forwards both to the provider&amp;rsquo;s API when creating VMs. MCM does not have any restrictions regarding supported operating systems as it does not modify or influence the machine&amp;rsquo;s configuration in any way - it just creates/deletes machines with the provided metadata.</description></item><item><title>OperatingSystemConfig resource</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/operatingsystemconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/operatingsystemconfig/</guid><description>Contract: OperatingSystemConfig resource Gardener uses the machine API and leverages the functionalities of the machine-controller-manager (MCM) in order to manage the worker nodes of a shoot cluster. The machine-controller-manager itself simply takes a reference to an OS-image and (optionally) some user-data (a script or configuration that is executed when a VM is bootstrapped), and forwards both to the provider&amp;rsquo;s API when creating VMs. MCM does not have any restrictions regarding supported operating systems as it does not modify or influence the machine&amp;rsquo;s configuration in any way - it just creates/deletes machines with the provided metadata.</description></item><item><title>Operator Alerts</title><link>https://gardener.cloud/documentation/concepts/monitoring/operator_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/monitoring/operator_alerts/</guid><description>Operator Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiserverDown blocker seed All API server replicas are down/unreachable, or all API server could not be found.</description></item><item><title>Operator Alerts</title><link>https://gardener.cloud/v1.12.8/concepts/monitoring/operator_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/monitoring/operator_alerts/</guid><description>Operator Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiserverDown blocker seed All API server replicas are down/unreachable, or all API server could not be found.</description></item><item><title>Operator Alerts</title><link>https://gardener.cloud/v1.13.2/concepts/monitoring/operator_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/monitoring/operator_alerts/</guid><description>Operator Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiserverDown blocker seed All API server replicas are down/unreachable, or all API server could not be found.</description></item><item><title>Operator Alerts</title><link>https://gardener.cloud/v1.14.0/concepts/monitoring/operator_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/monitoring/operator_alerts/</guid><description>Operator Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiserverDown blocker seed All API server replicas are down/unreachable, or all API server could not be found.</description></item><item><title>Operator Alerts</title><link>https://gardener.cloud/v1.15.5/concepts/monitoring/operator_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/monitoring/operator_alerts/</guid><description>Operator Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiserverDown blocker seed All API server replicas are down/unreachable, or all API server could not be found.</description></item><item><title>Operator Alerts</title><link>https://gardener.cloud/v1.16.3/concepts/monitoring/operator_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/monitoring/operator_alerts/</guid><description>Operator Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiserverDown blocker seed All API server replicas are down/unreachable, or all API server could not be found.</description></item><item><title>Referenced Resources</title><link>https://gardener.cloud/documentation/concepts/extensions/referenced-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/referenced-resources/</guid><description>Referenced Resources The Shoot resource can include a list of resources (usually secrets) that can be referenced by name in extension providerConfig and other Shoot sections, for example:
kind:ShootapiVersion:core.gardener.cloud/v1beta1metadata:name:crazy-botanynamespace:garden-dev...spec:...extensions:- type:foobarproviderConfig:apiVersion:foobar.extensions.gardener.cloud/v1alpha1kind:FooBarConfigfoo:barsecretRef:foobar-secretresources:- name:foobar-secretresourceRef:apiVersion:v1kind:Secretname:my-foobar-secretGardener expects to find these referenced resources in the project namespace (e.g. garden-dev) and will copy them to the Shoot namespace in the Seed cluster when reconciling a Shoot, adding a prefix to their names to avoid naming collisions with Gardener&amp;rsquo;s own resources.</description></item><item><title>Referenced Resources</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/referenced-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/referenced-resources/</guid><description>Referenced Resources The Shoot resource can include a list of resources (usually secrets) that can be referenced by name in extension providerConfig and other Shoot sections, for example:
kind:ShootapiVersion:core.gardener.cloud/v1beta1metadata:name:crazy-botanynamespace:garden-dev...spec:...extensions:- type:foobarproviderConfig:apiVersion:foobar.extensions.gardener.cloud/v1alpha1kind:FooBarConfigfoo:barsecretRef:foobar-secretresources:- name:foobar-secretresourceRef:apiVersion:v1kind:Secretname:my-foobar-secretGardener expects to find these referenced resources in the project namespace (e.g. garden-dev) and will copy them to the Shoot namespace in the Seed cluster when reconciling a Shoot, adding a prefix to their names to avoid naming collisions with Gardener&amp;rsquo;s own resources.</description></item><item><title>Referenced Resources</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/referenced-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/referenced-resources/</guid><description>Referenced Resources The Shoot resource can include a list of resources (usually secrets) that can be referenced by name in extension providerConfig and other Shoot sections, for example:
kind:ShootapiVersion:core.gardener.cloud/v1beta1metadata:name:crazy-botanynamespace:garden-dev...spec:...extensions:- type:foobarproviderConfig:apiVersion:foobar.extensions.gardener.cloud/v1alpha1kind:FooBarConfigfoo:barsecretRef:foobar-secretresources:- name:foobar-secretresourceRef:apiVersion:v1kind:Secretname:my-foobar-secretGardener expects to find these referenced resources in the project namespace (e.g. garden-dev) and will copy them to the Shoot namespace in the Seed cluster when reconciling a Shoot, adding a prefix to their names to avoid naming collisions with Gardener&amp;rsquo;s own resources.</description></item><item><title>Referenced Resources</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/referenced-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/referenced-resources/</guid><description>Referenced Resources The Shoot resource can include a list of resources (usually secrets) that can be referenced by name in extension providerConfig and other Shoot sections, for example:
kind:ShootapiVersion:core.gardener.cloud/v1beta1metadata:name:crazy-botanynamespace:garden-dev...spec:...extensions:- type:foobarproviderConfig:apiVersion:foobar.extensions.gardener.cloud/v1alpha1kind:FooBarConfigfoo:barsecretRef:foobar-secretresources:- name:foobar-secretresourceRef:apiVersion:v1kind:Secretname:my-foobar-secretGardener expects to find these referenced resources in the project namespace (e.g. garden-dev) and will copy them to the Shoot namespace in the Seed cluster when reconciling a Shoot, adding a prefix to their names to avoid naming collisions with Gardener&amp;rsquo;s own resources.</description></item><item><title>Referenced Resources</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/referenced-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/referenced-resources/</guid><description>Referenced Resources The Shoot resource can include a list of resources (usually secrets) that can be referenced by name in extension providerConfig and other Shoot sections, for example:
kind:ShootapiVersion:core.gardener.cloud/v1beta1metadata:name:crazy-botanynamespace:garden-dev...spec:...extensions:- type:foobarproviderConfig:apiVersion:foobar.extensions.gardener.cloud/v1alpha1kind:FooBarConfigfoo:barsecretRef:foobar-secretresources:- name:foobar-secretresourceRef:apiVersion:v1kind:Secretname:my-foobar-secretGardener expects to find these referenced resources in the project namespace (e.g. garden-dev) and will copy them to the Shoot namespace in the Seed cluster when reconciling a Shoot, adding a prefix to their names to avoid naming collisions with Gardener&amp;rsquo;s own resources.</description></item><item><title>Referenced Resources</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/referenced-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/referenced-resources/</guid><description>Referenced Resources The Shoot resource can include a list of resources (usually secrets) that can be referenced by name in extension providerConfig and other Shoot sections, for example:
kind:ShootapiVersion:core.gardener.cloud/v1beta1metadata:name:crazy-botanynamespace:garden-dev...spec:...extensions:- type:foobarproviderConfig:apiVersion:foobar.extensions.gardener.cloud/v1alpha1kind:FooBarConfigfoo:barsecretRef:foobar-secretresources:- name:foobar-secretresourceRef:apiVersion:v1kind:Secretname:my-foobar-secretGardener expects to find these referenced resources in the project namespace (e.g. garden-dev) and will copy them to the Shoot namespace in the Seed cluster when reconciling a Shoot, adding a prefix to their names to avoid naming collisions with Gardener&amp;rsquo;s own resources.</description></item><item><title>Registering Extension Controllers</title><link>https://gardener.cloud/documentation/concepts/extensions/controllerregistration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/controllerregistration/</guid><description>Registering Extension Controllers Extensions are registered in the garden cluster via ControllerRegistration resources. Gardener is evaluating the registrations and creates ControllerInstallation resources which describe the request &amp;ldquo;please install this controller X to this seed Y&amp;rdquo;.
Similar to how CloudProfile or Seed resources get into the system, the Gardener administrator must deploy the ControllerRegistration resources (this does not happen automatically in any way - the administrator decides which extensions shall be enabled).</description></item><item><title>Registering Extension Controllers</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/controllerregistration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/controllerregistration/</guid><description>Registering Extension Controllers Extensions are registered in the garden cluster via ControllerRegistration resources. Gardener is evaluating the registrations and creates ControllerInstallation resources which describe the request &amp;ldquo;please install this controller X to this seed Y&amp;rdquo;.
Similar to how CloudProfile or Seed resources get into the system, the Gardener administrator must deploy the ControllerRegistration resources (this does not happen automatically in any way - the administrator decides which extensions shall be enabled).</description></item><item><title>Registering Extension Controllers</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/controllerregistration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/controllerregistration/</guid><description>Registering Extension Controllers Extensions are registered in the garden cluster via ControllerRegistration resources. Gardener is evaluating the registrations and creates ControllerInstallation resources which describe the request &amp;ldquo;please install this controller X to this seed Y&amp;rdquo;.
Similar to how CloudProfile or Seed resources get into the system, the Gardener administrator must deploy the ControllerRegistration resources (this does not happen automatically in any way - the administrator decides which extensions shall be enabled).</description></item><item><title>Registering Extension Controllers</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/controllerregistration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/controllerregistration/</guid><description>Registering Extension Controllers Extensions are registered in the garden cluster via ControllerRegistration resources. Gardener is evaluating the registrations and creates ControllerInstallation resources which describe the request &amp;ldquo;please install this controller X to this seed Y&amp;rdquo;.
Similar to how CloudProfile or Seed resources get into the system, the Gardener administrator must deploy the ControllerRegistration resources (this does not happen automatically in any way - the administrator decides which extensions shall be enabled).</description></item><item><title>Registering Extension Controllers</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/controllerregistration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/controllerregistration/</guid><description>Registering Extension Controllers Extensions are registered in the garden cluster via ControllerRegistration resources. Gardener is evaluating the registrations and creates ControllerInstallation resources which describe the request &amp;ldquo;please install this controller X to this seed Y&amp;rdquo;.
Similar to how CloudProfile or Seed resources get into the system, the Gardener administrator must deploy the ControllerRegistration resources (this does not happen automatically in any way - the administrator decides which extensions shall be enabled).</description></item><item><title>Registering Extension Controllers</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/controllerregistration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/controllerregistration/</guid><description>Registering Extension Controllers Extensions are registered in the garden cluster via ControllerRegistration resources. Gardener is evaluating the registrations and creates ControllerInstallation resources which describe the request &amp;ldquo;please install this controller X to this seed Y&amp;rdquo;.
Similar to how CloudProfile or Seed resources get into the system, the Gardener administrator must deploy the ControllerRegistration resources (this does not happen automatically in any way - the administrator decides which extensions shall be enabled).</description></item><item><title>Request DNS Names</title><link>https://gardener.cloud/documentation/guides/administer_shoots/dns_names/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/guides/administer_shoots/dns_names/</guid><description>Request DNS Names in Shoot Clusters Introduction Within a shoot cluster, it is possible to request DNS records via the following resource types:
Ingress Service DNSEntry It is necessary that the Gardener installation your shoot cluster runs in is equipped with a shoot-dns-service extension. This extension uses the seed&amp;rsquo;s dns management infrastructure to maintain DNS names for shoot clusters. Please ask your Gardener operator if the extension is available in your environment.</description></item><item><title>Request DNS Names</title><link>https://gardener.cloud/v1.12.8/guides/administer_shoots/dns_names/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/guides/administer_shoots/dns_names/</guid><description>Request DNS Names in Shoot Clusters Introduction Within a shoot cluster, it is possible to request DNS records via the following resource types:
Ingress Service DNSEntry It is necessary that the Gardener installation your shoot cluster runs in is equipped with a shoot-dns-service extension. This extension uses the seed&amp;rsquo;s dns management infrastructure to maintain DNS names for shoot clusters. Please ask your Gardener operator if the extension is available in your environment.</description></item><item><title>Request DNS Names</title><link>https://gardener.cloud/v1.13.2/guides/administer_shoots/dns_names/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/guides/administer_shoots/dns_names/</guid><description>Request DNS Names in Shoot Clusters Introduction Within a shoot cluster, it is possible to request DNS records via the following resource types:
Ingress Service DNSEntry It is necessary that the Gardener installation your shoot cluster runs in is equipped with a shoot-dns-service extension. This extension uses the seed&amp;rsquo;s dns management infrastructure to maintain DNS names for shoot clusters. Please ask your Gardener operator if the extension is available in your environment.</description></item><item><title>Request DNS Names</title><link>https://gardener.cloud/v1.14.0/guides/administer_shoots/dns_names/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/guides/administer_shoots/dns_names/</guid><description>Request DNS Names in Shoot Clusters Introduction Within a shoot cluster, it is possible to request DNS records via the following resource types:
Ingress Service DNSEntry It is necessary that the Gardener installation your shoot cluster runs in is equipped with a shoot-dns-service extension. This extension uses the seed&amp;rsquo;s dns management infrastructure to maintain DNS names for shoot clusters. Please ask your Gardener operator if the extension is available in your environment.</description></item><item><title>Request DNS Names</title><link>https://gardener.cloud/v1.15.5/guides/administer_shoots/dns_names/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/guides/administer_shoots/dns_names/</guid><description>Request DNS Names in Shoot Clusters Introduction Within a shoot cluster, it is possible to request DNS records via the following resource types:
Ingress Service DNSEntry It is necessary that the Gardener installation your shoot cluster runs in is equipped with a shoot-dns-service extension. This extension uses the seed&amp;rsquo;s dns management infrastructure to maintain DNS names for shoot clusters. Please ask your Gardener operator if the extension is available in your environment.</description></item><item><title>Request DNS Names</title><link>https://gardener.cloud/v1.16.3/guides/administer_shoots/dns_names/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/guides/administer_shoots/dns_names/</guid><description>Request DNS Names in Shoot Clusters Introduction Within a shoot cluster, it is possible to request DNS records via the following resource types:
Ingress Service DNSEntry It is necessary that the Gardener installation your shoot cluster runs in is equipped with a shoot-dns-service extension. This extension uses the seed&amp;rsquo;s dns management infrastructure to maintain DNS names for shoot clusters. Please ask your Gardener operator if the extension is available in your environment.</description></item><item><title>Request X.509 Certificates</title><link>https://gardener.cloud/documentation/guides/administer_shoots/request_cert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/guides/administer_shoots/request_cert/</guid><description>Request X.509 Certificates Introduction Dealing with applications on Kubernetes which offer service endpoints (e.g. HTTP) may also require you to enable a secured communication via SSL/TLS. Gardener let&amp;rsquo;s you request a commonly trusted X.509 certificate for your application endpoint. Furthermore, Gardener takes care about the renewal process for your requested certificate.
Let&amp;rsquo;s get the basics straight first. If this is too long for you, you can read below how to get certificates by</description></item><item><title>Request X.509 Certificates</title><link>https://gardener.cloud/v1.12.8/guides/administer_shoots/request_cert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/guides/administer_shoots/request_cert/</guid><description>Request X.509 Certificates Introduction Dealing with applications on Kubernetes which offer service endpoints (e.g. HTTP) may also require you to enable a secured communication via SSL/TLS. Gardener let&amp;rsquo;s you request a commonly trusted X.509 certificate for your application endpoint. Furthermore, Gardener takes care about the renewal process for your requested certificate.
Let&amp;rsquo;s get the basics straight first. If this is too long for you, you can read below how to get certificates by</description></item><item><title>Request X.509 Certificates</title><link>https://gardener.cloud/v1.13.2/guides/administer_shoots/request_cert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/guides/administer_shoots/request_cert/</guid><description>Request X.509 Certificates Introduction Dealing with applications on Kubernetes which offer service endpoints (e.g. HTTP) may also require you to enable a secured communication via SSL/TLS. Gardener let&amp;rsquo;s you request a commonly trusted X.509 certificate for your application endpoint. Furthermore, Gardener takes care about the renewal process for your requested certificate.
Let&amp;rsquo;s get the basics straight first. If this is too long for you, you can read below how to get certificates by</description></item><item><title>Request X.509 Certificates</title><link>https://gardener.cloud/v1.14.0/guides/administer_shoots/request_cert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/guides/administer_shoots/request_cert/</guid><description>Request X.509 Certificates Introduction Dealing with applications on Kubernetes which offer service endpoints (e.g. HTTP) may also require you to enable a secured communication via SSL/TLS. Gardener let&amp;rsquo;s you request a commonly trusted X.509 certificate for your application endpoint. Furthermore, Gardener takes care about the renewal process for your requested certificate.
Let&amp;rsquo;s get the basics straight first. If this is too long for you, you can read below how to get certificates by</description></item><item><title>Request X.509 Certificates</title><link>https://gardener.cloud/v1.15.5/guides/administer_shoots/request_cert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/guides/administer_shoots/request_cert/</guid><description>Request X.509 Certificates Introduction Dealing with applications on Kubernetes which offer service endpoints (e.g. HTTP) may also require you to enable a secured communication via SSL/TLS. Gardener let&amp;rsquo;s you request a commonly trusted X.509 certificate for your application endpoint. Furthermore, Gardener takes care about the renewal process for your requested certificate.
Let&amp;rsquo;s get the basics straight first. If this is too long for you, you can read below how to get certificates by</description></item><item><title>Request X.509 Certificates</title><link>https://gardener.cloud/v1.16.3/guides/administer_shoots/request_cert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/guides/administer_shoots/request_cert/</guid><description>Request X.509 Certificates Introduction Dealing with applications on Kubernetes which offer service endpoints (e.g. HTTP) may also require you to enable a secured communication via SSL/TLS. Gardener let&amp;rsquo;s you request a commonly trusted X.509 certificate for your application endpoint. Furthermore, Gardener takes care about the renewal process for your requested certificate.
Let&amp;rsquo;s get the basics straight first. If this is too long for you, you can read below how to get certificates by</description></item><item><title>Shared storage with S3 backend</title><link>https://gardener.cloud/documentation/tutorials/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/tutorials/s3/</guid><description>Shared storage with S3 backend The storage is definitely the most complex and important part of an application setup, once this part is completed, 80% of the tasks are completed.
Mounting an S3 bucket into a pod using FUSE allows you to access the data as if it were on the local disk. The mount is a pointer to an S3 location, so the data is never synced locally. Once mounted, any pod can read or even write from that directory without the need for explicit keys.</description></item><item><title>Shared storage with S3 backend</title><link>https://gardener.cloud/v1.12.8/tutorials/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/tutorials/s3/</guid><description>Shared storage with S3 backend The storage is definitely the most complex and important part of an application setup, once this part is completed, 80% of the tasks are completed.
Mounting an S3 bucket into a pod using FUSE allows you to access the data as if it were on the local disk. The mount is a pointer to an S3 location, so the data is never synced locally. Once mounted, any pod can read or even write from that directory without the need for explicit keys.</description></item><item><title>Shared storage with S3 backend</title><link>https://gardener.cloud/v1.13.2/tutorials/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/tutorials/s3/</guid><description>Shared storage with S3 backend The storage is definitely the most complex and important part of an application setup, once this part is completed, 80% of the tasks are completed.
Mounting an S3 bucket into a pod using FUSE allows you to access the data as if it were on the local disk. The mount is a pointer to an S3 location, so the data is never synced locally. Once mounted, any pod can read or even write from that directory without the need for explicit keys.</description></item><item><title>Shared storage with S3 backend</title><link>https://gardener.cloud/v1.14.0/tutorials/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/tutorials/s3/</guid><description>Shared storage with S3 backend The storage is definitely the most complex and important part of an application setup, once this part is completed, 80% of the tasks are completed.
Mounting an S3 bucket into a pod using FUSE allows you to access the data as if it were on the local disk. The mount is a pointer to an S3 location, so the data is never synced locally. Once mounted, any pod can read or even write from that directory without the need for explicit keys.</description></item><item><title>Shared storage with S3 backend</title><link>https://gardener.cloud/v1.15.5/tutorials/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/tutorials/s3/</guid><description>Shared storage with S3 backend The storage is definitely the most complex and important part of an application setup, once this part is completed, 80% of the tasks are completed.
Mounting an S3 bucket into a pod using FUSE allows you to access the data as if it were on the local disk. The mount is a pointer to an S3 location, so the data is never synced locally. Once mounted, any pod can read or even write from that directory without the need for explicit keys.</description></item><item><title>Shared storage with S3 backend</title><link>https://gardener.cloud/v1.16.3/tutorials/s3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/tutorials/s3/</guid><description>Shared storage with S3 backend The storage is definitely the most complex and important part of an application setup, once this part is completed, 80% of the tasks are completed.
Mounting an S3 bucket into a pod using FUSE allows you to access the data as if it were on the local disk. The mount is a pointer to an S3 location, so the data is never synced locally. Once mounted, any pod can read or even write from that directory without the need for explicit keys.</description></item><item><title>Shoot maintenance</title><link>https://gardener.cloud/documentation/concepts/extensions/shoot-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/shoot-maintenance/</guid><description>Shoot maintenance There is a general document about shoot maintenance that you might want to read. Here, we describe how you can influence certain operations that happen during a shoot maintenance.
Restart Control Plane Controllers As outlined in above linked document, Gardener offers to restart certain control plane controllers running in the seed during a shoot maintenance.
Extension controllers can extend the amount of pods being affected by these restarts. If your Gardener extension manages pods of a shoot&amp;rsquo;s control plane (shoot namespace in seed) and it could potentially profit from a regular restart please consider labeling it with maintenance.</description></item><item><title>Shoot maintenance</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/shoot-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/shoot-maintenance/</guid><description>Shoot maintenance There is a general document about shoot maintenance that you might want to read. Here, we describe how you can influence certain operations that happen during a shoot maintenance.
Restart Control Plane Controllers As outlined in above linked document, Gardener offers to restart certain control plane controllers running in the seed during a shoot maintenance.
Extension controllers can extend the amount of pods being affected by these restarts. If your Gardener extension manages pods of a shoot&amp;rsquo;s control plane (shoot namespace in seed) and it could potentially profit from a regular restart please consider labeling it with maintenance.</description></item><item><title>Shoot maintenance</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/shoot-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/shoot-maintenance/</guid><description>Shoot maintenance There is a general document about shoot maintenance that you might want to read. Here, we describe how you can influence certain operations that happen during a shoot maintenance.
Restart Control Plane Controllers As outlined in above linked document, Gardener offers to restart certain control plane controllers running in the seed during a shoot maintenance.
Extension controllers can extend the amount of pods being affected by these restarts. If your Gardener extension manages pods of a shoot&amp;rsquo;s control plane (shoot namespace in seed) and it could potentially profit from a regular restart please consider labeling it with maintenance.</description></item><item><title>Shoot maintenance</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/shoot-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/shoot-maintenance/</guid><description>Shoot maintenance There is a general document about shoot maintenance that you might want to read. Here, we describe how you can influence certain operations that happen during a shoot maintenance.
Restart Control Plane Controllers As outlined in above linked document, Gardener offers to restart certain control plane controllers running in the seed during a shoot maintenance.
Extension controllers can extend the amount of pods being affected by these restarts. If your Gardener extension manages pods of a shoot&amp;rsquo;s control plane (shoot namespace in seed) and it could potentially profit from a regular restart please consider labeling it with maintenance.</description></item><item><title>Shoot maintenance</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/shoot-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/shoot-maintenance/</guid><description>Shoot maintenance There is a general document about shoot maintenance that you might want to read. Here, we describe how you can influence certain operations that happen during a shoot maintenance.
Restart Control Plane Controllers As outlined in above linked document, Gardener offers to restart certain control plane controllers running in the seed during a shoot maintenance.
Extension controllers can extend the amount of pods being affected by these restarts. If your Gardener extension manages pods of a shoot&amp;rsquo;s control plane (shoot namespace in seed) and it could potentially profit from a regular restart please consider labeling it with maintenance.</description></item><item><title>Shoot maintenance</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/shoot-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/shoot-maintenance/</guid><description>Shoot maintenance There is a general document about shoot maintenance that you might want to read. Here, we describe how you can influence certain operations that happen during a shoot maintenance.
Restart Control Plane Controllers As outlined in above linked document, Gardener offers to restart certain control plane controllers running in the seed during a shoot maintenance.
Extension controllers can extend the amount of pods being affected by these restarts. If your Gardener extension manages pods of a shoot&amp;rsquo;s control plane (shoot namespace in seed) and it could potentially profit from a regular restart please consider labeling it with maintenance.</description></item><item><title>Shoot resource customization webhooks</title><link>https://gardener.cloud/documentation/concepts/extensions/shoot-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/shoot-webhooks/</guid><description>Shoot resource customization webhooks Gardener deploys several components/resources into the shoot cluster. Some of these resources are essential (like the kube-proxy), others are optional addons (like the kubernetes-dashboard or the nginx-ingress-controller). In either case, some provider extensions might need to mutate these resources and inject provider-specific bits into it.
What&amp;rsquo;s the approach to implement such mutations? Similar to how control plane components in the seed are modified we are using MutatingWebhookConfigurations to achieve the same for resources in the shoot.</description></item><item><title>Shoot resource customization webhooks</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/shoot-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/shoot-webhooks/</guid><description>Shoot resource customization webhooks Gardener deploys several components/resources into the shoot cluster. Some of these resources are essential (like the kube-proxy), others are optional addons (like the kubernetes-dashboard or the nginx-ingress-controller). In either case, some provider extensions might need to mutate these resources and inject provider-specific bits into it.
What&amp;rsquo;s the approach to implement such mutations? Similar to how control plane components in the seed are modified we are using MutatingWebhookConfigurations to achieve the same for resources in the shoot.</description></item><item><title>Shoot resource customization webhooks</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/shoot-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/shoot-webhooks/</guid><description>Shoot resource customization webhooks Gardener deploys several components/resources into the shoot cluster. Some of these resources are essential (like the kube-proxy), others are optional addons (like the kubernetes-dashboard or the nginx-ingress-controller). In either case, some provider extensions might need to mutate these resources and inject provider-specific bits into it.
What&amp;rsquo;s the approach to implement such mutations? Similar to how control plane components in the seed are modified we are using MutatingWebhookConfigurations to achieve the same for resources in the shoot.</description></item><item><title>Shoot resource customization webhooks</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/shoot-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/shoot-webhooks/</guid><description>Shoot resource customization webhooks Gardener deploys several components/resources into the shoot cluster. Some of these resources are essential (like the kube-proxy), others are optional addons (like the kubernetes-dashboard or the nginx-ingress-controller). In either case, some provider extensions might need to mutate these resources and inject provider-specific bits into it.
What&amp;rsquo;s the approach to implement such mutations? Similar to how control plane components in the seed are modified we are using MutatingWebhookConfigurations to achieve the same for resources in the shoot.</description></item><item><title>Shoot resource customization webhooks</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/shoot-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/shoot-webhooks/</guid><description>Shoot resource customization webhooks Gardener deploys several components/resources into the shoot cluster. Some of these resources are essential (like the kube-proxy), others are optional addons (like the kubernetes-dashboard or the nginx-ingress-controller). In either case, some provider extensions might need to mutate these resources and inject provider-specific bits into it.
What&amp;rsquo;s the approach to implement such mutations? Similar to how control plane components in the seed are modified we are using MutatingWebhookConfigurations to achieve the same for resources in the shoot.</description></item><item><title>Shoot resource customization webhooks</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/shoot-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/shoot-webhooks/</guid><description>Shoot resource customization webhooks Gardener deploys several components/resources into the shoot cluster. Some of these resources are essential (like the kube-proxy), others are optional addons (like the kubernetes-dashboard or the nginx-ingress-controller). In either case, some provider extensions might need to mutate these resources and inject provider-specific bits into it.
What&amp;rsquo;s the approach to implement such mutations? Similar to how control plane components in the seed are modified we are using MutatingWebhookConfigurations to achieve the same for resources in the shoot.</description></item><item><title>Trigger Shoot operations</title><link>https://gardener.cloud/documentation/guides/administer_shoots/trigger-shoot-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/guides/administer_shoots/trigger-shoot-operations/</guid><description>Trigger shoot operations You can trigger a few explicit operations by annotating the Shoot with an operation annotation. This might allow you to induct certain behavior without the need to change the Shoot specification. Some of the operations can also not be caused by changing something in the shoot specification because they can&amp;rsquo;t properly be reflected here.
Please note: If .spec.maintenance.confineSpecUpdateRollout=true then the only way to trigger a shoot reconciliation is by setting the reconcile operation, see below.</description></item><item><title>Trigger Shoot operations</title><link>https://gardener.cloud/v1.12.8/guides/administer_shoots/trigger-shoot-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/guides/administer_shoots/trigger-shoot-operations/</guid><description>Trigger shoot operations You can trigger a few explicit operations by annotating the Shoot with an operation annotation. This might allow you to induct certain behavior without the need to change the Shoot specification. Some of the operations can also not be caused by changing something in the shoot specification because they can&amp;rsquo;t properly be reflected here.
Please note: If .spec.maintenance.confineSpecUpdateRollout=true then the only way to trigger a shoot reconciliation is by setting the reconcile operation, see below.</description></item><item><title>Trigger Shoot operations</title><link>https://gardener.cloud/v1.13.2/guides/administer_shoots/trigger-shoot-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/guides/administer_shoots/trigger-shoot-operations/</guid><description>Trigger shoot operations You can trigger a few explicit operations by annotating the Shoot with an operation annotation. This might allow you to induct certain behavior without the need to change the Shoot specification. Some of the operations can also not be caused by changing something in the shoot specification because they can&amp;rsquo;t properly be reflected here.
Please note: If .spec.maintenance.confineSpecUpdateRollout=true then the only way to trigger a shoot reconciliation is by setting the reconcile operation, see below.</description></item><item><title>Trigger Shoot operations</title><link>https://gardener.cloud/v1.14.0/guides/administer_shoots/trigger-shoot-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/guides/administer_shoots/trigger-shoot-operations/</guid><description>Trigger shoot operations You can trigger a few explicit operations by annotating the Shoot with an operation annotation. This might allow you to induct certain behavior without the need to change the Shoot specification. Some of the operations can also not be caused by changing something in the shoot specification because they can&amp;rsquo;t properly be reflected here.
Please note: If .spec.maintenance.confineSpecUpdateRollout=true then the only way to trigger a shoot reconciliation is by setting the reconcile operation, see below.</description></item><item><title>Trigger Shoot operations</title><link>https://gardener.cloud/v1.15.5/guides/administer_shoots/trigger-shoot-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/guides/administer_shoots/trigger-shoot-operations/</guid><description>Trigger shoot operations You can trigger a few explicit operations by annotating the Shoot with an operation annotation. This might allow you to induct certain behavior without the need to change the Shoot specification. Some of the operations can also not be caused by changing something in the shoot specification because they can&amp;rsquo;t properly be reflected here.
Please note: If .spec.maintenance.confineSpecUpdateRollout=true then the only way to trigger a shoot reconciliation is by setting the reconcile operation, see below.</description></item><item><title>Trigger Shoot operations</title><link>https://gardener.cloud/v1.16.3/guides/administer_shoots/trigger-shoot-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/guides/administer_shoots/trigger-shoot-operations/</guid><description>Trigger shoot operations You can trigger a few explicit operations by annotating the Shoot with an operation annotation. This might allow you to induct certain behavior without the need to change the Shoot specification. Some of the operations can also not be caused by changing something in the shoot specification because they can&amp;rsquo;t properly be reflected here.
Please note: If .spec.maintenance.confineSpecUpdateRollout=true then the only way to trigger a shoot reconciliation is by setting the reconcile operation, see below.</description></item><item><title>User Alerts</title><link>https://gardener.cloud/documentation/concepts/monitoring/user_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/monitoring/user_alerts/</guid><description>User Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiServerTooManyOpenFileDescriptors warning seed The API server ({{ $labels.</description></item><item><title>User Alerts</title><link>https://gardener.cloud/v1.12.8/concepts/monitoring/user_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/monitoring/user_alerts/</guid><description>User Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiServerTooManyOpenFileDescriptors warning seed The API server ({{ $labels.</description></item><item><title>User Alerts</title><link>https://gardener.cloud/v1.13.2/concepts/monitoring/user_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/monitoring/user_alerts/</guid><description>User Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiServerTooManyOpenFileDescriptors warning seed The API server ({{ $labels.</description></item><item><title>User Alerts</title><link>https://gardener.cloud/v1.14.0/concepts/monitoring/user_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/monitoring/user_alerts/</guid><description>User Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiServerTooManyOpenFileDescriptors warning seed The API server ({{ $labels.</description></item><item><title>User Alerts</title><link>https://gardener.cloud/v1.15.5/concepts/monitoring/user_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/monitoring/user_alerts/</guid><description>User Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiServerTooManyOpenFileDescriptors warning seed The API server ({{ $labels.</description></item><item><title>User Alerts</title><link>https://gardener.cloud/v1.16.3/concepts/monitoring/user_alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/monitoring/user_alerts/</guid><description>User Alerts Alertname Severity Type Description ApiServerUnreachableViaKubernetesService critical shoot The Api server has been unreachable for 3 minutes via the kubernetes service in the shoot. CoreDNSDown critical shoot CoreDNS could not be found. Cluster DNS resolution will not work. ApiServerNotReachable blocker seed API server not reachable via external endpoint: {{ $labels.instance }}. KubeApiServerTooManyOpenFileDescriptors warning seed The API server ({{ $labels.</description></item><item><title>Worker resource</title><link>https://gardener.cloud/documentation/concepts/extensions/worker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/documentation/concepts/extensions/worker/</guid><description>Contract: Worker resource While the control plane of a shoot cluster is living in the seed and deployed as native Kubernetes workload, the worker nodes of the shoot clusters are normal virtual machines (VMs) in the end-users infrastructure account. The Gardener project features a sub-project called machine-controller-manager. This controller is extending the Kubernetes API using custom resource definitions to represent actual VMs as Machine objects inside a Kubernetes system. This approach unlocks the possibility to manage virtual machines in the Kubernetes style and benefit from all its design principles.</description></item><item><title>Worker resource</title><link>https://gardener.cloud/v1.12.8/concepts/extensions/worker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.12.8/concepts/extensions/worker/</guid><description>Contract: Worker resource While the control plane of a shoot cluster is living in the seed and deployed as native Kubernetes workload, the worker nodes of the shoot clusters are normal virtual machines (VMs) in the end-users infrastructure account. The Gardener project features a sub-project called machine-controller-manager. This controller is extending the Kubernetes API using custom resource definitions to represent actual VMs as Machine objects inside a Kubernetes system. This approach unlocks the possibility to manage virtual machines in the Kubernetes style and benefit from all its design principles.</description></item><item><title>Worker resource</title><link>https://gardener.cloud/v1.13.2/concepts/extensions/worker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.13.2/concepts/extensions/worker/</guid><description>Contract: Worker resource While the control plane of a shoot cluster is living in the seed and deployed as native Kubernetes workload, the worker nodes of the shoot clusters are normal virtual machines (VMs) in the end-users infrastructure account. The Gardener project features a sub-project called machine-controller-manager. This controller is extending the Kubernetes API using custom resource definitions to represent actual VMs as Machine objects inside a Kubernetes system. This approach unlocks the possibility to manage virtual machines in the Kubernetes style and benefit from all its design principles.</description></item><item><title>Worker resource</title><link>https://gardener.cloud/v1.14.0/concepts/extensions/worker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/extensions/worker/</guid><description>Contract: Worker resource While the control plane of a shoot cluster is living in the seed and deployed as native Kubernetes workload, the worker nodes of the shoot clusters are normal virtual machines (VMs) in the end-users infrastructure account. The Gardener project features a sub-project called machine-controller-manager. This controller is extending the Kubernetes API using custom resource definitions to represent actual VMs as Machine objects inside a Kubernetes system. This approach unlocks the possibility to manage virtual machines in the Kubernetes style and benefit from all its design principles.</description></item><item><title>Worker resource</title><link>https://gardener.cloud/v1.15.5/concepts/extensions/worker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.15.5/concepts/extensions/worker/</guid><description>Contract: Worker resource While the control plane of a shoot cluster is living in the seed and deployed as native Kubernetes workload, the worker nodes of the shoot clusters are normal virtual machines (VMs) in the end-users infrastructure account. The Gardener project features a sub-project called machine-controller-manager. This controller is extending the Kubernetes API using custom resource definitions to represent actual VMs as Machine objects inside a Kubernetes system. This approach unlocks the possibility to manage virtual machines in the Kubernetes style and benefit from all its design principles.</description></item><item><title>Worker resource</title><link>https://gardener.cloud/v1.16.3/concepts/extensions/worker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.16.3/concepts/extensions/worker/</guid><description>Contract: Worker resource While the control plane of a shoot cluster is living in the seed and deployed as native Kubernetes workload, the worker nodes of the shoot clusters are normal virtual machines (VMs) in the end-users infrastructure account. The Gardener project features a sub-project called machine-controller-manager. This controller is extending the Kubernetes API using custom resource definitions to represent actual VMs as Machine objects inside a Kubernetes system. This approach unlocks the possibility to manage virtual machines in the Kubernetes style and benefit from all its design principles.</description></item></channel></rss>