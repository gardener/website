<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Extensions</title><link>https://gardener.cloud/docs/gardener/extensions/</link><description>Recent content in Extensions on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/gardener/extensions/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Admission</title><link>https://gardener.cloud/docs/gardener/extensions/admission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/admission/</guid><description>
&lt;h1 id="extension-admission">Extension Admission&lt;/h1>
&lt;p>The extensions are expected to validate their respective resources for their extension specific configurations, when the resources are newly created or updated. For example, &lt;a href="https://github.com/gardener/gardener/blob/master/extensions/README.md#infrastructure-provider">provider extensions&lt;/a> would validate &lt;code>spec.provider.infrastructureConfig&lt;/code> and &lt;code>spec.provider.controlPlaneConfig&lt;/code> in the &lt;code>Shoot&lt;/code> resource and &lt;code>spec.providerConfig&lt;/code> in the &lt;code>CloudProfile&lt;/code> resource, &lt;a href="https://github.com/gardener/gardener/blob/master/extensions/README.md#network-plugin">networking extensions&lt;/a> would validate &lt;code>spec.networking.providerConfig&lt;/code> in the &lt;code>Shoot&lt;/code> resource. As best practice, the validation should be performed only if there is a change in the &lt;code>spec&lt;/code> of the resource. Please find an exemplary implementation &lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/admission/validator">here&lt;/a>.&lt;/p>
&lt;p>When a resource is newly created or updated, Gardener adds an extension label for all the extension types referenced in the &lt;code>spec&lt;/code> of the resource. This label is of the form &lt;code>&amp;lt;extension-type&amp;gt;.extensions.gardener.cloud/&amp;lt;extension-name&amp;gt; : &amp;quot;true&amp;quot;&lt;/code>. For example, an extension label for provider extension type &lt;code>aws&lt;/code>, looks like &lt;code>provider.extensions.gardener.cloud/aws : &amp;quot;true&amp;quot;&lt;/code>. The extensions should add object selectors in their admission webhooks for these labels, to filter out the objects they are responsible for. At present, these labels are added to &lt;code>BackupEntry&lt;/code>s, &lt;code>BackupBucket&lt;/code>s, &lt;code>CloudProfile&lt;/code>s, &lt;code>Seed&lt;/code>s, and &lt;code>Shoot&lt;/code>s. Please see &lt;a href="https://github.com/gardener/gardener/tree/master/pkg/apis/core/v1beta1/constants/types_constants.go">this&lt;/a> for the full list of extension labels.&lt;/p></description></item><item><title>Docs: Backupbucket</title><link>https://gardener.cloud/docs/gardener/extensions/backupbucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/backupbucket/</guid><description>
&lt;h1 id="contract-backupbucket-resource">Contract: &lt;code>BackupBucket&lt;/code> resource&lt;/h1>
&lt;p>The Gardener project features a sub-project called &lt;a href="https://github.com/gardener/etcd-backup-restore">etcd-backup-restore&lt;/a> to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) to be created and configured externally with appropriate credentials. The &lt;code>BackupBucket&lt;/code> resource takes this responsibility in Gardener.&lt;/p>
&lt;p>Before introducing the &lt;code>BackupBucket&lt;/code> extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see &lt;a href="https://github.com/gardener/gardener/tree/0.27.0/charts/seed-terraformer/charts/aws-backup">here&lt;/a>).
Now, Gardener commissions an external, provider-specific controller to take over this task. You can also refer to backupInfra proposal documentation to get idea about how the transition was done and understand the resource in broader scope.&lt;/p>
&lt;h2 id="what-is-the-scope-of-bucket">What is the scope of bucket?&lt;/h2>
&lt;p>A bucket will be provisioned per &lt;code>Seed&lt;/code>. So, backup of every &lt;code>Shoot&lt;/code> created on that &lt;code>Seed&lt;/code> will be stored under different shoot specific prefix under the bucket.
For the backup of the &lt;code>Shoot&lt;/code> rescheduled on different &lt;code>Seed&lt;/code> it will continue to use the same bucket.&lt;/p>
&lt;h2 id="what-is-the-lifespan-of-backupbucket">What is the lifespan of &lt;code>BackupBucket&lt;/code>?&lt;/h2>
&lt;p>The bucket associated with &lt;code>BackupBucket&lt;/code> will be created at creation of &lt;code>Seed&lt;/code>. And as per current implementation, it will be deleted on deletion of &lt;code>Seed&lt;/code> and there isn&amp;rsquo;t any &lt;code>BackupEntry&lt;/code> resource associated with it.&lt;/p>
&lt;p>In the future, we plan to introduce schedule for &lt;code>BackupBucket&lt;/code> the deletion logic for &lt;code>BackupBucket&lt;/code> resource, which will reschedule the it on different available &lt;code>Seed&lt;/code>, on deletion or failure of health check for current associated &lt;code>seed&lt;/code>. In that case, &lt;code>BackupBucket&lt;/code> will be deleted only if there isn&amp;rsquo;t any schedulable &lt;code>Seed&lt;/code> available and there isn&amp;rsquo;t any associated &lt;code>BackupEntry&lt;/code> resource.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-infrastructure-provider">What needs to be implemented to support a new infrastructure provider?&lt;/h2>
&lt;p>As part of the seed flow Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: BackupBucket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: foo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;some-optional-provider-specific-backupbucket-configuration&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: backupprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.secretRef&lt;/code> contains a reference to the provider secret pointing to the account that shall be used to create the needed resources. This provider secret will be configured
by Gardener operator in the &lt;code>Seed&lt;/code> resource and propagated over there by seed controller.&lt;/p>
&lt;p>After your controller has created the required bucket, if required it generates the secret to access the objects in buckets and put reference to it in &lt;code>status&lt;/code>. This secret is
supposed to be used by Gardener or eventually &lt;code>BackupEntry&lt;/code> resource and etcd-backup-restore component to backup the etcd.&lt;/p>
&lt;p>In order to support a new infrastructure provider you need to write a controller that watches all &lt;code>BackupBucket&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code>. You can take a look at the below referenced example implementation for the Azure provider.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/api-reference/extensions/#backupbucket">&lt;code>BackupBucket&lt;/code> API Reference&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-azure/tree/master/pkg/controller/backupbucket">Exemplary implementation for the Azure provider&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/extensions/backupentry/">&lt;code>BackupEntry&lt;/code> resource documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/proposals/02-backupinfra/">Shared bucket proposal&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Backupentry</title><link>https://gardener.cloud/docs/gardener/extensions/backupentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/backupentry/</guid><description>
&lt;h1 id="contract-backupentry-resource">Contract: &lt;code>BackupEntry&lt;/code> resource&lt;/h1>
&lt;p>The Gardener project features a sub-project called &lt;a href="https://github.com/gardener/etcd-backup-restore">etcd-backup-restore&lt;/a> to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) access credentials to be created and configured externally with appropriate credentials. The &lt;code>BackupEntry&lt;/code> resource takes this responsibility in Gardener to provide this information by creating a secret specific to the component. Said that, the core motivation for introducing this resource was to support retention of backups post deletion of &lt;code>Shoot&lt;/code>. The etcd-backup-restore components takes responsibility of garbage collecting old backups out of the defined period. Once a shoot is deleted, we need to persist the backups for few days. Hence, Gardener uses the &lt;code>BackupEntry&lt;/code> resource for this housekeeping work post deletion of a &lt;code>Shoot&lt;/code>. The &lt;code>BackupEntry&lt;/code> resource is responsible for shoot specific prefix under referred bucket.&lt;/p>
&lt;p>Before introducing the &lt;code>BackupEntry&lt;/code> extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see &lt;a href="https://github.com/gardener/gardener/tree/0.27.0/charts/seed-terraformer/charts/aws-backup">here&lt;/a>).
Now, Gardener commissions an external, provider-specific controller to take over this task. You can also refer to backupInfra proposal documentation to get idea about how the transition was done and understand the resource in broader scope.&lt;/p>
&lt;h2 id="what-is-the-lifespan-of-backupentry">What is the lifespan of &lt;code>BackupEntry&lt;/code>?&lt;/h2>
&lt;p>The bucket associated with &lt;code>BackupEntry&lt;/code> will be created at using &lt;code>BackupBucket&lt;/code> resource. The &lt;code>BackupEntry&lt;/code> resource will be created as a part of a &lt;code>Shoot&lt;/code> creation. But resource might continue to exist post deletion of a &lt;code>Shoot&lt;/code> (see &lt;a href="https://gardener.cloud/docs/gardener/concepts/gardenlet/#backupentry-controller">this&lt;/a> for more details).&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-infrastructure-provider">What needs to be implemented to support a new infrastructure provider?&lt;/h2>
&lt;p>As part of the shoot flow Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: BackupEntry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;some-optional-provider-specific-backup-bucket-configuration&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backupBucketProviderStatus:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;some-optional-provider-specific-backup-bucket-status&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bucketName: foo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: backupprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.secretRef&lt;/code> contains a reference to the provider secret pointing to the account that shall be used to create the needed resources. This provider secret will be propagated from &lt;code>BackupBucket&lt;/code> resource by Shoot controller.&lt;/p>
&lt;p>Your controller is supposed to create the &lt;code>etcd-backup&lt;/code> secret in control-plane namespace of a shoot. This secret is supposed to be used by Gardener or eventually the etcd-backup-restore component to backup the etcd. The controller implementation should cleanup the objects created under shoot specific prefix in bucket equivalent to name of &lt;code>BackupEntry&lt;/code> resource.&lt;/p>
&lt;p>In order to support a new infrastructure provider you need to write a controller that watches all &lt;code>BackupBucket&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code>. You can take a look at the below referenced example implementation for the Azure provider.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/api-reference/extensions/#backupbucket">&lt;code>BackupEntry&lt;/code> API Reference&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-azure/tree/master/pkg/controller/backupentry">Exemplary implementation for the Azure provider&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/extensions/backupbucket/">&lt;code>BackupBucket&lt;/code> resource documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/proposals/02-backupinfra/">Shared bucket proposal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/controllermanager/apis/config/types.go#L101-%23L107">Gardener-controller-manager-component-config API specification&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Bastion</title><link>https://gardener.cloud/docs/gardener/extensions/bastion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/bastion/</guid><description>
&lt;h1 id="contract-bastion-resource">Contract: &lt;code>Bastion&lt;/code> resource&lt;/h1>
&lt;p>The Gardener project allows users to connect to Shoot worker nodes via SSH. As nodes are usually firewalled and not directly accessible from the public internet, &lt;a href="https://gardener.cloud/docs/gardener/proposals/15-manage-bastions-and-ssh-key-pair-rotation/">GEP-15&lt;/a> introduced the concept of &amp;ldquo;Bastions&amp;rdquo;. A bastion is a dedicated server that only serves to allow SSH ingress to the worker nodes.&lt;/p>
&lt;p>&lt;code>Bastion&lt;/code> resources contain the user&amp;rsquo;s public SSH key and IP address, in order to provision the server accordingly: The public key is put onto the Bastion and SSH ingress is only authorized for the given IP address (in fact, it&amp;rsquo;s not a single IP address, but a set of IP ranges, however for most purposes a single IP is be used).&lt;/p>
&lt;h2 id="what-is-the-lifespan-of-bastion">What is the lifespan of &lt;code>Bastion&lt;/code>?&lt;/h2>
&lt;p>Once a &lt;code>Bastion&lt;/code> has been created in the garden, it will be replicated to the appropriate seed cluster, where a controller then reconciles a server and firewall rules etc. on the cloud provider used by the target Shoot. When the Bastion is ready (i.e. has a public IP), that IP is stored in the &lt;code>Bastion&lt;/code>&amp;rsquo;s status and from there is picked up by the garden cluster and &lt;code>gardenctl&lt;/code> eventually.&lt;/p>
&lt;p>To make multiple SSH sessions possible, the existence of the &lt;code>Bastion&lt;/code> is not directly tied to the execution of &lt;code>gardenctl&lt;/code>: users can exit out of &lt;code>gardenctl&lt;/code> and use &lt;code>ssh&lt;/code> manually to connect to the bastion and worker nodes.&lt;/p>
&lt;p>However, &lt;code>Bastion&lt;/code>s have an expiry date, after which they will be garbage collected.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-infrastructure-provider">What needs to be implemented to support a new infrastructure provider?&lt;/h2>
&lt;p>As part of the shoot flow Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Bastion
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: mybastion
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># userData is base64-encoded cloud provider user data; this contains the&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># user&amp;#39;s SSH key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userData: IyEvYmluL2Jhc2ggL....Nlcgo=
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ingress:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ipBlock:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: 192.88.99.0/32 &lt;span style="color:#008000"># this is most likely the user&amp;#39;s IP address&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Your controller is supposed to create a new instance at the given cloud provider, firewall it to only allow SSH (TCP port 22) from the given IP blocks, and then to configure the firewall for the worker nodes to allow SSH from the bastion instance. When a &lt;code>Bastion&lt;/code> is deleted, all these changes need to be reverted.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/api-reference/extensions/#bastion">&lt;code>Bastion&lt;/code> API Reference&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/bastion">Exemplary implementation for the AWS provider&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/proposals/15-manage-bastions-and-ssh-key-pair-rotation/">GEP-15&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Cluster</title><link>https://gardener.cloud/docs/gardener/extensions/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/cluster/</guid><description>
&lt;h1 id="cluster-resource">&lt;code>Cluster&lt;/code> resource&lt;/h1>
&lt;p>As part of the extensibility epic a lot of responsibility that was previously taken over by Gardener directly has now been shifted to extension controllers running in the seed clusters.
These extensions often serve a well-defined purpose, e.g. the management of &lt;a href="https://gardener.cloud/docs/gardener/extensions/dns/">DNS records&lt;/a>, &lt;a href="https://gardener.cloud/docs/gardener/extensions/infrastructure/">infrastructure&lt;/a>, etc.
We have introduced a couple of extension CRDs in the seeds whose specification is written by Gardener, and which are acted up by the extensions.&lt;/p>
&lt;p>However, the extensions sometimes require more information that is not directly part of the specification.
One example of that is the GCP infrastructure controller which needs to know the shoot&amp;rsquo;s pod and service network.
Another example is the Azure infrastructure controller which requires some information out of the &lt;code>CloudProfile&lt;/code> resource.
The problem is that Gardener does not know which extension requires which information so that it can write it into their specific CRDs.&lt;/p>
&lt;p>In order to deal with this problem we have introduced the &lt;code>Cluster&lt;/code> extension resource.
This CRD is written into the seeds, however, it does not contain a &lt;code>status&lt;/code>, so it is not expected that something acts upon it.
Instead, you can treat it like a &lt;code>ConfigMap&lt;/code> which contains data that might be interesting for you.
In the context of Gardener, seeds and shoots, and extensibility the &lt;code>Cluster&lt;/code> resource contains the &lt;code>CloudProfile&lt;/code>, &lt;code>Seed&lt;/code>, and &lt;code>Shoot&lt;/code> manifest.
Extension controllers can take whatever information they want out of it that might help completing their individual tasks.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Cluster
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudProfile:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: CloudProfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seed:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: Seed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shoot:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The resource is written by Gardener before it starts the reconciliation flow of the shoot.&lt;/p>
&lt;p>⚠️ All Gardener components use the &lt;code>core.gardener.cloud/v1beta1&lt;/code> version, i.e., the &lt;code>Cluster&lt;/code> resource will contain the objects in this version.&lt;/p>
&lt;h2 id="important-information-that-should-be-taken-into-account">Important information that should be taken into account&lt;/h2>
&lt;p>There are some fields in the &lt;code>Shoot&lt;/code> specification that might be interesting to take into account.&lt;/p>
&lt;ul>
&lt;li>&lt;code>.spec.hibernation.enabled={true,false}&lt;/code>: Extension controllers might want to behave differently if the shoot is hibernated or not (probably they might want to scale down their control plane components, for example).&lt;/li>
&lt;li>&lt;code>.status.lastOperation.state=Failed&lt;/code>: If Gardener sets the shoot&amp;rsquo;s last operation state to &lt;code>Failed&lt;/code> it means that Gardener won&amp;rsquo;t automatically retry to finish the reconciliation/deletion flow because an error occurred that could not be resolved within the last &lt;code>24h&lt;/code> (default). In this case end-users are expected to manually re-trigger the reconciliation flow in case they want Gardener to try again. Extension controllers are expected to follow the same principle. This means they have to read the shoot state out of the &lt;code>Cluster&lt;/code> resource.&lt;/li>
&lt;/ul>
&lt;h2 id="extension-resources-not-associated-with-a-shoot">Extension resources not associated with a shoot&lt;/h2>
&lt;p>In some cases, Gardener may create extension resources that are not associated with a shoot, but are needed to support some functionality internal to Gardener. Such resources will be created in the &lt;code>garden&lt;/code> namespace of a seed cluster.&lt;/p>
&lt;p>For example, if the &lt;a href="https://gardener.cloud/docs/gardener/deployment/deploy_gardenlet_manually/">managed ingress controller&lt;/a> is active on the seed, Gardener will create a &lt;a href="https://gardener.cloud/docs/gardener/extensions/dns/">DNSProvider / DNSEntry&lt;/a> or a &lt;a href="https://gardener.cloud/docs/gardener/extensions/dnsrecord/">DNSRecord&lt;/a> resource(s) in the &lt;code>garden&lt;/code> namespace of the seed cluster for the ingress DNS record.&lt;/p>
&lt;p>Extension controllers that may be expected to reconcile extension resources in the &lt;code>garden&lt;/code> namespace should make sure that they can tolerate the absence of a cluster resource. This means that they should not attempt to read the cluster resource in such cases, or if they do they should ignore the &amp;ldquo;not found&amp;rdquo; error.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_cluster.go">&lt;code>Cluster&lt;/code> API (Golang specification)&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Containerruntime</title><link>https://gardener.cloud/docs/gardener/extensions/containerruntime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/containerruntime/</guid><description>
&lt;h1 id="gardener-container-runtime-extension">Gardener Container Runtime Extension&lt;/h1>
&lt;p>At the lowest layers of a Kubernetes node is the software that, among other things, starts and stops containers. It is called “Container Runtime”.
The most widely known container runtime is Docker, but it is not alone in this space. In fact, the container runtime space has been rapidly evolving.&lt;/p>
&lt;p>Kubernetes supports different container runtimes using Container Runtime Interface (CRI) – a plugin interface which enables kubelet to use a wide variety of container runtimes.&lt;/p>
&lt;p>Gardener supports creation of Worker machines using CRI, more information can be found here: &lt;a href="https://gardener.cloud/docs/gardener/extensions/operatingsystemconfig/#cri-support">CRI Support&lt;/a>.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>Prior to the &lt;code>Container Runtime Extensibility&lt;/code> concept, Gardener used Docker as the only
container runtime to use in shoot worker machines. Because of the wide variety of different container runtimes
offers multiple important features (for example enhanced security concepts) it is important to enable end users to use other container runtimes as well.&lt;/p>
&lt;h2 id="the-containerruntime-extension-resource">The &lt;code>ContainerRuntime&lt;/code> Extension Resource&lt;/h2>
&lt;p>Here is what a typical &lt;code>ContainerRuntime&lt;/code> resource would look-like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ContainerRuntime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-container-runtime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> binaryPath: /var/bin/containerruntimes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: gvisor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workerPool:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: worker-ubuntu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selector:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matchLabels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> worker.gardener.cloud/pool: worker-ubuntu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gardener deploys one &lt;code>ContainerRuntime&lt;/code> resource per worker pool per CRI.
To exemplify this, consider a Shoot having two worker pools (&lt;code>worker-one&lt;/code>, &lt;code>worker-two&lt;/code>) using &lt;code>containerd&lt;/code> as the CRI as well as &lt;code>gvisor&lt;/code> and &lt;code>kata&lt;/code> as enabled container runtimes.
Gardener would deploy four &lt;code>ContainerRuntime&lt;/code> resources. For &lt;code>worker-one&lt;/code>: one &lt;code>ContainerRuntime&lt;/code> for type &lt;code>gvisor&lt;/code> and one for type &lt;code>kata&lt;/code>. The same resource are being deployed for &lt;code>worker-two&lt;/code>.&lt;/p>
&lt;h2 id="supporting-a-new-container-runtime-provider">Supporting a new Container Runtime Provider&lt;/h2>
&lt;p>To add support for another container runtime (e.g., gvisor, kata-containers, etc.) a container runtime extension controller needs to be implemented. It should support Gardener&amp;rsquo;s supported CRI plugins.&lt;/p>
&lt;p>The container runtime extension should install the necessary resources into the shoot cluster (e.g., &lt;code>RuntimeClass&lt;/code>es), and it should copy the runtime binaries to the relevant worker machines in path: &lt;code>spec.binaryPath&lt;/code>.
Gardener labels the shoot nodes according to the CRI configured: &lt;code>worker.gardener.cloud/cri-name=&amp;lt;value&amp;gt;&lt;/code> (e.g &lt;code>worker.gardener.cloud/cri-name=containerd&lt;/code>) and multiple labels for each of the container runtimes configured for the shoot Worker machine:
&lt;code>containerruntime.worker.gardener.cloud/&amp;lt;container-runtime-type-value&amp;gt;=true&lt;/code> (e.g &lt;code>containerruntime.worker.gardener.cloud/gvisor=true&lt;/code>).
The way to install the binaries is by creating a daemon set which copies the binaries from an image in a docker registry to the relevant labeled Worker&amp;rsquo;s nodes (avoid downloading binaries from internet to also cater with isolated environments).&lt;/p>
&lt;p>For additional reference, please have a look at the &lt;a href="https://github.com/gardener/gardener-extension-runtime-gvisor">runtime-gvsior&lt;/a> provider extension, which provides more information on how to configure the necessary charts as well as the actuators required to reconcile container runtime inside the &lt;code>Shoot&lt;/code> cluster to the desired state.&lt;/p></description></item><item><title>Docs: Controllerregistration</title><link>https://gardener.cloud/docs/gardener/extensions/controllerregistration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/controllerregistration/</guid><description>
&lt;h1 id="registering-extension-controllers">Registering Extension Controllers&lt;/h1>
&lt;p>Extensions are registered in the garden cluster via &lt;a href="https://github.com/gardener/gardener/blob/master/example/25-controllerregistration.yaml">&lt;code>ControllerRegistration&lt;/code>&lt;/a> resources.
Gardener is evaluating the registrations and creates &lt;a href="https://github.com/gardener/gardener/blob/master/example/25-controllerinstallation.yaml">&lt;code>ControllerInstallation&lt;/code>&lt;/a> resources which describe the request &amp;ldquo;please install this controller &lt;code>X&lt;/code> to this seed &lt;code>Y&lt;/code>&amp;rdquo;.&lt;/p>
&lt;p>Similar to how &lt;code>CloudProfile&lt;/code> or &lt;code>Seed&lt;/code> resources get into the system, the Gardener administrator must deploy the &lt;code>ControllerRegistration&lt;/code> resources (this does not happen automatically in any way - the administrator decides which extensions shall be enabled).&lt;/p>
&lt;p>The specification mainly describes which of Gardener&amp;rsquo;s extension CRDs are managed, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ControllerDeployment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: os-gardenlinux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: helm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> chart: H4sIFAAAAAAA/yk... &lt;span style="color:#008000"># &amp;lt;base64-gzip-chart&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> values:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo: bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ControllerRegistration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: os-gardenlinux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deployment:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deploymentRefs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: os-gardenlinux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resources:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - kind: OperatingSystemConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: gardenlinux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> primary: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This information tells Gardener that there is an extension controller that can handle &lt;code>OperatingSystemConfig&lt;/code> resources of type &lt;code>gardenlinux&lt;/code>.
A reference to the shown &lt;code>ControllerDeployment&lt;/code> specifies how the deployment of the extension controller is accomplished.&lt;/p>
&lt;p>Also, it specifies that this controller is the primary one responsible for the lifecycle of the &lt;code>OperatingSystemConfig&lt;/code> resource.
Setting &lt;code>primary&lt;/code> to &lt;code>false&lt;/code> would allow to register additional, secondary controllers that may also watch/react on the &lt;code>OperatingSystemConfig/coreos&lt;/code> resources, however, only the primary controller may change/update the main &lt;code>status&lt;/code> of the extension object (that are used to &amp;ldquo;communicate&amp;rdquo; with the Gardenlet).
Particularly, only the primary controller may set &lt;code>.status.lastOperation&lt;/code>, &lt;code>.status.lastError&lt;/code>, &lt;code>.status.observedGeneration&lt;/code>, and &lt;code>.status.state&lt;/code>.
Secondary controllers may contribute to the &lt;code>.status.conditions[]&lt;/code> if they like, of course.&lt;/p>
&lt;p>Secondary controllers might be helpful in scenarios where additional tasks need to be completed which are not part of the reconciliation logic of the primary controller but separated out into a dedicated extension.&lt;/p>
&lt;p>⚠️ There must be exactly one primary controller for every registered kind/type combination.
Also, please note that the &lt;code>primary&lt;/code> field cannot be changed after creation of the &lt;code>ControllerRegistration&lt;/code>.&lt;/p>
&lt;h2 id="deploying-extension-controllers">Deploying Extension Controllers&lt;/h2>
&lt;p>Submitting above &lt;code>ControllerDeployment&lt;/code> and &lt;code>ControllerRegistration&lt;/code> will create a &lt;code>ControllerInstallation&lt;/code> resource:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ControllerInstallation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: os-gardenlinux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deploymentRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: networking-calico
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> registrationRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: os-gardenlinux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seedRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: aws-eu1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This resource expresses that Gardener requires the &lt;code>os-gardenlinux&lt;/code> extension controller to run on the &lt;code>aws-eu1&lt;/code> seed cluster.&lt;/p>
&lt;p>The Gardener Controller Manager does automatically determine which extension is required on which seed cluster and will only create &lt;code>ControllerInstallation&lt;/code> objects for those.
Also, it will automatically delete &lt;code>ControllerInstallation&lt;/code>s referencing extension controllers that are no longer required on a seed (e.g., because all shoots on it have been deleted).
There are additional configuration options, please see &lt;a href="#deployment-configuration-options">this section&lt;/a>.&lt;/p>
&lt;h2 id="how-do-extension-controllers-get-deployed-to-seeds">How do extension controllers get deployed to seeds?&lt;/h2>
&lt;p>After Gardener has written the &lt;code>ControllerInstallation&lt;/code> resource some component must satisfy this request and start deploying the extension controller to the seed.
Depending on the complexity of the controller&amp;rsquo;s lifecycle management, configuration, etc. there are two possible scenarios:&lt;/p>
&lt;h3 id="scenario-1-deployed-by-gardener">Scenario 1: Deployed by Gardener&lt;/h3>
&lt;p>In many cases the extension controllers are easy to deploy and configure.
It is sufficient to simply create a Helm chart (standardized way of packaging software in the Kubernetes context) and deploy it together with some static configuration values.
Gardener supports this scenario and allows to provide arbitrary deployment information in the &lt;code>ControllerDeployment&lt;/code> resource&amp;rsquo;s &lt;code>.providerConfig&lt;/code> section:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: helm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> chart: H4sIFAAAAAAA/yk...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> values:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo: bar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If &lt;code>.type=helm&lt;/code> then Gardener itself will take over the responsibility the deployment.
It base64-decodes the provided Helm chart (&lt;code>.providerConfig.chart&lt;/code>) and deploys it with the provided static configuration (&lt;code>.providerConfig.values&lt;/code>).
The chart and the values can be updated at any time - Gardener will recognize and re-trigger the deployment process.&lt;/p>
&lt;p>In order to allow extensions to get information about the garden and the seed cluster Gardener does mix-in certain properties into the values (root level) of every deployed Helm chart:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>gardener:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> garden:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> identifier: &amp;lt;uuid-of-gardener-installation&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seed:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> identifier: &amp;lt;seed-name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: europe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spec: &amp;lt;complete-seed-spec&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Extensions can use this information in their Helm chart in case they require knowledge about the garden and the seed environment.
The list might be extended in the future.&lt;/p>
&lt;p>ℹ️ Gardener uses the UUID of the &lt;code>garden&lt;/code> &lt;code>Namespace&lt;/code> object in the &lt;code>.gardener.garden.identifier&lt;/code> property.&lt;/p>
&lt;h3 id="scenario-2-deployed-by-a-non-human-kubernetes-operator">Scenario 2: Deployed by a (non-human) Kubernetes operator&lt;/h3>
&lt;p>Some extension controllers might be more complex and require additional domain-specific knowledge wrt. lifecycle or configuration.
In this case, we encourage to follow the Kubernetes operator pattern and deploy a dedicated operator for this extension into the garden cluster.
The &lt;code>ControllerDeployments&lt;/code>&amp;rsquo;s &lt;code>.type&lt;/code> field would then not be &lt;code>helm&lt;/code>, and no Helm chart or values need to be provided there.
Instead, the operator itself knows how to deploy the extension into the seed.
It must watch &lt;code>ControllerInstallation&lt;/code> resources and act one those referencing a &lt;code>ControllerRegistration&lt;/code> the operator is responsible for.&lt;/p>
&lt;p>In order to let Gardener know that the extension controller is ready and running in the seed the &lt;code>ControllerInstallation&lt;/code>&amp;rsquo;s &lt;code>.status&lt;/code> field supports two conditions: &lt;code>RegistrationValid&lt;/code> and &lt;code>InstallationSuccessful&lt;/code> - both must be provided by the responsible operator:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conditions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2019-01-22T11:51:11Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastUpdateTime: &lt;span style="color:#a31515">&amp;#34;2019-01-22T11:51:11Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: Chart could be rendered successfully.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: RegistrationValid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;True&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: Valid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2019-01-22T11:51:12Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastUpdateTime: &lt;span style="color:#a31515">&amp;#34;2019-01-22T11:51:12Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: Installation of new resources succeeded.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: InstallationSuccessful
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;True&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: Installed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Additionally, the &lt;code>.status&lt;/code> field has a &lt;code>providerStatus&lt;/code> section into which the operator can (optionally) put any arbitrary data associated with this installation.&lt;/p>
&lt;h2 id="extensions-in-the-garden-cluster-itself">Extensions in the garden cluster itself&lt;/h2>
&lt;p>The &lt;code>Shoot&lt;/code> resource itself will contain some provider-specific data blobs.
As a result, some extensions might also want to run in the garden cluster, e.g., to provide &lt;code>ValidatingWebhookConfiguration&lt;/code>s for validating the correctness of their provider-specific blobs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: johndoe-aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloud:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: aws.cloud.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vpc: &lt;span style="color:#008000"># specify either &amp;#39;id&amp;#39; or &amp;#39;cidr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># id: vpc-123456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: 10.250.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> internal:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 10.250.112.0/22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 10.250.96.0/22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 10.250.0.0/19
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zones:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - eu-west-1a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above example, Gardener itself does not understand the AWS-specific provider configuration for the infrastructure.
However, if this part of the &lt;code>Shoot&lt;/code> resource should be validated then you should run an AWS-specific component in the garden cluster that registers a webhook. You can do it similarly if you want to default some fields of a resource (by using a &lt;code>MutatingWebhookConfiguration&lt;/code>).&lt;/p>
&lt;p>Again, similar to how Gardener is deployed to the garden cluster, these components must be deployed and managed by the Gardener administrator.&lt;/p>
&lt;h3 id="extension-resource-configurations">&lt;code>Extension&lt;/code> resource configurations&lt;/h3>
&lt;p>The &lt;code>Extension&lt;/code> resource allows injecting arbitrary steps into the shoot reconciliation flow that are unknown to Gardener.
Hence, it is slightly special and allows further configuration when registering it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ControllerRegistration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: extension-foo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resources:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - kind: Extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: foo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> primary: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> globallyEnabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reconcileTimeout: 30s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>globallyEnabled=true&lt;/code> option specifies that the &lt;code>Extension/foo&lt;/code> object shall be created by default for all shoots (unless they opted out by setting &lt;code>.spec.extensions[].enabled=false&lt;/code> in the &lt;code>Shoot&lt;/code> spec).&lt;/p>
&lt;p>The &lt;code>reconcileTimeout&lt;/code> tells Gardener how long it should wait during its shoot reconciliation flow for the &lt;code>Extension/foo&lt;/code>&amp;rsquo;s reconciliation to finish.&lt;/p>
&lt;h3 id="deployment-configuration-options">Deployment configuration options&lt;/h3>
&lt;p>The &lt;code>.spec.deployment&lt;/code> resource allows to configure a deployment &lt;code>policy&lt;/code>.
There are the following policies:&lt;/p>
&lt;ul>
&lt;li>&lt;code>OnDemand&lt;/code> (default): Gardener will demand the deployment and deletion of the extension controller to/from seed clusters dynamically. It will automatically determine (based on other resources like &lt;code>Shoot&lt;/code>s) whether it is required and decide accordingly.&lt;/li>
&lt;li>&lt;code>Always&lt;/code>: Gardener will demand the deployment of the extension controller to seed clusters independent of whether it is actually required or not. This might be helpful if you want to add a new component/controller to all seed clusters by default. Another use-case is to minimize the durations until extension controllers get deployed and ready in case you have highly fluctuating seed clusters.&lt;/li>
&lt;li>&lt;code>AlwaysExceptNoShoots&lt;/code>: Similar to &lt;code>Always&lt;/code>, but if the seed does not have any shoots then the extension is not being deployed. It will be deleted from a seed after the last shoot has been removed from it.&lt;/li>
&lt;/ul>
&lt;p>Also, the &lt;code>.spec.deployment.seedSelector&lt;/code> allows to specify a label selector for seed clusters.
Only if it matches the labels of a seed then it will be deployed to it.
Please note that a seed selector can only be specified for secondary controllers (&lt;code>primary=false&lt;/code> for all &lt;code>.spec.resources[]&lt;/code>).&lt;/p></description></item><item><title>Docs: Controlplane</title><link>https://gardener.cloud/docs/gardener/extensions/controlplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/controlplane/</guid><description>
&lt;h1 id="contract-controlplane-resource">Contract: &lt;code>ControlPlane&lt;/code> resource&lt;/h1>
&lt;p>Most Kubernetes clusters require a &lt;code>cloud-controller-manager&lt;/code> or CSI drivers in order to work properly.
Before introducing the &lt;code>ControlPlane&lt;/code> extension resource Gardener was having several different Helm charts for the &lt;code>cloud-controller-manager&lt;/code> deployments for the various providers.
Now, Gardener commissions an external, provider-specific controller to take over this task.&lt;/p>
&lt;h2 id="which-control-plane-resources-are-required">Which control plane resources are required?&lt;/h2>
&lt;p>As mentioned in the &lt;a href="https://gardener.cloud/docs/gardener/extensions/controlplane-webhooks/">controlplane customization webhooks&lt;/a> document Gardener shall not deploy any &lt;code>cloud-controller-manager&lt;/code> or any other provider-specific component.
Instead, it creates a &lt;code>ControlPlane&lt;/code> CRD that should be picked up by provider extensions.
Its purpose is to trigger the deployment of such provider-specific components in the shoot namespace in the seed cluster.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-infrastructure-provider">What needs to be implemented to support a new infrastructure provider?&lt;/h2>
&lt;p>As part of the shoot flow Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ControlPlane
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: control-plane
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: openstack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: europe-west1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cloudprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: openstack.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: ControlPlaneConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loadBalancerProvider: provider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: eu-1a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudControllerManager:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> featureGates:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CustomResourceValidation: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> infrastructureProviderStatus:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: openstack.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureStatus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> floatingPool:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: vpc-1234
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subnets:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: subnetid
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.secretRef&lt;/code> contains a reference to the provider secret pointing to the account that shall be used for the shoot cluster.
However, the most important section is the &lt;code>.spec.providerConfig&lt;/code> and the &lt;code>.spec.infrastructureProviderStatus&lt;/code>.
The first one contains an embedded declaration of the provider specific configuration for the control plane (that cannot be known by Gardener itself).
You are responsible for designing how this configuration looks like.
Gardener does not evaluate it but just copies this part from what has been provided by the end-user in the &lt;code>Shoot&lt;/code> resource.
The second one contains the output of the &lt;a href="https://gardener.cloud/docs/gardener/extensions/infrastructure/">&lt;code>Infrastructure&lt;/code> resource&lt;/a> (that might be relevant for the CCM config).&lt;/p>
&lt;p>In order to support a new control plane provider you need to write a controller that watches all &lt;code>ControlPlane&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code>.
You can take a look at the below referenced example implementation for the Alicloud provider.&lt;/p>
&lt;p>The control plane controller as part of the &lt;code>ControlPlane&lt;/code> reconciliation, often deploys resources (e.g. pods/deployments) into the Shoot namespace in the &lt;code>Seed&lt;/code> as part of its &lt;code>ControlPlane&lt;/code> reconciliation loop.
Because the namespace contains &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/">network policies&lt;/a> that per default &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/#default-deny-all-ingress-and-all-egress-traffic">deny all ingress and egress traffic&lt;/a>,
the pods may need to have proper labels matching to the selectors of the network policies in order to allow the required network traffic.
Otherwise, they won&amp;rsquo;t be allowed to talk to certain other components (e.g., the kube-apiserver of the shoot).
Please &lt;a href="https://github.com/gardener/gardener/tree/master/docs/development/seed_network_policies.md">see this document&lt;/a> for more information.&lt;/p>
&lt;h2 id="non-provider-specific-information-required-for-infrastructure-creation">Non-provider specific information required for infrastructure creation&lt;/h2>
&lt;p>Most providers might require further information that is not provider specific but already part of the shoot resource.
One example for this is the &lt;a href="https://github.com/gardener/gardener-extension-provider-gcp/tree/master/pkg/controller/controlplane">GCP control plane controller&lt;/a> which needs the Kubernetes version of the shoot cluster (because it already uses the in-tree Kubernetes cloud-controller-manager).
As Gardener cannot know which information is required by providers it simply mirrors the &lt;code>Shoot&lt;/code>, &lt;code>Seed&lt;/code>, and &lt;code>CloudProfile&lt;/code> resources into the seed.
They are part of the &lt;a href="https://gardener.cloud/docs/gardener/extensions/cluster/">&lt;code>Cluster&lt;/code> extension resource&lt;/a> and can be used to extract information that is not part of the &lt;code>Infrastructure&lt;/code> resource itself.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_controlplane.go">&lt;code>ControlPlane&lt;/code> API (Golang specification)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-alicloud/tree/master/pkg/controller/controlplane">Exemplary implementation for the Alicloud provider&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Controlplane Exposure</title><link>https://gardener.cloud/docs/gardener/extensions/controlplane-exposure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/controlplane-exposure/</guid><description>
&lt;h1 id="contract-controlplane-resource-with-purpose-exposure">Contract: &lt;code>ControlPlane&lt;/code> resource with purpose &lt;code>exposure&lt;/code>&lt;/h1>
&lt;p>Some Kubernetes clusters require an additional deployments required by the seed cloud provider in order to work properly, e.g. AWS Load Balancer Readvertiser.
Before using ControlPlane resources with purpose &lt;code>exposure&lt;/code> Gardener was having different Helm charts for the deployments for the various providers.
Now, Gardener commissions an external, provider-specific controller to take over this task.&lt;/p>
&lt;h2 id="which-control-plane-resources-are-required">Which control plane resources are required?&lt;/h2>
&lt;p>As mentioned in the &lt;a href="https://gardener.cloud/docs/gardener/extensions/controlplane/">controlplane&lt;/a> document Gardener shall not deploy any other provider-specific component.
Instead, it creates a &lt;code>ControlPlane&lt;/code> CRD with purpose &lt;code>exposure&lt;/code> that should be picked up by provider extensions.
Its purpose is to trigger the deployment of such provider-specific components in the shoot namespace in the seed cluster that are needed to expose the kube-apiserver.&lt;/p>
&lt;p>The shoot cluster&amp;rsquo;s kube-apiserver are exposed via a &lt;code>Service&lt;/code> of type &lt;code>LoadBalancer&lt;/code> from the shoot provider (you may run the control plane of an Azure shoot in a GCP seed) it&amp;rsquo;s the seed provider extension controller that should act on the &lt;code>ControlPlane&lt;/code> resources with purpose &lt;code>exposure&lt;/code>.&lt;/p>
&lt;p>If &lt;a href="https://gardener.cloud/docs/gardener/proposals/08-shoot-apiserver-via-sni/">SNI&lt;/a> is enabled, then the &lt;code>Service&lt;/code> from above is of type &lt;code>ClusterIP&lt;/code> and Gardner will not create &lt;code>ControlPlane&lt;/code> resources with purpose &lt;code>exposure&lt;/code>.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-infrastructure-provider">What needs to be implemented to support a new infrastructure provider?&lt;/h2>
&lt;p>As part of the shoot flow Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ControlPlane
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: control-plane-exposure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: exposure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: europe-west1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cloudprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.secretRef&lt;/code> contains a reference to the provider secret pointing to the account that shall be used for the shoot cluster.
It is most likely not needed, however, still added for some potential corner cases.
If you don&amp;rsquo;t need it then just ignore it.
The &lt;code>.spec.region&lt;/code> contains the region of the seed cluster.&lt;/p>
&lt;p>In order to support a control plane provider with purpose &lt;code>exposure&lt;/code> you need to write a controller or expand the existing &lt;a href="https://gardener.cloud/docs/gardener/extensions/controlplane/">controlplane controller&lt;/a> that watches all &lt;code>ControlPlane&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code> and purpose &lt;code>exposure&lt;/code>.
You can take a look at the below referenced example implementation for the AWS provider.&lt;/p>
&lt;h2 id="non-provider-specific-information-required-for-infrastructure-creation">Non-provider specific information required for infrastructure creation&lt;/h2>
&lt;p>Most providers might require further information that is not provider specific but already part of the shoot resource.
As Gardener cannot know which information is required by providers it simply mirrors the &lt;code>Shoot&lt;/code>, &lt;code>Seed&lt;/code>, and &lt;code>CloudProfile&lt;/code> resources into the seed.
They are part of the &lt;a href="https://gardener.cloud/docs/gardener/extensions/cluster/">&lt;code>Cluster&lt;/code> extension resource&lt;/a> and can be used to extract information.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_controlplane.go">&lt;code>ControlPlane&lt;/code> API (Golang specification)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/controlplane">Exemplary implementation for the AWS provider&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/aws-lb-readvertiser">AWS Load Balancer Readvertiser&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Controlplane Webhooks</title><link>https://gardener.cloud/docs/gardener/extensions/controlplane-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/controlplane-webhooks/</guid><description>
&lt;h1 id="controlplane-customization-webhooks">Controlplane customization webhooks&lt;/h1>
&lt;p>Gardener creates the Shoot controlplane in several steps of the Shoot flow. At different point of this flow, it:&lt;/p>
&lt;ul>
&lt;li>deploys standard controlplane components such as kube-apiserver, kube-controller-manager, and kube-scheduler by creating the corresponding deployments, services, and other resources in the Shoot namespace.&lt;/li>
&lt;li>initiates the deployment of custom controlplane components by &lt;a href="https://gardener.cloud/docs/gardener/extensions/controlplane/">ControlPlane controllers&lt;/a> by creating a &lt;code>ControlPlane&lt;/code> resource in the Shoot namespace.&lt;/li>
&lt;/ul>
&lt;p>In order to apply any provider-specific changes to the configuration provided by Gardener for the standard controlplane components, cloud extension providers can install mutating admission webhooks for the resources created by Gardener in the Shoot namespace.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-cloud-provider">What needs to be implemented to support a new cloud provider?&lt;/h2>
&lt;p>In order to support a new cloud provider you should install &amp;ldquo;controlplane&amp;rdquo; mutating webhooks for any of the following resources:&lt;/p>
&lt;ul>
&lt;li>Deployment with name &lt;code>kube-apiserver&lt;/code>, &lt;code>kube-controller-manager&lt;/code>, or &lt;code>kube-scheduler&lt;/code>&lt;/li>
&lt;li>Service with name &lt;code>kube-apiserver&lt;/code>&lt;/li>
&lt;li>&lt;code>OperatingSystemConfig&lt;/code> with any name and purpose &lt;code>reconcile&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>See &lt;a href="#contract-specification">Contract Specification&lt;/a> for more details on the contract that Gardener and webhooks should adhere to regarding the content of the above resources.&lt;/p>
&lt;p>You can install 3 different kinds of controlplane webhooks:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Shoot&lt;/code>, or &lt;code>controlplane&lt;/code> webhooks apply changes needed by the Shoot cloud provider, for example the &lt;code>--cloud-provider&lt;/code> command line flag of &lt;code>kube-apiserver&lt;/code> and &lt;code>kube-controller-manager&lt;/code>. Such webhooks should only operate on Shoot namespaces labeled with &lt;code>shoot.gardener.cloud/provider=&amp;lt;provider&amp;gt;&lt;/code>.&lt;/li>
&lt;li>&lt;code>Seed&lt;/code>, or &lt;code>controlplaneexposure&lt;/code> webhooks apply changes needed by the Seed cloud provider, for example annotations on the &lt;code>kube-apiserver&lt;/code> service to ensure cloud-specific load balancers are correctly provisioned for a service of type &lt;code>LoadBalancer&lt;/code>. Such webhooks should only operate on Shoot namespaces labeled with &lt;code>seed.gardener.cloud/provider=&amp;lt;provider&amp;gt;&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>The labels &lt;code>shoot.gardener.cloud/provider&lt;/code> and &lt;code>shoot.gardener.cloud/provider&lt;/code> are added by Gardener when it creates the Shoot namespace.&lt;/p>
&lt;h2 id="contract-specification">Contract Specification&lt;/h2>
&lt;p>This section specifies the contract that Gardener and webhooks should adhere to in order to ensure smooth interoperability. Note that this contract can&amp;rsquo;t be specified formally and is therefore easy to violate, especially by Gardener. The Gardener team will nevertheless do its best to adhere to this contract in the future and to ensure via additional measures (tests, validations) that it&amp;rsquo;s not unintentionally broken. If it needs to be changed intentionally, this can only happen after proper communication has taken place to ensure that the affected provider webhooks could be adapted to work with the new version of the contract.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> The contract described below may not necessarily be what Gardener does currently (as of May 2019). Rather, it reflects the target state after changes for &lt;a href="https://gardener.cloud/docs/gardener/extensions/overview/">Gardener extensibility&lt;/a> have been introduced.&lt;/p>
&lt;h3 id="kube-apiserver">kube-apiserver&lt;/h3>
&lt;p>To deploy kube-apiserver, Gardener &lt;strong>shall&lt;/strong> create a deployment and a service both named &lt;code>kube-apiserver&lt;/code> in the Shoot namespace. They can be mutated by webhooks to apply any provider-specific changes to the standard configuration provided by Gardener.&lt;/p>
&lt;p>The pod template of the &lt;code>kube-apiserver&lt;/code> deployment &lt;strong>shall&lt;/strong> contain a container named &lt;code>kube-apiserver&lt;/code>.&lt;/p>
&lt;p>The &lt;code>command&lt;/code> field of the &lt;code>kube-apiserver&lt;/code> container &lt;strong>shall&lt;/strong> contain the &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/">kube-apiserver command line&lt;/a>. It &lt;strong>shall&lt;/strong> contain a number of provider-independent flags that should be ignored by webhooks, such as:&lt;/p>
&lt;ul>
&lt;li>admission plugins (&lt;code>--enable-admission-plugins&lt;/code>, &lt;code>--disable-admission-plugins&lt;/code>)&lt;/li>
&lt;li>secure communications (&lt;code>--etcd-cafile&lt;/code>, &lt;code>--etcd-certfile&lt;/code>, &lt;code>--etcd-keyfile&lt;/code>, &amp;hellip;)&lt;/li>
&lt;li>audit log (&lt;code>--audit-log-*&lt;/code>)&lt;/li>
&lt;li>ports (&lt;code>--insecure-port&lt;/code>, &lt;code>--secure-port&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>The kube-apiserver command line &lt;strong>shall not&lt;/strong> contain any provider-specific flags, such as:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--cloud-provider&lt;/code>&lt;/li>
&lt;li>&lt;code>--cloud-config&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>These flags can be added by webhooks if needed.&lt;/p>
&lt;p>The &lt;code>kube-apiserver&lt;/code> command line &lt;strong>may&lt;/strong> contain a number of additional provider-independent flags. In general, webhooks should ignore these unless they are known to interfere with the desired kube-apiserver behavior for the specific provider. Among the flags to be considered are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--endpoint-reconciler-type&lt;/code>&lt;/li>
&lt;li>&lt;code>--advertise-address&lt;/code>&lt;/li>
&lt;li>&lt;code>--feature-gates&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Gardener &lt;strong>may&lt;/strong> use &lt;a href="https://gardener.cloud/docs/gardener/proposals/08-shoot-apiserver-via-sni/">SNI&lt;/a> to expose the apiserver (&lt;code>APIServerSNI&lt;/code> feature gate). In this case, Gardener &lt;strong>shall&lt;/strong> label the &lt;code>kube-apiserver&lt;/code>&amp;rsquo;s &lt;code>Deployment&lt;/code> with &lt;code>core.gardener.cloud/apiserver-exposure: gardener-managed&lt;/code> label and expects that the &lt;code>--endpoint-reconciler-type&lt;/code> and &lt;code>--advertise-address&lt;/code> flags are not modified.&lt;/p>
&lt;p>The &lt;code>--enable-admission-plugins&lt;/code> flag &lt;strong>may&lt;/strong> contain admission plugins that are not compatible with CSI plugins such as &lt;code>PersistentVolumeLabel&lt;/code>. Webhooks should therefore ensure that such admission plugins are either explicitly enabled (if CSI plugins are not used) or disabled (otherwise).&lt;/p>
&lt;p>The &lt;code>env&lt;/code> field of the &lt;code>kube-apiserver&lt;/code> container &lt;strong>shall not&lt;/strong> contain any provider-specific environment variables (so it will be empty). If any provider-specific environment variables are needed, they should be added by webhooks.&lt;/p>
&lt;p>The &lt;code>volumes&lt;/code> field of the pod template of the &lt;code>kube-apiserver&lt;/code> deployment, and respectively the &lt;code>volumeMounts&lt;/code> field of the &lt;code>kube-apiserver&lt;/code> container &lt;strong>shall not&lt;/strong> contain any provider-specific &lt;code>Secret&lt;/code> or &lt;code>ConfigMap&lt;/code> resources. If such resources should be mounted as volumes, this should be done by webhooks.&lt;/p>
&lt;p>The &lt;code>kube-apiserver&lt;/code> &lt;code>Service&lt;/code> &lt;strong>may&lt;/strong> be of type &lt;code>LoadBalancer&lt;/code>, but &lt;strong>shall not&lt;/strong> contain any provider-specific annotations that may be needed to actually provision a load balancer resource in the Seed provider&amp;rsquo;s cloud. If any such annotations are needed, they should be added by webhooks (typically &lt;code>controlplaneexposure&lt;/code> webhooks).&lt;/p>
&lt;p>The &lt;code>kube-apiserver&lt;/code> &lt;code>Service&lt;/code> &lt;strong>shall&lt;/strong> be of type &lt;code>ClusterIP&lt;/code>, if Gardener is using &lt;a href="https://gardener.cloud/docs/gardener/proposals/08-shoot-apiserver-via-sni/">SNI&lt;/a> to expose the apiserver (&lt;code>APIServerSNI&lt;/code> feature gate). In this case, Gardener &lt;strong>shall&lt;/strong> label this &lt;code>Service&lt;/code> with &lt;code>core.gardener.cloud/apiserver-exposure: gardener-managed&lt;/code> label and expects that no mutations happen.&lt;/p>
&lt;h3 id="kube-controller-manager">kube-controller-manager&lt;/h3>
&lt;p>To deploy kube-controller-manager, Gardener &lt;strong>shall&lt;/strong> create a deployment named &lt;code>kube-controller-manager&lt;/code> in the Shoot namespace. It can be mutated by webhooks to apply any provider-specific changes to the standard configuration provided by Gardener.&lt;/p>
&lt;p>The pod template of the &lt;code>kube-controller-manager&lt;/code> deployment &lt;strong>shall&lt;/strong> contain a container named &lt;code>kube-controller-manager&lt;/code>.&lt;/p>
&lt;p>The &lt;code>command&lt;/code> field of the &lt;code>kube-controller-manager&lt;/code> container &lt;strong>shall&lt;/strong> contain the &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/">kube-controller-manager command line&lt;/a>. It &lt;strong>shall&lt;/strong> contain a number of provider-independent flags that should be ignored by webhooks, such as:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--kubeconfig&lt;/code>, &lt;code>--authentication-kubeconfig&lt;/code>, &lt;code>--authorization-kubeconfig&lt;/code>&lt;/li>
&lt;li>&lt;code>--leader-elect&lt;/code>&lt;/li>
&lt;li>secure communications (&lt;code>--tls-cert-file&lt;/code>, &lt;code>--tls-private-key-file&lt;/code>, &amp;hellip;)&lt;/li>
&lt;li>cluster CIDR and identity (&lt;code>--cluster-cidr&lt;/code>, &lt;code>--cluster-name&lt;/code>)&lt;/li>
&lt;li>sync settings (&lt;code>--concurrent-deployment-syncs&lt;/code>, &lt;code>--concurrent-replicaset-syncs&lt;/code>)&lt;/li>
&lt;li>horizontal pod autoscaler (&lt;code>--horizontal-pod-autoscaler-*&lt;/code>)&lt;/li>
&lt;li>ports (&lt;code>--port&lt;/code>, &lt;code>--secure-port&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>The kube-controller-manager command line &lt;strong>shall not&lt;/strong> contain any provider-specific flags, such as:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--cloud-provider&lt;/code>&lt;/li>
&lt;li>&lt;code>--cloud-config&lt;/code>&lt;/li>
&lt;li>&lt;code>--configure-cloud-routes&lt;/code>&lt;/li>
&lt;li>&lt;code>--external-cloud-volume-plugin&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>These flags can be added by webhooks if needed.&lt;/p>
&lt;p>The kube-controller-manager command line &lt;strong>may&lt;/strong> contain a number of additional provider-independent flags. In general, webhooks should ignore these unless they are known to interfere with the desired kube-controller-manager behavior for the specific provider. Among the flags to be considered are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--feature-gates&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>env&lt;/code> field of the &lt;code>kube-controller-manager&lt;/code> container &lt;strong>shall not&lt;/strong> contain any provider-specific environment variables (so it will be empty). If any provider-specific environment variables are needed, they should be added by webhooks.&lt;/p>
&lt;p>The &lt;code>volumes&lt;/code> field of the pod template of the &lt;code>kube-controller-manager&lt;/code> deployment, and respectively the &lt;code>volumeMounts&lt;/code> field of the &lt;code>kube-controller-manager&lt;/code> container &lt;strong>shall not&lt;/strong> contain any provider-specific &lt;code>Secret&lt;/code> or &lt;code>ConfigMap&lt;/code> resources. If such resources should be mounted as volumes, this should be done by webhooks.&lt;/p>
&lt;h3 id="kube-scheduler">kube-scheduler&lt;/h3>
&lt;p>To deploy kube-scheduler, Gardener &lt;strong>shall&lt;/strong> create a deployment named &lt;code>kube-scheduler&lt;/code> in the Shoot namespace. It can be mutated by webhooks to apply any provider-specific changes to the standard configuration provided by Gardener.&lt;/p>
&lt;p>The pod template of the &lt;code>kube-scheduler&lt;/code> deployment &lt;strong>shall&lt;/strong> contain a container named &lt;code>kube-scheduler&lt;/code>.&lt;/p>
&lt;p>The &lt;code>command&lt;/code> field of the &lt;code>kube-scheduler&lt;/code> container &lt;strong>shall&lt;/strong> contain the &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-scheduler/">kube-scheduler command line&lt;/a>. It &lt;strong>shall&lt;/strong> contain a number of provider-independent flags that should be ignored by webhooks, such as:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--config&lt;/code>&lt;/li>
&lt;li>&lt;code>--authentication-kubeconfig&lt;/code>, &lt;code>--authorization-kubeconfig&lt;/code>&lt;/li>
&lt;li>secure communications (&lt;code>--tls-cert-file&lt;/code>, &lt;code>--tls-private-key-file&lt;/code>, &amp;hellip;)&lt;/li>
&lt;li>ports (&lt;code>--port&lt;/code>, &lt;code>--secure-port&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>The kube-scheduler command line &lt;strong>may&lt;/strong> contain additional provider-independent flags. In general, webhooks should ignore these unless they are known to interfere with the desired kube-controller-manager behavior for the specific provider. Among the flags to be considered are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--feature-gates&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The kube-scheduler command line can&amp;rsquo;t contain provider-specific flags, and it makes no sense to specify provider-specific environment variables or mount provider-specific &lt;code>Secret&lt;/code> or &lt;code>ConfigMap&lt;/code> resources as volumes.&lt;/p>
&lt;h3 id="etcd-main-and-etcd-events">etcd-main and etcd-events&lt;/h3>
&lt;p>To deploy etcd, Gardener &lt;strong>shall&lt;/strong> create 2 &lt;a href="https://github.com/gardener/etcd-druid/blob/1d427e9167adac1476d1847c0e265c2c09d6bc62/config/samples/druid_v1alpha1_etcd.yaml">Etcd&lt;/a> named &lt;code>etcd-main&lt;/code> and &lt;code>etcd-events&lt;/code> in the Shoot namespace. They can be mutated by webhooks to apply any provider-specific changes to the standard configuration provided by Gardener.&lt;/p>
&lt;p>Gardener &lt;strong>shall&lt;/strong> configure the &lt;code>Etcd&lt;/code> resource completely to set up an etcd cluster which uses the default storage class of the seed cluster.&lt;/p>
&lt;h3 id="cloud-controller-manager">cloud-controller-manager&lt;/h3>
&lt;p>Gardener &lt;strong>shall not&lt;/strong> deploy a cloud-controller-manager. If it is needed, it should be added by a &lt;a href="https://gardener.cloud/docs/gardener/extensions/controlplane/">&lt;code>ControlPlane&lt;/code> controller&lt;/a>&lt;/p>
&lt;h3 id="csi-controllers">CSI controllers&lt;/h3>
&lt;p>Gardener &lt;strong>shall not&lt;/strong> deploy a CSI controller. If it is needed, it should be added by a &lt;a href="https://gardener.cloud/docs/gardener/extensions/controlplane/">&lt;code>ControlPlane&lt;/code> controller&lt;/a>&lt;/p>
&lt;h3 id="kubelet">kubelet&lt;/h3>
&lt;p>To specify the kubelet configuration, Gardener &lt;strong>shall&lt;/strong> create a &lt;a href="https://gardener.cloud/docs/gardener/extensions/operatingsystemconfig/">&lt;code>OperatingSystemConfig&lt;/code> resource&lt;/a> with any name and purpose &lt;code>reconcile&lt;/code> in the Shoot namespace. It can therefore also be mutated by webhooks to apply any provider-specific changes to the standard configuration provided by Gardener. Gardener &lt;strong>may&lt;/strong> write multiple such resources with different &lt;code>type&lt;/code> to the same Shoot namespaces if multiple OSs are used.&lt;/p>
&lt;p>The OSC resource &lt;strong>shall&lt;/strong> contain a unit named &lt;code>kubelet.service&lt;/code>, containing the corresponding systemd unit configuration file. The &lt;code>[Service]&lt;/code> section of this file &lt;strong>shall&lt;/strong> contain a single &lt;code>ExecStart&lt;/code> option having the &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/">kubelet command line&lt;/a> as its value.&lt;/p>
&lt;p>The OSC resource &lt;strong>shall&lt;/strong> contain a file with path &lt;code>/var/lib/kubelet/config/kubelet&lt;/code>, which contains a &lt;code>KubeletConfiguration&lt;/code> resource in YAML format. Most of the flags that can be specified in the kubelet command line can alternatively be specified as options in this configuration as well.&lt;/p>
&lt;p>The kubelet command line &lt;strong>shall&lt;/strong> contain a number of provider-independent flags that should be ignored by webhooks, such as:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--config&lt;/code>&lt;/li>
&lt;li>&lt;code>--bootstrap-kubeconfig&lt;/code>, &lt;code>--kubeconfig&lt;/code>&lt;/li>
&lt;li>&lt;code>--network-plugin&lt;/code> (and, if it equals &lt;code>cni&lt;/code>, also &lt;code>--cni-bin-dir&lt;/code> and &lt;code>--cni-conf-dir&lt;/code>)&lt;/li>
&lt;li>&lt;code>--node-labels&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The kubelet command line &lt;strong>shall not&lt;/strong> contain any provider-specific flags, such as:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--cloud-provider&lt;/code>&lt;/li>
&lt;li>&lt;code>--cloud-config&lt;/code>&lt;/li>
&lt;li>&lt;code>--provider-id&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>These flags can be added by webhooks if needed.&lt;/p>
&lt;p>The kubelet command line / configuration &lt;strong>may&lt;/strong> contain a number of additional provider-independent flags / options. In general, webhooks should ignore these unless they are known to interfere with the desired kubelet behavior for the specific provider. Among the flags / options to be considered are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--enable-controller-attach-detach&lt;/code> (&lt;code>enableControllerAttachDetach&lt;/code>) - should be set to &lt;code>true&lt;/code> if CSI plugins are used, but in general can also be ignored since its default value is also &lt;code>true&lt;/code>, and this should work both with and without CSI plugins.&lt;/li>
&lt;li>&lt;code>--feature-gates&lt;/code> (&lt;code>featureGates&lt;/code>) - should contain a list of specific feature gates if CSI plugins are used. If CSI plugins are not used, the corresponding feature gates can be ignored since enabling them should not harm in any way.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Conventions</title><link>https://gardener.cloud/docs/gardener/extensions/conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/conventions/</guid><description>
&lt;h1 id="general-conventions">General conventions&lt;/h1>
&lt;p>All the extensions that are registered to Gardener are deployed to the seed clusters, on which they are required (also see &lt;a href="https://gardener.cloud/docs/gardener/extensions/controllerregistration/">ControllerRegistration&lt;/a>).&lt;/p>
&lt;p>Some of these extensions might need to create global resources in the seed (e.g., &lt;code>ClusterRole&lt;/code>s), i.e., it&amp;rsquo;s important to have a naming scheme to avoid conflicts as it cannot be checked or validated upfront that two extensions don&amp;rsquo;t use the same names.&lt;/p>
&lt;p>Consequently, this page should help answering some general questions that might come up when it comes to developing an extension.&lt;/p>
&lt;h2 id="is-there-a-naming-scheme-for-global-resources">Is there a naming scheme for (global) resources?&lt;/h2>
&lt;p>As there is no formal process to validate non-existence of conflicts between two extensions please follow these naming schemes when creating resources (especially, when creating global resources, but it&amp;rsquo;s in general a good idea for most created resources):&lt;/p>
&lt;p>&lt;em>The resource name should be prefixed with &lt;code>extensions.gardener.cloud:&amp;lt;extension-type&amp;gt;-&amp;lt;extension-name&amp;gt;:&amp;lt;resource-name&amp;gt;&lt;/code>&lt;/em>, for example:&lt;/p>
&lt;ul>
&lt;li>&lt;code>extensions.gardener.cloud:provider-aws:machine-controller-manager&lt;/code>&lt;/li>
&lt;li>&lt;code>extensions.gardener.cloud:extension-certificate-service:cert-broker&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="how-to-create-resources-in-the-shoot-cluster">How to create resources in the shoot cluster?&lt;/h2>
&lt;p>Some extensions might not only create resources in the seed cluster itself but also in the shoot cluster. Usually, every extension comes with a &lt;code>ServiceAccount&lt;/code> and the required RBAC permissions when it gets installed to the seed.
However, there are no credentials for the shoot for every extension.&lt;/p>
&lt;p>Gardener creates a kubeconfig for itself that it uses to interact with the shoot cluster.
This kubeconfig is stored as a &lt;code>Secret&lt;/code> with name &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/core/v1beta1/constants/types_constants.go">&lt;code>gardener&lt;/code>&lt;/a> in the shoot namespace.
Extension controllers may use this kubeconfig to interact with the shoot cluster if desired (it has full administrator privileges and no further RBAC rules are required).
Instead, they could also create their own kubeconfig for every shoot (which, of course, is better for auditing reasons, but not yet enforced at this point in time).&lt;/p>
&lt;p>If you need to deploy a non-DaemonSet resource you need to ensure that it only runs on nodes that are allowed to host system components and extensions.
To do that you need to configure a &lt;code>nodeSelector&lt;/code> as following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>nodeSelector:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> worker.gardener.cloud/system-components: &lt;span style="color:#a31515">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="how-to-create-certificates-for-the-shoot-cluster">How to create certificates for the shoot cluster?&lt;/h2>
&lt;p>Gardener creates several certificate authorities (CA) that are used to create server certificates for various components.
For example, the shoot&amp;rsquo;s etcd has its own CA, the kube-aggregator has its own CA as well, and both are different to the actual cluster&amp;rsquo;s CA.&lt;/p>
&lt;p>Extensions should do the same and generate dedicated CAs for their components (e.g. for signing a server certificate for cloud-controller-manager). They should not depend on the CA secrets managed by gardenlet.
You can take a look at the &lt;a href="https://gardener.cloud/docs/gardener/development/secrets_management/">Secrets Management document&lt;/a> for more details on how this can be achieved.&lt;/p></description></item><item><title>Docs: Dns</title><link>https://gardener.cloud/docs/gardener/extensions/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/dns/</guid><description>
&lt;h1 id="contract-dnsprovider-and-dnsentry-resources">Contract: &lt;code>DNSProvider&lt;/code> and &lt;code>DNSEntry&lt;/code> resources&lt;/h1>
&lt;p>Every shoot cluster requires external DNS records that are publicly resolvable.
The management of these DNS records requires provider-specific knowledge which is to be developed outside of the Gardener&amp;rsquo;s core repository.&lt;/p>
&lt;h2 id="what-does-gardener-create-dns-records-for">What does Gardener create DNS records for?&lt;/h2>
&lt;h3 id="internal-domain-name">Internal domain name&lt;/h3>
&lt;p>Every shoot cluster&amp;rsquo;s kube-apiserver running in the seed is exposed via a load balancer that has a public endpoint (IP or hostname).
This endpoint is used by end-users and also by system components (that are running in another network, e.g., the kubelet or kube-proxy) to talk to the cluster.
In order to be robust against changes of this endpoint (e.g., caused due to re-creation of the load balancer or move of the control plane to another seed cluster) Gardener creates a so-called &lt;em>internal domain name&lt;/em> for every shoot cluster.
The &lt;em>internal domain name&lt;/em> is a publicly resolvable DNS record that points to the load balancer of the kube-apiserver.
Gardener uses this domain name in the kubeconfigs of all system components (instead of writing the load balancer endpoint directly into it.
This way Gardener does not need to recreate all the kubeconfigs if the endpoint changes - it just needs to update the DNS record.&lt;/p>
&lt;h3 id="external-domain-name">External domain name&lt;/h3>
&lt;p>The internal domain name is not configurable by end-users directly but dictated by the Gardener administrator.
However, end-users usually prefer to have another DNS name, maybe even using their own domain sometimes to access their Kubernetes clusters.
Gardener supports that by creating another DNS record, named &lt;em>external domain name&lt;/em>, that actually points to the &lt;em>internal domain name&lt;/em>.
The kubeconfig handed out to end-users does contain this &lt;em>external domain name&lt;/em>, i.e., users can access their clusters with the DNS name they like to.&lt;/p>
&lt;p>As not every end-user has an own domain it is possible for Gardener administrators to configure so-called &lt;em>default domains&lt;/em>.
If configured, shoots that do not specify a domain explicitly get an &lt;em>external domain name&lt;/em> based on a default domain (unless explicitly stated that this shoot should not get an external domain name (&lt;code>.spec.dns.provider=unmanaged&lt;/code>).&lt;/p>
&lt;h3 id="domain-name-for-ingress-deprecated">Domain name for ingress (deprecated)&lt;/h3>
&lt;p>Gardener allows to deploy a &lt;code>nginx-ingress-controller&lt;/code> into a shoot cluster (deprecated).
This controller is exposed via a public load balancer (again, either IP or hostname).
Gardener creates a wildcard DNS record pointing to this load balancer.
&lt;code>Ingress&lt;/code> resources can later use this wildcard DNS record to expose underlying applications.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-dns-provider">What needs to be implemented to support a new DNS provider?&lt;/h2>
&lt;p>As part of the shoot flow Gardener will create two special resources in the seed cluster that need to be reconciled by an extension controller.
The first resource (&lt;code>DNSProvider&lt;/code>) is a declaration of a DNS provider (e.g., &lt;code>aws-route53&lt;/code>, &lt;code>google-clouddns&lt;/code>, &amp;hellip;) with a reference to a &lt;code>Secret&lt;/code> object that contains the provider-specific credentials in order to talk to the provider&amp;rsquo;s API.
It also allows to specify two lists of domains that shall be allowed or disallowed to be used for DNS entries:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: aws-credentials
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: Opaque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># aws-route53 specific credentials here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: dns.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: DNSProvider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-aws-account
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: aws-route53
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: aws-credentials
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> domains:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> include:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - dev.my-fancy-domain.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exclude:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - staging.my-fancy-domain.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - prod.my-fancy-domain.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When reconciling this resource the DNS controller has to read information about available DNS zones to figure out which domains can actually be supported by the provided credentials.
Based on the constraints given in the &lt;code>DNSProvider&lt;/code> resources &lt;code>.spec.domains.{include|exclude}&lt;/code> fields it shall later only allow certain DNS entries.
Gardener waits until the &lt;code>status&lt;/code> indicates that the registration went well:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: dns.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: DNSProvider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: Ready
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: everything ok
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Other possible states are &lt;code>Pending&lt;/code>, &lt;code>Error&lt;/code>, and &lt;code>Invalid&lt;/code>.
The DNS controller may provide an explanation of the &lt;code>.status.state&lt;/code> in the &lt;code>.status.message&lt;/code> field.&lt;/p>
&lt;p>Now Gardener may create &lt;code>DNSEntry&lt;/code> objects that represent the ask to create an actual external DNS record:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: dns.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: DNSEntry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: dns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dnsName: apiserver.cluster1.dev.my-fancy-domain.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ttl: 600
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> targets:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 8.8.8.8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It has to be automatically determined whether the to-be-created DNS record is of type &lt;code>A&lt;/code> or &lt;code>CNAME&lt;/code>.
The spec shall also allow the creation of &lt;code>TXT&lt;/code> records, e.g.:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: dns.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: DNSEntry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: dns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dnsName: data.apiserver.cluster1.dev.my-fancy-domain.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ttl: 120
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> &lt;/span> content for the DNS TXT record
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>status&lt;/code> section of this resource looks similar like the &lt;code>DNSProvider&lt;/code>&amp;rsquo;s.
Gardener is (as of today) only evaluating the &lt;code>.status.state&lt;/code> and &lt;code>.status.message&lt;/code> fields.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/external-dns-management/tree/master/pkg/apis/dns/v1alpha1">&lt;code>DNSProvider&lt;/code> and &lt;code>DNSEntry&lt;/code> API (Golang specification)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/external-dns-management">external-dns-management project in Gardener&amp;rsquo;s GitHub organization&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Dnsrecor</title><link>https://gardener.cloud/docs/gardener/extensions/dnsrecord/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/dnsrecord/</guid><description>
&lt;h1 id="contract-dnsrecord-resources">Contract: &lt;code>DNSRecord&lt;/code> resources&lt;/h1>
&lt;p>Every shoot cluster requires external DNS records that are publicly resolvable.
The management of these DNS records requires provider-specific knowledge which is to be developed outside the Gardener&amp;rsquo;s core repository.&lt;/p>
&lt;p>Currently, Gardener uses &lt;a href="https://gardener.cloud/docs/gardener/extensions/dns/">&lt;code>DNSProvider&lt;/code> and &lt;code>DNSEntry&lt;/code> resources&lt;/a>. However, this introduces undesired coupling of Gardener to a controller that does not adhere to the Gardener extension contracts. Because of this, we plan to stop using &lt;code>DNSProvider&lt;/code> and &lt;code>DNSEntry&lt;/code> resources for Gardener DNS records in the future and use the &lt;code>DNSRecord&lt;/code> resources described here instead.&lt;/p>
&lt;h2 id="what-does-gardener-create-dns-records-for">What does Gardener create DNS records for?&lt;/h2>
&lt;h3 id="internal-domain-name">Internal domain name&lt;/h3>
&lt;p>Every shoot cluster&amp;rsquo;s kube-apiserver running in the seed is exposed via a load balancer that has a public endpoint (IP or hostname).
This endpoint is used by end-users and also by system components (that are running in another network, e.g., the kubelet or kube-proxy) to talk to the cluster.
In order to be robust against changes of this endpoint (e.g., caused due to re-creation of the load balancer or move of the DNS record to another seed cluster) Gardener creates a so-called &lt;em>internal domain name&lt;/em> for every shoot cluster.
The &lt;em>internal domain name&lt;/em> is a publicly resolvable DNS record that points to the load balancer of the kube-apiserver.
Gardener uses this domain name in the kubeconfigs of all system components, instead of using directly the load balancer endpoint.
This way Gardener does not need to recreate all kubeconfigs if the endpoint changes - it just needs to update the DNS record.&lt;/p>
&lt;h3 id="external-domain-name">External domain name&lt;/h3>
&lt;p>The internal domain name is not configurable by end-users directly but configured by the Gardener administrator.
However, end-users usually prefer to have another DNS name, maybe even using their own domain sometimes to access their Kubernetes clusters.
Gardener supports that by creating another DNS record, named &lt;em>external domain name&lt;/em>, that actually points to the &lt;em>internal domain name&lt;/em>.
The kubeconfig handed out to end-users does contain this &lt;em>external domain name&lt;/em>, i.e., users can access their clusters with the DNS name they like to.&lt;/p>
&lt;p>As not every end-user has an own domain it is possible for Gardener administrators to configure so-called &lt;em>default domains&lt;/em>.
If configured, shoots that do not specify a domain explicitly get an &lt;em>external domain name&lt;/em> based on a default domain (unless explicitly stated that this shoot should not get an external domain name (&lt;code>.spec.dns.provider=unmanaged&lt;/code>).&lt;/p>
&lt;h3 id="ingress-domain-name-deprecated">Ingress domain name (deprecated)&lt;/h3>
&lt;p>Gardener allows to deploy a &lt;code>nginx-ingress-controller&lt;/code> into a shoot cluster (deprecated).
This controller is exposed via a public load balancer (again, either IP or hostname).
Gardener creates a wildcard DNS record pointing to this load balancer.
&lt;code>Ingress&lt;/code> resources can later use this wildcard DNS record to expose underlying applications.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-dns-provider">What needs to be implemented to support a new DNS provider?&lt;/h2>
&lt;p>As part of the shoot flow Gardener will create a number of &lt;code>DNSRecord&lt;/code> resources in the seed cluster (one for each of the DNS records mentioned above) that need to be reconciled by an extension controller.
This resource contains the following information:&lt;/p>
&lt;ul>
&lt;li>The DNS provider type (e.g., &lt;code>aws-route53&lt;/code>, &lt;code>google-clouddns&lt;/code>, &amp;hellip;)&lt;/li>
&lt;li>A reference to a &lt;code>Secret&lt;/code> object that contains the provider-specific credentials used to communicate with the provider&amp;rsquo;s API.&lt;/li>
&lt;li>The fully qualified domain name (FQDN) of the DNS record, e.g. &amp;ldquo;api.&amp;lt;shoot domain&amp;gt;&amp;rdquo;.&lt;/li>
&lt;li>The DNS record type, one of &lt;code>A&lt;/code>, &lt;code>CNAME&lt;/code>, or &lt;code>TXT&lt;/code>.&lt;/li>
&lt;li>The DNS record values, that is a list of IP addresses for A records, a single hostname for CNAME records, or a list of texts for TXT records.&lt;/li>
&lt;/ul>
&lt;p>Optionally, the &lt;code>DNSRecord&lt;/code> resource may contain also the following information:&lt;/p>
&lt;ul>
&lt;li>The region of the DNS record. If not specified, the region specified in the referenced &lt;code>Secret&lt;/code> shall be used. If that is also not specified, the extension controller shall use a certain default region.&lt;/li>
&lt;li>The DNS hosted zone of the DNS record. If not specified, it shall be determined automatically by the extension controller by getting all hosted zones of the account and searching for the longest zone name that is a suffix of the fully qualified domain name (FQDN) mentioned above.&lt;/li>
&lt;li>The TTL of the DNS record in seconds. If not specified, it shall be set by the extension controller to 120.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example &lt;code>DNSRecord&lt;/code>&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: dnsrecord-bar-external
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: Opaque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># aws-route53 specific credentials here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: DNSRecord
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: dnsrecord-external
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: aws-route53
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: dnsrecord-bar-external
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># region: eu-west-1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># zone: ZFOO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: api.bar.foo.my-fancy-domain.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> recordType: A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> values:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 1.2.3.4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># ttl: 600&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to support a new DNS record provider you need to write a controller that watches all &lt;code>DNSRecord&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code>.
You can take a look at the below referenced example implementation for the AWS route53 provider.&lt;/p>
&lt;h2 id="key-names-in-secrets-containing-provider-specific-credentials">Key names in secrets containing provider-specific credentials&lt;/h2>
&lt;p>For compatibility with existing setups, extension controllers shall support two different namings of keys in secrets containing provider-specific credentials:&lt;/p>
&lt;ul>
&lt;li>The naming used by the &lt;a href="https://github.com/gardener/external-dns-management">external-dns-management DNS controller&lt;/a>. For example on AWS, the key names are &lt;code>AWS_ACCESS_KEY_ID&lt;/code>, &lt;code>AWS_SECRET_ACCESS_KEY&lt;/code>, and &lt;code>AWS_REGION&lt;/code>.&lt;/li>
&lt;li>The naming used by other provider-specific extension controllers, e.g. for &lt;a href="https://gardener.cloud/docs/gardener/extensions/infrastructure/">infrastructure&lt;/a>. For example on AWS, the key names are &lt;code>accessKeyId&lt;/code>, &lt;code>secretAccessKey&lt;/code>, and &lt;code>region&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="avoiding-reading-the-dns-hosted-zones">Avoiding reading the DNS hosted zones&lt;/h2>
&lt;p>If the DNS hosted zone is not specified in the &lt;code>DNSRecord&lt;/code> resource, during the first reconciliation the extension controller shall determine the correct DNS hosted zone for the specified FQDN and write it to the status of the resource:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: DNSRecord
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: dnsrecord-external
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: ZFOO
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>On subsequent reconciliations, the extension controller shall use the zone from the status and avoid reading the DNS hosted zones from the provider.
If the &lt;code>DNSRecord&lt;/code> resource specifies a zone in &lt;code>.spec.zone&lt;/code> and the extension controller has written a value to &lt;code>.status.zone&lt;/code>, the first one shall be considered with higher priority by the extension controller.&lt;/p>
&lt;h2 id="non-provider-specific-information-required-for-dns-record-creation">Non-provider specific information required for DNS record creation&lt;/h2>
&lt;p>Some providers might require further information that is not provider specific but already part of the shoot resource.
As Gardener cannot know which information is required by providers it simply mirrors the &lt;code>Shoot&lt;/code>, &lt;code>Seed&lt;/code>, and &lt;code>CloudProfile&lt;/code> resources into the seed.
They are part of the &lt;a href="https://gardener.cloud/docs/gardener/extensions/cluster/">&lt;code>Cluster&lt;/code> extension resource&lt;/a> and can be used to extract information that is not part of the &lt;code>DNSRecord&lt;/code> resource itself.&lt;/p>
&lt;h2 id="using-dnsrecord-instead-of-dnsprovider-and-dnsentry-resources">Using &lt;code>DNSRecord&lt;/code> instead of &lt;code>DNSProvider&lt;/code> and &lt;code>DNSEntry&lt;/code> resources&lt;/h2>
&lt;p>Currently, Gardener will create &lt;code>DNSRecord&lt;/code> resources only if the feature gate &lt;code>UseDNSRecords&lt;/code> is enabled on &lt;code>gardener-apiserver&lt;/code>, &lt;code>gardener-controller-manager&lt;/code>, and &lt;code>gardenlet&lt;/code> (it should be enabled on all three of them for the feature to work properly).
If this feature gate is enabled, all three DNS records mentioned above (internal, external, and ingress) will be managed via &lt;code>DNSRecords&lt;/code> and not &lt;code>DNSProvider&lt;/code> / &lt;code>DNSEntry&lt;/code>.
&lt;code>DNSProvider&lt;/code> resources will still be created for all providers listed in &lt;code>spec.dns.providers&lt;/code>, including the one marked as &lt;code>primary: true&lt;/code>.
These providers can be used for &lt;code>DNSEntry&lt;/code> resources needed by workloads deployed on the shoot cluster.&lt;/p>
&lt;p>If the feature gate is disabled, Gardener will not create any &lt;code>DNSRecord&lt;/code> resources and use &lt;code>DNSProvider&lt;/code> / &lt;code>DNSEntry&lt;/code> resources for its DNS records.
The feature gate was introduced in &lt;code>v1.27&lt;/code> and was in &lt;code>Alpha&lt;/code> stage (disabled by default) until &lt;code>v1.38&lt;/code> (including). With &lt;code>v1.39&lt;/code> the feature gate is graduated to &lt;code>Beta&lt;/code> and it is enabled by default.&lt;/p>
&lt;p>In order to successfully reconcile a shoot with the feature gate enabled, extension controllers for &lt;code>DNSRecord&lt;/code> resources for types used in the default, internal and custom domain secrets should be registered via &lt;code>ControllerRegistration&lt;/code> resources.&lt;/p>
&lt;h3 id="support-for-dnsrecord-resources-in-the-provider-extensions">Support for &lt;code>DNSRecord&lt;/code> resources in the provider extensions&lt;/h3>
&lt;p>The following table contains information about the provider extension version that adds support for &lt;code>DNSRecord&lt;/code> resources:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Extension&lt;/th>
&lt;th>Version&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>provider-alicloud&lt;/td>
&lt;td>&lt;code>v1.26.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-aws&lt;/td>
&lt;td>&lt;code>v1.27.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-azure&lt;/td>
&lt;td>&lt;code>v1.21.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-gcp&lt;/td>
&lt;td>&lt;code>v1.18.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-openstack&lt;/td>
&lt;td>&lt;code>v1.21.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-vsphere&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-equinix-metal&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-kubevirt&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-openshift&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="references-and-additional-resources">References and additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_dnsrecord.go">&lt;code>DNSRecord&lt;/code> API (Golang specification)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/dnsrecord">Sample implementation for the AWS route53 provider&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Extension</title><link>https://gardener.cloud/docs/gardener/extensions/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/extension/</guid><description>
&lt;h1 id="contract-extension-resource">Contract: &lt;code>Extension&lt;/code> resource&lt;/h1>
&lt;p>Gardener defines common procedures which must be passed to create a functioning shoot cluster. Well known steps are represented by special resources like &lt;code>Infrastructure&lt;/code>, &lt;code>OperatingSystemConfig&lt;/code> or &lt;code>DNS&lt;/code>. These resources are typically reconciled by dedicated controllers setting up the infrastructure on the hyperscaler or managing DNS entries, etc..&lt;/p>
&lt;p>But, some requirements don&amp;rsquo;t match with those special resources or don&amp;rsquo;t depend on being proceeded at a specific step in the creation / deletion flow of the shoot. They require a more generic hook. Therefore, Gardener offers the &lt;code>Extension&lt;/code> resource.&lt;/p>
&lt;h2 id="what-is-required-to-register-and-support-an-extension-type">What is required to register and support an Extension type?&lt;/h2>
&lt;p>Gardener creates one &lt;code>Extension&lt;/code> resource per registered extension type in &lt;code>ControllerRegistration&lt;/code> per shoot.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ControllerRegistration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: extension-example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resources:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - kind: Extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> globallyEnabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If &lt;code>spec.resources[].globallyEnabled&lt;/code> is &lt;code>true&lt;/code> then the &lt;code>Extension&lt;/code> resources of the given &lt;code>type&lt;/code> is created for every shoot cluster. Set to &lt;code>false&lt;/code>, the &lt;code>Extension&lt;/code> resource is only created if configured in the &lt;code>Shoot&lt;/code> manifest.&lt;/p>
&lt;p>The &lt;code>Extension&lt;/code> resources are created in the shoot namespace of the seed cluster.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig: {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Your controller needs to reconcile &lt;code>extensions.extensions.gardener.cloud&lt;/code>. Since there can exist multiple &lt;code>Extension&lt;/code> resources per shoot, each one holds a &lt;code>spec.type&lt;/code> field to let controllers check their responsibility (similar to all other extension resources of Gardener).&lt;/p>
&lt;h2 id="providerconfig">ProviderConfig&lt;/h2>
&lt;p>It is possible to provide data in the &lt;code>Shoot&lt;/code> resource which is copied to &lt;code>spec.providerConfig&lt;/code> of the &lt;code>Extension&lt;/code> resource.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden-foo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo: bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>results in&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo: bar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="shoot-reconciliation-flow-and-extension-status">Shoot reconciliation flow and Extension status&lt;/h2>
&lt;p>Gardener creates Extension resources as part of the Shoot reconciliation. Moreover, it is guaranteed that the &lt;a href="https://gardener.cloud/docs/gardener/extensions/cluster/">Cluster&lt;/a> resource exists before the &lt;code>Extension&lt;/code> resource is created.&lt;/p>
&lt;p>For an &lt;code>Extension&lt;/code> controller it is crucial to maintain the &lt;code>Extension&lt;/code>&amp;rsquo;s status correctly. At the end Gardener checks the status of each &lt;code>Extension&lt;/code> and only reports a successful shoot reconciliation if the state of the last operation is &lt;code>Succeeded&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generation: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: Succeeded
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> observedGeneration: 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Healthcheck Library</title><link>https://gardener.cloud/docs/gardener/extensions/healthcheck-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/healthcheck-library/</guid><description>
&lt;h1 id="health-check-library">Health Check Library&lt;/h1>
&lt;h2 id="goal">Goal&lt;/h2>
&lt;p>Typically an extension reconciles a specific resource (Custom Resource Definitions (CRDs)) and creates/modifies resources in the cluster (via helm, managed resources, kubectl, &amp;hellip;).
We call these API Objects &amp;lsquo;dependent objects&amp;rsquo; - as they are bound to the lifecycle of the extension.&lt;/p>
&lt;p>The goal of this library is to enable extensions to setup health checks for their &amp;lsquo;dependent objects&amp;rsquo; with minimal effort.&lt;/p>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>The library provides a generic controller with the ability to register any resource that satisfies the &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types.go">extension object interface&lt;/a>.
An example is &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_worker.go">the &lt;code>Worker&lt;/code> CRD&lt;/a>.&lt;/p>
&lt;p>Health check functions for commonly used dependent objects can be reused and registered with the controller, such as:&lt;/p>
&lt;ul>
&lt;li>Deployment&lt;/li>
&lt;li>DaemonSet&lt;/li>
&lt;li>StatefulSet&lt;/li>
&lt;li>ManagedResource (Gardener specific)&lt;/li>
&lt;/ul>
&lt;p>See below example &lt;a href="https://github.com/gardener/gardener-extension-provider-aws/blob/master/pkg/controller/healthcheck/add.go">taken from the provider-aws&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>health.DefaultRegisterExtensionForHealthCheck(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> aws.Type,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensionsv1alpha1.SchemeGroupVersion.WithKind(extensionsv1alpha1.WorkerResource),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">func&lt;/span>() runtime.Object { &lt;span style="color:#00f">return&lt;/span> &amp;amp;extensionsv1alpha1.Worker{} },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mgr, &lt;span style="color:#008000">// controller runtime manager
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> opts, &lt;span style="color:#008000">// options for the health check controller
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#00f">nil&lt;/span>, &lt;span style="color:#008000">// custom predicates
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#00f">map&lt;/span>[extensionshealthcheckcontroller.HealthCheck]&lt;span style="color:#2b91af">string&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> general.CheckManagedResource(genericactuator.McmShootResourceName): string(gardencorev1beta1.ShootSystemComponentsHealthy),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> general.CheckSeedDeployment(aws.MachineControllerManagerName): string(gardencorev1beta1.ShootEveryNodeReady),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> worker.SufficientNodesAvailable(): string(gardencorev1beta1.ShootEveryNodeReady),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This creates a health check controller that reconciles the &lt;code>extensions.gardener.cloud/v1alpha1.Worker&lt;/code> resource with the spec.type &amp;lsquo;aws&amp;rsquo;.
Three health check functions are registered that are executed during reconciliation.
Each health check is mapped to a single &lt;code>HealthConditionType&lt;/code> that results in conditions with the same &lt;code>condition.type&lt;/code> (see below).
To contribute to the Shoot&amp;rsquo;s health, the following can be used: &lt;code>SystemComponentsHealthy&lt;/code>, &lt;code>EveryNodeReady&lt;/code>, &lt;code>ControlPlaneHealthy&lt;/code>.
The Gardener/Gardenlet checks each extension for conditions matching these types.
However extensions are free to choose any &lt;code>HealthConditionType&lt;/code>.
More information &lt;a href="https://gardener.cloud/docs/gardener/extensions/shoot-health-status-conditions/">can be found here&lt;/a>.&lt;/p>
&lt;p>A health check has to &lt;a href="https://github.com/gardener/gardener/blob/master/extensions/pkg/controller/healthcheck/actuator.go">satisfy below interface&lt;/a>.
You can find implementation examples &lt;a href="https://github.com/gardener/gardener/tree/master/extensions/pkg/controller/healthcheck/general">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">type&lt;/span> HealthCheck &lt;span style="color:#00f">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Check is the function that executes the actual health check
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Check(context.Context, types.NamespacedName) (*SingleCheckResult, &lt;span style="color:#2b91af">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// InjectSeedClient injects the seed client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> InjectSeedClient(client.Client)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// InjectShootClient injects the shoot client
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> InjectShootClient(client.Client)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// SetLoggerSuffix injects the logger
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> SetLoggerSuffix(&lt;span style="color:#2b91af">string&lt;/span>, &lt;span style="color:#2b91af">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// DeepCopy clones the healthCheck
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> DeepCopy() HealthCheck
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The health check controller regularly (default: &lt;code>30s&lt;/code>) reconciles the extension resource and executes the registered health checks for the dependent objects.
As a result, the controller writes condition(s) to the status of the extension containing the health check result.
In our example, two checks are mapped to &lt;code>ShootEveryNodeReady&lt;/code> and one to &lt;code>ShootSystemComponentsHealthy&lt;/code>, leading to conditions with two distinct &lt;code>HealthConditionTypes&lt;/code> (condition.type)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conditions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;20XX-10-28T08:17:21Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastUpdateTime: &lt;span style="color:#a31515">&amp;#34;20XX-11-28T08:17:21Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: (1/1) Health checks successful
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: HealthCheckSuccessful
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;True&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: SystemComponentsHealthy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;20XX-10-28T08:17:21Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastUpdateTime: &lt;span style="color:#a31515">&amp;#34;20XX-11-28T08:17:21Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: (2/2) Health checks successful
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: HealthCheckSuccessful
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;True&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: EveryNodeReady
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please note that there are four statuses: &lt;code>True&lt;/code>, &lt;code>False&lt;/code>, &lt;code>Unknown&lt;/code>, and &lt;code>Progressing&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>True&lt;/code> should be used for successful health checks.&lt;/li>
&lt;li>&lt;code>False&lt;/code> should be used for unsuccessful/failing health checks.&lt;/li>
&lt;li>&lt;code>Unknown&lt;/code> should be used when there was an error trying to determine the health status.&lt;/li>
&lt;li>&lt;code>Progressing&lt;/code> should be used to indicate that the health status did not succeed but for expected reasons (e.g., a cluster scale up/down could make the standard health check fail because something is wrong with the &lt;code>Machines&lt;/code>, however, it&amp;rsquo;s actually an expected situation and known to be completed within a few minutes.)&lt;/li>
&lt;/ul>
&lt;p>Health checks that report &lt;code>Progressing&lt;/code> should also provide a timeout after which this &amp;ldquo;progressing situation&amp;rdquo; is expected to be completed.
The health check library will automatically transition the status to &lt;code>False&lt;/code> if the timeout was exceeded.&lt;/p>
&lt;h2 id="additional-considerations">Additional Considerations&lt;/h2>
&lt;p>It is up to the extension to decide how to conduct health checks, though it is recommended to make use of the build-in health check functionality of &lt;code>managed-resources&lt;/code> for trivial checks.
By &lt;a href="https://github.com/gardener/gardener/blob/master/extensions/pkg/controller/worker/genericactuator/machine_controller_manager.go">deploying the depending resources via managed resources&lt;/a>, the &lt;a href="https://github.com/gardener/gardener-resource-manager">gardener resource manager&lt;/a> conducts basic checks for different API objects out-of-the-box (e.g &lt;code>Deployments&lt;/code>, &lt;code>DaemonSets&lt;/code>, &amp;hellip;) - and writes health conditions.
In turn, the library contains a health check function to gather the health information from managed resources.&lt;/p>
&lt;p>More sophisticated health checks should be implemented by the extension controller itself (implementing the &lt;code>HealthCheck&lt;/code> interface).&lt;/p></description></item><item><title>Docs: Infrastructure</title><link>https://gardener.cloud/docs/gardener/extensions/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/infrastructure/</guid><description>
&lt;h1 id="contract-infrastructure-resource">Contract: &lt;code>Infrastructure&lt;/code> resource&lt;/h1>
&lt;p>Every Kubernetes cluster requires some low-level infrastructure to be setup in order to work properly.
Examples for that are networks, routing entries, security groups, IAM roles, etc.
Before introducing the &lt;code>Infrastructure&lt;/code> extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see &lt;a href="https://github.com/gardener/gardener/tree/0.20.0/charts/seed-terraformer/charts/aws-infra">here&lt;/a>).
Now, Gardener commissions an external, provider-specific controller to take over this task.&lt;/p>
&lt;h2 id="which-infrastructure-resources-are-required">Which infrastructure resources are required?&lt;/h2>
&lt;p>Unfortunately, there is no general answer to this question as it is highly provider specific.
Consider the above mentioned resources, i.e. VPC, subnets, route tables, security groups, IAM roles, SSH key pairs.
Most of the resources are required in order to create VMs (the shoot cluster worker nodes), load balancers, and volumes.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-infrastructure-provider">What needs to be implemented to support a new infrastructure provider?&lt;/h2>
&lt;p>As part of the shoot flow Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cloudprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resourceGroup:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: mygroup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vnet: &lt;span style="color:#008000"># specify either &amp;#39;name&amp;#39; or &amp;#39;cidr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># name: my-vnet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: 10.250.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workers: 10.250.0.0/19
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.secretRef&lt;/code> contains a reference to the provider secret pointing to the account that shall be used to create the needed resources.
However, the most important section is the &lt;code>.spec.providerConfig&lt;/code>.
It contains an embedded declaration of the provider specific configuration for the infrastructure (that cannot be known by Gardener itself).
You are responsible for designing how this configuration looks like.
Gardener does not evaluate it but just copies this part from what has been provided by the end-user in the &lt;code>Shoot&lt;/code> resource.&lt;/p>
&lt;p>After your controller has created the required resources in your provider&amp;rsquo;s infrastructure it needs to generate an output that can be used by other controllers in subsequent steps.
An example for that is the &lt;code>Worker&lt;/code> extension resource controller.
It is responsible for creating virtual machines (shoot worker nodes) in this prepared infrastructure.
Everything that it needs to know in order to do that (e.g., the network IDs, security group names, etc. (again: provider-specific)) needs to be provided as output in the &lt;code>Infrastructure&lt;/code> resource:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerStatus:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureStatus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resourceGroup:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: mygroup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vnet:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-vnet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subnets:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-subnet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> availabilitySets:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: av-set-id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: av-set-name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> routeTables:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: route-table-name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> securityGroups:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: sec-group-name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to support a new infrastructure provider you need to write a controller that watches all &lt;code>Infrastructure&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code>.
You can take a look at the below referenced example implementation for the Azure provider.&lt;/p>
&lt;h2 id="dynamic-nodes-network-for-shoot-clusters">Dynamic nodes network for shoot clusters&lt;/h2>
&lt;p>Some environments do not allow end-users to statically define a CIDR for the network that shall be used for the shoot worker nodes.
In these cases it is possible for the extension controllers to dynamically provision a network for the nodes (as part of their reconciliation loops), and to provide the CIDR in the &lt;code>status&lt;/code> of the &lt;code>Infrastructure&lt;/code> resource:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerStatus: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodesCIDR: 10.250.0.0/16
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gardener will pick this &lt;code>nodesCIDR&lt;/code> and use it to configure the VPN components to establish network connectivity between the control plane and the worker nodes.
If the &lt;code>Shoot&lt;/code> resource already specifies a nodes CIDR in &lt;code>.spec.networking.nodes&lt;/code> and the extension controller provides also a value in &lt;code>.status.nodesCIDR&lt;/code> in the &lt;code>Infrastructure&lt;/code> resource then the latter one will always be considered with higher priority by Gardener.&lt;/p>
&lt;h2 id="non-provider-specific-information-required-for-infrastructure-creation">Non-provider specific information required for infrastructure creation&lt;/h2>
&lt;p>Some providers might require further information that is not provider specific but already part of the shoot resource.
One example for this is the &lt;a href="https://github.com/gardener/gardener-extension-provider-gcp/tree/master/pkg/controller/infrastructure">GCP infrastructure controller&lt;/a> which needs the pod and the service network of the cluster in order to prepare and configure the infrastructure correctly.
As Gardener cannot know which information is required by providers it simply mirrors the &lt;code>Shoot&lt;/code>, &lt;code>Seed&lt;/code>, and &lt;code>CloudProfile&lt;/code> resources into the seed.
They are part of the &lt;a href="https://gardener.cloud/docs/gardener/extensions/cluster/">&lt;code>Cluster&lt;/code> extension resource&lt;/a> and can be used to extract information that is not part of the &lt;code>Infrastructure&lt;/code> resource itself.&lt;/p>
&lt;h2 id="implementation-details">Implementation details&lt;/h2>
&lt;h3 id="actuator-interface">&lt;code>Actuator&lt;/code> interface&lt;/h3>
&lt;p>Most existing infrastructure controller implementations follow a common pattern where a generic &lt;code>Reconciler&lt;/code> delegates to &lt;a href="https://github.com/gardener/gardener/blob/master/extensions/pkg/controller/infrastructure/actuator.go">an &lt;code>Actuator&lt;/code> interface&lt;/a> that contains the methods &lt;code>Reconcile&lt;/code>, &lt;code>Delete&lt;/code>, &lt;code>Migrate&lt;/code>, and &lt;code>Restore&lt;/code>. These methods are called by the generic &lt;code>Reconciler&lt;/code> for the respective operations, and should be implemented by the extension according to the contract described here and the &lt;a href="https://gardener.cloud/docs/gardener/extensions/migration/">migration guidelines&lt;/a>.&lt;/p>
&lt;h3 id="configvalidator-interface">&lt;code>ConfigValidator&lt;/code> interface&lt;/h3>
&lt;p>For infrastructure controllers, the generic &lt;code>Reconciler&lt;/code> also delegates to &lt;a href="https://github.com/gardener/gardener/blob/master/extensions/pkg/controller/infrastructure/configvalidator.go">a &lt;code>ConfigValidator&lt;/code> interface&lt;/a> that contains a single &lt;code>Validate&lt;/code> method. This method is called by the generic &lt;code>Reconciler&lt;/code> at the beginning of every reconciliation, and can be implemented by the extension to validate the &lt;code>.spec.providerConfig&lt;/code> part of the &lt;code>Infrastructure&lt;/code> resource with the respective cloud provider, typically the existence and validity of cloud provider resources such as AWS VPCs or GCP Cloud NAT IPs.&lt;/p>
&lt;p>The &lt;code>Validate&lt;/code> method returns a list of errors. If this list is non-empty, the generic &lt;code>Reconciler&lt;/code> will fail with an error. This error will have the error code &lt;code>ERR_CONFIGURATION_PROBLEM&lt;/code>, unless there is at least one error in the list that has its &lt;code>ErrorType&lt;/code> field set to &lt;code>field.ErrorTypeInternal&lt;/code>.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_infrastructure.go">&lt;code>Infrastructure&lt;/code> API (Golang specification)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-azure/tree/master/pkg/controller/infrastructure">Sample implementation for the Azure provider&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/infrastructure/configvalidator.go">Sample ConfigValidator implementation&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Logging And Monitoring</title><link>https://gardener.cloud/docs/gardener/extensions/logging-and-monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/logging-and-monitoring/</guid><description>
&lt;h1 id="logging-and-monitoring-for-extensions">Logging and Monitoring for Extensions&lt;/h1>
&lt;p>Gardener provides an integrated logging and monitoring stack for alerting, monitoring and troubleshooting of its managed components by operators or end users. For further information how to make use of it in these roles, refer to the corresponding guides for &lt;a href="https://github.com/gardener/logging/tree/master/docs/usage/README.md">exploring logs&lt;/a> and for &lt;a href="https://grafana.com/docs/grafana/latest/getting-started/getting-started/#all-users">monitoring with Grafana&lt;/a>.&lt;/p>
&lt;p>The components that constitute the logging and monitoring stack are managed by Gardener. By default, it deploys &lt;a href="https://prometheus.io/">Prometheus&lt;/a>, &lt;a href="https://prometheus.io/docs/alerting/latest/alertmanager/">Alertmanager&lt;/a> and &lt;a href="https://grafana.com/">Grafana&lt;/a> into the &lt;code>garden&lt;/code> namespace of all seed clusters. If the &lt;code>Logging&lt;/code> &lt;a href="https://gardener.cloud/docs/gardener/deployment/feature_gates/">feature gate&lt;/a> in the &lt;code>gardenlet&lt;/code> configuration is enabled, it will deploy &lt;a href="https://fluentbit.io/">fluent-bit&lt;/a> and &lt;a href="https://grafana.com/oss/loki/">Loki&lt;/a> in the &lt;code>garden&lt;/code> namespace too.&lt;/p>
&lt;p>Each shoot namespace hosts managed logging and monitoring components. As part of the shoot reconciliation flow, Gardener deploys a shoot-specific Prometheus, Grafana and, if configured, an Alertmanager into the shoot namespace, next to the other control plane components. If the &lt;code>Logging&lt;/code> feature gate is enabled and the &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_purposes/#behavioral-differences">shoot purpose&lt;/a> is not &lt;code>testing&lt;/code>, it deploys a shoot-specific Loki in the shoot namespace too.&lt;/p>
&lt;p>The logging and monitoring stack is extensible by configuration. Gardener extensions can take advantage of that and contribute configurations encoded in &lt;code>ConfigMap&lt;/code>s for their own, specific dashboards, alerts, log parsers and other supported assets and integrate with it. As with other Gardener resources, they will be continuously reconciled.&lt;/p>
&lt;p>This guide is about the roles and extensibility options of the logging and monitoring stack components, and how to integrate extensions with:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#monitoring">Monitoring&lt;/a>&lt;/li>
&lt;li>&lt;a href="#logging">Logging&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="monitoring">Monitoring&lt;/h2>
&lt;p>The central Prometheus instance in the &lt;code>garden&lt;/code> namespace fetches metrics and data from all seed cluster nodes and all seed cluster pods.
It uses the &lt;a href="https://prometheus.io/docs/prometheus/latest/federation/">federation&lt;/a> concept to allow the shoot-specific instances to scrape only the metrics for the pods of the control plane they are responsible for.
This mechanism allows to scrape the metrics for the nodes/pods once for the whole cluster, and to have them distributed afterwards.&lt;/p>
&lt;p>The shoot-specific metrics are then made available to operators and users in the shoot Grafana, using the shoot Prometheus as data source.&lt;/p>
&lt;p>Extension controllers might deploy components as part of their reconciliation next to the shoot&amp;rsquo;s control plane.
Examples for this would be a cloud-controller-manager or CSI controller deployments. Extensions that want to have their managed control plane components integrated with monitoring can contribute their per-shoot configuration for scraping Prometheus metrics, Alertmanager alerts or Grafana dashboards.&lt;/p>
&lt;h3 id="extensions-monitoring-integration">Extensions monitoring integration&lt;/h3>
&lt;p>Before deploying the shoot-specific Prometheus instance, Gardener will read all &lt;code>ConfigMap&lt;/code>s in the shoot namespace, which are labeled with &lt;code>extensions.gardener.cloud/configuration=monitoring&lt;/code>.
Such &lt;code>ConfigMap&lt;/code>s may contain four fields in their &lt;code>data&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>scrape_config&lt;/code>: This field contains Prometheus scrape configuration for the component(s) and metrics that shall be scraped.&lt;/li>
&lt;li>&lt;code>alerting_rules&lt;/code>: This field contains Alertmanager rules for alerts that shall be raised.&lt;/li>
&lt;li>(deprecated)&lt;code>dashboard_operators&lt;/code>: This field contains a Grafana dashboard in JSON that is only relevant for Gardener operators.&lt;/li>
&lt;li>(deprecated)&lt;code>dashboard_users&lt;/code>: This field contains a Grafana dashboard in JSON that is only relevant for Gardener users (shoot owners).&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example:&lt;/strong> A &lt;code>ControlPlane&lt;/code> controller deploying a &lt;code>cloud-controller-manager&lt;/code> into the shoot namespace wants to integrate monitoring configuration for scraping metrics, alerting rules, dashboards and logging configuration for exposing logs to the end users.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: extension-controlplane-monitoring-ccm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--project--name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensions.gardener.cloud/configuration: monitoring
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scrape_config: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> - job_name: cloud-controller-manager
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> scheme: https
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> tls_config:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> insecure_skip_verify: true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> authorization:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> type: Bearer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> credentials_file: /var/run/secrets/gardener.cloud/shoot/token/token
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> honor_labels: false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> kubernetes_sd_configs:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> - role: endpoints
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> namespaces:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> names: [shoot--project--name]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> relabel_configs:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> - source_labels:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> - __meta_kubernetes_service_name
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> - __meta_kubernetes_endpoint_port_name
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> action: keep
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> regex: cloud-controller-manager;metrics
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> # common metrics
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> - action: labelmap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> regex: __meta_kubernetes_service_label_(.+)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> - source_labels: [ __meta_kubernetes_pod_name ]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> target_label: pod
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> metric_relabel_configs:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> - process_max_fds
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> - process_open_fds&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alerting_rules: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> cloud-controller-manager.rules.yaml: |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> groups:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> - name: cloud-controller-manager.rules
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> rules:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> - alert: CloudControllerManagerDown
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> expr: absent(up{job=&amp;#34;cloud-controller-manager&amp;#34;} == 1)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> for: 15m
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> labels:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> service: cloud-controller-manager
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> severity: critical
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> type: seed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> visibility: all
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> annotations:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> description: All infrastructure specific operations cannot be completed (e.g. creating load balancers or persistent volumes).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> summary: Cloud controller manager is down.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="logging">Logging&lt;/h2>
&lt;p>In Kubernetes clusters, container logs are non-persistent and do not survive stopped and destroyed containers. Gardener addresses this problem for the components hosted in a seed cluster, by introducing its own managed logging solution. It is integrated with the Gardener monitoring stack to have all troubleshooting context in one place.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/logging-architecture_c8dc32.png" alt="&amp;amp;ldquo;Cluster Logging Topology&amp;amp;rdquo;" title="Cluster Logging Topology">&lt;/p>
&lt;p>Gardener logging consists of components in three roles - log collectors and forwarders, log persistency and exploration/consumption interfaces. All of them live in the seed clusters in multiple instances:&lt;/p>
&lt;ul>
&lt;li>Logs are persisted by Loki instances deployed as StatefulSets - one per shoot namespace, if the &lt;code>Logging&lt;/code> feature gate is enabled and the &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_purposes/#behavioral-differences">shoot purpose&lt;/a> is not &lt;code>testing&lt;/code>, and one in the &lt;code>garden&lt;/code> namespace. The shoot instances store logs from the control plane components hosted there. The &lt;code>garden&lt;/code> Loki instance is responsible for logs from the rest of the seed namespaces - &lt;code>kube-system&lt;/code>, &lt;code>garden&lt;/code> &lt;code>extension-*&lt;/code> and others.&lt;/li>
&lt;li>Fluent-bit DaemonSets deployed on each seed node collect logs from it. A custom plugin takes care to distribute the collected log messages to the Loki instances that they are intended for. This allows to fetch the logs once for the whole cluster, and to distribute them afterwards.&lt;/li>
&lt;li>Grafana is the UI component used to explore monitoring and log data together for easier troubleshooting and in context. Grafana instances are configured to use the coresponding Loki instances, sharing the same namespace, as data providers. There is one Grafana Deployment in the &lt;code>garden&lt;/code> namespace and two Deployments per shoot namespace (one exposed to the end users and one for the operators).&lt;/li>
&lt;/ul>
&lt;p>Logs can be produced from various sources, such as containers or systemd, and in different formats. The fluent-bit design supports configurable &lt;a href="https://docs.fluentbit.io/manual/concepts/data-pipeline">data pipeline&lt;/a> to address that problem. Gardener provides such &lt;a href="https://github.com/gardener/gardener/blob/master/charts/seed-bootstrap/charts/fluent-bit/templates/fluent-bit-configmap.yaml">configuration&lt;/a> for logs produced by all its core managed components as a &lt;code>ConfigMap&lt;/code>. Extensions can contribute their own, specific configurations as &lt;code>ConfigMap&lt;/code>s too. See for example the &lt;a href="https://github.com/gardener/gardener-extension-provider-aws/blob/master/charts/gardener-extension-provider-aws/templates/configmap-logging.yaml">logging configuration&lt;/a> for the Gardener AWS provider extension. The Gardener reconciliation loop watches such resources and updates the fluent-bit agents dynamically.&lt;/p>
&lt;h4 id="fluent-bit-log-parsers-and-filters">Fluent-bit log parsers and filters&lt;/h4>
&lt;p>To integrate with Gardener logging, extensions can and &lt;em>should&lt;/em> specify how fluent-bit will handle the logs produced by the managed components that they contribute to Gardener. Normally, that would require to configure a &lt;em>parser&lt;/em> for the specific logging format, if none of the available is applicable, and a &lt;em>filter&lt;/em> defining how to apply it. For a complete reference for the configuration options, refer to fluent-bit&amp;rsquo;s &lt;a href="https://docs.fluentbit.io/manual/">documentation&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> At the moment only &lt;em>parser&lt;/em> and &lt;em>filter&lt;/em> configurations are supported.&lt;/p>
&lt;p>To contribute its own configuration to the fluent-bit agents data pipelines, an extension must provide it as a &lt;code>ConfigMap&lt;/code> labeled &lt;code>extensions.gardener.cloud/configuration=logging&lt;/code> and deployed in the seed&amp;rsquo;s &lt;code>garden&lt;/code> namespace. Unlike the monitoring stack, where configurations are deployed per shoot, here a &lt;em>single&lt;/em> configuration &lt;code>ConfigMap&lt;/code> is sufficient and it applies to all fluent-bit agents in the seed. Its &lt;code>data&lt;/code> field can have the following properties:&lt;/p>
&lt;ul>
&lt;li>&lt;code>filter-kubernetes.conf&lt;/code> - configuration for data pipeline &lt;a href="https://docs.fluentbit.io/manual/concepts/data-pipeline/filter">filters&lt;/a>&lt;/li>
&lt;li>&lt;code>parser.conf&lt;/code> - configuration for data pipeline &lt;a href="https://docs.fluentbit.io/manual/concepts/data-pipeline/parser">parsers&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> Take care to provide the correct data pipeline elements in the coresponding data field and not to mix them.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong> Logging configuration for provider-specific (OpenStack) worker controller deploying a &lt;code>machine-controller-manager&lt;/code> component into a shoot namespace that reuses the &lt;code>kubeapiserverParser&lt;/code> defined in &lt;a href="https://github.com/gardener/gardener/blob/master/charts/seed-bootstrap/charts/fluent-bit/templates/fluent-bit-configmap.yaml#L304-L309">fluent-bit-configmap.yaml&lt;/a> to parse the component logs&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: gardener-extension-provider-openstack-logging-config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensions.gardener.cloud/configuration: logging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter-kubernetes.conf: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [FILTER]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Name parser
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Match kubernetes.machine-controller-manager*openstack-machine-controller-manager*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Key_Name log
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Parser kubeapiserverParser
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Reserve_Data True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="how-to-expose-logs-to-the-users">How to expose logs to the users&lt;/h5>
&lt;p>To expose logs from extension components to the users, the extension owners have to specify a &lt;code>modify&lt;/code> filter which will add &lt;code>__gardener_multitenant_id__=operator;user&lt;/code> entry to the log record. This entry contains all of the tenants, which have to receive this log. The tenants are semicolon separated. This specific dedicated entry will be extracted and removed from the log in the &lt;code>gardener fluent-bit-to-loki&lt;/code> output plugin and added to the label set of that log. Then it will be parsed and removed from the label set. Any whitespace will be truncated during the parsing. The extension components logs can be found in &lt;code>Controlplane Logs Dashboard&lt;/code> Grafana dashboard.&lt;/p>
&lt;p>&lt;strong>Example:&lt;/strong> In this example we configure fluent-bit when it finds a log with field &lt;code>tag&lt;/code>, which match the &lt;code>Condition&lt;/code>, to add &lt;code>__gardener_multitenant_id__=operator;user&lt;/code> into the log record.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ConfigMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: gardener-extension-provider-aws-logging-config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensions.gardener.cloud/configuration: logging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filter-kubernetes.conf: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [FILTER]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Name modify
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Match kubernetes.*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Condition Key_value_matches tag ^kubernetes\.var\.log\.containers\.(cloud-controller-manager-.+?_.+?_aws-cloud-controller-manager|csi-driver-controller-.+?_.+?_aws-csi)_.+?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Add __gardener_multitenant_id__ operator;user&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case we have predefined filter which copies the log&amp;rsquo;s tag into the log record under the &lt;code>tag&lt;/code> field. The tag consists of the container logs directories path, plus &lt;code>&amp;lt;pod_name&amp;gt;_&amp;lt;shoot_controlplane_namespace&amp;gt;_&amp;lt;container_name&amp;gt;_&amp;lt;container_id&amp;gt;&lt;/code>, so here we say:&lt;/p>
&lt;blockquote>
&lt;p>When you see a record from pod &lt;code>cloud-controller-manager&lt;/code> and some of the &lt;code>aws-cloud-controller-manager&lt;/code>, &lt;code>csi-driver-controller&lt;/code> or &lt;code>aws-csi&lt;/code> containers add &lt;code>__gardener_multitenant_id__&lt;/code> key with &lt;code>operator;user&lt;/code> value into the log record.&lt;/p>
&lt;/blockquote>
&lt;p>Further details how to define parsers and use them with examples can be found in the following &lt;a href="https://gardener.cloud/docs/gardener/development/log_parsers/">guide&lt;/a>.&lt;/p>
&lt;h4 id="grafana">Grafana&lt;/h4>
&lt;p>The three types of Grafana instances found in a seed cluster are configured to expose logs of different origin in their dashboards:&lt;/p>
&lt;ul>
&lt;li>Garden Grafana dashboards expose logs from non-shoot namespaces of the seed clusters
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/charts/seed-bootstrap/dashboards/pod-logs.json">Pod Logs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/charts/seed-bootstrap/dashboards/extensions-dashboard.json">Extensions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/charts/seed-bootstrap/dashboards/systemd-logs.json">Systemd Logs&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Shoot User Grafana dashboards expose a subset of the logs shown to operators
&lt;ul>
&lt;li>Kube Apiserver&lt;/li>
&lt;li>Kube Controller Manager&lt;/li>
&lt;li>Kube Scheduler&lt;/li>
&lt;li>Cluster Autoscaler&lt;/li>
&lt;li>VPA components&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Shoot Operator Grafana dashboards expose logs from the shoot cluster namespace where they belong
&lt;ul>
&lt;li>All user&amp;rsquo;s dashboards&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/charts/seed-monitoring/charts/grafana/dashboards/operators/kubernetes-pods-dashboard.json">Kubernetes Pods&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>If the type of logs exposed in the Grafana instances needs to be changed, it is necessary to update the coresponding instance dashboard configurations.&lt;/p>
&lt;h2 id="tips">Tips&lt;/h2>
&lt;ul>
&lt;li>Be careful to match exactly the log names that you need for a particular parser in your filters configuration. The regular expression you will supply will match names in the form &lt;code>kubernetes.pod_name.&amp;lt;metadata&amp;gt;.container_name&lt;/code>. If there are extensions with the same container and pod names, they will all match the same parser in a filter. That may be a desired effect, if they all share the same log format. But it will be a problem if they don&amp;rsquo;t. To solve it, either the pod or container names must be unique, and the regular expression in the filter has to match that unique pattern. A recommended approach is to prefix containers with the extension name and tune the regular expression to match it. For example, using &lt;code>myextension-container&lt;/code> as container name, and a regular expression &lt;code>kubernetes.mypod.*myextension-container&lt;/code> will guarantee match of the right log name. Make sure that the regular expression does not match more than you expect. For example, &lt;code>kubernetes.systemd.*systemd.*&lt;/code> will match both &lt;code>systemd-service&lt;/code> and &lt;code>systemd-monitor-service&lt;/code>. You will want to be as specific as possible.&lt;/li>
&lt;li>It&amp;rsquo;s a good idea to put the logging configuration into the Helm chart that also deploys the extension &lt;em>controller&lt;/em>, while the monitoring configuration can be part of the Helm chart/deployment routine that deploys the &lt;em>component&lt;/em> managed by the controller.&lt;/li>
&lt;/ul>
&lt;h2 id="references-and-additional-resources">References and additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/issues/1351">GitHub issue describing the concept&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-gcp/blob/master/charts/internal/seed-controlplane/charts/cloud-controller-manager/templates/configmap-observability.yaml">Exemplary implementation (monitoring) for the GCP provider&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-openstack/blob/master/charts/gardener-extension-provider-openstack/templates/configmap-logging.yaml">Exemplary implementation (logging) for the OpenStack provider&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Managedresources</title><link>https://gardener.cloud/docs/gardener/extensions/managedresources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/managedresources/</guid><description>
&lt;h1 id="deploy-resources-to-the-shoot-cluster">Deploy resources to the Shoot cluster&lt;/h1>
&lt;p>We have introduced a component called &lt;a href="https://gardener.cloud/docs/gardener/concepts/resource-manager/">&lt;code>gardener-resource-manager&lt;/code>&lt;/a> that is deployed as part of every shoot control plane in the seed.
One of its tasks is to manage CRDs, so called &lt;code>ManagedResource&lt;/code>s.
Managed resources contain Kubernetes resources that shall be created, reconciled, updated, and deleted by the gardener-resource-manager.&lt;/p>
&lt;p>Extension controllers may create these &lt;code>ManagedResource&lt;/code>s in the shoot namespace if they need to create any resource in the shoot cluster itself, for example RBAC roles (or anything else).&lt;/p>
&lt;h2 id="where-can-i-find-more-examples-and-more-information-how-to-use-managedresources">Where can I find more examples and more information how to use &lt;code>ManagedResource&lt;/code>s?&lt;/h2>
&lt;p>Please take a look at the &lt;a href="https://gardener.cloud/docs/gardener/concepts/resource-manager/">respective documentation&lt;/a>.&lt;/p></description></item><item><title>Docs: Migration</title><link>https://gardener.cloud/docs/gardener/extensions/migration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/migration/</guid><description>
&lt;h1 id="control-plane-migration">Control Plane Migration&lt;/h1>
&lt;p>&lt;em>Control Plane Migration&lt;/em> is a new Gardener feature that has been recently implemented as proposed in &lt;a href="https://gardener.cloud/docs/gardener/proposals/07-shoot-control-plane-migration/">GEP-7 Shoot Control Plane Migration&lt;/a>. It should be properly supported by all extensions controllers. This document outlines some important points that extension maintainers should keep in mind to properly support migration in their extensions.&lt;/p>
&lt;h2 id="overall-principles">Overall Principles&lt;/h2>
&lt;p>The following principles should always be upheld:&lt;/p>
&lt;ul>
&lt;li>All state maintained by the extension that is external from the seed cluster, for example infrastructure resources in a cloud provider, DNS entries, etc., should be kept during the migration. No such state should be deleted and then recreated, as this might cause disruption in the availability of the shoot cluster.&lt;/li>
&lt;li>All Kubernetes resources maintained by the extension in the shoot cluster itself should also be kept during the migration. No such resources should be deleted and then recreated.&lt;/li>
&lt;/ul>
&lt;h2 id="migrate-and-restore-operations">Migrate and Restore Operations&lt;/h2>
&lt;p>Two new operations have been introduced in Gardener. They can be specified as values of the &lt;code>gardener.cloud/operation&lt;/code> annotation on an extension resource to indicate that an operation different from a normal &lt;code>reconcile&lt;/code> should be performed by the corresponding extension controller:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>migrate&lt;/code> operation is used to ask the extension controller in the source seed to stop reconciling extension resources (in case they are requeued due to errors) and perform cleanup activities, if such are required. These cleanup activities might involve removing finalizers on resources in the shoot namespace that have been previously created by the extension controller and deleting them without actually deleting any resources external to the seed cluster.&lt;/li>
&lt;li>The &lt;code>restore&lt;/code> operation is used to ask extension controller in the destination seed to restore any state saved in the extension resource &lt;code>status&lt;/code>, before performing the actual reconciliation.&lt;/li>
&lt;/ul>
&lt;p>Unlike the &lt;a href="https://gardener.cloud/docs/gardener/extensions/reconcile-trigger/">reconcile operation&lt;/a>, extension controllers must remove the &lt;code>gardener.cloud/operation&lt;/code> annotation at the end of a successful reconciliation when the current operation is &lt;code>migrate&lt;/code> or &lt;code>restore&lt;/code>, not at the beginning of a reconciliation.&lt;/p>
&lt;h2 id="cleaning-up-source-seed-resources">Cleaning-up Source Seed Resources&lt;/h2>
&lt;p>All resources in the source seed that have been created by an extension controller, for example secrets, config maps, &lt;a href="https://gardener.cloud/docs/gardener/extensions/managedresources/">managed resources&lt;/a>, etc. should be properly cleaned up by the extension controller when the current operation is &lt;code>migrate&lt;/code>. As mentioned above, such resources should be deleted without actually deleting any resources external to the seed cluster.&lt;/p>
&lt;p>For many custom resources, for example MCM resources, the above requirement means in practice that any finalizers should be removed before deleting the resource, in addition to ensuring that the resource deletion is not reconciled by its respective controller if there is no finalizer. For managed resources, the above requirement means in practice that the &lt;code>spec.keepObjects&lt;/code> field should be set to &lt;code>true&lt;/code> before deleting the extension resource.&lt;/p>
&lt;p>Here it is assumed that any resources that contain state needed by the extension controller can be safely deleted, since any such state has been saved as described in &lt;a href="#saving-and-restoring-extension-states">Saving and Restoring Extension States&lt;/a> at the end of the last successful reconciliation.&lt;/p>
&lt;h2 id="saving-and-restoring-extension-states">Saving and Restoring Extension States&lt;/h2>
&lt;p>Some extension controllers create and maintain their own state when reconciling extension resources. For example, most infrastructure controllers use Terraform and maintain the terraform state in a special config map in the shoot namespace. This state must be properly migrated to the new seed cluster during control plane migration, so that subsequent reconciliations in the new seed could find and use it appropriately.&lt;/p>
&lt;p>All extension controllers that require such state migration must save their state in the &lt;code>status.state&lt;/code> field of their extension resource at the end of a successful reconciliation. They must also restore their state from that same field upon reconciling an extension resource when the current operation is &lt;code>restore&lt;/code>, as specified by the &lt;code>gardener.cloud/operation&lt;/code> annotation, before performing the actual reconciliation.&lt;/p>
&lt;p>As an example, an infrastructure controller that uses Terraform must save the terraform state in the &lt;code>status.state&lt;/code> field of the &lt;code>Infrastructure&lt;/code> resource. An &lt;code>Infrastructure&lt;/code> resource with a properly saved state might look as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cloudprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resourceGroup:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: mygroup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> &amp;#34;version&amp;#34;: 3,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> &amp;#34;terraform_version&amp;#34;: &amp;#34;0.11.14&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> &amp;#34;serial&amp;#34;: 2,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> &amp;#34;lineage&amp;#34;: &amp;#34;3a1e2faa-e7b6-f5f0-5043-368dd8ea6c10&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> }&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Extension controllers that do not use a saved state and therefore do not require state migration could leave the &lt;code>status.state&lt;/code> field as &lt;code>nil&lt;/code> at the end of a successful reconciliation, and just perform a normal reconciliation when the current operation is &lt;code>restore&lt;/code>.&lt;/p>
&lt;p>In addition, extension controllers that use &lt;a href="https://gardener.cloud/docs/gardener/extensions/referenced-resources/">referenced resources&lt;/a> (usually secrets) must also make sure that these resources are added to the &lt;code>status.resources&lt;/code> field of their extension resource at the end of a successful reconciliation, so they could be properly migrated by Gardener to the destination seed.&lt;/p>
&lt;h2 id="implementation-details">Implementation Details&lt;/h2>
&lt;h3 id="migrate-and-restore-actuator-methods">Migrate and Restore Actuator Methods&lt;/h3>
&lt;p>Most extension controller implementations follow a common pattern where a generic &lt;code>Reconciler&lt;/code> implementation delegates to an &lt;code>Actuator&lt;/code> interface that contains the methods &lt;code>Reconcile&lt;/code> and &lt;code>Delete&lt;/code>, provided by the extension. The two new methods &lt;code>Migrate&lt;/code> and &lt;code>Restore&lt;/code> have been added to all such &lt;code>Actuator&lt;/code> interfaces, see &lt;a href="https://github.com/gardener/gardener/blob/master/extensions/pkg/controller/infrastructure/actuator.go">the infrastructure &lt;code>Actuator&lt;/code> interface&lt;/a> as an example. These methods are called by the generic reconcilers for the &lt;a href="#migrate-and-restore-operations">migrate and restore operations&lt;/a> respectively, and should be implemented by the extension according to the above guidelines.&lt;/p>
&lt;h3 id="owner-checks">Owner Checks&lt;/h3>
&lt;p>The so called &amp;ldquo;bad case&amp;rdquo; scenario for control plane migration proposed in &lt;a href="https://gardener.cloud/docs/gardener/proposals/17-shoot-control-plane-migration-bad-case/">GEP-17&lt;/a> introduced the requirement for extension controllers to check whether they are currently operating in the source or destination seed during reconciliations to avoid the case in which controllers from different seeds can operate on the same IaaS resources (split brain scenario). To that end a special &amp;ldquo;owner checking&amp;rdquo; mechanism has been added to the &lt;code>Reconciler&lt;/code> implementations of all extension controllers. For an example usage of this mechanism see &lt;a href="https://github.com/gardener/gardener/blob/7ac4b04feec409f3e5a5208cd06af9a10c755337/extensions/pkg/controller/infrastructure/reconciler.go#L109-L121">the infrastructure Reconciler implementation&lt;/a>. The purpose of the owner check is to interrupt reconciliations of extension controllers that do not operate in the seed that is currently configured to host the shoot&amp;rsquo;s control plane. Note that &lt;code>Migrate&lt;/code> operations must not be interrupted, as they are required to clean up kubernetes resources left in the shoot&amp;rsquo;s control plane namespace and do not act on IaaS resources.&lt;/p>
&lt;h3 id="extension-controllers-based-on-generic-actuators">Extension Controllers Based on Generic Actuators&lt;/h3>
&lt;p>In practice, the implementation of many extension controllers (for example, the controlplane and worker controllers in most provider extensions) are based on a &lt;em>generic &lt;code>Actuator&lt;/code> implementation&lt;/em> that only delegates to extension methods for behavior that is truly provider specific. In all such cases, the &lt;code>Migrate&lt;/code> and &lt;code>Restore&lt;/code> methods have already been implemented properly in the generic actuators and there is nothing more to do in the extension itself.&lt;/p>
&lt;p>In some rare cases, extension controllers based on a generic actuator might still introduce a custom &lt;code>Actuator&lt;/code> implementation to override some of the generic actuator methods in order to enhance or change their behavior in a certain way. In such cases, the &lt;code>Migrate&lt;/code> and &lt;code>Restore&lt;/code> methods might need to be overridden as well, see the &lt;a href="https://github.com/gardener/gardener-extension-provider-azure/tree/master/pkg/controller/controlplane">Azure controlplane controller&lt;/a> as an example.&lt;/p>
&lt;h3 id="extension-controllers-not-based-on-generic-actuators">Extension Controllers Not Based on Generic Actuators&lt;/h3>
&lt;p>The implementation of some extension controllers (for example, the infrastructure controllers in all provider extensions) are not based on a generic &lt;code>Actuator&lt;/code> implementation. Such extension controllers must always provide a proper implementation of the &lt;code>Migrate&lt;/code> and &lt;code>Restore&lt;/code> methods according to the above guidelines, see the &lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/infrastructure">AWS infrastructure controller&lt;/a> as an example. In practice this might result in code duplication between the different extensions, since the &lt;code>Migrate&lt;/code> and &lt;code>Restore&lt;/code> code is usually not provider or OS-specific.&lt;/p></description></item><item><title>Docs: Network</title><link>https://gardener.cloud/docs/gardener/extensions/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/network/</guid><description>
&lt;h1 id="gardener-network-extension">Gardener Network Extension&lt;/h1>
&lt;p>Gardener is an open-source project that provides a nested user model. Basically, there are two types of services provided by Gardener to its users:&lt;/p>
&lt;ul>
&lt;li>Managed: end-users only request a Kubernetes cluster (Clusters-as-a-Service)&lt;/li>
&lt;li>Hosted: operators utilize Gardener to provide their own managed version of Kubernetes (Cluster-Provisioner-as-a-service)&lt;/li>
&lt;/ul>
&lt;p>Whether an operator or an end-user, it makes sense to provide choice. For example, for an end-user it might make sense to
choose a network-plugin that would support enforcing network policies (some plugins does not come with network-policy support by default).
For operators however, choice only matters for delegation purposes i.e., when providing an own managed-service, it becomes important to also provide choice over which network-plugins to use.&lt;/p>
&lt;p>Furthermore, Gardener provisions clusters on different cloud-providers with different networking requirements. For example, Azure does not support Calico Networking [1], this leads to the introduction of manual exceptions in static add-on charts which is error prone and can lead to failures during upgrades.&lt;/p>
&lt;p>Finally, every provider is different, and thus the network always needs to adapt to the infrastructure needs to provide better performance. Consistency does not necessarily lie in the implementation but in the interface.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>Prior to the &lt;code>Network Extensibility&lt;/code> concept, Gardener followed a mono network-plugin support model (i.e., Calico). Although this seemed to be the easier approach, it did not completely reflect the real use-case.
The goal of the Gardener Network Extensions is to support different network plugins, therefore, the specification for the network resource won&amp;rsquo;t be fixed and will be customized based on the underlying network plugin.&lt;/p>
&lt;p>To do so, a &lt;code>ProviderConfig&lt;/code> field in the spec will be provided where each plugin will define. Below is an example for how to deploy Calico as the cluster network plugin.&lt;/p>
&lt;h2 id="the-network-extensions-resource">The Network Extensions Resource&lt;/h2>
&lt;p>Here is what a typical &lt;code>Network&lt;/code> resource would look-like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> podCIDR: 100.244.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> serviceCIDR: 100.32.0.0/13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: calico
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: calico.networking.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: NetworkConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backend: bird
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ipam:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: usePodCIDR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: host-local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above resources is divided into two parts (more information can be found &lt;a href="https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/docs/usage-as-end-user/">here&lt;/a>):&lt;/p>
&lt;ul>
&lt;li>global configuration (e.g., podCIDR, serviceCIDR, and type)&lt;/li>
&lt;li>provider specific config (e.g., for calico we can choose to configure a &lt;code>bird&lt;/code> backend)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: certain cloud-provider extensions might have webhooks that would modify the network-resource to fit into their network specific context. As previously mentioned, Azure does not support IPIP, as a result, the &lt;a href="https://github.com/gardener/gardener-extension-provider-azure">Azure provider extension&lt;/a> implements a &lt;a href="https://github.com/gardener/gardener-extension-provider-azure/blob/master/pkg/webhook/network/mutate.go">webhook&lt;/a> to mutate the backend and set it to &lt;code>None&lt;/code> instead of &lt;code>bird&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="supporting-a-new-network-extension-provider">Supporting a new Network Extension Provider&lt;/h2>
&lt;p>To add support for another networking provider (e.g., weave, Cilium, Flannel, etc.) a network extension controller needs to be implemented which would optionally have its own custom configuration specified in the &lt;code>spec.providerConfig&lt;/code> in the &lt;code>Network&lt;/code> resource. For example, if support for a network plugin named &lt;code>gardenet&lt;/code> is required, the following &lt;code>Network&lt;/code> resource would be created:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> podCIDR: 100.244.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> serviceCIDR: 100.32.0.0/13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: gardenet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: gardenet.networking.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: NetworkConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gardenetCustomConfigField: &amp;lt;value&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ipam:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: usePodCIDR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: host-local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once applied, the presumably implemented &lt;code>Gardenet&lt;/code> extension controller, would pick the configuration up, parse the &lt;code>providerConfig&lt;/code> and create the necessary resources in the shoot.&lt;/p>
&lt;p>For additional reference, please have a look at the &lt;a href="https://github.com/gardener/gardener-extension-networking-calico">networking-calico&lt;/a> provider extension, which provides more information on how to configure the necessary charts as well as the actuators required to reconcile networking inside the &lt;code>Shoot&lt;/code> cluster to the desired state.&lt;/p>
&lt;h2 id="supporting-kube-proxy-less-service-routing">Supporting &lt;code>kube-proxy&lt;/code> less Service Routing&lt;/h2>
&lt;p>Some networking extensions support service routing without the &lt;code>kube-proxy&lt;/code> component. This is why Gardener supports disabling of &lt;code>kube-proxy&lt;/code> for service routing by setting &lt;code>.spec.kubernetes.kubeproxy.enabled&lt;/code> to &lt;code>false&lt;/code> in the &lt;code>Shoot&lt;/code> specification. The implicit contract of the flag is: If &lt;code>kube-proxy&lt;/code> is disabled then the networking extension is responsible for the service routing.
The networking extensions need to handle this twofold:&lt;/p>
&lt;ol>
&lt;li>During the reconciliation of the networking resources, the extension needs to check whether &lt;code>kube-proxy&lt;/code> takes care of the service routing or the networking extension itself should handle it. In case the networking extension should be responsible according to &lt;code>.spec.kubernetes.kubeproxy.enabled&lt;/code> (but is unable to perform the service routing) it should raise an error during the reconciliation. If the networking extension should handle the service routing it may reconfigure itself accordingly.&lt;/li>
&lt;li>(optional) In case the networking extension does not support taking over the service routing (in some scenarios), it is recommended to also provide a validating admission webhook to reject corresponding changes early on. The validation may take the current operating mode of the networking extension into consideration.&lt;/li>
&lt;/ol>
&lt;h2 id="references">References&lt;/h2>
&lt;p>[1] &lt;a href="https://docs.projectcalico.org/v3.0/reference/public-cloud/azure">Azure support for Calico Networking&lt;/a>&lt;/p></description></item><item><title>Docs: Operatingsystemconfig</title><link>https://gardener.cloud/docs/gardener/extensions/operatingsystemconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/operatingsystemconfig/</guid><description>
&lt;h1 id="contract-operatingsystemconfig-resource">Contract: &lt;code>OperatingSystemConfig&lt;/code> resource&lt;/h1>
&lt;p>Gardener uses the machine API and leverages the functionalities of the &lt;a href="https://github.com/gardener/machine-controller-manager">machine-controller-manager&lt;/a> (MCM) in order to manage the worker nodes of a shoot cluster.
The machine-controller-manager itself simply takes a reference to an OS-image and (optionally) some user-data (a script or configuration that is executed when a VM is bootstrapped), and forwards both to the provider&amp;rsquo;s API when creating VMs.
MCM does not have any restrictions regarding supported operating systems as it does not modify or influence the machine&amp;rsquo;s configuration in any way - it just creates/deletes machines with the provided metadata.&lt;/p>
&lt;p>Consequently, Gardener needs to provide this information when interacting with the machine-controller-manager.
This means that basically every operating system is possible to be used as long as there is some implementation that generates the OS-specific configuration in order to provision/bootstrap the machines.&lt;/p>
&lt;p>⚠️ Currently, there are a few requirements:&lt;/p>
&lt;ol>
&lt;li>The operating system must have built-in &lt;a href="https://www.docker.com/">Docker&lt;/a> support.&lt;/li>
&lt;li>The operating system must have &lt;a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd&lt;/a> support.&lt;/li>
&lt;li>The operating system must have &lt;a href="https://www.gnu.org/software/wget/">&lt;code>wget&lt;/code>&lt;/a> pre-installed.&lt;/li>
&lt;li>The operating system must have &lt;a href="https://stedolan.github.io/jq/">&lt;code>jq&lt;/code>&lt;/a> pre-installed.&lt;/li>
&lt;/ol>
&lt;p>The reasons for that will become evident later.&lt;/p>
&lt;h2 id="what-does-the-user-data-bootstrapping-the-machines-contain">What does the user-data bootstrapping the machines contain?&lt;/h2>
&lt;p>Gardener installs a few components onto every worker machine in order to allow it to join the shoot cluster.
There is the &lt;code>kubelet&lt;/code> process, some scripts for continuously checking the health of &lt;code>kubelet&lt;/code> and &lt;code>docker&lt;/code>, but also configuration for log rotation, CA certificates, etc.
The complete configuration you can find &lt;a href="https://github.com/gardener/gardener/tree/master/pkg/operation/botanist/component/extensions/operatingsystemconfig/original/components">here&lt;/a>. We are calling this the &amp;ldquo;original&amp;rdquo; user-data.&lt;/p>
&lt;h2 id="how-does-gardener-bootstrap-the-machines">How does Gardener bootstrap the machines?&lt;/h2>
&lt;p>Usually, you would submit all the components you want to install onto the machine as part of the user-data during creation time.
However, some providers do have a size limitation (like ~16KB) for that user-data.
That&amp;rsquo;s why we do not send the &amp;ldquo;original&amp;rdquo; user-data to the machine-controller-manager (who forwards it then to the provider&amp;rsquo;s API).
Instead, we only send a small script that downloads the &amp;ldquo;original&amp;rdquo; data and applies it on the machine directly.
This way we can extend the &amp;ldquo;original&amp;rdquo; user-data without any size restrictions - plus we can modify it without the necessity of re-creating the machine (because we run a script that downloads and updates it continuously).&lt;/p>
&lt;p>The high-level flow is as follows:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>For every worker pool &lt;code>X&lt;/code> in the &lt;code>Shoot&lt;/code> specification, Gardener creates a &lt;code>Secret&lt;/code> named &lt;code>cloud-config-&amp;lt;X&amp;gt;&lt;/code> in the &lt;code>kube-system&lt;/code> namespace of the shoot cluster. The secret contains the &amp;ldquo;original&amp;rdquo; user-data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Gardener generates a kubeconfig with minimal permissions just allowing reading these secrets. It is used by the &lt;code>downloader&lt;/code> script later.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Gardener provides the &lt;code>downloader&lt;/code> script, the kubeconfig, and the machine image stated in the &lt;code>Shoot&lt;/code> specification to the machine-controller-manager.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Based on this information the machine-controller-manager creates the VM.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>After the VM has been provisioned the &lt;code>downloader&lt;/code> script starts and fetches the appropriate &lt;code>Secret&lt;/code> for its worker pool (containing the &amp;ldquo;original&amp;rdquo; user-data) and applies it.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="detailed-bootstrap-flow-with-a-worker-generated-bootstrap-token">Detailed bootstrap flow with a worker generated bootstrap-token&lt;/h3>
&lt;p>With gardener v1.23 a file with the content &lt;code>&amp;lt;&amp;lt;BOOTSTRAP_TOKEN&amp;gt;&amp;gt;&lt;/code> is added to the &lt;code>cloud-config-&amp;lt;worker-group&amp;gt;-downloader&lt;/code> &lt;code>OperatingSystemConfig&lt;/code> (part of step 2 in the graphic below).
Via the OS extension the new file (with its content in clear-text) gets passed to the corresponding &lt;code>Worker&lt;/code> resource.&lt;/p>
&lt;p>The &lt;code>Worker&lt;/code> controller has to guarantee that:&lt;/p>
&lt;ul>
&lt;li>a bootstrap token is created.&lt;/li>
&lt;li>the &lt;code>&amp;lt;&amp;lt;BOOTSTRAP_TOKEN&amp;gt;&amp;gt;&lt;/code> in the user data is replaced by the generated token.
One implementation of that is depicted in the picture where the machine-controller-manager creates a temporary token and replaces the placeholder.&lt;/li>
&lt;/ul>
&lt;p>As part of the user-data the bootstrap-token is placed on the newly created VM under a defined path.
The cloud-config-script will then refer to the file path of the added bootstrap token in the kubelet-bootstrap script.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/bootstrap_token_c9a050.png" alt="Bootstrap flow with shortlived bootstrapTokens">&lt;/p>
&lt;h3 id="compatibility-matrix-for-node-bootstrap-token">Compatibility matrix for node bootstrap-token&lt;/h3>
&lt;p>With Gardener v1.23, we replaced the long-valid bootstrap-token shared between nodes with a short-lived token unique for each node, ref: &lt;a href="https://github.com/gardener/gardener/issues/3898">#3898&lt;/a>.&lt;/p>
&lt;p>❗ When updating to Gardener version &amp;gt;=1.35 the old bootstrap-token will be removed. You are required to update your extensions to the following versions when updating Gardener:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Extension&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Release Date&lt;/th>
&lt;th>Pull Request&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>os-gardenlinux&lt;/td>
&lt;td>v0.9.0&lt;/td>
&lt;td>2 Jul&lt;/td>
&lt;td>&lt;a href="https://github.com/gardener/gardener-extension-os-gardenlinux/pull/29">https://github.com/gardener/gardener-extension-os-gardenlinux/pull/29&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>os-suse-chost&lt;/td>
&lt;td>v1.11.0&lt;/td>
&lt;td>2 Jul&lt;/td>
&lt;td>&lt;a href="https://github.com/gardener/gardener-extension-os-suse-chost/pull/41">https://github.com/gardener/gardener-extension-os-suse-chost/pull/41&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>os-ubuntu&lt;/td>
&lt;td>v1.11.0&lt;/td>
&lt;td>2 Jul&lt;/td>
&lt;td>&lt;a href="https://github.com/gardener/gardener-extension-os-ubuntu/pull/42">https://github.com/gardener/gardener-extension-os-ubuntu/pull/42&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>os-flatcar&lt;/td>
&lt;td>v1.7.0&lt;/td>
&lt;td>2 Jul&lt;/td>
&lt;td>&lt;a href="https://github.com/gardener/gardener-extension-os-coreos/pull/24">https://github.com/gardener/gardener-extension-os-coreos/pull/24&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>infrastructure-provider using Machine Controller Manager&lt;/td>
&lt;td>varies&lt;/td>
&lt;td>~ end of 2019&lt;/td>
&lt;td>&lt;a href="https://github.com/gardener/machine-controller-manager/pull/351">https://github.com/gardener/machine-controller-manager/pull/351&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>⚠️ If you run a provider extension that does not use Machine Controller Manager (MCM) you need to implement the functionality of creating a temporary bootstrap-token before updating your Gardener version to v1.35 or higher.
All provider extensions maintained in &lt;a href="https://github.com/gardener/">https://github.com/gardener/&lt;/a> use MCM.&lt;/p>
&lt;h2 id="how-does-gardener-update-the-user-data-on-already-existing-machines">How does Gardener update the user-data on already existing machines?&lt;/h2>
&lt;p>With ongoing development and new releases of Gardener some new components could be required to get installed onto every shoot worker VM, or existing components need to be changed.
Gardener achieves that by simply updating the user-data inside the &lt;code>Secret&lt;/code>s mentioned above (step 1).
The &lt;code>downloader&lt;/code> script is continuously (every 30s) reading the secret&amp;rsquo;s content (which might include an updated user-data) and storing it onto the disk.
In order to re-apply the (new) downloaded data the secrets do not only contain the &amp;ldquo;original&amp;rdquo; user-data but also another short script (called &amp;ldquo;execution&amp;rdquo; script).
This script checks whether the downloaded user-data differs from the one previously applied - and if required - re-applies it.
After that it uses &lt;code>systemctl&lt;/code> to restart the installed &lt;code>systemd&lt;/code> units.&lt;/p>
&lt;p>With the help of the execution script Gardener can centrally control how machines are updated without the need of OS providers to (re-)implement that logic.
However, as stated in the mentioned requirements above, the execution script assumes existence of Docker and &lt;code>systemd&lt;/code>.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-operating-system">What needs to be implemented to support a new operating system?&lt;/h2>
&lt;p>As part of the shoot flow Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: OperatingSystemConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: &amp;lt;my-operating-system&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: reconcile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reloadConfigFilePath: /var/lib/cloud-config-downloader/cloud-config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> units:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: docker.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dropIns:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: 10-docker-opts.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [Service]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Environment=&amp;#34;DOCKER_OPTS=--log-opt max-size=60m --log-opt max-file=3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: docker-monitor.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> command: start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [Unit]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Description=Docker-monitor daemon
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> After=kubelet.service
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [Install]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> WantedBy=multi-user.target
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [Service]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Restart=always
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> EnvironmentFile=/etc/environment
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> ExecStart=/opt/bin/health-monitor docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> files:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - path: /var/lib/kubelet/ca.crt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> permissions: 0644
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> encoding: b64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: default-token-5dtjz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataKey: token
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - path: /etc/sysctl.d/99-k8s-general.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> permissions: 0644
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inline:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> # A higher vm.max_map_count is great for elasticsearch, mongo, or other mmap users
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> # See https://github.com/kubernetes/kops/issues/1340
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> vm.max_map_count = 135217728&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to support a new operating system you need to write a controller that watches all &lt;code>OperatingSystemConfig&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-operating-system&amp;gt;&lt;/code>.
For those it shall generate a configuration blob that fits to your operating system.
For example, a CoreOS controller might generate a &lt;a href="https://coreos.com/os/docs/latest/cloud-config.html">CoreOS cloud-config&lt;/a> or &lt;a href="https://coreos.com/ignition/docs/latest/what-is-ignition.html">Ignition&lt;/a>, SLES might generate &lt;a href="https://cloudinit.readthedocs.io/en/latest/">cloud-init&lt;/a>, and others might simply generate a bash script translating the &lt;code>.spec.units&lt;/code> into &lt;code>systemd&lt;/code> units, and &lt;code>.spec.files&lt;/code> into real files on the disk.&lt;/p>
&lt;p>&lt;code>OperatingSystemConfig&lt;/code>s can have two purposes which can be used (or ignored) by the extension controllers: either &lt;code>provision&lt;/code> or &lt;code>reconcile&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>The &lt;code>provision&lt;/code> purpose is used by Gardener for the user-data that it later passes to the machine-controller-manager (and then to the provider&amp;rsquo;s API) when creating new VMs. It contains the &lt;code>downloader&lt;/code> unit.&lt;/li>
&lt;li>The &lt;code>reconcile&lt;/code> purpose contains the &amp;ldquo;original&amp;rdquo; user-data (that is then stored in &lt;code>Secret&lt;/code>s in the shoot&amp;rsquo;s &lt;code>kube-system&lt;/code> namespace (see step 1). This is downloaded and applies late (see step 5).&lt;/li>
&lt;/ul>
&lt;p>As described above, the &amp;ldquo;original&amp;rdquo; user-data must be re-applicable to allow in-place updates.
The way how this is done is specific to the generated operating system config (e.g., for CoreOS cloud-init the command is &lt;code>/usr/bin/coreos-cloudinit --from-file=&amp;lt;path&amp;gt;&lt;/code>, whereas SLES would run &lt;code>cloud-init --file &amp;lt;path&amp;gt; single -n write_files --frequency=once&lt;/code>).
Consequently, besides the generated OS config, the extension controller must also provide a command for re-application an updated version of the user-data.
As visible in the mentioned examples the command requires a path to the user-data file.
Gardener will provide the path to the file in the &lt;code>OperatingSystemConfig&lt;/code>s &lt;code>.spec.reloadConfigFilePath&lt;/code> field (only if &lt;code>.spec.purpose=reconcile&lt;/code>).
As soon as Gardener detects that the user data has changed it will reload the systemd daemon and restart all the units provided in the &lt;code>.status.units[]&lt;/code> list (see below example). The same logic applies during the very first application of the whole configuration.&lt;/p>
&lt;p>After generation extension controllers are asked to store their OS config inside a &lt;code>Secret&lt;/code> (as it might contain confidential data) in the same namespace.
The secret&amp;rsquo;s &lt;code>.data&lt;/code> could look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: osc-result-pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ownerReferences:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blockOwnerDeletion: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> controller: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: OperatingSystemConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uid: 99c0c5ca-19b9-11e9-9ebd-d67077b40f82
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloud_config: base64(generated-user-data)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, the secret&amp;rsquo;s metadata, the OS-specific command to re-apply the configuration, and the list of &lt;code>systemd&lt;/code> units that shall be considered to be restarted if an updated version of the user-data is re-applied must be provided in the &lt;code>OperatingSystemConfig&lt;/code>&amp;rsquo;s &lt;code>.status&lt;/code> field:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: osc-result-pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> command: /usr/bin/coreos-cloudinit --from-file=/var/lib/cloud-config-downloader/cloud-config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description: Successfully generated cloud config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastUpdateTime: &lt;span style="color:#a31515">&amp;#34;2019-01-23T07:45:23Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> progress: 100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: Succeeded
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: Reconcile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> observedGeneration: 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> units:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - docker-monitor.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(The &lt;code>.status.command&lt;/code> field is optional and must only be provided if &lt;code>.spec.reloadConfigFilePath&lt;/code> exists).&lt;/p>
&lt;p>Once the &lt;code>.status&lt;/code> indicates that the extension controller finished reconciling Gardener will continue with the next step of the shoot reconciliation flow.&lt;/p>
&lt;h2 id="cri-support">CRI Support&lt;/h2>
&lt;p>Gardener supports specifying Container Runtime Interface (CRI) configuration in the &lt;code>OperatingSystemConfig&lt;/code> resource. If the &lt;code>.spec.cri&lt;/code> section exists then the &lt;code>name&lt;/code> property is mandatory. The only supported values for &lt;code>cri.name&lt;/code> at the moment are: &lt;code>containerd&lt;/code> and &lt;code>docker&lt;/code>, which uses the in-tree dockershim.
For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: OperatingSystemConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: &amp;lt;my-operating-system&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: reconcile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reloadConfigFilePath: /var/lib/cloud-config-downloader/cloud-config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cri:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: containerd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To support ContainerD, an OS extension must :&lt;/p>
&lt;ol>
&lt;li>The operating system must have built-in &lt;a href="https://containerd.io/">ContainerD&lt;/a> and the &lt;a href="https://github.com/projectatomic/containerd/blob/master/docs/cli.md/">Client CLI&lt;/a>&lt;/li>
&lt;li>ContainerD must listen on its default socket path: &lt;code>unix:///run/containerd/containerd.sock&lt;/code>&lt;/li>
&lt;li>ContainerD must be configured to work with the default configuration file in: &lt;code>/etc/containerd/config.toml&lt;/code> (Created by Gardener).&lt;/li>
&lt;/ol>
&lt;p>If CRI configurations are not supported it is recommended create a validating webhook running in the garden cluster that prevents specifying the &lt;code>.spec.providers.workers[].cri&lt;/code> section in the &lt;code>Shoot&lt;/code> objects.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_operatingsystemconfig.go">&lt;code>OperatingSystemConfig&lt;/code> API (Golang specification)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/operation/botanist/component/extensions/operatingsystemconfig/downloader/templates/scripts/download-cloud-config.tpl.sh">&lt;code>downloader&lt;/code> script&lt;/a> (fetching the &amp;ldquo;original&amp;rdquo; user-data and the execution script)&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/tree/master/pkg/operation/botanist/component/extensions/operatingsystemconfig/original/components">Original user-data templates&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/operation/botanist/component/extensions/operatingsystemconfig/executor/templates/scripts/execute-cloud-config.tpl.sh">Execution script&lt;/a> (applying the &amp;ldquo;original&amp;rdquo; user-data)&lt;/li>
&lt;/ul></description></item><item><title>Docs: Overview</title><link>https://gardener.cloud/docs/gardener/extensions/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/overview/</guid><description>
&lt;h1 id="extensibility-overview">Extensibility overview&lt;/h1>
&lt;p>Initially, everything was developed in-tree in the Gardener project. All cloud providers and the configuration for all the supported operating systems were released together with the Gardener core itself.
But as the project grew, it got more and more difficult to add new providers and maintain the existing code base.
As a consequence and in order to become agile and flexible again, we proposed &lt;a href="https://gardener.cloud/docs/gardener/proposals/01-extensibility/">GEP-1&lt;/a> (Gardener Enhancement Proposal).
The document describes an out-of-tree extension architecture that keeps the Gardener core logic independent of provider-specific knowledge (similar to what Kubernetes has achieved with &lt;a href="https://github.com/kubernetes/enhancements/issues/88">out-of-tree cloud providers&lt;/a> or with &lt;a href="https://github.com/kubernetes/community/pull/1258">CSI volume plugins&lt;/a>).&lt;/p>
&lt;h2 id="basic-concepts">Basic concepts&lt;/h2>
&lt;p>Gardener keeps running in the &amp;ldquo;garden cluster&amp;rdquo; and implements the core logic of shoot cluster reconciliation/deletion.
Extensions are Kubernetes controllers themselves (like Gardener) and run in the seed clusters.
As usual, we try to use Kubernetes wherever applicable.
We rely on Kubernetes extension concepts in order to enable extensibility for Gardener.
The main ideas of GEP-1 are the following:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>During the shoot reconciliation process Gardener will write CRDs into the seed cluster that are watched and managed by the extension controllers. They will reconcile (based on the &lt;code>.spec&lt;/code>) and report whether everything went well or errors occurred in the CRD&amp;rsquo;s &lt;code>.status&lt;/code> field.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Gardener keeps deploying the provider-independent control plane components (etcd, kube-apiserver, etc.). However, some of these components might still need little customization by providers, e.g., additional configuration, flags, etc. In this case, the extension controllers register webhooks in order to manipulate the manifests.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Example 1&lt;/strong>:&lt;/p>
&lt;p>Gardener creates a new AWS shoot cluster and requires the preparation of infrastructure in order to proceed (networks, security groups, etc.).
It writes the following CRD into the seed cluster:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--core--aws-01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vpc:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: 10.250.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> internal:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 10.250.112.0/22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 10.250.96.0/22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 10.250.0.0/19
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zones:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - eu-west-1a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dns:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiserver: api.aws-01.core.example.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-aws-credentials
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sshPublicKey: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> &lt;/span> base64(key)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please note that the &lt;code>.spec.providerConfig&lt;/code> is a raw blob and not evaluated or known in any way by Gardener.
Instead, it was specified by the user (in the &lt;code>Shoot&lt;/code> resource) and just &amp;ldquo;forwarded&amp;rdquo; to the extension controller.
Only the AWS controller understands this configuration and will now start provisioning/reconciling the infrastructure.
It reports in the &lt;code>.status&lt;/code> field the result:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> observedGeneration: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastError: ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerStatus:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureStatus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vpc:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: vpc-1234
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subnets:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: subnet-acbd1234
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: workers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> securityGroups:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: sg-xyz12345
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: workers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iam:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodesRoleARN: &amp;lt;some-arn&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instanceProfileName: foo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ec2:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keyName: bar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gardener waits until the &lt;code>.status.lastOperation&lt;/code>/&lt;code>.status.lastError&lt;/code> indicates that the operation reached a final state and either continuous with the next step or stops and reports the potential error.
The extension-specific output in &lt;code>.status.providerStatus&lt;/code> is - similar to &lt;code>.spec.providerConfig&lt;/code> - not evaluated and simply forwarded to CRDs in subsequent steps.&lt;/p>
&lt;p>&lt;strong>Example 2&lt;/strong>:&lt;/p>
&lt;p>Gardener deploys the control plane components into the seed cluster, e.g. the &lt;code>kube-controller-manager&lt;/code> deployment with the following flags:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: apps/v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Deployment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> containers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - command:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - /usr/local/bin/kube-controller-manager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --allocate-node-cidrs=true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --attach-detach-reconcile-sync-period=1m0s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --controllers=*,bootstrapsigner,tokencleaner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --cluster-cidr=100.96.0.0/11
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --cluster-name=shoot--core--aws-01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --cluster-signing-cert-file=/srv/kubernetes/ca/ca.crt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --cluster-signing-key-file=/srv/kubernetes/ca/ca.key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --concurrent-deployment-syncs=10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --concurrent-replicaset-syncs=10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The AWS controller requires some additional flags in order to make the cluster functional.
It needs to provide a Kubernetes cloud-config and also some cloud-specific flags.
Consequently, it registers a &lt;code>MutatingWebhookConfiguration&lt;/code> on &lt;code>Deployment&lt;/code>s and adds these flags to the container:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> - --cloud-provider=external
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --external-cloud-volume-plugin=aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - --cloud-config=/etc/kubernetes/cloudprovider/cloudprovider.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course, it would have needed to create a &lt;code>ConfigMap&lt;/code> containing the cloud config and to add the proper &lt;code>volume&lt;/code> and &lt;code>volumeMounts&lt;/code> to the manifest as well.&lt;/p>
&lt;p>(Please note for this special example: The Kubernetes community is also working on making the &lt;code>kube-controller-manager&lt;/code> provider-independent.
However, there will most probably be still components other than the &lt;code>kube-controller-manager&lt;/code> which need to be adapted by extensions.)&lt;/p>
&lt;p>If you are interested in writing an extension, or generally in digging deeper to find out the nitty-gritty details of the extension concepts please read &lt;a href="https://gardener.cloud/docs/gardener/proposals/01-extensibility/">GEP-1&lt;/a>.
We are truly looking forward to your feedback!&lt;/p>
&lt;h2 id="current-status">Current status&lt;/h2>
&lt;p>Meanwhile, the out-of-tree extension architecture of Gardener is in place and has been productively validated. We are tracking all internal and external extensions of Gardener in the repo: &lt;a href="https://github.com/gardener/gardener/tree/master/extensions#known-extension-implementations">Gardener Extensions Library&lt;/a>.&lt;/p></description></item><item><title>Docs: Project Roles</title><link>https://gardener.cloud/docs/gardener/extensions/project-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/project-roles/</guid><description>
&lt;h1 id="extending-project-roles">Extending project roles&lt;/h1>
&lt;p>The &lt;code>Project&lt;/code> resource allows to specify a list of roles for every member (&lt;code>.spec.members[*].roles&lt;/code>).
There are a few standard roles defined by Gardener itself.
Please consult &lt;a href="https://gardener.cloud/docs/gardener/usage/projects/">this document&lt;/a> for further information.&lt;/p>
&lt;p>However, extension controllers running in the garden cluster may also create &lt;code>CustomResourceDefinition&lt;/code>s that project members might be able to CRUD.
For this purpose Gardener also allows to specify extension roles.&lt;/p>
&lt;p>An extension role is prefixed with &lt;code>extension:&lt;/code>, e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Project
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> members:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - apiGroup: rbac.authorization.k8s.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: User
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: alice.doe@example.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> role: admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> roles:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - owner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - extension:foo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The project controller will, for every extension role, create a &lt;code>ClusterRole&lt;/code> with name &lt;code>name: gardener.cloud:extension:project:&amp;lt;projectName&amp;gt;:&amp;lt;roleName&amp;gt;&lt;/code>, i.e., for above example: &lt;code>name: gardener.cloud:extension:project:dev:foo&lt;/code>.
This &lt;code>ClusterRole&lt;/code> aggregates other &lt;code>ClusterRole&lt;/code>s that are labeled with &lt;code>rbac.gardener.cloud/aggregate-to-extension-role=foo&lt;/code> which might be created by extension controllers.&lt;/p>
&lt;p>Extension that might want to contribute to the core &lt;code>admin&lt;/code> or &lt;code>viewer&lt;/code> roles can use the labels &lt;code>rbac.gardener.cloud/aggregate-to-project-member=true&lt;/code> or &lt;code>rbac.gardener.cloud/aggregate-to-project-viewer=true&lt;/code>, respectively.&lt;/p>
&lt;p>Please note that the names of the extension roles are restricted to 20 characters!&lt;/p>
&lt;p>Moreover, the project controller will also create a corresponding &lt;code>RoleBinding&lt;/code> with the same name in the project namespace.
It will automatically assign all members that are assigned to this extension role.&lt;/p></description></item><item><title>Docs: Provider Local</title><link>https://gardener.cloud/docs/gardener/extensions/provider-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/provider-local/</guid><description>
&lt;h1 id="local-provider-extension">Local Provider Extension&lt;/h1>
&lt;p>The &amp;ldquo;local provider&amp;rdquo; extension is used to allow the usage of seed and shoot clusters which run entirely locally without any real infrastructure or cloud provider involved.
It implements Gardener&amp;rsquo;s extension contract (&lt;a href="https://gardener.cloud/docs/gardener/proposals/01-extensibility/">GEP-1&lt;/a>) and thus comprises several controllers and webhooks acting on resources in seed and shoot clusters.&lt;/p>
&lt;p>The code is maintained in &lt;a href="https://github.com/gardener/gardener/tree/master/pkg/provider-local">&lt;code>pkg/provider-local&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>The motivation for maintaining such extension is the following:&lt;/p>
&lt;ul>
&lt;li>🛡 Output Qualification: Run fast and cost-efficient end-to-end tests, locally and in CI systems (increased confidence ⛑ before merging pull requests)&lt;/li>
&lt;li>⚙️ Development Experience: Develop Gardener entirely on a local machine without any external resources involved (improved costs 💰 and productivity 🚀)&lt;/li>
&lt;li>🤝 Open Source: Quick and easy setup for a first evaluation of Gardener and a good basis for first contributions&lt;/li>
&lt;/ul>
&lt;h2 id="current-limitations">Current Limitations&lt;/h2>
&lt;p>The following enlists the current limitations of the implementation.
Please note that all of them are no technical limitations/blockers but simply advanced scenarios that we haven&amp;rsquo;t had invested yet into.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Shoot clusters can only have one node when &lt;code>.spec.networking.type=local&lt;/code>.&lt;/p>
&lt;p>&lt;em>We use &lt;a href="https://github.com/kubernetes-sigs/kind/blob/main/images/kindnetd/README.md">kindnetd&lt;/a> as CNI plugin in shoot clusters and didn&amp;rsquo;t invest into making it work with multiple worker nodes.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>NetworkPolicy&lt;/code>s are not effective.&lt;/p>
&lt;p>&lt;em>&lt;code>kindnetd&lt;/code> does not ship any controller for Kubernetes &lt;code>NetworkPolicy&lt;/code>s, hence, they are not effective. Typically, the same applies for the local seed cluster unless a different CNI plugin is pro-actively installed.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Shoot clusters don&amp;rsquo;t support persistent storage.&lt;/p>
&lt;p>&lt;em>We don&amp;rsquo;t install any CSI plugin into the shoot cluster yet, hence, there is no persistent storage for shoot clusters.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>No support for ETCD backups.&lt;/p>
&lt;p>&lt;em>We have not yet implemented the &lt;a href="https://gardener.cloud/docs/gardener/extensions/backupbucket/">&lt;code>BackupBucket&lt;/code>&lt;/a>/&lt;a href="https://gardener.cloud/docs/gardener/extensions/backupentry/">&lt;code>BackupEntry&lt;/code>&lt;/a> extension API, hence, there is no support for ETCD backups.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>No owner TXT &lt;code>DNSRecord&lt;/code>s (hence, no &lt;a href="https://gardener.cloud/docs/gardener/proposals/17-shoot-control-plane-migration-bad-case/">&amp;ldquo;bad-case&amp;rdquo; control plane migration&lt;/a>).&lt;/p>
&lt;p>&lt;em>In order to realize DNS (see &lt;a href="#implementation-details">Implementation Details&lt;/a> section below), the &lt;code>/etc/hosts&lt;/code> file is manipulated. This does not work for TXT records. In the future, we could look into using &lt;a href="https://coredns.io/">CoreDNS&lt;/a> instead.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>No load balancers for Shoot clusters.&lt;/p>
&lt;p>&lt;em>We have not yet developed a &lt;code>cloud-controller-manager&lt;/code> which could reconcile load balancer &lt;code>Service&lt;/code>s in the shoot cluster. Hence, when the gardenlet&amp;rsquo;s &lt;code>ReversedVPN&lt;/code> feature gate is disabled then the &lt;code>kube-system/vpn-shoot&lt;/code> &lt;code>Service&lt;/code> must be manually patched (with &lt;code>{&amp;quot;status&amp;quot;: {&amp;quot;loadBalancer&amp;quot;: {&amp;quot;ingress&amp;quot;: [{&amp;quot;hostname&amp;quot;: &amp;quot;vpn-shoot&amp;quot;}]}}}&lt;/code>) to make the reconciliation work.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Only one shoot cluster possible when gardenlet&amp;rsquo;s &lt;code>APIServerSNI&lt;/code> feature gate is disabled.&lt;/p>
&lt;p>&lt;em>When &lt;a href="https://gardener.cloud/docs/gardener/proposals/08-shoot-apiserver-via-sni/">&lt;code>APIServerSNI&lt;/code>&lt;/a> is disabled then gardenlet uses load balancer &lt;code>Service&lt;/code>s in order to expose the shoot clusters&amp;rsquo; &lt;code>kube-apiserver&lt;/code>s. Typically, local Kubernetes clusters don&amp;rsquo;t support this. In this case, the local extension uses the host IP to expose the &lt;code>kube-apiserver&lt;/code>, however, this can only be done once.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dependency-Watchdog cannot be enabled.&lt;/p>
&lt;p>&lt;em>The &lt;code>dependency-watchdog&lt;/code> needs to be able to resolve the shoot cluster&amp;rsquo;s DNS names. It is not yet able to do so, hence, it cannot be enabled.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Ingress&lt;/code>es exposed in the seed cluster are not reachable.&lt;/p>
&lt;p>&lt;em>There is no DNS resolution for the domains used for &lt;code>Ingress&lt;/code>es in the seed cluster yet, hence, they are not reachable. Consequently, the &lt;a href="https://gardener.cloud/docs/gardener/deployment/configuring_logging/#enable-logs-from-the-shoots-node-systemd-services">shoot node logging&lt;/a> feature does not work end-to-end.&lt;/em>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="implementation-details">Implementation Details&lt;/h2>
&lt;p>This section contains information about how the respective controllers and webhooks are implemented and what their purpose is.&lt;/p>
&lt;h3 id="bootstrapping">Bootstrapping&lt;/h3>
&lt;p>The Helm chart of the &lt;code>provider-local&lt;/code> extension defined in its &lt;a href="https://gardener.cloud/docs/gardener/extensions/controllerregistration/">&lt;code>ControllerDeployment&lt;/code>&lt;/a> contains a special deployment for a &lt;a href="https://coredns.io/">CoreDNS&lt;/a> instance in a &lt;code>gardener-extension-provider-local-coredns&lt;/code> namespace in the seed cluster.&lt;/p>
&lt;p>This CoreDNS instance is responsible for enabling the components running in the shoot clusters to be able to resolve the DNS names when they communicate with their &lt;code>kube-apiserver&lt;/code>s.&lt;/p>
&lt;p>It contains static configuration to resolve the DNS names based on &lt;code>local.gardener.cloud&lt;/code> to either the &lt;code>istio-ingressgateway.istio-ingress.svc&lt;/code> or the &lt;code>kube-apiserver.&amp;lt;shoot-namespace&amp;gt;.svc&lt;/code> addresses (depending on whether the &lt;code>--apiserver-sni-enabled&lt;/code> flag is set to &lt;code>true&lt;/code> or &lt;code>false&lt;/code>).&lt;/p>
&lt;h3 id="controllers">Controllers&lt;/h3>
&lt;p>There are controllers for all resources in the &lt;code>extensions.gardener.cloud/v1alpha1&lt;/code> API group except for &lt;code>BackupBucket&lt;/code> and &lt;code>BackupEntry&lt;/code>s.&lt;/p>
&lt;h4 id="controlplane">&lt;code>ControlPlane&lt;/code>&lt;/h4>
&lt;p>This controller is not deploying anything since we haven&amp;rsquo;t invested yet into a &lt;code>cloud-controller-manager&lt;/code> or CSI solution.
For the latter, we could probably use the &lt;a href="https://github.com/rancher/local-path-provisioner">local-path-provisioner&lt;/a>.&lt;/p>
&lt;h4 id="dnsrecord">&lt;code>DNSRecord&lt;/code>&lt;/h4>
&lt;p>This controller manipulates the &lt;code>/etc/hosts&lt;/code> file and adds a new line for each &lt;code>DNSRecord&lt;/code> it observes.
This enables accessing the shoot clusters from the respective machine, however, it also requires to run the extension with elevated privileges (&lt;code>sudo&lt;/code>).&lt;/p>
&lt;p>The &lt;code>/etc/hosts&lt;/code> would be extended as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span># Begin of gardener-extension-provider-local section
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10.84.23.24 api.local.local.external.local.gardener.cloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>10.84.23.24 api.local.local.internal.local.gardener.cloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># End of gardener-extension-provider-local section
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="infrastructure">&lt;code>Infrastructure&lt;/code>&lt;/h4>
&lt;p>This controller generates a &lt;code>NetworkPolicy&lt;/code> which allows the control plane pods (like &lt;code>kube-apiserver&lt;/code>) to communicate with the worker machine pods (see &lt;a href="#worker">&lt;code>Worker&lt;/code> section&lt;/a>)).&lt;/p>
&lt;p>In addition, it creates a &lt;code>Service&lt;/code> named &lt;code>vpn-shoot&lt;/code> which is only used in case the gardenlet&amp;rsquo;s &lt;code>ReversedVPN&lt;/code> feature gate is disabled.
This &lt;code>Service&lt;/code> enables the &lt;code>vpn-seed&lt;/code> containers in the &lt;code>kube-apiserver&lt;/code> pods in the seed cluster to communicate with the &lt;code>vpn-shoot&lt;/code> pod running in the shoot cluster.&lt;/p>
&lt;h4 id="network">&lt;code>Network&lt;/code>&lt;/h4>
&lt;p>This controller deploys a &lt;code>ManagedResource&lt;/code> which contains the &lt;a href="https://github.com/kubernetes-sigs/kind/blob/main/images/kindnetd/README.md">kindnetd&lt;/a> &lt;code>DaemonSet&lt;/code> which is used as CNI in the shoot clusters.&lt;/p>
&lt;h4 id="operatingsystemconfig">&lt;code>OperatingSystemConfig&lt;/code>&lt;/h4>
&lt;p>This controller leverages the standard &lt;a href="https://github.com/gardener/gardener/tree/master/extensions/pkg/controller/operatingsystemconfig/oscommon">&lt;code>oscommon&lt;/code> library&lt;/a> in order to render a simple cloud-init template which can later be executed by the shoot worker nodes.&lt;/p>
&lt;p>The shoot worker nodes are &lt;code>Pod&lt;/code>s with a container based on the &lt;code>kindest/node&lt;/code> image. This is maintained in &lt;a href="https://github.com/gardener/machine-controller-manager-provider-local/tree/master/node">https://github.com/gardener/machine-controller-manager-provider-local/tree/master/node&lt;/a> and has a special &lt;code>run-userdata&lt;/code> systemd service which executes the cloud-init generated earlier by the &lt;code>OperatingSystemConfig&lt;/code> controller.&lt;/p>
&lt;h4 id="worker">&lt;code>Worker&lt;/code>&lt;/h4>
&lt;p>This controller leverages the standard &lt;a href="https://github.com/gardener/gardener/tree/master/extensions/pkg/controller/worker/genericactuator">generic &lt;code>Worker&lt;/code> actuator&lt;/a> in order to deploy the &lt;a href="https://github.com/gardener/machine-controller-manager">&lt;code>machine-controller-manager&lt;/code>&lt;/a> as well as the &lt;a href="https://github.com/gardener/machine-controller-manager-provider-local">&lt;code>machine-controller-manager-provider-local&lt;/code>&lt;/a>.&lt;/p>
&lt;p>Additionally, it generates the &lt;a href="https://github.com/gardener/machine-controller-manager-provider-local/blob/master/kubernetes/machine-class.yaml">&lt;code>MachineClass&lt;/code>es&lt;/a> and the &lt;code>MachineDeployment&lt;/code>s based on the specification of the &lt;code>Worker&lt;/code> resources.&lt;/p>
&lt;h4 id="dnsprovider">&lt;code>DNSProvider&lt;/code>&lt;/h4>
&lt;p>Due to legacy reasons, the gardenlet still creates &lt;code>DNSProvider&lt;/code> resources part of the &lt;a href="https://github.com/gardener/external-dns-management/">&lt;code>dns.gardener.cloud/v1alpha1&lt;/code> API group&lt;/a>.
Since those are only needed in conjunction with the &lt;a href="https://github.com/gardener/gardener-extension-shoot-dns-service">&lt;code>shoot-dns-service&lt;/code> extension&lt;/a> and have no relevance for the local provider, it just sets their &lt;code>status.state=Ready&lt;/code> to please the expectations.
In the future, this controller can be dropped when the gardenlet no longer creates such &lt;code>DNSProvider&lt;/code>s.&lt;/p>
&lt;h4 id="service">&lt;code>Service&lt;/code>&lt;/h4>
&lt;p>This controller reconciles the &lt;code>istio-ingress/istio-ingressgateway&lt;/code> &lt;code>Service&lt;/code> in the seed cluster if the &lt;code>--apiserver-sni-enabled&lt;/code> flag is set to &lt;code>true&lt;/code> (default).
Otherwise, it reconciles the &lt;code>kube-apiserver&lt;/code> &lt;code>Service&lt;/code> in the shoot namespaces in the seed cluster.&lt;/p>
&lt;p>All such &lt;code>Service&lt;/code>s are of type &lt;code>LoadBalancer&lt;/code>.
Since the local Kubernetes clusters used as seed typically don&amp;rsquo;t support such services, this controller sets the &lt;code>.status.ingress.loadBalancer.ip[0]&lt;/code> to the IP of the host.&lt;/p>
&lt;h4 id="node">&lt;code>Node&lt;/code>&lt;/h4>
&lt;p>This controller reconciles the &lt;code>Node&lt;/code>s of &lt;a href="https://kind.sigs.k8s.io/">kind&lt;/a> clusters.
Typically, the &lt;code>.status.{capacity,allocatable}&lt;/code> values are determined by the resources configured for the Docker daemon (see for example &lt;a href="https://docs.docker.com/desktop/mac/#resources">this&lt;/a> for Mac).
Since many of the &lt;code>Pod&lt;/code>s deployed by Gardener have quite high &lt;code>.spec.resources.{requests,limits}&lt;/code>, the kind &lt;code>Node&lt;/code>s easily get filled up and only a few &lt;code>Pod&lt;/code>s can be scheduled (even if they barely consume any of their reserved resources).
In order to improve the user experience, the controller submits an empty patch which triggers the &amp;ldquo;Node webhook&amp;rdquo; (see below section) in case the &lt;code>.status.{capacity,allocatable}&lt;/code> values are not high enough.
The webhook will increase the capacity of the &lt;code>Node&lt;/code>s to allow all &lt;code>Pod&lt;/code>s to be scheduled.&lt;/p>
&lt;h4 id="health-checks">Health Checks&lt;/h4>
&lt;p>The health check controller leverages the &lt;a href="https://gardener.cloud/docs/gardener/extensions/healthcheck-library/">health check library&lt;/a> in order to&lt;/p>
&lt;ul>
&lt;li>check the health of the &lt;code>ManagedResource/extension-controlplane-shoot-webhooks&lt;/code> and populate the &lt;code>SystemComponentsHealthy&lt;/code> condition in the &lt;code>ControlPlane&lt;/code> resource.&lt;/li>
&lt;li>check the health of the &lt;code>ManagedResource/extension-networking-local&lt;/code> and populate the &lt;code>SystemComponentsHealthy&lt;/code> condition in the &lt;code>Network&lt;/code> resource.&lt;/li>
&lt;li>check the health of the &lt;code>ManagedResource/extension-worker-mcm-shoot&lt;/code> and populate the &lt;code>SystemComponentsHealthy&lt;/code> condition in the &lt;code>Worker&lt;/code> resource.&lt;/li>
&lt;li>check the health of the &lt;code>Deployment/machine-controller-manager&lt;/code> and populate the &lt;code>ControlPlaneHealthy&lt;/code> condition in the &lt;code>Worker&lt;/code> resource.&lt;/li>
&lt;li>check the health of the &lt;code>Node&lt;/code>s and populate the &lt;code>EveryNodeReady&lt;/code> condition in the &lt;code>Worker&lt;/code> resource.&lt;/li>
&lt;/ul>
&lt;h3 id="webhooks">Webhooks&lt;/h3>
&lt;h4 id="control-plane">Control Plane&lt;/h4>
&lt;p>This webhook reacts on the &lt;code>OperatingSystemConfig&lt;/code> containing the configuration of the kubelet and sets the &lt;code>failSwapOn&lt;/code> to &lt;code>false&lt;/code> (independent of what is configured in the &lt;code>Shoot&lt;/code> spec) (&lt;a href="https://github.com/kubernetes-sigs/kind/blob/b6bc112522651d98c81823df56b7afa511459a3b/site/content/docs/design/node-image.md#design">ref&lt;/a>).&lt;/p>
&lt;h4 id="control-plane-exposure">Control Plane Exposure&lt;/h4>
&lt;p>This webhook reacts on the &lt;code>kube-apiserver&lt;/code> &lt;code>Service&lt;/code> in shoot namespaces in the seed in case the gardenlet&amp;rsquo;s &lt;code>APIServerSNI&lt;/code> feature gate is disabled.
It sets the &lt;code>nodePort&lt;/code> to &lt;code>30443&lt;/code> to enable communication from the host (this requires a port mapping to work when creating the local cluster).&lt;/p>
&lt;h4 id="machine-pod">Machine Pod&lt;/h4>
&lt;p>This webhook reacts on &lt;code>Pod&lt;/code>s created when the &lt;code>machine-controller-manager&lt;/code> reconciles &lt;code>Machine&lt;/code>s.
It sets the &lt;code>.spec.dnsPolicy=None&lt;/code> and &lt;code>.spec.dnsConfig.nameServers&lt;/code> to the cluster IP of the &lt;code>coredns&lt;/code> &lt;code>Service&lt;/code> created in the &lt;code>gardener-extension-provider-local-coredns&lt;/code> namespaces (see the &lt;a href="#bootstrapping">Bootstrapping section&lt;/a> for more details).&lt;/p>
&lt;h4 id="node-1">Node&lt;/h4>
&lt;p>This webhook reacts on &lt;a href="https://kind.sigs.k8s.io/">kind&lt;/a> &lt;code>Node&lt;/code>s and sets the &lt;code>.status.{allocatable,capacity}.cpu=&amp;quot;100&amp;quot;&lt;/code> and &lt;code>.status.{allocatable,capacity}.memory=&amp;quot;100Gi&amp;quot;&lt;/code> fields.
See also the above section about the &amp;ldquo;Node controller&amp;rdquo; for more information.&lt;/p>
&lt;h4 id="shoot">Shoot&lt;/h4>
&lt;p>This webhook reacts on the &lt;code>ConfigMap&lt;/code> used by the &lt;code>kube-proxy&lt;/code> and sets the &lt;code>maxPerCore&lt;/code> field to &lt;code>0&lt;/code> since other values don&amp;rsquo;t work well in conjunction with the &lt;code>kindest/node&lt;/code> image which is used as base for the shoot worker machine pods (&lt;a href="https://github.com/kubernetes-sigs/kind/blob/fa7d86470f4c0e924fc4c2e767ec8491c45f4304/pkg/cluster/internal/kubeadm/config.go#L283-L285">ref&lt;/a>).&lt;/p>
&lt;h2 id="future-work">Future Work&lt;/h2>
&lt;p>Future work could mostly focus on resolving above listed &lt;a href="#limitations">limitations&lt;/a>, i.e.,&lt;/p>
&lt;ul>
&lt;li>Add storage support for shoot clusters.&lt;/li>
&lt;li>Implement a &lt;code>cloud-controller-manager&lt;/code> and deploy it via the &lt;a href="#controlplane">&lt;code>ControlPlane&lt;/code> controller&lt;/a>.&lt;/li>
&lt;li>Implement support for &lt;code>BackupBucket&lt;/code> and &lt;code>BackupEntry&lt;/code>s to enable ETCD backups for shoot clusters (based on the support for local disks in &lt;a href="https://github.com/gardener/etcd-backup-restore">&lt;code>etcd-backup-restore&lt;/code>&lt;/a>).&lt;/li>
&lt;li>Switch from &lt;code>kindnetd&lt;/code> to a different CNI plugin which supports &lt;code>NetworkPolicy&lt;/code>s.&lt;/li>
&lt;li>Properly implement &lt;code>.spec.machineTypes&lt;/code> in the &lt;code>CloudProfile&lt;/code>s (i.e., configure &lt;code>.spec.resources&lt;/code> properly for the created shoot worker machine pods).&lt;/li>
&lt;/ul></description></item><item><title>Docs: Reconcile Trigger</title><link>https://gardener.cloud/docs/gardener/extensions/reconcile-trigger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/reconcile-trigger/</guid><description>
&lt;h1 id="reconcile-trigger">Reconcile trigger&lt;/h1>
&lt;p>Gardener dictates the time of reconciliation for resources of the API group &lt;code>extensions.gardener.cloud&lt;/code>.
It does that by annotating the respected resource with &lt;code>gardener.cloud/operation=reconcile&lt;/code>.
Extension controllers shall react to this annotation and start reconciling the resource.
They have to remove this annotation as soon as they begin with their reconcile operation and maintain the &lt;code>status&lt;/code> of the extension resource accordingly.&lt;/p>
&lt;p>The reason for this behaviour is that it is possible to configure Gardener to reconcile only in the shoots&amp;rsquo; maintenance time windows.
In order to avoid that extension controllers reconcile outside of the shoot&amp;rsquo;s maintenance time window we have introduced this contract.
This way extension controllers don&amp;rsquo;t need to care about when the shoot maintenance time window happens.
Gardener keeps control and decides when the shoot shall be reconciled/updated.&lt;/p>
&lt;p>Our &lt;a href="https://github.com/gardener/gardener/blob/master/extensions">extension controller library&lt;/a> provides all the required utilities to conveniently implement this behaviour.&lt;/p></description></item><item><title>Docs: Referenced Resources</title><link>https://gardener.cloud/docs/gardener/extensions/referenced-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/referenced-resources/</guid><description>
&lt;h1 id="referenced-resources">Referenced Resources&lt;/h1>
&lt;p>The Shoot resource can include a list of resources (usually secrets) that can be referenced by name in extension &lt;code>providerConfig&lt;/code> and other Shoot sections, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: crazy-botany
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: foobar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: foobar.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: FooBarConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo: bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef: foobar-secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resources:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: foobar-secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resourceRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-foobar-secret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gardener expects to find these referenced resources in the project namespace (e.g. &lt;code>garden-dev&lt;/code>) and will copy them to the Shoot namespace in the Seed cluster when reconciling a Shoot, adding a prefix to their names to avoid naming collisions with Gardener&amp;rsquo;s own resources.&lt;/p>
&lt;p>Extension controllers can resolve the references to these resources by accessing the Shoot via the &lt;code>Cluster&lt;/code> resource. To properly read a referenced resources, extension controllers should use the utility function &lt;code>GetObjectByReference&lt;/code> from the &lt;code>extensions/pkg/controller&lt;/code> package, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ref = &amp;amp;autoscalingv1.CrossVersionObjectReference{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> APIVersion: &lt;span style="color:#a31515">&amp;#34;v1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Kind: &lt;span style="color:#a31515">&amp;#34;Secret&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Name: &lt;span style="color:#a31515">&amp;#34;foo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secret := &amp;amp;corev1.Secret{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">if&lt;/span> err := controller.GetObjectByReference(ctx, client, ref, &lt;span style="color:#a31515">&amp;#34;shoot--test--foo&amp;#34;&lt;/span>, secret); err != &lt;span style="color:#00f">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">return&lt;/span> err
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Use secret
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Shoot Health Status Conditions</title><link>https://gardener.cloud/docs/gardener/extensions/shoot-health-status-conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/shoot-health-status-conditions/</guid><description>
&lt;h1 id="contributing-to-shoot-health-status-conditions">Contributing to shoot health status conditions&lt;/h1>
&lt;p>Gardener checks regularly (every minute by default) the health status of all shoot clusters.
It categorizes its checks into four different types:&lt;/p>
&lt;ul>
&lt;li>&lt;code>APIServerAvailable&lt;/code>: This type indicates whether the shoot&amp;rsquo;s kube-apiserver is available or not.&lt;/li>
&lt;li>&lt;code>ControlPlaneHealthy&lt;/code>: This type indicates whether all the control plane components deployed to the shoot&amp;rsquo;s namespace in the seed do exist and are running fine.&lt;/li>
&lt;li>&lt;code>EveryNodeReady&lt;/code>: This type indicates whether all &lt;code>Node&lt;/code>s and all &lt;code>Machine&lt;/code> objects report healthiness.&lt;/li>
&lt;li>&lt;code>SystemComponentsHealthy&lt;/code>: This type indicates whether all system components deployed to the &lt;code>kube-system&lt;/code> namespace in the shoot do exist and are running fine.&lt;/li>
&lt;/ul>
&lt;p>Every &lt;code>Shoot&lt;/code> resource has a &lt;code>status.conditions[]&lt;/code> list that contains the mentioned types, together with a &lt;code>status&lt;/code> (&lt;code>True&lt;/code>/&lt;code>False&lt;/code>) and a descriptive message/explanation of the &lt;code>status&lt;/code>.&lt;/p>
&lt;p>Most extension controllers are deploying components and resources as part of their reconciliation flows into the seed or shoot cluster.
A prominent example for this is the &lt;code>ControlPlane&lt;/code> controller that usually deploys a cloud-controller-manager or CSI controllers as part of the shoot control plane.
Now that the extensions deploy resources into the cluster, especially resources that are essential for the functionality of the cluster, they might want to contribute to Gardener&amp;rsquo;s checks mentioned above.&lt;/p>
&lt;h2 id="what-can-extensions-do-to-contribute-to-gardeners-health-checks">What can extensions do to contribute to Gardener&amp;rsquo;s health checks?&lt;/h2>
&lt;p>Every extension resource in Gardener&amp;rsquo;s &lt;code>extensions.gardener.cloud/v1alpha1&lt;/code> API group also has a &lt;code>status.conditions[]&lt;/code> list (like the &lt;code>Shoot&lt;/code>).
Extension controllers can write conditions to the resource they are acting on and use a type that also exist in the shoot&amp;rsquo;s conditions.
One exception is that &lt;code>APIServerAvailable&lt;/code> can&amp;rsquo;t be used as the Gardener clearly can identify the status of this condition and it doesn&amp;rsquo;t make sense for extensions to try to contribute/modify it.&lt;/p>
&lt;p>As an example for the &lt;code>ControlPlane&lt;/code> controller let&amp;rsquo;s take a look at the following resource:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ControlPlane
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: control-plane
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conditions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: ControlPlaneHealthy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;False&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: DeploymentUnhealthy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &amp;#39;Deployment cloud-controller-manager is unhealthy: condition &amp;#34;Available&amp;#34; has
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> invalid status False (expected True) due to MinimumReplicasUnavailable: Deployment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> does not have minimum availability.&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastUpdateTime: &lt;span style="color:#a31515">&amp;#34;2014-05-25T12:44:27Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: ConfigComputedSuccessfully
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;True&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: ConfigCreated
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: The cloud-provider-config has been successfully computed.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastUpdateTime: &lt;span style="color:#a31515">&amp;#34;2014-05-25T12:43:27Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The extension controller has declared in its extension resource that one of the deployments it is responsible for is unhealthy.
Also, it has written a second condition using a type that is unknown by Gardener.&lt;/p>
&lt;p>Gardener will pick the list of conditions and recognize that the there is one with a type &lt;code>ControlPlaneHealthy&lt;/code>.
It will merge it with its own &lt;code>ControlPlaneHealthy&lt;/code> condition and report it back to the &lt;code>Shoot&lt;/code>&amp;rsquo;s status:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shoot.gardener.cloud/status: unhealthy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: some-shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden-core
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conditions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: APIServerAvailable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;True&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: HealthzRequestSucceeded
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: API server /healthz endpoint responded with success status code. [response_time:31ms]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastUpdateTime: &lt;span style="color:#a31515">&amp;#34;2014-05-23T08:26:52Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2014-05-25T12:45:13Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: ControlPlaneHealthy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;False&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: ControlPlaneUnhealthyReport
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &amp;#39;Deployment cloud-controller-manager is unhealthy: condition &amp;#34;Available&amp;#34; has
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> invalid status False (expected True) due to MinimumReplicasUnavailable: Deployment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> does not have minimum availability.&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastUpdateTime: &lt;span style="color:#a31515">&amp;#34;2014-05-25T12:45:13Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2014-05-25T12:45:13Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hence, the only duty extensions have is to maintain the health status of their components in the extension resource they are managing.
This can be accomplished using the &lt;a href="https://gardener.cloud/docs/gardener/extensions/healthcheck-library/">health check library for extensions&lt;/a>.&lt;/p>
&lt;h2 id="error-codes">Error Codes&lt;/h2>
&lt;p>The Gardener API includes some well-defined error codes, e.g., &lt;code>ERR_INFRA_UNAUTHORIZED&lt;/code>, &lt;code>ERR_INFRA_DEPENDENCIES&lt;/code>, etc.
Extension may set these error codes in the &lt;code>.status.conditions[].codes[]&lt;/code> list in case it makes sense.
Gardener will pick them up and will similarly merge them into the &lt;code>.status.conditions[].codes[]&lt;/code> list in the &lt;code>Shoot&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conditions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: ControlPlaneHealthy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;False&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: DeploymentUnhealthy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &amp;#39;Deployment cloud-controller-manager is unhealthy: condition &amp;#34;Available&amp;#34; has
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> invalid status False (expected True) due to MinimumReplicasUnavailable: Deployment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> does not have minimum availability.&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastUpdateTime: &lt;span style="color:#a31515">&amp;#34;2014-05-25T12:44:27Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> codes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ERR_INFRA_UNAUTHORIZED
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Shoot Maintenance</title><link>https://gardener.cloud/docs/gardener/extensions/shoot-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/shoot-maintenance/</guid><description>
&lt;h1 id="shoot-maintenance">Shoot maintenance&lt;/h1>
&lt;p>There is a general &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_maintenance/">document about shoot maintenance&lt;/a> that you might want to read.
Here, we describe how you can influence certain operations that happen during a shoot maintenance.&lt;/p>
&lt;h2 id="restart-control-plane-controllers">Restart Control Plane Controllers&lt;/h2>
&lt;p>As outlined in above linked document, Gardener offers to restart certain control plane controllers running in the seed during a shoot maintenance.&lt;/p>
&lt;p>Extension controllers can extend the amount of pods being affected by these restarts.
If your Gardener extension manages pods of a shoot&amp;rsquo;s control plane (shoot namespace in seed) and it could potentially profit from a regular restart please consider labeling it with &lt;code>maintenance.gardener.cloud/restart=true&lt;/code>.&lt;/p></description></item><item><title>Docs: Shoot Webhooks</title><link>https://gardener.cloud/docs/gardener/extensions/shoot-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/shoot-webhooks/</guid><description>
&lt;h1 id="shoot-resource-customization-webhooks">Shoot resource customization webhooks&lt;/h1>
&lt;p>Gardener deploys several components/resources into the shoot cluster.
Some of these resources are essential (like the &lt;code>kube-proxy&lt;/code>), others are optional addons (like the &lt;code>kubernetes-dashboard&lt;/code> or the &lt;code>nginx-ingress-controller&lt;/code>).
In either case, some provider extensions might need to mutate these resources and inject provider-specific bits into it.&lt;/p>
&lt;h2 id="whats-the-approach-to-implement-such-mutations">What&amp;rsquo;s the approach to implement such mutations?&lt;/h2>
&lt;p>Similar to how &lt;a href="https://gardener.cloud/docs/gardener/extensions/controlplane-webhooks/">control plane components in the seed&lt;/a> are modified we are using &lt;code>MutatingWebhookConfiguration&lt;/code>s to achieve the same for resources in the shoot.
Both, the provider extension and the kube-apiserver of the shoot cluster are running in the same seed.
Consequently, the kube-apiserver can talk cluster-internally to the provider extension webhook which makes such operations even faster.&lt;/p>
&lt;h2 id="how-is-the-mutatingwebhookconfiguration-object-created-in-the-shoot">How is the &lt;code>MutatingWebhookConfiguration&lt;/code> object created in the shoot?&lt;/h2>
&lt;p>The preferred approach is to use a &lt;code>ManagedResource&lt;/code> (see also &lt;a href="https://gardener.cloud/docs/gardener/extensions/managedresources/">this document&lt;/a>) in the seed cluster.
This way the &lt;code>gardener-resource-manager&lt;/code> ensures that end-users cannot delete/modify the webhook configuration.
The provider extension doesn&amp;rsquo;t need to care about the same.&lt;/p>
&lt;h2 id="what-else-is-needed">What else is needed?&lt;/h2>
&lt;p>The shoot&amp;rsquo;s kube-apiserver must be allowed to talk to the provider extension.
To achieve this you need to create a &lt;code>NetworkPolicy&lt;/code> in the shoot namespace.
Our &lt;a href="https://github.com/gardener/gardener/blob/master/extensions">extension controller library&lt;/a> provides easy-to-use utilities and hooks to implement such a webhook.
Please find an exemplary implementation &lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/webhook/shoot">here&lt;/a> and &lt;a href="https://github.com/gardener/gardener-extension-provider-aws/blob/566fe4dd588c93821bc9d22c452203867457c930/cmd/gardener-extension-provider-aws/app/app.go#L170-L174">here&lt;/a>.&lt;/p></description></item><item><title>Docs: Worker</title><link>https://gardener.cloud/docs/gardener/extensions/worker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/worker/</guid><description>
&lt;h1 id="contract-worker-resource">Contract: &lt;code>Worker&lt;/code> resource&lt;/h1>
&lt;p>While the control plane of a shoot cluster is living in the seed and deployed as native Kubernetes workload, the worker nodes of the shoot clusters are normal virtual machines (VMs) in the end-users infrastructure account.
The Gardener project features a sub-project called &lt;a href="https://github.com/gardener/machine-controller-manager">machine-controller-manager&lt;/a>.
This controller is extending the Kubernetes API using custom resource definitions to represent actual VMs as &lt;code>Machine&lt;/code> objects inside a Kubernetes system.
This approach unlocks the possibility to manage virtual machines in the Kubernetes style and benefit from all its design principles.&lt;/p>
&lt;h2 id="what-is-the-machine-controller-manager-exactly-doing">What is the machine-controller-manager exactly doing?&lt;/h2>
&lt;p>Generally, there are provider-specific &lt;code>MachineClass&lt;/code> objects (&lt;code>AWSMachineClass&lt;/code>, &lt;code>AzureMachineClass&lt;/code>, etc.; similar to &lt;code>StorageClass&lt;/code>), and &lt;code>MachineDeployment&lt;/code>, &lt;code>MachineSet&lt;/code>, and &lt;code>Machine&lt;/code> objects (similar to &lt;code>Deployment&lt;/code>, &lt;code>ReplicaSet&lt;/code>, and &lt;code>Pod&lt;/code>).
A machine class describes &lt;strong>where&lt;/strong> and &lt;strong>how&lt;/strong> to create virtual machines (in which networks, region, availability zone, SSH key, user-data for bootstrapping, etc.) while a &lt;code>Machine&lt;/code> results in an actual virtual machine.
You can read up &lt;a href="https://github.com/gardener/machine-controller-manager">more information&lt;/a> in the machine-controller-manager&amp;rsquo;s &lt;a href="https://github.com/gardener/machine-controller-manager">repository&lt;/a>.&lt;/p>
&lt;p>Before the introduction of the &lt;code>Worker&lt;/code> extension resource Gardener was deploying the machine-controller-manager, the machine classes, and the machine deployments itself.
Now, Gardener commissions an external, provider-specific controller to take over these tasks.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-worker-provider">What needs to be implemented to support a new worker provider?&lt;/h2>
&lt;p>As part of the shoot flow Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Worker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cloudprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> infrastructureProviderStatus:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureStatus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ec2:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keyName: shoot--foo--bar-ssh-publickey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iam:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instanceProfiles:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: shoot--foo--bar-nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> roles:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - arn: arn:aws:iam::0123456789:role/shoot--foo--bar-nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vpc:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: vpc-0123456789
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> securityGroups:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: sg-1234567890
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subnets:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: subnet-01234
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: eu-west-1b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: subnet-56789
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: eu-west-1b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: subnet-0123a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: eu-west-1c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: subnet-5678a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: eu-west-1c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pools:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: cpu-worker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minimum: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maximum: 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxSurge: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxUnavailable: 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineType: m4.large
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineImage:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: coreos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> version: 1967.5.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodeTemplate:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> capacity:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cpu: 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gpu: 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memory: 8Gi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userData: c29tZSBkYXRhIHRvIGJvb3RzdHJhcCB0aGUgVk0K
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volume:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size: 20Gi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: gp2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zones:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - eu-west-1b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - eu-west-1c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineControllerManager:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drainTimeout: 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> healthTimeout: 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> creationTimeout: 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxEvictRetries: 30
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodeConditions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ReadonlyFilesystem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - DiskPressure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - KernelDeadlock
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.secretRef&lt;/code> contains a reference to the provider secret pointing to the account that shall be used to create the needed virtual machines.
Also, as you can see, Gardener copies the output of the infrastructure creation (&lt;code>.spec.infrastructureProviderStatus&lt;/code>), see &lt;a href="https://gardener.cloud/docs/gardener/extensions/infrastructure/">&lt;code>Infrastructure&lt;/code> resource&lt;/a>, into the &lt;code>.spec&lt;/code>.&lt;/p>
&lt;p>In the &lt;code>.spec.pools[]&lt;/code> field the desired worker pools are listed.
In the above example, one pool with machine type &lt;code>m4.large&lt;/code> and &lt;code>min=3&lt;/code>, &lt;code>max=5&lt;/code> machines shall be spread over two availability zones (&lt;code>eu-west-1b&lt;/code>, &lt;code>eu-west-1c&lt;/code>).
This information together with the infrastructure status must be used to determine the proper configuration for the machine classes.&lt;/p>
&lt;p>The &lt;code>spec.pools[].nodeTemplate.capacity&lt;/code> field contains the resource information of the machine like &lt;code>cpu&lt;/code>, &lt;code>gpu&lt;/code> and &lt;code>memory&lt;/code>. This info is used by Cluster Autoscaler to generate &lt;code>nodeTemplate&lt;/code> during scaling the &lt;code>nodeGroup&lt;/code> from zero.&lt;/p>
&lt;p>The &lt;code>spec.pools[].machineControllerManager&lt;/code> field allows to configure the settings for machine-controller-manager component. Providers must populate these settings on worker-pool to the related &lt;a href="https://github.com/gardener/machine-controller-manager/blob/master/kubernetes/machine_objects/machine-deployment.yaml#L30-L34">fields&lt;/a> in MachineDeployment.&lt;/p>
&lt;p>When seeing such a resource your controller must make sure that it deploys the machine-controller-manager next to the control plane in the seed cluster.
After that, it must compute the desired machine classes and the desired machine deployments.
Typically, one class maps to one deployment, and one class/deployment is created per availability zone.
Following this convention, the created resource would look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1-3db65
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gardener.cloud/purpose: machineclass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: Opaque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerAccessKeyId: eW91ci1hd3MtYWNjZXNzLWtleS1pZAo=
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerSecretAccessKey: eW91ci1hd3Mtc2VjcmV0LWFjY2Vzcy1rZXkK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userData: c29tZSBkYXRhIHRvIGJvb3RzdHJhcCB0aGUgVk0K
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: machine.sapcloud.io/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: AWSMachineClass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1-3db65
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ami: ami-0123456789 &lt;span style="color:#008000"># Your controller must map the stated version to the provider specific machine image information, in the AWS case the AMI.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blockDevices:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ebs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumeSize: 20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumeType: gp2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iam:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keyName: shoot--foo--bar-ssh-publickey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineType: m4.large
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networkInterfaces:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - securityGroupIDs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - sg-1234567890
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subnetID: subnet-01234
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1-3db65
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tags:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes.io/cluster/shoot--foo--bar: &lt;span style="color:#a31515">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes.io/role/node: &lt;span style="color:#a31515">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: machine.sapcloud.io/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: MachineDeployment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> replicas: 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selector:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matchLabels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strategy:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: RollingUpdate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rollingUpdate:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxSurge: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxUnavailable: 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: AWSMachineClass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1-3db65
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>for the first availability zone &lt;code>eu-west-1b&lt;/code>, and&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z2-5z6as
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gardener.cloud/purpose: machineclass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: Opaque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerAccessKeyId: eW91ci1hd3MtYWNjZXNzLWtleS1pZAo=
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerSecretAccessKey: eW91ci1hd3Mtc2VjcmV0LWFjY2Vzcy1rZXkK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userData: c29tZSBkYXRhIHRvIGJvb3RzdHJhcCB0aGUgVk0K
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: machine.sapcloud.io/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: AWSMachineClass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z2-5z6as
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ami: ami-0123456789 &lt;span style="color:#008000"># Your controller must map the stated version to the provider specific machine image information, in the AWS case the AMI.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blockDevices:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ebs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumeSize: 20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumeType: gp2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iam:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keyName: shoot--foo--bar-ssh-publickey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineType: m4.large
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networkInterfaces:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - securityGroupIDs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - sg-1234567890
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subnetID: subnet-0123a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z2-5z6as
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tags:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes.io/cluster/shoot--foo--bar: &lt;span style="color:#a31515">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes.io/role/node: &lt;span style="color:#a31515">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: machine.sapcloud.io/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: MachineDeployment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> replicas: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selector:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matchLabels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strategy:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: RollingUpdate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rollingUpdate:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxSurge: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxUnavailable: 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: AWSMachineClass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z2-5z6as
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>for the second availability zone &lt;code>eu-west-1c&lt;/code>.&lt;/p>
&lt;p>Another convention is the 5-letter hash at the end of the machine class names.
Most controllers compute a checksum out of the specification of the machine class.
This helps to trigger a rolling update of the worker nodes if, for example, the machine image version changes.
In this case, a new checksum will be generated which results in the creation of a new machine class.
The &lt;code>MachineDeployment&lt;/code>&amp;rsquo;s machine class reference (&lt;code>.spec.template.spec.class.name&lt;/code>) is updated which triggers the rolling update process in the machine-controller-manager.
However, all of this is only a convention that eases writing the controller, but you can do it completely differently if you desire - as long as you make sure that the described behaviours are implemented correctly.&lt;/p>
&lt;p>After the machine classes and machine deployments have been created the machine-controller-manager will start talking to the provider&amp;rsquo;s IaaS API and create the virtual machines.
Gardener makes sure that the content of the &lt;code>userData&lt;/code> field that is used to bootstrap the machines contain the required configuration for installation of the kubelet and registering the VM as worker node in the shoot cluster.
The &lt;code>Worker&lt;/code> extension controller shall wait until all the created &lt;code>MachineDeployment&lt;/code>s indicate healthiness/readiness before it ends the control loop.&lt;/p>
&lt;h2 id="does-gardener-need-some-information-that-must-be-returned-back">Does Gardener need some information that must be returned back?&lt;/h2>
&lt;p>Another important benefit of the machine-controller-manager&amp;rsquo;s design principles (extending the Kubernetes API using CRDs) is that the &lt;a href="https://github.com/gardener/autoscaler">cluster-autoscaler&lt;/a> can be used &lt;strong>without&lt;/strong> any provider-specific implementation.
We have forked the &lt;a href="https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler">upstream Kubernetes community&amp;rsquo;s cluster-autoscaler&lt;/a> and extended it so that it understands the machine API.
Definitely, we will merge it back into the community&amp;rsquo;s versions once it has been adapted properly.&lt;/p>
&lt;p>Our cluster-autoscaler only needs to know the minimum and maximum number of replicas &lt;strong>per&lt;/strong> &lt;code>MachineDeployment&lt;/code> and is ready to act without that it needs to talk to the provider APIs (it just modifies the &lt;code>.spec.replicas&lt;/code> field in the &lt;code>MachineDeployment&lt;/code> object).
Gardener deploys this autoscaler if there is at least one worker pool that specifies &lt;code>max&amp;gt;min&lt;/code>.
In order to know how it needs to configure it, the provider-specific &lt;code>Worker&lt;/code> extension controller must expose which &lt;code>MachineDeployment&lt;/code>s it had created and how the &lt;code>min&lt;/code>/&lt;code>max&lt;/code> numbers should look like.&lt;/p>
&lt;p>Consequently, your controller should write this information into the &lt;code>Worker&lt;/code> resource&amp;rsquo;s &lt;code>.status.machineDeployments&lt;/code> field:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Worker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: worker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineDeployments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minimum: 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maximum: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: shoot--foo--bar-cpu-worker-z2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minimum: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maximum: 2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to support a new worker provider you need to write a controller that watches all &lt;code>Worker&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code>.
You can take a look at the below referenced example implementation for the AWS provider.&lt;/p>
&lt;h2 id="that-sounds-like-a-lot-that-needs-to-be-done-can-you-help-me">That sounds like a lot that needs to be done, can you help me?&lt;/h2>
&lt;p>All of the described behaviour is mostly the same for every provider.
The only difference is maybe the version/configuration of the machine-controller-manager, and the machine class specification itself.
You can take a look at our &lt;a href="https://github.com/gardener/gardener/blob/master/extensions">extension library&lt;/a>, especially the &lt;a href="https://github.com/gardener/gardener/tree/master/extensions/pkg/controller/worker">worker controller&lt;/a> part where you will find a lot of utilities that you can use.
Also, using the library you only need to implement your provider specifics - all the things that can be handled generically can be taken for free and do not need to be re-implemented.
Take a look at the &lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/worker">AWS worker controller&lt;/a> for finding an example.&lt;/p>
&lt;h2 id="non-provider-specific-information-required-for-worker-creation">Non-provider specific information required for worker creation&lt;/h2>
&lt;p>All the providers require further information that is not provider specific but already part of the shoot resource.
One example for such information is whether the shoot is hibernated or not.
In this case all the virtual machines should be deleted/terminated, and after that the machine controller-manager should be scaled down.
You can take a look at the &lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/worker">AWS worker controller&lt;/a> to see how it reads this information and how it is used.
As Gardener cannot know which information is required by providers it simply mirrors the &lt;code>Shoot&lt;/code>, &lt;code>Seed&lt;/code>, and &lt;code>CloudProfile&lt;/code> resources into the seed.
They are part of the &lt;a href="https://gardener.cloud/docs/gardener/extensions/cluster/">&lt;code>Cluster&lt;/code> extension resource&lt;/a> and can be used to extract information that is not part of the &lt;code>Worker&lt;/code> resource itself.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_worker.go">&lt;code>Worker&lt;/code> API (Golang specification)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/extensions">Extension controller library&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/tree/master/extensions/pkg/controller/worker">Generic worker controller&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/worker">Exemplary implementation for the AWS provider&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>