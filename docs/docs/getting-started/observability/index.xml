<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener â€“ Observability</title><link>https://gardener.cloud/docs/getting-started/observability/</link><description>Recent content in Observability on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/getting-started/observability/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Components</title><link>https://gardener.cloud/docs/getting-started/observability/components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/observability/components/</guid><description>
&lt;h2 id="core-components">Core Components&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/core-components_287ae2.png" alt="core-components">&lt;/p>
&lt;p>The core Observability components which Gardener offers out-of-the-box are:&lt;/p>
&lt;ul>
&lt;li>Prometheus - for Metrics and Alerting&lt;/li>
&lt;li>Vali - a Loki fork for Logging&lt;/li>
&lt;li>Plutono - a Grafana fork for Dashboard visualization&lt;/li>
&lt;/ul>
&lt;p>Both forks are done from the last version with an Apache license.&lt;/p>
&lt;h3 id="control-plane-components-on-the-seed">Control Plane Components on the Seed&lt;/h3>
&lt;p>&lt;img src="https://gardener.cloud/__resources/control-plane-components_1b8262.png" alt="control-plane-components">&lt;/p>
&lt;p>Prometheus, Plutono, and Vali are all located in the seed cluster. They run next to the control plane of your cluster.&lt;/p>
&lt;p>The next sections will explore those components in detail.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Gardener only provides monitoring for Gardener-deployed components. If you need logging or monitoring for your workload, then you need to deploy your own monitoring stack into your shoot cluster.
&lt;/div>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Gardener only provides a monitoring stack if the cluster is not of &lt;code>purpose: testing&lt;/code>. For more information, see &lt;a href="https://gardener.cloud/docs/gardener/shoot_purposes/">Shoot Cluster Purpose&lt;/a>.
&lt;/div>
&lt;h3 id="logging-into-plutono">Logging into Plutono&lt;/h3>
&lt;p>Let us start by giving some visual hints on how to access Plutono. &lt;a href="https://github.com/credativ/plutono#plutono">Plutono&lt;/a> allows us to query logs and metrics and visualise those in form of dashboards. Plutono is shipped ready-to-use with a Gardener shoot cluster.&lt;/p>
&lt;p>In order to access the Gardener provided dashboards, open the &lt;code>Plutono&lt;/code> link provided in the Gardener dashboard and use the username and password provided next to it.&lt;/p>
&lt;p>The password you can use to log in can be retrieved as shown below:&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/access-plutono_07ba1b.png" alt="access-plutono">&lt;/p>
&lt;h3 id="accessing-the-dashboards">Accessing the Dashboards&lt;/h3>
&lt;p>After logging in, you will be greeted with a Plutono welcome screen. Navigate to &lt;code>General/Home&lt;/code>, as depicted with the red arrow in the next picture:&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/welcome-plutono_6d6c00.png" alt="welcome-plutono">&lt;/p>
&lt;p>Then you will be able to select the dashboards. Some interesting ones to look at are:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>Kubernetes Control Plane Status&lt;/code> dashboard allows you to check control plane availability during a certain time frame.&lt;/li>
&lt;li>The &lt;code>API Server&lt;/code> dashboard gives you an overview on which requests are done towards your apiserver and how long they take.&lt;/li>
&lt;li>With the &lt;code>Node Details&lt;/code> dashboard you can analyze CPU/Network pressure or memory usage for nodes.&lt;/li>
&lt;li>The &lt;code>Network Problem Detector&lt;/code> dashboard illustrates the results of periodic networking checks between nodes and to the APIServer.&lt;/li>
&lt;/ul>
&lt;p>Here is a picture with the &lt;code>Kubernetes Control Plane Status&lt;/code> dashboard.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/plutono_855b74.png" alt="plutono">&lt;/p>
&lt;h3 id="prometheus">Prometheus&lt;/h3>
&lt;p>&lt;a href="https://prometheus.io/">Prometheus&lt;/a> is a monitoring system and a time series database. It can be queried using PromQL, the so called Prometheus Querying Language.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/prometheus_707368.png" alt="prometheus">&lt;/p>
&lt;p>This example query describes the current uptime status of the kube apiserver.&lt;/p>
&lt;h4 id="prometheus-and-plutono">Prometheus and Plutono&lt;/h4>
&lt;p>Time series data from Prometheus can be made visible with Plutono. Here we see how the query above which describes the uptime of a Kubernetes cluster is visualized with a Plutono dashboard.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/prometheus-plutono_662ad5.png" alt="prometheus-plutono">&lt;/p>
&lt;h3 id="vali-logs-via-plutono">Vali Logs via Plutono&lt;/h3>
&lt;p>Vali is our logging solution. In order to access the logs provided by Vali, you need to:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://gardener.cloud/docs/getting-started/observability/components/#logging-into-plutono">Log into Plutono&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Choose &lt;code>Explore&lt;/code>, which is depicted as the little compass symbol:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://gardener.cloud/__resources/explore-loki_6b28b5.png" alt="explore-loki">&lt;/p>
&lt;ol>
&lt;li>Select &lt;code>Vali&lt;/code> at the top left, as shown here:&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://gardener.cloud/__resources/select-vali_c74f45.png" alt="select-vali">&lt;/p>
&lt;p>There you can browse logs or events of the control plane components.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/vali-logs_eb9bd0.png" alt="vali-logs">&lt;/p>
&lt;p>Here are some examples of helpful queries:&lt;/p>
&lt;ul>
&lt;li>&lt;code>{container_name=&amp;quot;cluster-autoscaler&amp;quot; }&lt;/code> to get cluster-autoscaler logs and see why certain node groups were scaled up.&lt;/li>
&lt;li>&lt;code>{container_name=&amp;quot;kube-apiserver&amp;quot;} |~ &amp;quot;error&amp;quot;&lt;/code> to get the logs of the kube-apiserver container and filter for errors.&lt;/li>
&lt;li>&lt;code>{unit=&amp;quot;kubelet.service&amp;quot;, nodename=&amp;quot;ip-123&amp;quot;}&lt;/code> to get the kubelet logs of a specific node.&lt;/li>
&lt;li>&lt;code>{unit=&amp;quot;containerd.service&amp;quot;, nodename=&amp;quot;ip-123&amp;quot;}&lt;/code> to retrieve the containerd logs for a specific node.&lt;/li>
&lt;/ul>
&lt;p>Choose &lt;code>Help &amp;gt;&lt;/code> in order to see what options exist to filter the results.&lt;/p>
&lt;p>For more information on how to retrieve K8s events from the past, see &lt;a href="https://gardener.cloud/docs/gardener/logging/#how-to-access-the-logs">How to Access Logs&lt;/a>.&lt;/p>
&lt;h2 id="detailed-view">Detailed View&lt;/h2>
&lt;h3 id="data-flow">Data Flow&lt;/h3>
&lt;p>Our monitoring and logging solutions Vali and Prometheus both run next to the control plane of the shoot cluster.&lt;/p>
&lt;h4 id="data-flow---logging">Data Flow - Logging&lt;/h4>
&lt;p>The following diagram allows a more detailed look at Vali and the data flow.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/data-flow-logging_e097b8.png" alt="data-flow-logging">&lt;/p>
&lt;p>On the very left, we see Plutono as it displays the logs. Vali is aggregating the logs from different sources.&lt;/p>
&lt;p>Valitail and Fluentbit send the logs to Vali, which in turn stores them.&lt;/p>
&lt;p>&lt;em>Valitail&lt;/em>&lt;/p>
&lt;p>Valitail is a systemd service that runs on each node. It scrapes kubelet, containerd, kernel logs, and the logs of the pods in the kube-system namespace.&lt;/p>
&lt;p>&lt;em>Fluentbit&lt;/em>&lt;/p>
&lt;p>Fluentbit runs as a daemonset on each seed node. It scrapes logs of the kubernetes control plane components, like apiserver or etcd.&lt;/p>
&lt;p>It also scrapes logs of the Gardener deployed components which run next to the control plane of the cluster, like the machine-controller-manager or the cluster autoscaler. Debugging those components, for example, would be helpful when finding out why certain worker groups got scaled up or why nodes were replaced.&lt;/p>
&lt;h4 id="data-flow---monitoring">Data Flow - Monitoring&lt;/h4>
&lt;p>Next to each shoot&amp;rsquo;s control plane, we deploy an instance of Prometheus in the seed.&lt;/p>
&lt;p>Gardener uses &lt;a href="https://prometheus.io/">Prometheus&lt;/a> for storing and accessing shoot-related metrics and alerting.&lt;/p>
&lt;p>The diagram below shows the data flow of metrics.
Plutono uses PromQL queries to query data from Prometheus. It then visualises those metrics in dashboards.
Prometheus itself scrapes various targets for metrics, as seen in the diagram below by the arrows pointing to the Prometheus instance.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/data-flow-monitoring-1_a9b4fd.png" alt="data-flow-monitoring-1">&lt;/p>
&lt;p>Let us have a look what metrics we scrape for debugging purposes:&lt;/p>
&lt;p>&lt;strong>Container performance metrics&lt;/strong>&lt;/p>
&lt;p>cAdvisor is an open-source agent integrated into the kubelet binary that monitors resource usage and analyzes the performance of containers. It collects statistics about the CPU, memory, file, and network usage for all containers running on a given node. We use it to scrape data for all pods running in the kube-system namespace in the shoot cluster.&lt;/p>
&lt;p>&lt;strong>Hardware and kernel-related metrics&lt;/strong>&lt;/p>
&lt;p>The &lt;a href="https://prometheus.io/docs/guides/node-exporter/">Prometheus Node Exporter&lt;/a> runs as a daemonset in the kube-system namespace of your shoot cluster. It exposes a wide variety of hardware and kernel-related metrics. Some of the metrics we scrape are, for example, the current usage of the filesystem (&lt;code>node_filesystem_free_bytes&lt;/code>) or current CPU usage (&lt;code>node_cpu_seconds_total&lt;/code>). Both can help you identify if nodes are running out of hardware resources, which could lead to your workload experiencing downtimes.&lt;/p>
&lt;p>&lt;strong>Control plane component specific metrics&lt;/strong>&lt;/p>
&lt;p>The different control plane pods (for example, etcd, API server, and kube-controller-manager) emit metrics over the &lt;code>/metrics&lt;/code> endpoint. This includes metrics like how long webhooks take, the request count of the apiserver and storage information, like how many and what kind of objects are stored in etcd.&lt;/p>
&lt;p>&lt;strong>Metrics about the state of Kubernetes objects&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://github.com/kubernetes/kube-state-metrics">kube-state-metrics&lt;/a> is a simple service that listens to the Kubernetes API server and generates metrics about the state of the objects. It is not concerned with metrics about the Kubernetes components, but rather it exposes metrics calculated from the status of Kubernetes objects (for example, resource requests or health of pods).&lt;/p>
&lt;p>In the following image a few example metrics, which are exposed by the various components, are listed:
&lt;img src="https://gardener.cloud/__resources/data-flow-monitoring-2_4e4e76.png" alt="data-flow-monitoring-2">&lt;/p>
&lt;p>We only store metrics for Gardener deployed components. Those include the Kubernetes control plane, Gardener managed system components (e.g., pods) in the kube-system namespace of the shoot cluster or systemd units on the nodes. We do not gather metrics for workload deployed in the shoot cluster. This is also shown in the picture below.&lt;/p>
&lt;p>This means that for any workload you deploy into your shoot cluster, you need to deploy monitoring and logging yourself.&lt;/p>
&lt;p>Logs or metrics are kept up to 14 days or when a configured space limit is reached.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/data-flow-monitoring-3_38a9ab.png" alt="data-flow-monitoring-3">&lt;/p></description></item><item><title>Docs: Alerts</title><link>https://gardener.cloud/docs/getting-started/observability/alerts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/observability/alerts/</guid><description>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>In this overview, we want to present two ways to receive alerts for control plane and Gardener managed system-components:&lt;/p>
&lt;ul>
&lt;li>Predefined Gardener alerts&lt;/li>
&lt;li>Custom alerts&lt;/li>
&lt;/ul>
&lt;h3 id="predefined-control-plane-alerts">Predefined Control Plane Alerts&lt;/h3>
&lt;p>In the shoot spec it is possible to configure &lt;code>emailReceivers&lt;/code>. On this email address you will automatically receive email notifications for predefined alerts of your control plane. Such alerts are deployed in the shoot Prometheus and have visibility &lt;code>owner&lt;/code> or &lt;code>all&lt;/code>. For more alert details, shoot owners can use this visibility to find these alerts in their shoot Prometheus UI.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> monitoring:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> alerting:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> emailReceivers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - john.doe@example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For more information, see &lt;a href="https://gardener.cloud/docs/gardener/monitoring/alerting/">Alerting&lt;/a>.&lt;/p>
&lt;h3 id="custom-alerts---federation">Custom Alerts - Federation&lt;/h3>
&lt;p>If you need more customization for alerts for control plane metrics, you have the option to deploy your own Prometheus into your shoot control plane.&lt;/p>
&lt;p>Then you can use federation, which is a Prometheus feature, to forward the metrics from the Gardener managed Prometheus to your custom deployed Prometheus. Since as a shoot owner you do not have access to the control plane pods, this is the only way to get those metrics.&lt;/p>
&lt;p>The credentials and endpoint for the Gardener managed Prometheus are exposed over the Gardener dashboard or programmatically in the garden project as a secret (&lt;code>&amp;lt;shoot-name&amp;gt;.monitoring&lt;/code>).&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/custom-alerts_653ef2.png" alt="custom-alerts">&lt;/p></description></item><item><title>Docs: Shoot Status</title><link>https://gardener.cloud/docs/getting-started/observability/shoot-status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/observability/shoot-status/</guid><description>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>In this topic you can see various shoot statuses and how you can use them to monitor your shoot cluster.&lt;/p>
&lt;h2 id="shoot-status---conditions">Shoot Status - Conditions&lt;/h2>
&lt;p>You can retrieve the shoot status by using &lt;code>kubectl get shoot -oyaml&lt;/code>&lt;/p>
&lt;p>It contains conditions, which give you information about the healthiness of your cluster. Those conditions are also forwarded to the Gardener dashboard and show your cluster as healthy or unhealthy.&lt;/p>
&lt;img style="width: 60%; height: auto; margin: 0, auto" alt="shoot-status-1" src="https://gardener.cloud/__resources/shoot-status-1_81dd83.png"/>
&lt;h2 id="shoot-status---constraints">Shoot Status - Constraints&lt;/h2>
&lt;p>The shoot status also contains constraints. If these constraints are met, your cluster operations are impaired and the cluster is likely to fail at some point. Please watch them and act accordingly.&lt;/p>
&lt;img style="width: 60%; height: auto; margin: 0, auto" alt="shoot-status-2" src="https://gardener.cloud/__resources/shoot-status-2_afb3ee.png"/>
&lt;h2 id="shoot-status---last-operation">Shoot Status - Last Operation&lt;/h2>
&lt;p>The &lt;code>lastOperation&lt;/code>, &lt;code>lastErrors&lt;/code>, and &lt;code>lastMaintenance&lt;/code> give you information on what was last happening in your clusters. This is especially useful when you are facing an error.&lt;/p>
&lt;p>In this example, nodes are being recreated and not all machines have reached the desired state yet.&lt;/p>
&lt;img style="width: 60%; height: auto; margin: 0, auto" alt="shoot-status-3" src="https://gardener.cloud/__resources/shoot-status-3_61cd5c.png"/>
&lt;h2 id="shoot-status---credentials-rotation">Shoot Status - Credentials Rotation&lt;/h2>
&lt;p>You can also see the status of the last credentials rotation. Here you can also programmatically derive when the last rotation was down in order to trigger the next rotation.&lt;/p>
&lt;img style="width: 60%; height: auto; margin: 0, auto" alt="shoot-status-4" src="https://gardener.cloud/__resources/shoot-status-4_5f74e6.png"/></description></item></channel></rss>