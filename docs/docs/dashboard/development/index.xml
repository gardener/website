<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener â€“ Development</title><link>https://gardener.cloud/docs/dashboard/development/</link><description>Recent content in Development on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/dashboard/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Local Setup</title><link>https://gardener.cloud/docs/dashboard/development/local-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/dashboard/development/local-setup/</guid><description>
&lt;h1 id="local-development">Local development&lt;/h1>
&lt;p float="left">
&lt;img width="90" src="https://gardener.cloud/__resources/logo_gardener_dashboard_727121.png">
&lt;img width="200" src="https://raw.githubusercontent.com/yarnpkg/assets/master/yarn-kitten-full.png">
&lt;/p>
&lt;h2 id="purpose">Purpose&lt;/h2>
&lt;p>Develop new feature and fix bug on the Gardener Dashboard.&lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;ul>
&lt;li>Yarn. For the required version, refer to &lt;code>.engines.yarn&lt;/code> in &lt;a href="https://github.com/gardener/dashboard/blob/master/package.json">package.json&lt;/a>.&lt;/li>
&lt;li>Node.js. For the required version, refer to &lt;code>.engines.node&lt;/code> in &lt;a href="https://github.com/gardener/dashboard/blob/master/package.json">package.json&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="steps">Steps&lt;/h2>
&lt;h3 id="1-clone-repository">1. Clone repository&lt;/h3>
&lt;p>Clone the &lt;a href="https://github.com/gardener/dashboard.git">gardener/dashboard&lt;/a> repository&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git clone git@github.com:gardener/dashboard.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-install-dependencies">2. Install dependencies&lt;/h3>
&lt;p>Run &lt;code>yarn&lt;/code> at the repository root to install all dependencies.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>cd dashboard
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>yarn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-configuration">3. Configuration&lt;/h3>
&lt;p>Place the Gardener Dashboard configuration under &lt;code>${HOME}/.gardener/config.yaml&lt;/code> or alternatively set the path to the configuration file using the &lt;code>GARDENER_CONFIG&lt;/code> environment variable.&lt;/p>
&lt;p>A local configuration example could look like follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>port: 3030
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>logLevel: debug
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>logFormat: text
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiServerUrl: https://my-local-cluster &lt;span style="color:#008000"># garden cluster kube-apiserver url - kubectl config view --minify -ojsonpath=&amp;#39;{.clusters[].cluster.server}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sessionSecret: c2VjcmV0 &lt;span style="color:#008000"># symmetric key used for encryption&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>frontend:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dashboardUrl:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pathname: /api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaultHibernationSchedule:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> evaluation:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - start: 00 17 * * 1,2,3,4,5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> development:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - start: 00 17 * * 1,2,3,4,5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end: 00 08 * * 1,2,3,4,5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> production: ~
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="5-run-it-locally">5. Run it locally&lt;/h3>
&lt;p>The Gardener Dashboard &lt;a href="https://github.com/gardener/dashboard/tree/master/backend">&lt;code>backend&lt;/code>&lt;/a> server requires a kubeconfig for the Garden cluster. You can set it e.g. by using the &lt;code>KUBECONFIG&lt;/code> environment variable.&lt;/p>
&lt;p>If you want to run the Garden cluster locally, follow the &lt;a href="https://gardener.cloud/docs/gardener/development/getting_started_locally/">getting started locally&lt;/a> documentation.
Gardener Dashboard supports the &lt;code>local&lt;/code> infrastructure provider that comes with the local Gardener cluster setup.
See &lt;a href="#6-login-to-the-dashboard">6. Login to the dashboard&lt;/a> for more information on how to use the Dashboard with a local gardener or any other Gardener landscape.&lt;/p>
&lt;p>Concurrently run the &lt;code>backend&lt;/code> server (port &lt;code>3030&lt;/code>) and the &lt;a href="https://github.com/gardener/dashboard/tree/master/frontend">&lt;code>frontend&lt;/code>&lt;/a> server (port &lt;code>8080&lt;/code>) with hot reload enabled.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>cd backend
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export KUBECONFIG=/path/to/garden/cluster/kubeconfig.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yarn serve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>cd frontend
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yarn serve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can now access the UI on http://localhost:8080/&lt;/p>
&lt;h3 id="6-login-to-the-dashboard">6. Login to the dashboard&lt;/h3>
&lt;p>To login to the dashboard you can either configure &lt;code>oidc&lt;/code>, or alternatively login using a token:&lt;/p>
&lt;p>To login using a token, first create a service account.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl -n garden create serviceaccount dashboard-user
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Assign it a role, e.g. cluster-admin.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl set subject clusterrolebinding cluster-admin --serviceaccount=garden:dashboard-user
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Get the token of the service account.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl -n garden create token dashboard-user --duration 24h
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Copy the token and login to the dashboard.&lt;/p>
&lt;h2 id="build">Build&lt;/h2>
&lt;p>Build docker image locally.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>make build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="push">Push&lt;/h2>
&lt;p>Push docker image to Google Container Registry.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>make push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command expects a valid gcloud configuration named &lt;code>gardener&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>gcloud config configurations describe gardener
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>is_active: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name: gardener
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>properties:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> core:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> account: john.doe@example.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> project: johndoe-1008
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Testing</title><link>https://gardener.cloud/docs/dashboard/development/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/dashboard/development/testing/</guid><description>
&lt;h1 id="testing">Testing&lt;/h1>
&lt;h2 id="jest">Jest&lt;/h2>
&lt;p>We use Jest JavaScript Testing Framework&lt;/p>
&lt;img width="200" src="https://jestjs.io/img/jest.svg">
&lt;ul>
&lt;li>Jest can collect code coverage informationâ€‹&lt;/li>
&lt;li>Jest support snapshot testing out of the boxâ€‹&lt;/li>
&lt;li>All in One solution. Replaces Mocha, Chai, Sinon and Istanbulâ€‹&lt;/li>
&lt;li>It works with Vue.js and Node.js projectsâ€‹&lt;/li>
&lt;/ul>
&lt;p>To execute all tests, simply run&lt;/p>
&lt;pre tabindex="0">&lt;code>yarn workspaces foreach --all run test
&lt;/code>&lt;/pre>&lt;p>or to include test coverage generation&lt;/p>
&lt;pre tabindex="0">&lt;code>yarn workspaces foreach --all run test-coverage
&lt;/code>&lt;/pre>&lt;p>You can also run tests for frontend, backend and charts directly inside the respective folder via&lt;/p>
&lt;pre tabindex="0">&lt;code>yarn test
&lt;/code>&lt;/pre>&lt;h2 id="lint">Lint&lt;/h2>
&lt;p>We use ESLint for static code analyzing.&lt;/p>
&lt;img width="200" src="https://d33wubrfki0l68.cloudfront.net/204482ca413433c80cd14fe369e2181dd97a2a40/092e2/assets/img/logo.svg">
&lt;p>To execute, run&lt;/p>
&lt;pre tabindex="0">&lt;code>yarn workspaces foreach --all run lint
&lt;/code>&lt;/pre></description></item></channel></rss>