<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Documentation</title><link>https://gardener.cloud/contribute/docs/</link><description>Recent content in Documentation on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/contribute/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Markdown</title><link>https://gardener.cloud/docs/contribute/20_documentation/25_markup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/20_documentation/25_markup/</guid><description>
&lt;p>Hugo uses Markdown for its simple content format. However, there are a lot of things that Markdown
doesn’t support well. You could use pure HTML to expand possibilities. A typical example is reducing
the original dimensions of an image.&lt;/p>
&lt;p>However, use HTML judicially and to the minimum extent possible. Using HTML in markdowns makes it
harder to maintain and publish coherent documentation bundles. This is a job typically performed by
a publishing platform mechanisms, such as Hugo&amp;rsquo;s layouts. Considering that the source documentation
might be published by multiple platforms you should be considerate in using markup that may bind it
to a particular one.&lt;/p>
&lt;p>We support the use of certain shortcodes. You can find more about the currently supported shortcodes and their documentation &lt;a href="https://gardener.cloud/docs/contribute/20_documentation/30_shortcodes/">here&lt;/a>.&lt;/p></description></item><item><title>Docs: Organization</title><link>https://gardener.cloud/docs/contribute/20_documentation/10_organisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/20_documentation/10_organisation/</guid><description>
&lt;p>The Gardener project implements the &lt;em>documentation-as-code&lt;/em> paradigm. Essentially this means that:&lt;/p>
&lt;ul>
&lt;li>Documentation resides close to the code it describes - in the corresponding GitHub repositories. Only documentation with regards to cross-cutting concerns that cannot be affiliated to a specific component repository is hosted in the general &lt;a href="https://github.com/gardener/documentation">gardener/documentation&lt;/a> repository.&lt;/li>
&lt;li>We use tools to develop, validate and integrate documentation &lt;em>sources&lt;/em>&lt;/li>
&lt;li>The change management process is largely automated with automatic validation, integration and deployment using &lt;a href="https://github.com/gardener/docforge">docforge&lt;/a> and &lt;a href="https://github.com/gardener/docs-toolbelt">docs-toolbelt&lt;/a>.&lt;/li>
&lt;li>The documentation sources are intended for &lt;em>reuse&lt;/em> and &lt;em>not bound&lt;/em> to a specific publishing platform.&lt;/li>
&lt;li>The physical organization in a repository is irrelevant for the tool support. What needs to be maintained is the intended result in a &lt;a href="https://github.com/gardener/docforge">docforge&lt;/a> documentation bundle manifest configuration, very much like virtual machines configurations, that docforge can reliably recreate in any case.&lt;/li>
&lt;li>We use GitHub as distributed, versioning storage system and &lt;a href="https://github.com/gardener/docforge">docforge&lt;/a> to pull sources in their desired state to forge documentation bundles according to a desired specification provided as a manifest.&lt;/li>
&lt;/ul>
&lt;h2 id="content-organization">Content Organization&lt;/h2>
&lt;p>Documentation that can be affiliated to component is hosted and maintained in the component repository.&lt;/p>
&lt;p>A recommended template for organizing documentation sources is to place them all in a &lt;code>docs&lt;/code> folder and organize it there per role activity. For example:&lt;/p>
&lt;pre tabindex="0">&lt;code>repositoryX
|_ docs
|_ usage
| |_ images
| |_ 01.png
| |_ hibernation.md
|_ operations
|_ deployment
&lt;/code>&lt;/pre>&lt;p>Do not use folders just because they are in the template. Stick to the predefined roles and corresponding activities for naming convention. A system makes it easier to maintain and get oriented.&lt;/p>
&lt;ul>
&lt;li>User: &lt;code>usage&lt;/code>&lt;/li>
&lt;li>Operator: &lt;code>operations&lt;/code>&lt;/li>
&lt;li>Gardener (service) provider: &lt;code>deployment&lt;/code>&lt;/li>
&lt;li>Gardener Developer: &lt;code>development&lt;/code>&lt;/li>
&lt;li>Gardener Extension Developer: &lt;code>extensions&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="publishing-on-gardenercloud">Publishing on gardener.cloud&lt;/h2>
&lt;p>The Gardener website is one of the multiple optional publishing channels where the source material might end up as documentation. We use docforge and automated integration and publish process to enable transparent change
management.&lt;/p>
&lt;p>To have documentation published on the website it is necessary to use the docforge manifests available at [gardener/documentation/.docforge] adn register a reference to your documentation.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This is work in progress and we are transitioning to a more transparent way of integrating component documentation. This guide will be updated as we progress.
&lt;/div>
&lt;p>These manifests describe a particular publishing goal, i.e. using Hugo to publish on the website, and you will find out that they contain Hugo-specific front-matter properties.
Consult with the documentation maintainers for details. Use the gardener channel in slack or open a PR.&lt;/p></description></item><item><title>Docs: Shortcodes</title><link>https://gardener.cloud/docs/contribute/20_documentation/30_shortcodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/20_documentation/30_shortcodes/</guid><description>
&lt;p>Shortcodes are the Hugo way to extend the limitations of Markdown before resorting to HTML. There are a number of built-in shortcodes available from Hugo. This list is extended with Gardener website shortcodes designed specifically for its content.
Find a complete reference to the Hugo built-in shortcodes on its &lt;a href="https://gohugo.io/content-management/shortcodes/">website&lt;/a>.&lt;/p>
&lt;p>Below is a reference to the shortcodes developed for the Gardener website.&lt;/p>
&lt;h2 id="alert">alert&lt;/h2>
&lt;pre tabindex="0">&lt;code>{{% alert color=&amp;#34;info&amp;#34; title=&amp;#34;Notice&amp;#34; %}}
text
{{% /alert %}}
&lt;/code>&lt;/pre>&lt;p>produces
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Notice&lt;/h4>
A notice disclaimer
&lt;/div>
&lt;/p>
&lt;p>All the color options are &lt;code>info&lt;/code>|&lt;code>warning&lt;/code>|&lt;code>primary&lt;/code>&lt;/p>
&lt;p>You can also omit the title section from an alert, useful when creating notes.&lt;/p>
&lt;p>It is important to note that the text that the &amp;ldquo;alerts&amp;rdquo; shortcode wraps will not be processed during site building. Do not use shortcodes in it.&lt;/p>
&lt;h3 id="alert-examples">Alert Examples&lt;/h3>
&lt;div class="alert alert-info" role="alert">
Info color
&lt;/div>
&lt;div class="alert alert-warning" role="alert">
Warning color
&lt;/div>
&lt;div class="alert alert-primary" role="alert">
Primary color
&lt;/div>
&lt;h2 id="mermaid">mermaid&lt;/h2>
&lt;p>Reference documentation &lt;a href="https://mermaid-js.github.io/mermaid/#/README">here&lt;/a>. The &lt;a href="https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/">GitHub mermaid&lt;/a> fenced code block syntax is used.&lt;/p>
&lt;pre tabindex="0">&lt;code>```mermaid
graph LR;
A[Hard edge] --&amp;gt;|Link text| B(Round edge)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result one]
C --&amp;gt;|Two| E[Result two]
```
&lt;/code>&lt;/pre>&lt;p>produces:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">graph LR;
A[Hard edge] --&amp;gt;|Link text| B(Round edge)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result one]
C --&amp;gt;|Two| E[Result two]
&lt;/code>&lt;/pre>&lt;p>Default settings can be overridden using the %%init%% header at the start of the diagram definition.
See the &lt;a href="https://mermaid-js.github.io/mermaid/#/theming?id=themes-at-the-local-or-current-level">Mermaid theming documentation&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>```mermaid
%%{init: {&amp;#39;theme&amp;#39;: &amp;#39;neutral&amp;#39;, &amp;#39;themeVariables&amp;#39;: { &amp;#39;mainBkg&amp;#39;: &amp;#39;#eee&amp;#39;}}}%%
graph LR;
A[Hard edge] --&amp;gt;|Link text| B(Round edge)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result one]
C --&amp;gt;|Two| E[Result two]
```
&lt;/code>&lt;/pre>&lt;p>produces:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">%%{init: {&amp;#39;theme&amp;#39;: &amp;#39;neutral&amp;#39;, &amp;#39;themeVariables&amp;#39;: { &amp;#39;mainBkg&amp;#39;: &amp;#39;#eee&amp;#39;}}}%%
graph LR;
A[Hard edge] --&amp;gt;|Link text| B(Round edge)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result one]
C --&amp;gt;|Two| E[Result two]
&lt;/code>&lt;/pre></description></item><item><title>Docs: Style Guide</title><link>https://gardener.cloud/docs/contribute/20_documentation/20_style/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/20_documentation/20_style/</guid><description>
&lt;p>This page gives writing style guidelines for the Gardener documentation.
These are guidelines, not rules. Use your best judgment, and feel free to
propose changes to this document in a pull request.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#language">Language&lt;/a>&lt;/li>
&lt;li>&lt;a href="#formatting-of-inline-elements">Formatting of Inline Elements&lt;/a>&lt;/li>
&lt;li>&lt;a href="#code-snippet-formatting">Code Snippet Formatting&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="language">Language&lt;/h2>
&lt;ul>
&lt;li>Gardener documentation uses US English.&lt;/li>
&lt;li>Keep it simple and use words that non-native English speakers are also familiar with.&lt;/li>
&lt;/ul>
&lt;h2 id="formatting-of-inline-elements">Formatting of Inline Elements&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Type of Text&lt;/th>
&lt;th style="text-align:left">Formatting&lt;/th>
&lt;th style="text-align:left">Markdown Syntax&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="#user-interface-elements">User Interface Elements&lt;/a>&lt;/td>
&lt;td style="text-align:left">&lt;em>italics&lt;/em>&lt;/td>
&lt;td style="text-align:left">&lt;code>Choose *CLUSTERS*&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="#new-terms-and-emphasis">New Terms and Emphasis&lt;/a>&lt;/td>
&lt;td style="text-align:left">&lt;strong>bold&lt;/strong>&lt;/td>
&lt;td style="text-align:left">&lt;code>Do **not** stop it.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="#technical-names">Technical Names&lt;/a>&lt;/td>
&lt;td style="text-align:left">&lt;code>code&lt;/code>&lt;/td>
&lt;td style="text-align:left">&lt;code>Open file `root.yaml`.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="#api-objects-and-technical-components">API Objects and Technical Components&lt;/a>&lt;/td>
&lt;td style="text-align:left">&lt;code>code&lt;/code>&lt;/td>
&lt;td style="text-align:left">&lt;code>Deploy a `Pod`.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="#inline-code-and-inline-commands">Inline Code and Inline Commands&lt;/a>&lt;/td>
&lt;td style="text-align:left">&lt;code>code&lt;/code>&lt;/td>
&lt;td style="text-align:left">&lt;code>For declarative management, use `kubectl apply`.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;a href="#object-field-names-and-field-values">Object Field Names and Field Values&lt;/a>&lt;/td>
&lt;td style="text-align:left">&lt;code>code&lt;/code>&lt;/td>
&lt;td style="text-align:left">&lt;code>Set the value of `image` to `nginx:1.8`.&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="user-interface-elements">User Interface Elements&lt;/h3>
&lt;p>When referring to UI elements, refrain from using verbs like &amp;ldquo;Click&amp;rdquo; or &amp;ldquo;Select with right mouse button&amp;rdquo;. This level of detail is hardly ever needed and also invalidates a procedure if other devices are used. For example, for a tablet you&amp;rsquo;d say &amp;ldquo;Tap on&amp;rdquo;.&lt;/p>
&lt;p>Use &lt;em>italics&lt;/em> when you refer to UI elements.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">UI Element&lt;/th>
&lt;th style="text-align:left">Standard Formulation&lt;/th>
&lt;th style="text-align:left">Markdown Syntax&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Button, Menu path&lt;/td>
&lt;td style="text-align:left">Choose &lt;em>UI Element&lt;/em>.&lt;/td>
&lt;td style="text-align:left">&lt;code>Choose *UI Element*.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Menu path, context menu, navigation path&lt;/td>
&lt;td style="text-align:left">Choose &lt;em>System&lt;/em> &amp;gt; &lt;em>User Profile&lt;/em> &amp;gt; &lt;em>Own Data&lt;/em>.&lt;/td>
&lt;td style="text-align:left">&lt;code>Choose *System* \&amp;gt; *User Profile* \&amp;gt; *Own Data*.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Entry fields&lt;/td>
&lt;td style="text-align:left">Enter your password.&lt;/td>
&lt;td style="text-align:left">&lt;code>Enter your password.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Checkbox, radio button&lt;/td>
&lt;td style="text-align:left">Select &lt;em>Filter&lt;/em>.&lt;/td>
&lt;td style="text-align:left">&lt;code>Select *Filter*.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Expandable screen elements&lt;/td>
&lt;td style="text-align:left">Expand &lt;em>User Settings&lt;/em>.&lt;br>Collapse &lt;em>User Settings&lt;/em>.&lt;/td>
&lt;td style="text-align:left">&lt;code>Expand *User Settings*&lt;/code>.&lt;br>&lt;code>Collapse *User Settings*.&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="new-terms-and-emphasis">New Terms and Emphasis&lt;/h3>
&lt;p>Use &lt;strong>bold&lt;/strong> to emphasize something or to introduce a new term.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Do&lt;/th>
&lt;th style="text-align:left">Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">A &lt;strong>cluster&lt;/strong> is a set of nodes &amp;hellip;&lt;/td>
&lt;td style="text-align:left">A &amp;ldquo;cluster&amp;rdquo; is a set of nodes &amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">The system does &lt;strong>not&lt;/strong> delete your objects.&lt;/td>
&lt;td style="text-align:left">The system does not(!) delete your objects.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="technical-names">Technical Names&lt;/h3>
&lt;p>Use code style (using backticks) for filenames, technical componentes, directories, and paths.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Do&lt;/th>
&lt;th style="text-align:left">Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Open file &lt;code>envars.yaml&lt;/code>.&lt;/td>
&lt;td style="text-align:left">Open the envars.yaml file.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Go to directory &lt;code>/docs/tutorials&lt;/code>.&lt;/td>
&lt;td style="text-align:left">Go to the /docs/tutorials directory.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Open file &lt;code>/_data/concepts.yaml&lt;/code>.&lt;/td>
&lt;td style="text-align:left">Open the /_data/concepts.yaml file.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="api-objects-and-technical-components">API Objects and Technical Components&lt;/h3>
&lt;p>When you refer to an API object, use the same uppercase and lowercase letters
that are used in the actual object name, and use backticks to format them. Typically, the names of API
objects use
&lt;a href="https://en.wikipedia.org/wiki/Camel_case">camel case&lt;/a>.&lt;/p>
&lt;p>Don&amp;rsquo;t split the API object name into separate words. For example, use
&lt;code>PodTemplateList&lt;/code>, not Pod Template List.&lt;/p>
&lt;p>Refer to API objects without saying &amp;ldquo;object,&amp;rdquo; unless omitting &amp;ldquo;object&amp;rdquo;
leads to an awkward construction.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Do&lt;/th>
&lt;th style="text-align:left">Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">The &lt;code>Pod&lt;/code> has two containers.&lt;/td>
&lt;td style="text-align:left">The pod has two containers.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">The &lt;code>Deployment&lt;/code> is responsible for &amp;hellip;&lt;/td>
&lt;td style="text-align:left">The Deployment object is responsible for &amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">A &lt;code>PodList&lt;/code> is a list of Pods.&lt;/td>
&lt;td style="text-align:left">A Pod List is a list of pods.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">The &lt;code>gardener-control-manager&lt;/code> has control loops&amp;hellip;&lt;/td>
&lt;td style="text-align:left">The gardener-control-manager has control loops&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">The &lt;code>gardenlet&lt;/code> starts up with a bootstrap &lt;code>kubeconfig&lt;/code> having a bootstrap token that allows to create &lt;code>CertificateSigningRequest&lt;/code> (CSR) resources.&lt;/td>
&lt;td style="text-align:left">The gardenlet starts up with a bootstrap kubeconfig having a bootstrap token that allows to create CertificateSigningRequest (CSR) resources.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="inline-code-and-inline-commands">Inline Code and Inline Commands&lt;/h3>
&lt;p>Use backticks (`) for inline code.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Do&lt;/th>
&lt;th style="text-align:left">Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">The &lt;code>kubectl run&lt;/code> command creates a &lt;code>Deployment&lt;/code>.&lt;/td>
&lt;td style="text-align:left">The &amp;ldquo;kubectl run&amp;rdquo; command creates a Deployment.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">For declarative management, use &lt;code>kubectl apply&lt;/code>.&lt;/td>
&lt;td style="text-align:left">For declarative management, use &amp;ldquo;kubectl apply&amp;rdquo;.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="object-field-names-and-field-values">Object Field Names and Field Values&lt;/h3>
&lt;p>Use backticks (`) for field names, and field values.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Do&lt;/th>
&lt;th style="text-align:left">Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Set the value of the &lt;code>replicas&lt;/code> field in the configuration file.&lt;/td>
&lt;td style="text-align:left">Set the value of the &amp;ldquo;replicas&amp;rdquo; field in the configuration file.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">The value of the &lt;code>exec&lt;/code> field is an &lt;code>ExecAction&lt;/code> object.&lt;/td>
&lt;td style="text-align:left">The value of the &amp;ldquo;exec&amp;rdquo; field is an ExecAction object.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Set the value of &lt;code>imagePullPolicy&lt;/code> to &lt;code>Always&lt;/code>.&lt;/td>
&lt;td style="text-align:left">Set the value of &lt;code>imagePullPolicy&lt;/code> to &amp;ldquo;Always&amp;rdquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Set the value of &lt;code>image&lt;/code> to &lt;code>nginx:1.8&lt;/code>.&lt;/td>
&lt;td style="text-align:left">the value of &lt;code>image&lt;/code> to nginx:1.8.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="code-snippet-formatting">Code Snippet Formatting&lt;/h2>
&lt;h3 id="dont-include-the-command-prompt">Don&amp;rsquo;t include the command prompt&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Do&lt;/th>
&lt;th style="text-align:left">Don&amp;rsquo;t&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>kubectl get pods&lt;/code>&lt;/td>
&lt;td style="text-align:left">&lt;code>$ kubectl get pods&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="separate-commands-from-output">Separate commands from output&lt;/h3>
&lt;code>
Verify that the pod is running on your chosen node:
&lt;pre tabindex="0">&lt;code>kubectl get pods --output=wide
&lt;/code>&lt;/pre>&lt;p>The output is similar to:&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME READY STATUS RESTARTS AGE IP NODE
nginx 1/1 Running 0 13s 10.200.0.4 worker0
&lt;/code>&lt;/pre>&lt;/code>
&lt;h3 id="placeholders">Placeholders&lt;/h3>
&lt;p>Use angle brackets for placeholders. Tell the reader what a placeholder
represents, for example:&lt;/p>
&lt;code>
&lt;p>Display information about a pod:&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl describe pod &amp;lt;pod-name&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;code>&amp;lt;pod-name&amp;gt;&lt;/code> is the name of one of your pods.&lt;/p>
&lt;/code>
&lt;h3 id="versioning-kubernetes-examples">Versioning Kubernetes examples&lt;/h3>
&lt;p>Make code examples and configuration examples that include version information consistent with the accompanying text. Identify the Kubernetes version in the &lt;strong>Prerequisites&lt;/strong> section.&lt;/p></description></item></channel></rss>