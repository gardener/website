<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener</title><link>https://gardener.cloud/docs/gardener/</link><description>Recent content on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/gardener/index.xml" rel="self" type="application/rss+xml"/><item><title>Autoscaling Specifics for Components</title><link>https://gardener.cloud/docs/gardener/autoscaling-specifics-for-components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/autoscaling-specifics-for-components/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This document describes the used autoscaling mechanism for several components.&lt;/p>
&lt;h2 id="garden-or-shoot-cluster-etcd">Garden or Shoot Cluster etcd&lt;/h2>
&lt;p>The &lt;code>etcd&lt;/code> is scaled by a native &lt;code>VPA&lt;/code> resource.&lt;/p>
&lt;p>Downscaling is handled more pessimistically to prevent many subsequent etcd restarts. Thus, for &lt;code>production&lt;/code> and &lt;code>infrastructure&lt;/code> Shoot clusters (or all Garden clusters), downscaling is deactivated for the main etcd. For all other Shoot clusters, lower advertised requests/limits are only applied during the Shoot&amp;rsquo;s maintenance time window.&lt;/p></description></item><item><title>Changing the API</title><link>https://gardener.cloud/docs/gardener/changing-the-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/changing-the-api/</guid><description>&lt;h1 id="changing-the-api">Changing the API&lt;/h1>
&lt;p>This document describes the steps that need to be performed when changing the API.
It provides guidance for API changes to both (Gardener system in general or component configurations).&lt;/p>
&lt;p>Generally, as Gardener is a Kubernetes-native extension, it follows the same API conventions and guidelines like Kubernetes itself. The Kubernetes
&lt;a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md">API Conventions&lt;/a> as well as &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api_changes.md">Changing the API&lt;/a> topics already provide a good overview and general explanation of the basic concepts behind it.
We are following the same approaches.&lt;/p></description></item><item><title>Component Checklist</title><link>https://gardener.cloud/docs/gardener/component-checklist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/component-checklist/</guid><description>&lt;h1 id="checklist-for-adding-new-components">Checklist For Adding New Components&lt;/h1>
&lt;p>Adding new components that run in the garden, seed, or shoot cluster is theoretically quite simple - we just need a &lt;code>Deployment&lt;/code> (or other similar workload resource), the respective container image, and maybe a bit of configuration.
In practice, however, there are a couple of things to keep in mind in order to make the deployment production-ready.
This document provides a checklist for them that you can walk through.&lt;/p></description></item><item><title>Configuration</title><link>https://gardener.cloud/docs/gardener/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/configuration/</guid><description>&lt;h1 id="gardener-configuration-and-usage">Gardener Configuration and Usage&lt;/h1>
&lt;p>Gardener automates the full lifecycle of Kubernetes clusters as a service.
Additionally, it has several extension points allowing external controllers to plug-in to the lifecycle.
As a consequence, there are several configuration options for the various custom resources that are partially required.&lt;/p>
&lt;p>This document describes the:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/configuration/#configuration-and-usage-of-gardener-as-operatoradministrator">Configuration and usage of Gardener as operator/administrator&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/configuration/#configuration-and-usage-of-gardener-as-end-userstakeholdercustomer">Configuration and usage of Gardener as end-user/stakeholder/customer&lt;/a>.&lt;/li>
&lt;/ol>
&lt;h2 id="configuration-and-usage-of-gardener-as-operatoradministrator">Configuration and Usage of Gardener as Operator/Administrator&lt;/h2>
&lt;p>When we use the terms &amp;ldquo;operator/administrator&amp;rdquo;, we refer to both the people deploying and operating Gardener.
Gardener consists of the following components:&lt;/p></description></item><item><title>Control Plane Migration</title><link>https://gardener.cloud/docs/gardener/control_plane_migration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/control_plane_migration/</guid><description>&lt;h1 id="control-plane-migration">Control Plane Migration&lt;/h1>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>The &lt;code>Seed&lt;/code>s involved in the control plane migration must have backups enabled - their &lt;code>.spec.backup&lt;/code> fields cannot be nil.&lt;/p>
&lt;h2 id="shootstate">ShootState&lt;/h2>
&lt;p>&lt;code>ShootState&lt;/code> is an API resource which stores non-reconstructible state and data required to completely recreate a &lt;code>Shoot&lt;/code>&amp;rsquo;s control plane on a new &lt;code>Seed&lt;/code>. The &lt;code>ShootState&lt;/code> resource is created on &lt;code>Shoot&lt;/code> creation in its &lt;code>Project&lt;/code> namespace and the required state/data is persisted during &lt;code>Shoot&lt;/code> creation or reconciliation.&lt;/p></description></item><item><title>Defaulting</title><link>https://gardener.cloud/docs/gardener/defaulting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/defaulting/</guid><description>&lt;h1 id="defaulting-strategy-and-developer-guidelines">Defaulting Strategy and Developer Guidelines&lt;/h1>
&lt;p>This document walks you through:&lt;/p>
&lt;ul>
&lt;li>Conventions to be followed when writing defaulting functions&lt;/li>
&lt;li>How to write a test for a defaulting function&lt;/li>
&lt;/ul>
&lt;p>The document is aimed towards developers who want to contribute code and need to write defaulting code and unit tests covering the defaulting functions, as well as maintainers and reviewers who review code.
It serves as a common guide that we commit to follow in our project to ensure consistency in our defaulting code, good coverage for high confidence, and good maintainability.&lt;/p></description></item><item><title>Dependencies</title><link>https://gardener.cloud/docs/gardener/dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/dependencies/</guid><description>&lt;h1 id="dependency-management">Dependency Management&lt;/h1>
&lt;p>We are using &lt;a href="https://github.com/golang/go/wiki/Modules">go modules&lt;/a> for dependency management.
In order to add a new package dependency to the project, you can perform &lt;code>go get &amp;lt;PACKAGE&amp;gt;@&amp;lt;VERSION&amp;gt;&lt;/code> or edit the &lt;code>go.mod&lt;/code> file and append the package along with the version you want to use.&lt;/p>
&lt;h2 id="updating-dependencies">Updating Dependencies&lt;/h2>
&lt;p>The &lt;code>Makefile&lt;/code> contains a rule called &lt;code>tidy&lt;/code> which performs &lt;code>go mod tidy&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>go mod tidy&lt;/code> makes sure &lt;code>go.mod&lt;/code> matches the source code in the module. It adds any missing modules necessary to build the current module&amp;rsquo;s packages and dependencies, and it removes unused modules that don&amp;rsquo;t provide any relevant packages.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make tidy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;#x26a0;&amp;#xfe0f; Make sure that you test the code after you have updated the dependencies!&lt;/p></description></item><item><title>Getting Started Locally</title><link>https://gardener.cloud/docs/gardener/getting_started_locally/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/getting_started_locally/</guid><description>&lt;h1 id="developing-gardener-locally">Developing Gardener Locally&lt;/h1>
&lt;p>&lt;a href="https://gardener.cloud/docs/gardener/deployment/getting_started_locally/">This document&lt;/a> explains how to setup a kind based environment for developing Gardener locally.&lt;/p>
&lt;p>For the best development experience you should especially check the &lt;a href="https://gardener.cloud/docs/gardener/deployment/getting_started_locally/#developing-gardener">Developing Gardener&lt;/a> section.&lt;/p>
&lt;p>In case you plan a debugging session please check the &lt;a href="https://gardener.cloud/docs/gardener/deployment/getting_started_locally/#debugging-gardener">Debugging Gardener&lt;/a> section.&lt;/p></description></item><item><title>High Availability Of Components</title><link>https://gardener.cloud/docs/gardener/high-availability-of-components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/high-availability-of-components/</guid><description>&lt;h1 id="high-availability-of-deployed-components">High Availability of Deployed Components&lt;/h1>
&lt;p>&lt;code>gardenlet&lt;/code>s and extension controllers are deploying components via &lt;code>Deployment&lt;/code>s, &lt;code>StatefulSet&lt;/code>s, etc., as part of the shoot control plane, or the seed or shoot system components.&lt;/p>
&lt;p>Some of the above component deployments must be further tuned to improve fault tolerance / resilience of the service. This document outlines what needs to be done to achieve this goal.&lt;/p>
&lt;p>Please be forwarded to the &lt;a href="https://gardener.cloud/docs/gardener/high-availability-of-components/#convenient-application-of-these-rules">Convenient Application Of These Rules&lt;/a> section, if you want to take a shortcut to the list of actions that require developers&amp;rsquo; attention.&lt;/p></description></item><item><title>Ipv6</title><link>https://gardener.cloud/docs/gardener/ipv6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/ipv6/</guid><description>&lt;h1 id="ipv6-in-gardener-clusters">IPv6 in Gardener Clusters&lt;/h1>
&lt;blockquote>
 &lt;p>🚧 IPv6 networking is currently under development.&lt;/p>

&lt;/blockquote>&lt;h2 id="ipv6-single-stack-networking">IPv6 Single-Stack Networking&lt;/h2>
&lt;p>&lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/21-ipv6-singlestack-local.md">GEP-21&lt;/a> proposes IPv6 Single-Stack Support in the local Gardener environment.
This documentation will be enhanced while implementing GEP-21, see &lt;a href="https://github.com/gardener/gardener/issues/7051">gardener/gardener#7051&lt;/a>.&lt;/p>
&lt;p>For real infrastructure providers, please check the corresponding provider documentation for IPv6 support.
Furthermore, please check the documentation of your preferred networking extension for IPv6 support.&lt;/p>
&lt;h2 id="developmenttesting-setup">Development/Testing Setup&lt;/h2>
&lt;p>Developing or testing IPv6-related features requires a Linux machine (docker only supports IPv6 on Linux) and native IPv6 connectivity to the internet.
If you&amp;rsquo;re on a different OS or don&amp;rsquo;t have IPv6 connectivity in your office environment or via your home ISP, make sure to check out &lt;a href="https://github.com/gardener-community/dev-box-gcp">gardener-community/dev-box-gcp&lt;/a>, which allows you to circumvent these limitations.&lt;/p></description></item><item><title>Istio</title><link>https://gardener.cloud/docs/gardener/istio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/istio/</guid><description>&lt;h1 id="istio">Istio&lt;/h1>
&lt;p>&lt;a href="https://istio.io">Istio&lt;/a> offers a service mesh implementation with focus on several important features - traffic, observability, security, and policy.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Third-party JWT is used, therefore each Seed cluster where this feature is enabled must have &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection">Service Account Token Volume Projection&lt;/a> enabled.&lt;/li>
&lt;li>Kubernetes 1.16+&lt;/li>
&lt;/ul>
&lt;h2 id="differences-with-istios-default-profile">Differences with Istio&amp;rsquo;s Default Profile&lt;/h2>
&lt;p>The &lt;a href="https://istio.io/docs/setup/additional-setup/config-profiles/">default profile&lt;/a> which is recommended for production deployment, is not suitable for the Gardener use case, as it offers more functionality than desired. The current installation goes through heavy refactorings due to the &lt;code>IstioOperator&lt;/code> and the mixture of Helm values + Kubernetes API specification makes configuring and fine-tuning it very hard. A more simplistic deployment is used by Gardener. The differences are the following:&lt;/p></description></item><item><title>Kubernetes Clients</title><link>https://gardener.cloud/docs/gardener/kubernetes-clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/kubernetes-clients/</guid><description>&lt;h1 id="kubernetes-clients-in-gardener">Kubernetes Clients in Gardener&lt;/h1>
&lt;p>This document aims at providing a general developer guideline on different aspects of using Kubernetes clients in a large-scale distributed system and project like Gardener.
The points included here are not meant to be consulted as absolute rules, but rather as general rules of thumb that allow developers to get a better feeling about certain gotchas and caveats.
It should be updated with lessons learned from maintaining the project and running Gardener in production.&lt;/p></description></item><item><title>Local Setup</title><link>https://gardener.cloud/docs/gardener/local_setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/local_setup/</guid><description>&lt;h1 id="overview">Overview&lt;/h1>
&lt;p>Conceptually, all Gardener components are designed to run as a Pod inside a Kubernetes cluster.
The Gardener API server extends the Kubernetes API via the user-aggregated API server concepts.
However, if you want to develop it, you may want to work locally with the Gardener without building a Docker image and deploying it to a cluster each and every time.
That means that the Gardener runs outside a Kubernetes cluster which requires providing a &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/authenticate-across-clusters-kubeconfig/">Kubeconfig&lt;/a> in your local filesystem and point the Gardener to it when starting it (see below).&lt;/p></description></item><item><title>Log Parsers</title><link>https://gardener.cloud/docs/gardener/log_parsers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/log_parsers/</guid><description>&lt;h1 id="how-to-create-log-parser-for-container-into-fluent-bit">How to Create Log Parser for Container into fluent-bit&lt;/h1>
&lt;p>If our log message is parsed correctly, it has to be showed in Plutono like this:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jsonc" data-lang="jsonc"> {&amp;#34;log&amp;#34;:&amp;#34;OpenAPI AggregationController: Processing item v1beta1.metrics.k8s.io&amp;#34;,&amp;#34;pid&amp;#34;:&amp;#34;1&amp;#34;,&amp;#34;severity&amp;#34;:&amp;#34;INFO&amp;#34;,&amp;#34;source&amp;#34;:&amp;#34;controller.go:107&amp;#34;}
&lt;/code>&lt;/pre>&lt;p>Otherwise it will looks like this:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-jsonc" data-lang="jsonc">{
 &amp;#34;log&amp;#34;:&amp;#34;{
 \&amp;#34;level\&amp;#34;:\&amp;#34;info\&amp;#34;,\&amp;#34;ts\&amp;#34;:\&amp;#34;2020-06-01T11:23:26.679Z\&amp;#34;,\&amp;#34;logger\&amp;#34;:\&amp;#34;gardener-resource-manager.health-reconciler\&amp;#34;,\&amp;#34;msg\&amp;#34;:\&amp;#34;Finished ManagedResource health checks\&amp;#34;,\&amp;#34;object\&amp;#34;:\&amp;#34;garden/provider-aws-dsm9r\&amp;#34;
 }\n&amp;#34;
 }
}
&lt;/code>&lt;/pre>&lt;h2 id="create-a-custom-parser">Create a Custom Parser&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>First of all, we need to know how the log for the specific container looks like (for example, lets take a log from the &lt;code>alertmanager&lt;/code> :
&lt;code>level=info ts=2019-01-28T12:33:49.362015626Z caller=main.go:175 build_context=&amp;quot;(go=go1.11.2, user=root@4ecc17c53d26, date=20181109-15:40:48)&lt;/code>)&lt;/p></description></item><item><title>Logging</title><link>https://gardener.cloud/docs/gardener/logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/logging/</guid><description>&lt;h1 id="logging-in-gardener-components">Logging in Gardener Components&lt;/h1>
&lt;p>This document aims at providing a general developer guideline on different aspects of logging practices and conventions used in the Gardener codebase.
It contains mostly Gardener-specific points, and references other existing and commonly accepted logging guidelines for general advice.
Developers and reviewers should consult this guide when writing, refactoring, and reviewing Gardener code.
If parts are unclear or new learnings arise, this guide should be adapted accordingly.&lt;/p></description></item><item><title>Managed Seed</title><link>https://gardener.cloud/docs/gardener/managed_seed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/managed_seed/</guid><description>&lt;h1 id="managedseeds-register-shoot-as-seed">&lt;code>ManagedSeed&lt;/code>s: Register Shoot as Seed&lt;/h1>
&lt;p>An existing shoot can be registered as a seed by creating a &lt;code>ManagedSeed&lt;/code> resource. This resource contains:&lt;/p>
&lt;ul>
&lt;li>The name of the shoot that should be registered as seed.&lt;/li>
&lt;li>A &lt;code>gardenlet&lt;/code> section that contains:
&lt;ul>
&lt;li>&lt;code>gardenlet&lt;/code> deployment parameters, such as the number of replicas, the image, etc.&lt;/li>
&lt;li>The &lt;code>GardenletConfiguration&lt;/code> resource that contains controllers configuration, feature gates, and a &lt;code>seedConfig&lt;/code> section that contains the &lt;code>Seed&lt;/code> spec and parts of its metadata.&lt;/li>
&lt;li>Additional configuration parameters, such as the garden connection bootstrap mechanism (see &lt;a href="https://gardener.cloud/docs/gardener/concepts/gardenlet/#tls-bootstrapping">TLS Bootstrapping&lt;/a>), and whether to merge the provided configuration with the configuration of the parent &lt;code>gardenlet&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>gardenlet&lt;/code> is deployed to the shoot, and it registers a new seed upon startup based on the &lt;code>seedConfig&lt;/code> section.&lt;/p></description></item><item><title>Monitoring Stack</title><link>https://gardener.cloud/docs/gardener/monitoring-stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/monitoring-stack/</guid><description>&lt;h1 id="extending-the-monitoring-stack">Extending the Monitoring Stack&lt;/h1>
&lt;p>This document provides instructions to extend the Shoot cluster monitoring stack by integrating new scrape targets, alerts and dashboards.&lt;/p>
&lt;p>Please ensure that you have understood the basic principles of &lt;a href="https://prometheus.io/docs/introduction/overview/">Prometheus&lt;/a> and its ecosystem before you continue.&lt;/p>
&lt;p>&amp;#x203c;&amp;#xfe0f; &lt;strong>The purpose of the monitoring stack is to observe the behaviour of the control plane and the system components deployed by Gardener onto the worker nodes. Monitoring of custom workloads running in the cluster is out of scope.&lt;/strong>&lt;/p></description></item><item><title>Network Policies</title><link>https://gardener.cloud/docs/gardener/network_policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/network_policies/</guid><description>&lt;h1 id="networkpolicys-in-garden-seed-shoot-clusters">&lt;code>NetworkPolicy&lt;/code>s In Garden, Seed, Shoot Clusters&lt;/h1>
&lt;p>This document describes which &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/">Kubernetes &lt;code>NetworkPolicy&lt;/code>s&lt;/a> deployed by Gardener into the various clusters.&lt;/p>
&lt;h2 id="garden-cluster">Garden Cluster&lt;/h2>
&lt;p>&lt;em>(via &lt;code>gardener-operator&lt;/code> and &lt;code>gardener-resource-manager&lt;/code>)&lt;/em>&lt;/p>
&lt;p>The &lt;code>gardener-operator&lt;/code> runs a &lt;a href="https://gardener.cloud/docs/gardener/concepts/operator/#networkpolicy-controller-registrar">&lt;code>NetworkPolicy&lt;/code> controller&lt;/a> which is responsible for the following namespaces:&lt;/p>
&lt;ul>
&lt;li>&lt;code>garden&lt;/code>&lt;/li>
&lt;li>&lt;code>istio-system&lt;/code>&lt;/li>
&lt;li>&lt;code>*istio-ingress-*&lt;/code>&lt;/li>
&lt;li>&lt;code>shoot-*&lt;/code>&lt;/li>
&lt;li>&lt;code>extension-*&lt;/code> (in case the garden cluster is a seed cluster at the same time)&lt;/li>
&lt;/ul>
&lt;p>It deploys the following so-called &amp;ldquo;general &lt;code>NetworkPolicy&lt;/code>s&amp;rdquo;:&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>Purpose&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>deny-all&lt;/code>&lt;/td>
 &lt;td>&lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/#default-deny-all-ingress-and-all-egress-traffic">Denies all ingress and egress traffic&lt;/a> for all pods in this namespace. Hence, all traffic must be explicitly allowed.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>allow-to-dns&lt;/code>&lt;/td>
 &lt;td>Allows egress traffic from pods labeled with &lt;code>networking.gardener.cloud/to-dns=allowed&lt;/code> to DNS pods running in the &lt;code>kube-sytem&lt;/code> namespace. In practice, most of the pods performing network egress traffic need this label.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>allow-to-runtime-apiserver&lt;/code>&lt;/td>
 &lt;td>Allows egress traffic from pods labeled with &lt;code>networking.gardener.cloud/to-runtime-apiserver=allowed&lt;/code> to the API server of the runtime cluster.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>allow-to-blocked-cidrs&lt;/code>&lt;/td>
 &lt;td>Allows egress traffic from pods labeled with &lt;code>networking.gardener.cloud/to-blocked-cidrs=allowed&lt;/code> to explicitly blocked addresses configured by human operators (configured via &lt;code>.spec.networking.blockedCIDRs&lt;/code> in the &lt;code>Seed&lt;/code>). For instance, this can be used to block the cloud provider&amp;rsquo;s metadata service.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>allow-to-public-networks&lt;/code>&lt;/td>
 &lt;td>Allows egress traffic from pods labeled with &lt;code>networking.gardener.cloud/to-public-networks=allowed&lt;/code> to all public network IPs, except for private networks (RFC1918), carrier-grade NAT (RFC6598), and explicitly blocked addresses configured by human operators for all pods labeled with &lt;code>networking.gardener.cloud/to-public-networks=allowed&lt;/code>. In practice, this blocks egress traffic to all networks in the cluster and only allows egress traffic to public IPv4 addresses.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>allow-to-private-networks&lt;/code>&lt;/td>
 &lt;td>Allows egress traffic from pods labeled with &lt;code>networking.gardener.cloud/to-private-networks=allowed&lt;/code> to the private networks (RFC1918) and carrier-grade NAT (RFC6598) except for cluster-specific networks (configured via &lt;code>.spec.networks&lt;/code> in the &lt;code>Seed&lt;/code>).&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>Apart from those, the &lt;code>gardener-operator&lt;/code> also enables the &lt;a href="https://gardener.cloud/docs/gardener/concepts/resource-manager/#networkpolicy-controller">&lt;code>NetworkPolicy&lt;/code> controller of &lt;code>gardener-resource-manager&lt;/code>&lt;/a>.
Please find more information in the linked document.
In summary, most of the pods that initiate connections with other pods will have labels with &lt;code>networking.resources.gardener.cloud/&lt;/code> prefixes.
This way, they leverage the automatically created &lt;code>NetworkPolicy&lt;/code>s by the controller.
As a result, in most cases no special/custom-crafted &lt;code>NetworkPolicy&lt;/code>s must be created anymore.&lt;/p></description></item><item><title>New Cloud Provider</title><link>https://gardener.cloud/docs/gardener/new-cloud-provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/new-cloud-provider/</guid><description>&lt;h1 id="adding-cloud-providers">Adding Cloud Providers&lt;/h1>
&lt;p>This document provides an overview of how to integrate a new cloud provider into Gardener. Each component that requires integration has a detailed description of how to integrate it and the steps required.&lt;/p>
&lt;h2 id="cloud-components">Cloud Components&lt;/h2>
&lt;p>Gardener is composed of 2 or more Kubernetes clusters:&lt;/p>
&lt;ul>
&lt;li>Shoot: These are the end-user clusters, the regular Kubernetes clusters you have seen. They provide places for your workloads to run.&lt;/li>
&lt;li>Seed: This is the &amp;ldquo;management&amp;rdquo; cluster. It manages the control planes of shoots by running them as native Kubernetes workloads.&lt;/li>
&lt;/ul>
&lt;p>These two clusters can run in the same cloud provider, but they do not need to. For example, you could run your Seed in AWS, while having one shoot in Azure, two in Google, two in Alicloud, and three in Equinix Metal.&lt;/p></description></item><item><title>New Kubernetes Version</title><link>https://gardener.cloud/docs/gardener/new-kubernetes-version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/new-kubernetes-version/</guid><description>&lt;h1 id="adding-support-for-a-new-kubernetes-version">Adding Support For a New Kubernetes Version&lt;/h1>
&lt;p>This document describes the steps needed to perform in order to confidently add support for a new Kubernetes &lt;strong>minor&lt;/strong> version.&lt;/p>
&lt;blockquote>
 &lt;p>⚠️ Typically, once a minor Kubernetes version &lt;code>vX.Y&lt;/code> is supported by Gardener, then all patch versions &lt;code>vX.Y.Z&lt;/code> are also automatically supported without any required action.
This is because patch versions do not introduce any new feature or API changes, so there is nothing that needs to be adapted in &lt;code>gardener/gardener&lt;/code> code.&lt;/p></description></item><item><title>Priority Classes</title><link>https://gardener.cloud/docs/gardener/priority-classes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/priority-classes/</guid><description>&lt;h1 id="priorityclasses-in-gardener-clusters">&lt;code>PriorityClass&lt;/code>es in Gardener Clusters&lt;/h1>
&lt;p>Gardener makes use of &lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/">&lt;code>PriorityClass&lt;/code>es&lt;/a> to improve the overall robustness of the system.
In order to benefit from the full potential of &lt;code>PriorityClass&lt;/code>es, the gardenlet manages a set of well-known &lt;code>PriorityClass&lt;/code>es with fine-granular priority values.&lt;/p>
&lt;p>All components of the system should use these well-known &lt;code>PriorityClass&lt;/code>es instead of creating and using separate ones with arbitrary values, which would compromise the overall goal of using &lt;code>PriorityClass&lt;/code>es in the first place.
The gardenlet manages the well-known &lt;code>PriorityClass&lt;/code>es listed in this document, so that third parties (e.g., Gardener extensions) can rely on them to be present when deploying components to Seed and Shoot clusters.&lt;/p></description></item><item><title>Process</title><link>https://gardener.cloud/docs/gardener/process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/process/</guid><description>&lt;h1 id="releases-features-hotfixes">Releases, Features, Hotfixes&lt;/h1>
&lt;p>This document describes how to contribute features or hotfixes, and how new Gardener releases are usually scheduled, validated, etc.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/process/#releases-features-hotfixes">Releases, Features, Hotfixes&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/process/#releases">Releases&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/process/#release-responsible-plan">Release Responsible Plan&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/process/#release-validation">Release Validation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/process/#contributing-new-features-or-fixes">Contributing New Features or Fixes&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/process/#todo-statements">TODO Statements&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/process/#deprecations-and-backwards-compatibility">Deprecations and Backwards-Compatibility&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/process/#cherry-picks">Cherry Picks&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/process/#prerequisites">Prerequisites&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/process/#initiate-a-cherry-pick">Initiate a Cherry Pick&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="releases">Releases&lt;/h2>
&lt;p>The &lt;a href="https://github.com/orgs/gardener/teams/gardener-maintainers">@gardener-maintainers&lt;/a> are trying to provide a new release roughly every other week (depending on their capacity and the stability/robustness of the &lt;code>master&lt;/code> branch).&lt;/p></description></item><item><title>Reversed VPN Tunnel</title><link>https://gardener.cloud/docs/gardener/reversed-vpn-tunnel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/reversed-vpn-tunnel/</guid><description>&lt;h1 id="reversed-vpn-tunnel-setup-and-configuration">Reversed VPN Tunnel Setup and Configuration&lt;/h1>
&lt;p>The Reversed VPN Tunnel is enabled by default.
A highly available VPN connection is automatically deployed in all shoots that configure an HA control-plane.&lt;/p>
&lt;h2 id="reversed-vpn-tunnel">Reversed VPN Tunnel&lt;/h2>
&lt;p>In the first VPN solution, connection establishment was initiated by a VPN client in the seed cluster.
Due to several issues with this solution, the tunnel establishment direction has been reverted.
The client is deployed in the shoot and initiates the connection from there. This way, there is no need to deploy a special purpose
loadbalancer for the sake of addressing the data-plane, in addition to saving costs, this is considered the more secure alternative.
For more information on how this is achieved, please have a look at the following &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/14-reversed-cluster-vpn.md">GEP&lt;/a>.&lt;/p></description></item><item><title>Secrets Management</title><link>https://gardener.cloud/docs/gardener/secrets_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/secrets_management/</guid><description>&lt;h1 id="secrets-management-for-seed-and-shoot-cluster">Secrets Management for Seed and Shoot Cluster&lt;/h1>
&lt;p>The gardenlet needs to create quite some amount of credentials (certificates, private keys, passwords) for seed and shoot clusters in order to ensure secure deployments.
Such credentials typically should be renewed automatically when their validity expires, rotated regularly, and they potentially need to be persisted such that they don&amp;rsquo;t get lost in case of a control plane migration or a lost seed cluster.&lt;/p></description></item><item><title>Seed Bootstrapping</title><link>https://gardener.cloud/docs/gardener/seed_bootstrapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/seed_bootstrapping/</guid><description>&lt;h1 id="seed-bootstrapping">Seed Bootstrapping&lt;/h1>
&lt;p>Whenever the gardenlet is responsible for a new &lt;code>Seed&lt;/code> resource its &amp;ldquo;seed controller&amp;rdquo; is being activated.
One part of this controller&amp;rsquo;s reconciliation logic is deploying certain components into the &lt;code>garden&lt;/code> namespace of the seed cluster itself.
These components are required to spawn and manage control planes for shoot clusters later on.
This document is providing an overview which actions are performed during this bootstrapping phase, and it explains the rationale behind them.&lt;/p></description></item><item><title>Seed Settings</title><link>https://gardener.cloud/docs/gardener/seed_settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/seed_settings/</guid><description>&lt;h1 id="settings-for-seeds">Settings for &lt;code>Seed&lt;/code>s&lt;/h1>
&lt;p>The &lt;code>Seed&lt;/code> resource offers a few settings that are used to control the behaviour of certain Gardener components.
This document provides an overview over the available settings:&lt;/p>
&lt;h2 id="dependency-watchdog">Dependency Watchdog&lt;/h2>
&lt;p>Gardenlet can deploy two instances of the &lt;a href="https://github.com/gardener/dependency-watchdog">dependency-watchdog&lt;/a> into the &lt;code>garden&lt;/code> namespace of the seed cluster.
One instance only activates the weeder while the second instance only activates the prober.&lt;/p>
&lt;h3 id="weeder">Weeder&lt;/h3>
&lt;p>The weeder helps to alleviate the delay where control plane components remain unavailable by finding the respective pods in &lt;code>CrashLoopBackoff&lt;/code> status and restarting them once their dependents become ready and available again.
For example, if &lt;code>etcd&lt;/code> goes down then also &lt;code>kube-apiserver&lt;/code> goes down (and into a &lt;code>CrashLoopBackoff&lt;/code> state). If &lt;code>etcd&lt;/code> comes up again then (without the &lt;code>endpoint&lt;/code> controller) it might take some time until &lt;code>kube-apiserver&lt;/code> gets restarted as well.&lt;/p></description></item><item><title>Testing</title><link>https://gardener.cloud/docs/gardener/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/testing/</guid><description>&lt;h1 id="testing-strategy-and-developer-guideline">Testing Strategy and Developer Guideline&lt;/h1>
&lt;p>This document walks you through:&lt;/p>
&lt;ul>
&lt;li>What kind of tests we have in Gardener&lt;/li>
&lt;li>How to run each of them&lt;/li>
&lt;li>What purpose each kind of test serves&lt;/li>
&lt;li>How to best write tests that are correct, stable, fast and maintainable&lt;/li>
&lt;li>How to debug tests that are not working as expected&lt;/li>
&lt;/ul>
&lt;p>The document is aimed towards developers that want to contribute code and need to write tests, as well as maintainers and reviewers that review test code.
It serves as a common guide that we commit to follow in our project to ensure consistency in our tests, good coverage for high confidence, and good maintainability.&lt;/p></description></item><item><title>Testmachinery Tests</title><link>https://gardener.cloud/docs/gardener/testmachinery_tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/testmachinery_tests/</guid><description>&lt;h1 id="test-machinery-tests">Test Machinery Tests&lt;/h1>
&lt;p>In order to automatically qualify Gardener releases, we execute a set of end-to-end tests using &lt;a href="https://github.com/gardener/test-infra">Test Machinery&lt;/a>.
This requires a full Gardener installation including infrastructure extensions, as well as a setup of Test Machinery itself.
These tests operate on Shoot clusters across different Cloud Providers, using different supported Kubernetes versions and various configuration options (huge test matrix).&lt;/p>
&lt;p>This manual gives an overview about test machinery tests in Gardener.&lt;/p></description></item><item><title>Topology Aware Routing</title><link>https://gardener.cloud/docs/gardener/topology_aware_routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/topology_aware_routing/</guid><description>&lt;h1 id="topology-aware-traffic-routing">Topology-Aware Traffic Routing&lt;/h1>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>The enablement of &lt;a href="https://gardener.cloud/docs/gardener/high-availability/shoot_high_availability/">highly available shoot control-planes&lt;/a> requires multi-zone seed clusters. A garden runtime cluster can also be a multi-zone cluster. The topology-aware routing is introduced to reduce costs and to improve network performance by avoiding the cross availability zone traffic, if possible. The cross availability zone traffic is charged by the cloud providers and it comes with higher latency compared to the traffic within the same zone. The topology-aware routing feature enables topology-aware routing for &lt;code>Service&lt;/code>s deployed in a seed or garden runtime cluster. For the clients consuming these topology-aware services, &lt;code>kube-proxy&lt;/code> favors the endpoints which are located in the same zone where the traffic originated from. In this way, the cross availability zone traffic is avoided.&lt;/p></description></item><item><title>Trusted Tls For Control Planes</title><link>https://gardener.cloud/docs/gardener/trusted-tls-for-control-planes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/trusted-tls-for-control-planes/</guid><description>&lt;h1 id="trusted-tls-certificate-for-shoot-control-planes">Trusted TLS Certificate for Shoot Control Planes&lt;/h1>
&lt;p>Shoot clusters are composed of several control plane components deployed by Gardener and its corresponding extensions.&lt;/p>
&lt;p>Some components are exposed via &lt;code>Ingress&lt;/code> resources, which make them addressable under the HTTPS protocol.&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;ul>
&lt;li>Alertmanager&lt;/li>
&lt;li>Plutono&lt;/li>
&lt;li>Prometheus&lt;/li>
&lt;/ul>
&lt;p>Gardener generates the backing TLS certificates, which are signed by the shoot cluster&amp;rsquo;s CA by default (self-signed).&lt;/p>
&lt;p>Unlike with a self-contained Kubeconfig file, common internet browsers or operating systems don&amp;rsquo;t trust a shoot&amp;rsquo;s cluster CA and adding it as a trusted root is often undesired in enterprise environments.&lt;/p></description></item><item><title>Trusted Tls For Garden Runtime</title><link>https://gardener.cloud/docs/gardener/trusted-tls-for-garden-runtime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/trusted-tls-for-garden-runtime/</guid><description>&lt;h1 id="trusted-tls-certificate-for-garden-runtime-cluster">Trusted TLS Certificate for Garden Runtime Cluster&lt;/h1>
&lt;p>In Garden Runtime Cluster components are exposed via &lt;code>Ingress&lt;/code> resources, which make them addressable under the HTTPS protocol.&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;ul>
&lt;li>Plutono&lt;/li>
&lt;/ul>
&lt;p>Gardener generates the backing TLS certificates, which are signed by the garden runtime cluster&amp;rsquo;s CA by default (self-signed).&lt;/p>
&lt;p>Unlike with a self-contained Kubeconfig file, common internet browsers or operating systems don&amp;rsquo;t trust a garden runtime&amp;rsquo;s cluster CA and adding it as a trusted root is often undesired in enterprise environments.&lt;/p></description></item></channel></rss>