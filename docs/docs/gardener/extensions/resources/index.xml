<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Resources</title><link>https://gardener.cloud/docs/gardener/extensions/resources/</link><description>Recent content in Resources on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/gardener/extensions/resources/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: BackupBucket</title><link>https://gardener.cloud/docs/gardener/extensions/resources/backupbucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/backupbucket/</guid><description>
&lt;h1 id="contract-backupbucket-resource">Contract: &lt;code>BackupBucket&lt;/code> Resource&lt;/h1>
&lt;p>The Gardener project features a sub-project called &lt;a href="https://github.com/gardener/etcd-backup-restore">etcd-backup-restore&lt;/a> to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) to be created and configured externally with appropriate credentials. The &lt;code>BackupBucket&lt;/code> resource takes this responsibility in Gardener.&lt;/p>
&lt;p>Before introducing the &lt;code>BackupBucket&lt;/code> extension resource, Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see &lt;a href="https://github.com/gardener/gardener/tree/0.27.0/charts/seed-terraformer/charts/aws-backup">AWS Backup&lt;/a>).
Now, Gardener commissions an external, provider-specific controller to take over this task. You can also refer to &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md">backupInfra proposal documentation&lt;/a> to get an idea about how the transition was done and understand the resource in a broader scope.&lt;/p>
&lt;h2 id="what-is-the-scope-of-a-bucket">What Is the Scope of a Bucket?&lt;/h2>
&lt;p>A bucket will be provisioned per &lt;code>Seed&lt;/code>. So, a backup of every &lt;code>Shoot&lt;/code> created on that &lt;code>Seed&lt;/code> will be stored under a different shoot specific prefix under the bucket.
For the backup of the &lt;code>Shoot&lt;/code> rescheduled on different &lt;code>Seed&lt;/code>, it will continue to use the same bucket.&lt;/p>
&lt;h2 id="what-is-the-lifespan-of-a-backupbucket">What Is the Lifespan of a &lt;code>BackupBucket&lt;/code>?&lt;/h2>
&lt;p>The bucket associated with &lt;code>BackupBucket&lt;/code> will be created at the creation of the &lt;code>Seed&lt;/code>. And as per current implementation, it will also be deleted on deletion of the &lt;code>Seed&lt;/code>, if there isn&amp;rsquo;t any &lt;code>BackupEntry&lt;/code> resource associated with it.&lt;/p>
&lt;p>In the future, we plan to introduce a schedule for &lt;code>BackupBucket&lt;/code> - the deletion logic for the &lt;code>BackupBucket&lt;/code> resource, which will reschedule it on different available &lt;code>Seed&lt;/code>s on deletion or failure of a health check for the currently associated &lt;code>seed&lt;/code>. In that case, the &lt;code>BackupBucket&lt;/code> will be deleted only if there isn&amp;rsquo;t any schedulable &lt;code>Seed&lt;/code> available and there isn&amp;rsquo;t any associated &lt;code>BackupEntry&lt;/code> resource.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-infrastructure-provider">What Needs to Be Implemented to Support a New Infrastructure Provider?&lt;/h2>
&lt;p>As part of the seed flow, Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: BackupBucket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: foo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;some-optional-provider-specific-backupbucket-configuration&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: backupprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.secretRef&lt;/code> contains a reference to the provider secret pointing to the account that shall be used to create the needed resources. This provider secret will be configured by the Gardener operator in the &lt;code>Seed&lt;/code> resource and propagated over there by the seed controller.&lt;/p>
&lt;p>After your controller has created the required bucket, if required, it generates the secret to access the objects in the bucket and put a reference to it in &lt;code>status&lt;/code>. This secret is supposed to be used by Gardener, or eventually a &lt;code>BackupEntry&lt;/code> resource and etcd-backup-restore component, to backup the etcd.&lt;/p>
&lt;p>In order to support a new infrastructure provider, you need to write a controller that watches all &lt;code>BackupBucket&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code>. You can take a look at the below referenced example implementation for the Azure provider.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/api-reference/extensions/#backupbucket">&lt;code>BackupBucket&lt;/code> API Reference&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-azure/tree/master/pkg/controller/backupbucket">Exemplary Implementation for the Azure Provider&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/backupentry/">&lt;code>BackupEntry&lt;/code> Resource Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md">Shared Bucket Proposal&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: BackupEntry</title><link>https://gardener.cloud/docs/gardener/extensions/resources/backupentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/backupentry/</guid><description>
&lt;h1 id="contract-backupentry-resource">Contract: &lt;code>BackupEntry&lt;/code> Resource&lt;/h1>
&lt;p>The Gardener project features a sub-project called &lt;a href="https://github.com/gardener/etcd-backup-restore">etcd-backup-restore&lt;/a> to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) access credentials to be created and configured externally with appropriate credentials. The &lt;code>BackupEntry&lt;/code> resource takes this responsibility in Gardener to provide this information by creating a secret specific to the component.&lt;/p>
&lt;p>That being said, the core motivation for introducing this resource was to support retention of backups post deletion of &lt;code>Shoot&lt;/code>. The etcd-backup-restore components take responsibility of garbage collecting old backups out of the defined period. Once a shoot is deleted, we need to persist the backups for few days. Hence, Gardener uses the &lt;code>BackupEntry&lt;/code> resource for this housekeeping work post deletion of a &lt;code>Shoot&lt;/code>. The &lt;code>BackupEntry&lt;/code> resource is responsible for shoot specific prefix under referred bucket.&lt;/p>
&lt;p>Before introducing the &lt;code>BackupEntry&lt;/code> extension resource, Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see &lt;a href="https://github.com/gardener/gardener/tree/0.27.0/charts/seed-terraformer/charts/aws-backup">AWS Backup&lt;/a>).
Now, Gardener commissions an external, provider-specific controller to take over this task. You can also refer to &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md">backupInfra proposal documentation&lt;/a> to get idea about how the transition was done and understand the resource in broader scope.&lt;/p>
&lt;h2 id="what-is-the-lifespan-of-a-backupentry">What Is the Lifespan of a &lt;code>BackupEntry&lt;/code>?&lt;/h2>
&lt;p>The bucket associated with &lt;code>BackupEntry&lt;/code> will be created by using a &lt;code>BackupBucket&lt;/code> resource. The &lt;code>BackupEntry&lt;/code> resource will be created as a part of the &lt;code>Shoot&lt;/code> creation. But resources might continue to exist post deletion of a &lt;code>Shoot&lt;/code> (see &lt;a href="https://github.com/gardener/gardener/blob/master/docs/extensions/concepts/gardenlet.md#backupentry-controller">gardenlet&lt;/a> for more details).&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-infrastructure-provider">What Needs to be Implemented to Support a New Infrastructure Provider?&lt;/h2>
&lt;p>As part of the shoot flow, Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: BackupEntry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;some-optional-provider-specific-backup-bucket-configuration&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backupBucketProviderStatus:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;some-optional-provider-specific-backup-bucket-status&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bucketName: foo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: backupprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.secretRef&lt;/code> contains a reference to the provider secret pointing to the account that shall be used to create the needed resources. This provider secret will be propagated from the &lt;code>BackupBucket&lt;/code> resource by the shoot controller.&lt;/p>
&lt;p>Your controller is supposed to create the &lt;code>etcd-backup&lt;/code> secret in the control plane namespace of a shoot. This secret is supposed to be used by Gardener or eventually by the etcd-backup-restore component to backup the etcd. The controller implementation should clean up the objects created under the shoot specific prefix in the bucket equivalent to the name of the &lt;code>BackupEntry&lt;/code> resource.&lt;/p>
&lt;p>In order to support a new infrastructure provider, you need to write a controller that watches all the &lt;code>BackupBucket&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code>. You can take a look at the below referenced example implementation for the Azure provider.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/api-reference/extensions/#backupbucket">&lt;code>BackupEntry&lt;/code> API Reference&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-azure/tree/master/pkg/controller/backupentry">Exemplary Implementation for the Azure Provider&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/backupbucket/">&lt;code>BackupBucket&lt;/code> Resource Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md">Shared Bucket Proposal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/controllermanager/apis/config/types.go#L101-%23L107">Gardener-controller-manager-component-config API Specification&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Bastion</title><link>https://gardener.cloud/docs/gardener/extensions/resources/bastion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/bastion/</guid><description>
&lt;h1 id="contract-bastion-resource">Contract: &lt;code>Bastion&lt;/code> Resource&lt;/h1>
&lt;p>The Gardener project allows users to connect to Shoot worker nodes via SSH. As nodes are usually firewalled and not directly accessible from the public internet, &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/15-manage-bastions-and-ssh-key-pair-rotation.md">GEP-15&lt;/a> introduced the concept of &amp;ldquo;Bastions&amp;rdquo;. A bastion is a dedicated server that only serves to allow SSH ingress to the worker nodes.&lt;/p>
&lt;p>&lt;code>Bastion&lt;/code> resources contain the user&amp;rsquo;s public SSH key and IP address, in order to provision the server accordingly: The public key is put onto the Bastion and SSH ingress is only authorized for the given IP address (in fact, it&amp;rsquo;s not a single IP address, but a set of IP ranges, however for most purposes a single IP is be used).&lt;/p>
&lt;h2 id="what-is-the-lifespan-of-a-bastion">What Is the Lifespan of a &lt;code>Bastion&lt;/code>?&lt;/h2>
&lt;p>Once a &lt;code>Bastion&lt;/code> has been created in the garden, it will be replicated to the appropriate seed cluster, where a controller then reconciles a server and firewall rules etc., on the cloud provider used by the target Shoot. When the Bastion is ready (i.e. has a public IP), that IP is stored in the &lt;code>Bastion&lt;/code>&amp;rsquo;s status and from there it is picked up by the garden cluster and &lt;code>gardenctl&lt;/code> eventually.&lt;/p>
&lt;p>To make multiple SSH sessions possible, the existence of the &lt;code>Bastion&lt;/code> is not directly tied to the execution of &lt;code>gardenctl&lt;/code>: users can exit out of &lt;code>gardenctl&lt;/code> and use &lt;code>ssh&lt;/code> manually to connect to the bastion and worker nodes.&lt;/p>
&lt;p>However, &lt;code>Bastion&lt;/code>s have an expiry date, after which they will be garbage collected.&lt;/p>
&lt;p>When SSH access is set to &lt;code>false&lt;/code> for the &lt;code>Shoot&lt;/code> in the workers settings (see &lt;a href="https://github.com/gardener/gardener/blob/master/docs/extensions/usage/shoot/shoot_workers_settings.md">Shoot Worker Nodes Settings&lt;/a>), &lt;code>Bastion&lt;/code> resources are deleted during &lt;code>Shoot&lt;/code> reconciliation and new &lt;code>Bastion&lt;/code>s are prevented from being created.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-infrastructure-provider">What Needs to Be Implemented to Support a New Infrastructure Provider?&lt;/h2>
&lt;p>As part of the shoot flow, Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Bastion
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: mybastion
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># userData is base64-encoded cloud provider user data; this contains the&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># user&amp;#39;s SSH key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userData: IyEvYmluL2Jhc2ggL....Nlcgo=
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ingress:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ipBlock:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: 192.88.99.0/32 &lt;span style="color:#008000"># this is most likely the user&amp;#39;s IP address&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Your controller is supposed to create a new instance at the given cloud provider, firewall it to only allow SSH (TCP port 22) from the given IP blocks, and then configure the firewall for the worker nodes to allow SSH from the bastion instance. When a &lt;code>Bastion&lt;/code> is deleted, all these changes need to be reverted.&lt;/p>
&lt;h2 id="implementation-details">Implementation Details&lt;/h2>
&lt;h3 id="configvalidator-interface">&lt;code>ConfigValidator&lt;/code> Interface&lt;/h3>
&lt;p>For bastion controllers, the generic &lt;code>Reconciler&lt;/code> also delegates to a &lt;a href="https://github.com/gardener/gardener/blob/master/extensions/pkg/controller/bastion/configvalidator.go">&lt;code>ConfigValidator&lt;/code> interface&lt;/a> that contains a single &lt;code>Validate&lt;/code> method. This method is called by the generic &lt;code>Reconciler&lt;/code> at the beginning of every reconciliation, and can be implemented by the extension to validate the &lt;code>.spec.providerConfig&lt;/code> part of the &lt;code>Bastion&lt;/code> resource with the respective cloud provider, typically the existence and validity of cloud provider resources such as VPCs, images, etc.&lt;/p>
&lt;p>The &lt;code>Validate&lt;/code> method returns a list of errors. If this list is non-empty, the generic &lt;code>Reconciler&lt;/code> will fail with an error. This error will have the error code &lt;code>ERR_CONFIGURATION_PROBLEM&lt;/code>, unless there is at least one error in the list that has its &lt;code>ErrorType&lt;/code> field set to &lt;code>field.ErrorTypeInternal&lt;/code>.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/api-reference/extensions/#bastion">&lt;code>Bastion&lt;/code> API Reference&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/bastion">Exemplary Implementation for the AWS Provider&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/15-manage-bastions-and-ssh-key-pair-rotation.md">GEP-15&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: ContainerRuntime</title><link>https://gardener.cloud/docs/gardener/extensions/resources/containerruntime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/containerruntime/</guid><description>
&lt;h1 id="contract-containerruntime-resource">Contract: &lt;code>ContainerRuntime&lt;/code> Resource&lt;/h1>
&lt;p>At the lowest layers of a Kubernetes node is the software that, among other things, starts and stops containers. It is called “Container Runtime”.
The most widely known container runtime is Docker, but it is not alone in this space. In fact, the container runtime space has been rapidly evolving.&lt;/p>
&lt;p>Kubernetes supports different container runtimes using Container Runtime Interface (CRI) – a plugin interface which enables kubelet to use a wide variety of container runtimes.&lt;/p>
&lt;p>Gardener supports creation of Worker machines using CRI. For more information, see &lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/operatingsystemconfig/#cri-support">CRI Support&lt;/a>.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>Prior to the &lt;code>Container Runtime Extensibility&lt;/code> concept, Gardener used Docker as the only
container runtime to use in shoot worker machines. Because of the wide variety of different container runtimes
offering multiple important features (for example, enhanced security concepts), it is important to enable end users to use other container runtimes as well.&lt;/p>
&lt;h2 id="the-containerruntime-extension-resource">The &lt;code>ContainerRuntime&lt;/code> Extension Resource&lt;/h2>
&lt;p>Here is what a typical &lt;code>ContainerRuntime&lt;/code> resource would look like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ContainerRuntime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-container-runtime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> binaryPath: /var/bin/containerruntimes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: gvisor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workerPool:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: worker-ubuntu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selector:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matchLabels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> worker.gardener.cloud/pool: worker-ubuntu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gardener deploys one &lt;code>ContainerRuntime&lt;/code> resource per worker pool per CRI.
To exemplify this, consider a Shoot having two worker pools (&lt;code>worker-one&lt;/code>, &lt;code>worker-two&lt;/code>) using &lt;code>containerd&lt;/code> as the CRI as well as &lt;code>gvisor&lt;/code> and &lt;code>kata&lt;/code> as enabled container runtimes.
Gardener would deploy four &lt;code>ContainerRuntime&lt;/code> resources. For &lt;code>worker-one&lt;/code>: one &lt;code>ContainerRuntime&lt;/code> for type &lt;code>gvisor&lt;/code> and one for type &lt;code>kata&lt;/code>. The same resource are being deployed for &lt;code>worker-two&lt;/code>.&lt;/p>
&lt;h2 id="supporting-a-new-container-runtime-provider">Supporting a New Container Runtime Provider&lt;/h2>
&lt;p>To add support for another container runtime (e.g., gvisor, kata-containers), a container runtime extension controller needs to be implemented. It should support Gardener&amp;rsquo;s supported CRI plugins.&lt;/p>
&lt;p>The container runtime extension should install the necessary resources into the shoot cluster (e.g., &lt;code>RuntimeClass&lt;/code>es), and it should copy the runtime binaries to the relevant worker machines in path: &lt;code>spec.binaryPath&lt;/code>.
Gardener labels the shoot nodes according to the CRI configured: &lt;code>worker.gardener.cloud/cri-name=&amp;lt;value&amp;gt;&lt;/code> (e.g., &lt;code>worker.gardener.cloud/cri-name=containerd&lt;/code>) and multiple labels for each of the container runtimes configured for the shoot Worker machine:
&lt;code>containerruntime.worker.gardener.cloud/&amp;lt;container-runtime-type-value&amp;gt;=true&lt;/code> (e.g., &lt;code>containerruntime.worker.gardener.cloud/gvisor=true&lt;/code>).
The way to install the binaries is by creating a daemon set which copies the binaries from an image in a docker registry to the relevant labeled Worker&amp;rsquo;s nodes (avoid downloading binaries from the internet to also cater with isolated environments).&lt;/p>
&lt;p>For additional reference, please have a look at the &lt;a href="https://github.com/gardener/gardener-extension-runtime-gvisor">runtime-gvsior&lt;/a> provider extension, which provides more information on how to configure the necessary charts, as well as the actuators required to reconcile container runtime inside the &lt;code>Shoot&lt;/code> cluster to the desired state.&lt;/p></description></item><item><title>Docs: ControlPlane</title><link>https://gardener.cloud/docs/gardener/extensions/resources/controlplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/controlplane/</guid><description>
&lt;h1 id="contract-controlplane-resource">Contract: &lt;code>ControlPlane&lt;/code> Resource&lt;/h1>
&lt;p>Most Kubernetes clusters require a &lt;code>cloud-controller-manager&lt;/code> or CSI drivers in order to work properly.
Before introducing the &lt;code>ControlPlane&lt;/code> extension resource Gardener was having several different Helm charts for the &lt;code>cloud-controller-manager&lt;/code> deployments for the various providers.
Now, Gardener commissions an external, provider-specific controller to take over this task.&lt;/p>
&lt;h2 id="which-control-plane-resources-are-required">Which control plane resources are required?&lt;/h2>
&lt;p>As mentioned in the &lt;a href="https://gardener.cloud/docs/gardener/extensions/controlplane-webhooks/">controlplane customization webhooks&lt;/a> document, Gardener shall not deploy any &lt;code>cloud-controller-manager&lt;/code> or any other provider-specific component.
Instead, it creates a &lt;code>ControlPlane&lt;/code> CRD that should be picked up by provider extensions.
Its purpose is to trigger the deployment of such provider-specific components in the shoot namespace in the seed cluster.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-infrastructure-provider">What needs to be implemented to support a new infrastructure provider?&lt;/h2>
&lt;p>As part of the shoot flow Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ControlPlane
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: control-plane
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: openstack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: europe-west1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cloudprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: openstack.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: ControlPlaneConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> loadBalancerProvider: provider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: eu-1a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudControllerManager:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> featureGates:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CustomResourceValidation: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> infrastructureProviderStatus:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: openstack.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureStatus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> floatingPool:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: vpc-1234
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subnets:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: subnetid
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.secretRef&lt;/code> contains a reference to the provider secret pointing to the account that shall be used for the shoot cluster.
However, the most important section is the &lt;code>.spec.providerConfig&lt;/code> and the &lt;code>.spec.infrastructureProviderStatus&lt;/code>.
The first one contains an embedded declaration of the provider specific configuration for the control plane (that cannot be known by Gardener itself).
You are responsible for designing how this configuration looks like.
Gardener does not evaluate it but just copies this part from what has been provided by the end-user in the &lt;code>Shoot&lt;/code> resource.
The second one contains the output of the &lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/infrastructure/">&lt;code>Infrastructure&lt;/code> resource&lt;/a> (that might be relevant for the CCM config).&lt;/p>
&lt;p>In order to support a new control plane provider, you need to write a controller that watches all &lt;code>ControlPlane&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code>.
You can take a look at the below referenced example implementation for the Alicloud provider.&lt;/p>
&lt;p>The control plane controller as part of the &lt;code>ControlPlane&lt;/code> reconciliation often deploys resources (e.g. pods/deployments) into the Shoot namespace in the &lt;code>Seed&lt;/code> as part of its &lt;code>ControlPlane&lt;/code> reconciliation loop.
Because the namespace contains &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/">network policies&lt;/a> that per default &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/#default-deny-all-ingress-and-all-egress-traffic">deny all ingress and egress traffic&lt;/a>,
the pods may need to have proper labels matching to the selectors of the network policies in order to allow the required network traffic.
Otherwise, they won&amp;rsquo;t be allowed to talk to certain other components (e.g., the kube-apiserver of the shoot).
For more information, see &lt;a href="https://github.com/gardener/gardener/blob/master/docs/extensions/operations/network_policies.md">&lt;code>NetworkPolicy&lt;/code>s In Garden, Seed, Shoot Clusters&lt;/a>.&lt;/p>
&lt;h2 id="non-provider-specific-information-required-for-infrastructure-creation">Non-Provider Specific Information Required for Infrastructure Creation&lt;/h2>
&lt;p>Most providers might require further information that is not provider specific but already part of the shoot resource.
One example for this is the &lt;a href="https://github.com/gardener/gardener-extension-provider-gcp/tree/master/pkg/controller/controlplane">GCP control plane controller&lt;/a>, which needs the Kubernetes version of the shoot cluster (because it already uses the in-tree Kubernetes cloud-controller-manager).
As Gardener cannot know which information is required by providers, it simply mirrors the &lt;code>Shoot&lt;/code>, &lt;code>Seed&lt;/code>, and &lt;code>CloudProfile&lt;/code> resources into the seed.
They are part of the &lt;a href="https://gardener.cloud/docs/gardener/extensions/cluster/">&lt;code>Cluster&lt;/code> extension resource&lt;/a> and can be used to extract information that is not part of the &lt;code>Infrastructure&lt;/code> resource itself.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_controlplane.go">&lt;code>ControlPlane&lt;/code> API (Golang Specification)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-alicloud/tree/master/pkg/controller/controlplane">Exemplary Implementation for the Alicloud Provider&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: ControlPlane Exposure</title><link>https://gardener.cloud/docs/gardener/extensions/resources/controlplane-exposure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/controlplane-exposure/</guid><description>
&lt;h1 id="contract-controlplane-resource-with-purpose-exposure">Contract: &lt;code>ControlPlane&lt;/code> Resource with Purpose &lt;code>exposure&lt;/code>&lt;/h1>
&lt;p>Some Kubernetes clusters require an additional deployments required by the seed cloud provider in order to work properly, e.g. AWS Load Balancer Readvertiser.
Before using ControlPlane resources with purpose &lt;code>exposure&lt;/code>, Gardener was having different Helm charts for the deployments for the various providers.
Now, Gardener commissions an external, provider-specific controller to take over this task.&lt;/p>
&lt;h2 id="which-control-plane-resources-are-required">Which control plane resources are required?&lt;/h2>
&lt;p>As mentioned in the &lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/controlplane/">controlplane&lt;/a> document, Gardener shall not deploy any other provider-specific component.
Instead, it creates a &lt;code>ControlPlane&lt;/code> CRD with purpose &lt;code>exposure&lt;/code> that should be picked up by provider extensions.
Its purpose is to trigger the deployment of such provider-specific components in the shoot namespace in the seed cluster that are needed to expose the kube-apiserver.&lt;/p>
&lt;p>The shoot cluster&amp;rsquo;s kube-apiserver are exposed via a &lt;code>Service&lt;/code> of type &lt;code>LoadBalancer&lt;/code> from the shoot provider (you may run the control plane of an Azure shoot in a GCP seed). It&amp;rsquo;s the seed provider extension controller that should act on the &lt;code>ControlPlane&lt;/code> resources with purpose &lt;code>exposure&lt;/code>.&lt;/p>
&lt;p>If &lt;a href="https://github.com/gardener/gardener/blob/master/docs/extensions/proposals/08-shoot-apiserver-via-sni.md">SNI&lt;/a> is enabled, then the &lt;code>Service&lt;/code> from above is of type &lt;code>ClusterIP&lt;/code> and Gardner will not create &lt;code>ControlPlane&lt;/code> resources with purpose &lt;code>exposure&lt;/code>.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-infrastructure-provider">What needs to be implemented to support a new infrastructure provider?&lt;/h2>
&lt;p>As part of the shoot flow, Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ControlPlane
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: control-plane-exposure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: exposure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: europe-west1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cloudprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.secretRef&lt;/code> contains a reference to the provider secret pointing to the account that shall be used for the shoot cluster.
It is most likely not needed, however, still added for some potential corner cases.
If you don&amp;rsquo;t need it, then just ignore it.
The &lt;code>.spec.region&lt;/code> contains the region of the seed cluster.&lt;/p>
&lt;p>In order to support a control plane provider with purpose &lt;code>exposure&lt;/code>, you need to write a controller or expand the existing &lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/controlplane/">controlplane controller&lt;/a> that watches all &lt;code>ControlPlane&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code> and purpose &lt;code>exposure&lt;/code>.
You can take a look at the below referenced example implementation for the AWS provider.&lt;/p>
&lt;h2 id="non-provider-specific-information-required-for-infrastructure-creation">Non-Provider Specific Information Required for Infrastructure Creation&lt;/h2>
&lt;p>Most providers might require further information that is not provider specific but already part of the shoot resource.
As Gardener cannot know which information is required by providers, it simply mirrors the &lt;code>Shoot&lt;/code>, &lt;code>Seed&lt;/code>, and &lt;code>CloudProfile&lt;/code> resources into the seed.
They are part of the &lt;a href="https://gardener.cloud/docs/gardener/extensions/cluster/">&lt;code>Cluster&lt;/code> extension resource&lt;/a> and can be used to extract information.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_controlplane.go">&lt;code>ControlPlane&lt;/code> API (Golang Specification)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/controlplane">Exemplary Implementation for the AWS Provider&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/aws-lb-readvertiser">AWS Load Balancer Readvertiser&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: DNS Record</title><link>https://gardener.cloud/docs/gardener/extensions/resources/dnsrecord/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/dnsrecord/</guid><description>
&lt;h1 id="contract-dnsrecord-resources">Contract: &lt;code>DNSRecord&lt;/code> Resources&lt;/h1>
&lt;p>Every shoot cluster requires external DNS records that are publicly resolvable.
The management of these DNS records requires provider-specific knowledge which is to be developed outside the Gardener&amp;rsquo;s core repository.&lt;/p>
&lt;p>Currently, Gardener uses &lt;code>DNSProvider&lt;/code> and &lt;code>DNSEntry&lt;/code> resources. However, this introduces undesired coupling of Gardener to a controller that does not adhere to the Gardener extension contracts. Because of this, we plan to stop using &lt;code>DNSProvider&lt;/code> and &lt;code>DNSEntry&lt;/code> resources for Gardener DNS records in the future and use the &lt;code>DNSRecord&lt;/code> resources described here instead.&lt;/p>
&lt;h2 id="what-does-gardener-create-dns-records-for">What does Gardener create DNS records for?&lt;/h2>
&lt;h3 id="internal-domain-name">Internal Domain Name&lt;/h3>
&lt;p>Every shoot cluster&amp;rsquo;s kube-apiserver running in the seed is exposed via a load balancer that has a public endpoint (IP or hostname).
This endpoint is used by end-users and also by system components (that are running in another network, e.g., the kubelet or kube-proxy) to talk to the cluster.
In order to be robust against changes of this endpoint (e.g., caused due to re-creation of the load balancer or move of the DNS record to another seed cluster), Gardener creates a so-called &lt;em>internal domain name&lt;/em> for every shoot cluster.
The &lt;em>internal domain name&lt;/em> is a publicly resolvable DNS record that points to the load balancer of the kube-apiserver.
Gardener uses this domain name in the kubeconfigs of all system components, instead of using directly the load balancer endpoint.
This way Gardener does not need to recreate all kubeconfigs if the endpoint changes - it just needs to update the DNS record.&lt;/p>
&lt;h3 id="external-domain-name">External Domain Name&lt;/h3>
&lt;p>The internal domain name is not configurable by end-users directly but configured by the Gardener administrator.
However, end-users usually prefer to have another DNS name, maybe even using their own domain sometimes, to access their Kubernetes clusters.
Gardener supports that by creating another DNS record, named &lt;em>external domain name&lt;/em>, that actually points to the &lt;em>internal domain name&lt;/em>.
The kubeconfig handed out to end-users does contain this &lt;em>external domain name&lt;/em>, i.e., users can access their clusters with the DNS name they like to.&lt;/p>
&lt;p>As not every end-user has an own domain, it is possible for Gardener administrators to configure so-called &lt;em>default domains&lt;/em>.
If configured, shoots that do not specify a domain explicitly get an &lt;em>external domain name&lt;/em> based on a default domain (unless explicitly stated that this shoot should not get an external domain name (&lt;code>.spec.dns.provider=unmanaged&lt;/code>)).&lt;/p>
&lt;h3 id="ingress-domain-name-deprecated">Ingress Domain Name (Deprecated)&lt;/h3>
&lt;p>Gardener allows to deploy a &lt;code>nginx-ingress-controller&lt;/code> into a shoot cluster (deprecated).
This controller is exposed via a public load balancer (again, either IP or hostname).
Gardener creates a wildcard DNS record pointing to this load balancer.
&lt;code>Ingress&lt;/code> resources can later use this wildcard DNS record to expose underlying applications.&lt;/p>
&lt;h3 id="seed-ingress">Seed Ingress&lt;/h3>
&lt;p>If &lt;code>.spec.ingress&lt;/code> is configured in the Seed, Gardener deploys the ingress controller mentioned in &lt;code>.spec.ingress.controller.kind&lt;/code> to the seed cluster. Currently, the only supported kind is &amp;ldquo;nginx&amp;rdquo;. If the ingress field is set, then &lt;code>.spec.dns.provider&lt;/code> must also be set. Gardener creates a wildcard DNS record pointing to the load balancer of the ingress controller. The &lt;code>Ingress&lt;/code> resources of components like Plutono and Prometheus in the &lt;code>garden&lt;/code> namespace and the shoot namespaces use this wildcard DNS record to expose their underlying applications.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-dns-provider">What needs to be implemented to support a new DNS provider?&lt;/h2>
&lt;p>As part of the shoot flow, Gardener will create a number of &lt;code>DNSRecord&lt;/code> resources in the seed cluster (one for each of the DNS records mentioned above) that need to be reconciled by an extension controller.
These resources contain the following information:&lt;/p>
&lt;ul>
&lt;li>The DNS provider type (e.g., &lt;code>aws-route53&lt;/code>, &lt;code>google-clouddns&lt;/code>, &amp;hellip;)&lt;/li>
&lt;li>A reference to a &lt;code>Secret&lt;/code> object that contains the provider-specific credentials used to communicate with the provider&amp;rsquo;s API.&lt;/li>
&lt;li>The fully qualified domain name (FQDN) of the DNS record, e.g. &amp;ldquo;api.&amp;lt;shoot domain&amp;gt;&amp;rdquo;.&lt;/li>
&lt;li>The DNS record type, one of &lt;code>A&lt;/code>, &lt;code>AAAA&lt;/code>, &lt;code>CNAME&lt;/code>, or &lt;code>TXT&lt;/code>.&lt;/li>
&lt;li>The DNS record values, that is a list of IP addresses for A records, a single hostname for CNAME records, or a list of texts for TXT records.&lt;/li>
&lt;/ul>
&lt;p>Optionally, the &lt;code>DNSRecord&lt;/code> resource may contain also the following information:&lt;/p>
&lt;ul>
&lt;li>The region of the DNS record. If not specified, the region specified in the referenced &lt;code>Secret&lt;/code> shall be used. If that is also not specified, the extension controller shall use a certain default region.&lt;/li>
&lt;li>The DNS hosted zone of the DNS record. If not specified, it shall be determined automatically by the extension controller by getting all hosted zones of the account and searching for the longest zone name that is a suffix of the fully qualified domain name (FQDN) mentioned above.&lt;/li>
&lt;li>The TTL of the DNS record in seconds. If not specified, it shall be set by the extension controller to 120.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Example &lt;code>DNSRecord&lt;/code>&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: dnsrecord-bar-external
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: Opaque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># aws-route53 specific credentials here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: DNSRecord
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: dnsrecord-external
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: aws-route53
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: dnsrecord-bar-external
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># region: eu-west-1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># zone: ZFOO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: api.bar.foo.my-fancy-domain.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> recordType: A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> values:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 1.2.3.4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># ttl: 600&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to support a new DNS record provider, you need to write a controller that watches all &lt;code>DNSRecord&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code>.
You can take a look at the below referenced example implementation for the AWS route53 provider.&lt;/p>
&lt;h2 id="key-names-in-secrets-containing-provider-specific-credentials">Key Names in Secrets Containing Provider-Specific Credentials&lt;/h2>
&lt;p>For compatibility with existing setups, extension controllers shall support two different namings of keys in secrets containing provider-specific credentials:&lt;/p>
&lt;ul>
&lt;li>The naming used by the &lt;a href="https://github.com/gardener/external-dns-management">external-dns-management DNS controller&lt;/a>. For example, on AWS the key names are &lt;code>AWS_ACCESS_KEY_ID&lt;/code>, &lt;code>AWS_SECRET_ACCESS_KEY&lt;/code>, and &lt;code>AWS_REGION&lt;/code>.&lt;/li>
&lt;li>The naming used by other provider-specific extension controllers, e.g., for &lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/infrastructure/">infrastructure&lt;/a>. For example, on AWS the key names are &lt;code>accessKeyId&lt;/code>, &lt;code>secretAccessKey&lt;/code>, and &lt;code>region&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="avoiding-reading-the-dns-hosted-zones">Avoiding Reading the DNS Hosted Zones&lt;/h2>
&lt;p>If the DNS hosted zone is not specified in the &lt;code>DNSRecord&lt;/code> resource, during the first reconciliation the extension controller shall determine the correct DNS hosted zone for the specified FQDN and write it to the status of the resource:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: DNSRecord
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: dnsrecord-external
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: ZFOO
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>On subsequent reconciliations, the extension controller shall use the zone from the status and avoid reading the DNS hosted zones from the provider.
If the &lt;code>DNSRecord&lt;/code> resource specifies a zone in &lt;code>.spec.zone&lt;/code> and the extension controller has written a value to &lt;code>.status.zone&lt;/code>, the first one shall be considered with higher priority by the extension controller.&lt;/p>
&lt;h2 id="non-provider-specific-information-required-for-dns-record-creation">Non-Provider Specific Information Required for DNS Record Creation&lt;/h2>
&lt;p>Some providers might require further information that is not provider specific but already part of the shoot resource.
As Gardener cannot know which information is required by providers, it simply mirrors the &lt;code>Shoot&lt;/code>, &lt;code>Seed&lt;/code>, and &lt;code>CloudProfile&lt;/code> resources into the seed.
They are part of the &lt;a href="https://gardener.cloud/docs/gardener/extensions/cluster/">&lt;code>Cluster&lt;/code> extension resource&lt;/a> and can be used to extract information that is not part of the &lt;code>DNSRecord&lt;/code> resource itself.&lt;/p>
&lt;h2 id="using-dnsrecord-resources">Using &lt;code>DNSRecord&lt;/code> Resources&lt;/h2>
&lt;p>gardenlet manages &lt;code>DNSRecord&lt;/code> resources for all three DNS records mentioned above (internal, external, and ingress).
In order to successfully reconcile a shoot with the feature gate enabled, extension controllers for &lt;code>DNSRecord&lt;/code> resources for types used in the default, internal, and custom domain secrets should be registered via &lt;code>ControllerRegistration&lt;/code> resources.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> For compatibility reasons, the &lt;code>spec.dns.providers&lt;/code> section is still used to specify additional providers. Only the one marked as &lt;code>primary: true&lt;/code> will be used for &lt;code>DNSRecord&lt;/code>. All others are considered by the &lt;code>shoot-dns-service&lt;/code> extension only (if deployed).&lt;/p>
&lt;/blockquote>
&lt;h3 id="support-for-dnsrecord-resources-in-the-provider-extensions">Support for &lt;code>DNSRecord&lt;/code> Resources in the Provider Extensions&lt;/h3>
&lt;p>The following table contains information about the provider extension version that adds support for &lt;code>DNSRecord&lt;/code> resources:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Extension&lt;/th>
&lt;th>Version&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>provider-alicloud&lt;/td>
&lt;td>&lt;code>v1.26.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-aws&lt;/td>
&lt;td>&lt;code>v1.27.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-azure&lt;/td>
&lt;td>&lt;code>v1.21.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-gcp&lt;/td>
&lt;td>&lt;code>v1.18.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-openstack&lt;/td>
&lt;td>&lt;code>v1.21.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-vsphere&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-equinix-metal&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-kubevirt&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-openshift&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="support-for-dnsrecord-ipv6-recordtype-aaaa-in-the-provider-extensions">Support for &lt;code>DNSRecord&lt;/code> IPv6 &lt;code>recordType: AAAA&lt;/code> in the Provider Extensions&lt;/h3>
&lt;p>The following table contains information about the provider extension version that adds support for &lt;code>DNSRecord&lt;/code> IPv6 &lt;code>recordType: AAAA&lt;/code>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Extension&lt;/th>
&lt;th>Version&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>provider-alicloud&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-aws&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-azure&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-gcp&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-openstack&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-vsphere&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-equinix-metal&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-kubevirt&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-openshift&lt;/td>
&lt;td>N/A&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>provider-local&lt;/td>
&lt;td>&lt;code>v1.63.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="references-and-additional-resources">References and Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_dnsrecord.go">&lt;code>DNSRecord&lt;/code> API (Golang specification)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/dnsrecord">Sample Implementation for the AWS Route53 Provider&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Extension</title><link>https://gardener.cloud/docs/gardener/extensions/resources/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/extension/</guid><description>
&lt;h1 id="contract-extension-resource">Contract: &lt;code>Extension&lt;/code> Resource&lt;/h1>
&lt;p>Gardener defines common procedures which must be passed to create a functioning shoot cluster. Well known steps are represented by special resources like &lt;code>Infrastructure&lt;/code>, &lt;code>OperatingSystemConfig&lt;/code> or &lt;code>DNS&lt;/code>. These resources are typically reconciled by dedicated controllers setting up the infrastructure on the hyperscaler or managing DNS entries, etc.&lt;/p>
&lt;p>But, some requirements don&amp;rsquo;t match with those special resources or don&amp;rsquo;t depend on being proceeded at a specific step in the creation / deletion flow of the shoot. They require a more generic hook. Therefore, Gardener offers the &lt;code>Extension&lt;/code> resource.&lt;/p>
&lt;h2 id="what-is-required-to-register-and-support-an-extension-type">What is required to register and support an Extension type?&lt;/h2>
&lt;p>Gardener creates one &lt;code>Extension&lt;/code> resource per registered extension type in &lt;code>ControllerRegistration&lt;/code> per shoot.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ControllerRegistration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: extension-example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resources:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - kind: Extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> globallyEnabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workerlessSupported: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If &lt;code>spec.resources[].globallyEnabled&lt;/code> is &lt;code>true&lt;/code>, then the &lt;code>Extension&lt;/code> resources of the given &lt;code>type&lt;/code> is created for every shoot cluster. Set to &lt;code>false&lt;/code>, the &lt;code>Extension&lt;/code> resource is only created if configured in the &lt;code>Shoot&lt;/code> manifest. In case of workerless &lt;code>Shoot&lt;/code>, a globally enabled &lt;code>Extension&lt;/code> resource is created only if &lt;code>spec.resources[].workerlessSupported&lt;/code> is also set to &lt;code>true&lt;/code>. If an extension configured in the spec of a workerless &lt;code>Shoot&lt;/code> is not supported yet, the admission request will be rejected.&lt;/p>
&lt;p>The &lt;code>Extension&lt;/code> resources are created in the shoot namespace of the seed cluster.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig: {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Your controller needs to reconcile &lt;code>extensions.extensions.gardener.cloud&lt;/code>. Since there can exist multiple &lt;code>Extension&lt;/code> resources per shoot, each one holds a &lt;code>spec.type&lt;/code> field to let controllers check their responsibility (similar to all other extension resources of Gardener).&lt;/p>
&lt;h2 id="providerconfig">ProviderConfig&lt;/h2>
&lt;p>It is possible to provide data in the &lt;code>Shoot&lt;/code> resource which is copied to &lt;code>spec.providerConfig&lt;/code> of the &lt;code>Extension&lt;/code> resource.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden-foo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo: bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>results in&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo: bar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="shoot-reconciliation-flow-and-extension-status">Shoot Reconciliation Flow and Extension Status&lt;/h2>
&lt;p>Gardener creates Extension resources as part of the Shoot reconciliation. Moreover, it is guaranteed that the &lt;a href="https://github.com/gardener/gardener/blob/master/docs/extensions/resources/cluster.md">Cluster&lt;/a> resource exists before the &lt;code>Extension&lt;/code> resource is created. &lt;code>Extension&lt;/code>s can be reconciled at different stages during Shoot reconciliation depending on the defined extension lifecycle strategy in the respective &lt;a href="https://gardener.cloud/docs/gardener/extensions/controllerregistration/">ControllerRegistration&lt;/a> resource. Please consult the &lt;a href="https://gardener.cloud/docs/gardener/extensions/controllerregistration/#extension-lifecycle">Extension Lifecycle&lt;/a> section for more information.&lt;/p>
&lt;p>For an &lt;code>Extension&lt;/code> controller it is crucial to maintain the &lt;code>Extension&lt;/code>&amp;rsquo;s status correctly. At the end Gardener checks the status of each &lt;code>Extension&lt;/code> and only reports a successful shoot reconciliation if the state of the last operation is &lt;code>Succeeded&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generation: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: Succeeded
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> observedGeneration: 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Infrastructure</title><link>https://gardener.cloud/docs/gardener/extensions/resources/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/infrastructure/</guid><description>
&lt;h1 id="contract-infrastructure-resource">Contract: &lt;code>Infrastructure&lt;/code> Resource&lt;/h1>
&lt;p>Every Kubernetes cluster requires some low-level infrastructure to be setup in order to work properly.
Examples for that are networks, routing entries, security groups, IAM roles, etc.
Before introducing the &lt;code>Infrastructure&lt;/code> extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see &lt;a href="https://github.com/gardener/gardener/tree/0.20.0/charts/seed-terraformer/charts/aws-infra">here&lt;/a>).
Now, Gardener commissions an external, provider-specific controller to take over this task.&lt;/p>
&lt;h2 id="which-infrastructure-resources-are-required">Which infrastructure resources are required?&lt;/h2>
&lt;p>Unfortunately, there is no general answer to this question as it is highly provider specific.
Consider the above mentioned resources, i.e. VPC, subnets, route tables, security groups, IAM roles, SSH key pairs.
Most of the resources are required in order to create VMs (the shoot cluster worker nodes), load balancers, and volumes.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-infrastructure-provider">What needs to be implemented to support a new infrastructure provider?&lt;/h2>
&lt;p>As part of the shoot flow Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cloudprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resourceGroup:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: mygroup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vnet: &lt;span style="color:#008000"># specify either &amp;#39;name&amp;#39; or &amp;#39;cidr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># name: my-vnet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: 10.250.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workers: 10.250.0.0/19
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.secretRef&lt;/code> contains a reference to the provider secret pointing to the account that shall be used to create the needed resources.
However, the most important section is the &lt;code>.spec.providerConfig&lt;/code>.
It contains an embedded declaration of the provider specific configuration for the infrastructure (that cannot be known by Gardener itself).
You are responsible for designing how this configuration looks like.
Gardener does not evaluate it but just copies this part from what has been provided by the end-user in the &lt;code>Shoot&lt;/code> resource.&lt;/p>
&lt;p>After your controller has created the required resources in your provider&amp;rsquo;s infrastructure it needs to generate an output that can be used by other controllers in subsequent steps.
An example for that is the &lt;code>Worker&lt;/code> extension resource controller.
It is responsible for creating virtual machines (shoot worker nodes) in this prepared infrastructure.
Everything that it needs to know in order to do that (e.g. the network IDs, security group names, etc. (again: provider-specific)) needs to be provided as output in the &lt;code>Infrastructure&lt;/code> resource:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerStatus:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureStatus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resourceGroup:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: mygroup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vnet:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-vnet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subnets:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-subnet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> availabilitySets:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: av-set-id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: av-set-name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> routeTables:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: route-table-name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> securityGroups:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: sec-group-name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to support a new infrastructure provider you need to write a controller that watches all &lt;code>Infrastructure&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code>.
You can take a look at the below referenced example implementation for the Azure provider.&lt;/p>
&lt;h2 id="dynamic-nodes-network-for-shoot-clusters">Dynamic nodes network for shoot clusters&lt;/h2>
&lt;p>Some environments do not allow end-users to statically define a CIDR for the network that shall be used for the shoot worker nodes.
In these cases it is possible for the extension controllers to dynamically provision a network for the nodes (as part of their reconciliation loops), and to provide the CIDR in the &lt;code>status&lt;/code> of the &lt;code>Infrastructure&lt;/code> resource:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: infrastructure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerStatus: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodesCIDR: 10.250.0.0/16
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gardener will pick this &lt;code>nodesCIDR&lt;/code> and use it to configure the VPN components to establish network connectivity between the control plane and the worker nodes.
If the &lt;code>Shoot&lt;/code> resource already specifies a nodes CIDR in &lt;code>.spec.networking.nodes&lt;/code> and the extension controller provides also a value in &lt;code>.status.nodesCIDR&lt;/code> in the &lt;code>Infrastructure&lt;/code> resource then the latter one will always be considered with higher priority by Gardener.&lt;/p>
&lt;h2 id="non-provider-specific-information-required-for-infrastructure-creation">Non-provider specific information required for infrastructure creation&lt;/h2>
&lt;p>Some providers might require further information that is not provider specific but already part of the shoot resource.
One example for this is the &lt;a href="https://github.com/gardener/gardener-extension-provider-gcp/tree/master/pkg/controller/infrastructure">GCP infrastructure controller&lt;/a> which needs the pod and the service network of the cluster in order to prepare and configure the infrastructure correctly.
As Gardener cannot know which information is required by providers it simply mirrors the &lt;code>Shoot&lt;/code>, &lt;code>Seed&lt;/code>, and &lt;code>CloudProfile&lt;/code> resources into the seed.
They are part of the &lt;a href="https://gardener.cloud/docs/gardener/extensions/cluster/">&lt;code>Cluster&lt;/code> extension resource&lt;/a> and can be used to extract information that is not part of the &lt;code>Infrastructure&lt;/code> resource itself.&lt;/p>
&lt;h2 id="implementation-details">Implementation details&lt;/h2>
&lt;h3 id="actuator-interface">&lt;code>Actuator&lt;/code> interface&lt;/h3>
&lt;p>Most existing infrastructure controller implementations follow a common pattern where a generic &lt;code>Reconciler&lt;/code> delegates to &lt;a href="https://github.com/gardener/gardener/blob/master/extensions/pkg/controller/infrastructure/actuator.go">an &lt;code>Actuator&lt;/code> interface&lt;/a> that contains the methods &lt;code>Reconcile&lt;/code>, &lt;code>Delete&lt;/code>, &lt;code>Migrate&lt;/code>, and &lt;code>Restore&lt;/code>. These methods are called by the generic &lt;code>Reconciler&lt;/code> for the respective operations, and should be implemented by the extension according to the contract described here and the &lt;a href="https://github.com/gardener/gardener/blob/master/docs/extensions/resources/migration.md">migration guidelines&lt;/a>.&lt;/p>
&lt;h3 id="configvalidator-interface">&lt;code>ConfigValidator&lt;/code> interface&lt;/h3>
&lt;p>For infrastructure controllers, the generic &lt;code>Reconciler&lt;/code> also delegates to &lt;a href="https://github.com/gardener/gardener/blob/master/extensions/pkg/controller/infrastructure/configvalidator.go">a &lt;code>ConfigValidator&lt;/code> interface&lt;/a> that contains a single &lt;code>Validate&lt;/code> method. This method is called by the generic &lt;code>Reconciler&lt;/code> at the beginning of every reconciliation, and can be implemented by the extension to validate the &lt;code>.spec.providerConfig&lt;/code> part of the &lt;code>Infrastructure&lt;/code> resource with the respective cloud provider, typically the existence and validity of cloud provider resources such as AWS VPCs or GCP Cloud NAT IPs.&lt;/p>
&lt;p>The &lt;code>Validate&lt;/code> method returns a list of errors. If this list is non-empty, the generic &lt;code>Reconciler&lt;/code> will fail with an error. This error will have the error code &lt;code>ERR_CONFIGURATION_PROBLEM&lt;/code>, unless there is at least one error in the list that has its &lt;code>ErrorType&lt;/code> field set to &lt;code>field.ErrorTypeInternal&lt;/code>.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and additional resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_infrastructure.go">&lt;code>Infrastructure&lt;/code> API (Golang specification)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-azure/tree/master/pkg/controller/infrastructure">Sample implementation for the Azure provider&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/infrastructure/configvalidator.go">Sample ConfigValidator implementation&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Network</title><link>https://gardener.cloud/docs/gardener/extensions/resources/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/network/</guid><description>
&lt;h1 id="contract-network-resource">Contract: &lt;code>Network&lt;/code> Resource&lt;/h1>
&lt;p>Gardener is an open-source project that provides a nested user model. Basically, there are two types of services provided by Gardener to its users:&lt;/p>
&lt;ul>
&lt;li>Managed: end-users only request a Kubernetes cluster (Clusters-as-a-Service)&lt;/li>
&lt;li>Hosted: operators utilize Gardener to provide their own managed version of Kubernetes (Cluster-Provisioner-as-a-service)&lt;/li>
&lt;/ul>
&lt;p>Whether a user is an operator or an end-user, it makes sense to provide choice. For example, for an end-user it might make sense to
choose a network-plugin that would support enforcing network policies (some plugins does not come with network-policy support by default).
For operators however, choice only matters for delegation purposes, i.e., when providing an own managed-service, it becomes important to also provide choice over which network-plugins to use.&lt;/p>
&lt;p>Furthermore, Gardener provisions clusters on different cloud-providers with different networking requirements. For example, Azure does not support Calico overlay networking with IP in IP [1], this leads to the introduction of manual exceptions in static add-on charts which is error prone and can lead to failures during upgrades.&lt;/p>
&lt;p>Finally, every provider is different, and thus the network always needs to adapt to the infrastructure needs to provide better performance. Consistency does not necessarily lie in the implementation but in the interface.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>Prior to the &lt;code>Network Extensibility&lt;/code> concept, Gardener followed a mono network-plugin support model (i.e., Calico). Although this seemed to be the easier approach, it did not completely reflect the real use-case.
The goal of the Gardener Network Extensions is to support different network plugins, therefore, the specification for the network resource won&amp;rsquo;t be fixed and will be customized based on the underlying network plugin.&lt;/p>
&lt;p>To do so, a &lt;code>ProviderConfig&lt;/code> field in the spec will be provided where each plugin will define. Below is an example for how to deploy Calico as the cluster network plugin.&lt;/p>
&lt;h2 id="the-network-extensions-resource">The Network Extensions Resource&lt;/h2>
&lt;p>Here is what a typical &lt;code>Network&lt;/code> resource would look-like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ipFamilies:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - IPv4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> podCIDR: 100.244.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> serviceCIDR: 100.32.0.0/13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: calico
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: calico.networking.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: NetworkConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> backend: bird
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ipam:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: usePodCIDR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: host-local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above resources is divided into two parts (more information can be found at &lt;a href="https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/usage/">Using the Networking Calico Extension&lt;/a>):&lt;/p>
&lt;ul>
&lt;li>global configuration (e.g., podCIDR, serviceCIDR, and type)&lt;/li>
&lt;li>provider specific config (e.g., for calico we can choose to configure a &lt;code>bird&lt;/code> backend)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: Certain cloud-provider extensions might have webhooks that would modify the network-resource to fit into their network specific context. As previously mentioned, Azure does not support IPIP, as a result, the &lt;a href="https://github.com/gardener/gardener-extension-provider-azure">Azure provider extension&lt;/a> implements a &lt;a href="https://github.com/gardener/gardener-extension-provider-azure/blob/master/pkg/webhook/network/mutate.go">webhook&lt;/a> to mutate the backend and set it to &lt;code>None&lt;/code> instead of &lt;code>bird&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="supporting-a-new-network-extension-provider">Supporting a New Network Extension Provider&lt;/h2>
&lt;p>To add support for another networking provider (e.g., weave, Cilium, Flannel) a network extension controller needs to be implemented which would optionally have its own custom configuration specified in the &lt;code>spec.providerConfig&lt;/code> in the &lt;code>Network&lt;/code> resource. For example, if support for a network plugin named &lt;code>gardenet&lt;/code> is required, the following &lt;code>Network&lt;/code> resource would be created:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ipFamilies:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - IPv4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> podCIDR: 100.244.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> serviceCIDR: 100.32.0.0/13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: gardenet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: gardenet.networking.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: NetworkConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gardenetCustomConfigField: &amp;lt;value&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ipam:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: usePodCIDR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: host-local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once applied, the presumably implemented &lt;code>Gardenet&lt;/code> extension controller would pick the configuration up, parse the &lt;code>providerConfig&lt;/code>, and create the necessary resources in the shoot.&lt;/p>
&lt;p>For additional reference, please have a look at the &lt;a href="https://github.com/gardener/gardener-extension-networking-calico">networking-calico&lt;/a> provider extension, which provides more information on how to configure the necessary charts, as well as the actuators required to reconcile networking inside the &lt;code>Shoot&lt;/code> cluster to the desired state.&lt;/p>
&lt;h2 id="supporting-kube-proxy-less-service-routing">Supporting &lt;code>kube-proxy&lt;/code>-less Service Routing&lt;/h2>
&lt;p>Some networking extensions support service routing without the &lt;code>kube-proxy&lt;/code> component. This is why Gardener supports disabling of &lt;code>kube-proxy&lt;/code> for service routing by setting &lt;code>.spec.kubernetes.kubeproxy.enabled&lt;/code> to &lt;code>false&lt;/code> in the &lt;code>Shoot&lt;/code> specification. The implicit contract of the flag is:&lt;/p>
&lt;p>&lt;em>If &lt;code>kube-proxy&lt;/code> is disabled, then the networking extension is responsible for the service routing.&lt;/em>&lt;/p>
&lt;p>The networking extensions need to handle this twofold:&lt;/p>
&lt;ol>
&lt;li>During the reconciliation of the networking resources, the extension needs to check whether &lt;code>kube-proxy&lt;/code> takes care of the service routing or the networking extension itself should handle it. In case the networking extension should be responsible according to &lt;code>.spec.kubernetes.kubeproxy.enabled&lt;/code> (but is unable to perform the service routing), it should raise an error during the reconciliation. If the networking extension should handle the service routing, it may reconfigure itself accordingly.&lt;/li>
&lt;li>(Optional) In case the networking extension does not support taking over the service routing (in some scenarios), it is recommended to also provide a validating admission webhook to reject corresponding changes early on. The validation may take the current operating mode of the networking extension into consideration.&lt;/li>
&lt;/ol>
&lt;h2 id="related-links">Related Links&lt;/h2>
&lt;ul>
&lt;li>[1] &lt;a href="https://docs.tigera.io/calico/latest/networking/configuring/vxlan-ipip#encapsulation-types">Calico overlay networking on Azure&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: OperatingSystemConfig</title><link>https://gardener.cloud/docs/gardener/extensions/resources/operatingsystemconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/operatingsystemconfig/</guid><description>
&lt;h1 id="contract-operatingsystemconfig-resource">Contract: &lt;code>OperatingSystemConfig&lt;/code> Resource&lt;/h1>
&lt;p>Gardener uses the machine API and leverages the functionalities of the &lt;a href="https://github.com/gardener/machine-controller-manager">machine-controller-manager&lt;/a> (MCM) in order to manage the worker nodes of a shoot cluster.
The machine-controller-manager itself simply takes a reference to an OS-image and (optionally) some user-data (a script or configuration that is executed when a VM is bootstrapped), and forwards both to the provider&amp;rsquo;s API when creating VMs.
MCM does not have any restrictions regarding supported operating systems as it does not modify or influence the machine&amp;rsquo;s configuration in any way - it just creates/deletes machines with the provided metadata.&lt;/p>
&lt;p>Consequently, Gardener needs to provide this information when interacting with the machine-controller-manager.
This means that basically every operating system is possible to be used, as long as there is some implementation that generates the OS-specific configuration in order to provision/bootstrap the machines.&lt;/p>
&lt;p>⚠️ Currently, there are a few requirements of pre-installed components that must be present in all OS images:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://containerd.io/">containerd&lt;/a>
&lt;ol>
&lt;li>&lt;a href="https://github.com/projectatomic/containerd/blob/master/docs/cli.md/">ctr (client CLI)&lt;/a>&lt;/li>
&lt;li>&lt;code>containerd&lt;/code> must listen on its default socket path: &lt;code>unix:///run/containerd/containerd.sock&lt;/code>&lt;/li>
&lt;li>&lt;code>containerd&lt;/code> must be configured to work with the default configuration file in: &lt;code>/etc/containerd/config.toml&lt;/code> (eventually created by Gardener).&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>The reasons for that will become evident later.&lt;/p>
&lt;h2 id="what-does-the-user-data-bootstrapping-the-machines-contain">What does the user-data bootstrapping the machines contain?&lt;/h2>
&lt;p>Gardener installs a few components onto every worker machine in order to allow it to join the shoot cluster.
There is the &lt;code>kubelet&lt;/code> process, some scripts for continuously checking the health of &lt;code>kubelet&lt;/code> and &lt;code>containerd&lt;/code>, but also configuration for log rotation, CA certificates, etc.
You can find the complete configuration &lt;a href="https://github.com/gardener/gardener/tree/master/pkg/component/extensions/operatingsystemconfig/original/components">at the components folder&lt;/a>. We are calling this the &amp;ldquo;original&amp;rdquo; user-data.&lt;/p>
&lt;h2 id="how-does-gardener-bootstrap-the-machines">How does Gardener bootstrap the machines?&lt;/h2>
&lt;p>&lt;code>gardenlet&lt;/code> makes use of &lt;code>gardener-node-agent&lt;/code> to perform the bootstrapping and reconciliation of systemd units and files on the machine.
Please refer to &lt;a href="https://gardener.cloud/docs/gardener/concepts/node-agent/#installation-and-bootstrapping">this document&lt;/a> for a first overview.&lt;/p>
&lt;p>Usually, you would submit all the components you want to install onto the machine as part of the user-data during creation time.
However, some providers do have a size limitation (around ~16KB) for that user-data.
That&amp;rsquo;s why we do not send the &amp;ldquo;original&amp;rdquo; user-data to the machine-controller-manager (who then forwards it to the provider&amp;rsquo;s API).
Instead, we only send a small &amp;ldquo;init&amp;rdquo; script that bootstrap the &lt;a href="https://gardener.cloud/docs/gardener/concepts/node-agent/">&lt;code>gardener-node-agent&lt;/code>&lt;/a>.
It fetches the &amp;ldquo;original&amp;rdquo; content from a &lt;code>Secret&lt;/code> and applies it on the machine directly.
This way we can extend the &amp;ldquo;original&amp;rdquo; user-data without any size restrictions (except for the &lt;code>1 MB&lt;/code> limit for &lt;code>Secret&lt;/code>s).&lt;/p>
&lt;p>The high-level flow is as follows:&lt;/p>
&lt;ol>
&lt;li>For every worker pool &lt;code>X&lt;/code> in the &lt;code>Shoot&lt;/code> specification, Gardener creates a &lt;code>Secret&lt;/code> named &lt;code>cloud-config-&amp;lt;X&amp;gt;&lt;/code> in the &lt;code>kube-system&lt;/code> namespace of the shoot cluster. The secret contains the &amp;ldquo;original&amp;rdquo; &lt;code>OperatingSystemConfig&lt;/code> (i.e., systemd units and files for &lt;code>kubelet&lt;/code>).&lt;/li>
&lt;li>Gardener generates a kubeconfig with minimal permissions just allowing reading these secrets. It is used by the &lt;code>gardener-node-agent&lt;/code> later.&lt;/li>
&lt;li>Gardener provides the &lt;code>gardener-node-init.sh&lt;/code> bash script and the machine image stated in the &lt;code>Shoot&lt;/code> specification to the machine-controller-manager.&lt;/li>
&lt;li>Based on this information, the machine-controller-manager creates the VM.&lt;/li>
&lt;li>After the VM has been provisioned, the &lt;code>gardener-node-init.sh&lt;/code> script starts, fetches the &lt;code>gardener-node-agent&lt;/code> binary, and starts it.&lt;/li>
&lt;li>The &lt;code>gardener-node-agent&lt;/code> will read the &lt;code>gardener-node-agent-&amp;lt;X&amp;gt;&lt;/code> &lt;code>Secret&lt;/code> for its worker pool (containing the &amp;ldquo;original&amp;rdquo; &lt;code>OperatingSystemConfig&lt;/code>), and reconciles it.&lt;/li>
&lt;/ol>
&lt;p>The &lt;code>gardener-node-agent&lt;/code> can update itself in case of newer Gardener versions, and it performs a continuous reconciliation of the systemd units and files in the provided &lt;code>OperatingSystemConfig&lt;/code> (just like any other Kubernetes controller).&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-operating-system">What needs to be implemented to support a new operating system?&lt;/h2>
&lt;p>As part of the &lt;a href="https://gardener.cloud/docs/gardener/concepts/gardenlet/#shoot-controller">&lt;code>Shoot&lt;/code> reconciliation flow&lt;/a>, &lt;code>gardenlet&lt;/code> will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: OperatingSystemConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: &amp;lt;my-operating-system&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: reconcile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> units:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: containerd.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dropIns:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: 10-containerd-opts.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [Service]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Environment=&amp;#34;SOME_OPTS=--foo=bar&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: containerd-monitor.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> command: start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [Unit]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Description=Containerd-monitor daemon
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> After=kubelet.service
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [Install]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> WantedBy=multi-user.target
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [Service]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Restart=always
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> EnvironmentFile=/etc/environment
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> ExecStart=/opt/bin/health-monitor containerd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> files:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - path: /var/lib/kubelet/ca.crt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> permissions: 0644
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> encoding: b64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: default-token-5dtjz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataKey: token
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - path: /etc/sysctl.d/99-k8s-general.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> permissions: 0644
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inline:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> # A higher vm.max_map_count is great for elasticsearch, mongo, or other mmap users
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> # See https://github.com/kubernetes/kops/issues/1340
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> vm.max_map_count = 135217728&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to support a new operating system, you need to write a controller that watches all &lt;code>OperatingSystemConfig&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-operating-system&amp;gt;&lt;/code>.
For those it shall generate a configuration blob that fits to your operating system.&lt;/p>
&lt;p>&lt;code>OperatingSystemConfig&lt;/code>s can have two purposes: either &lt;code>provision&lt;/code> or &lt;code>reconcile&lt;/code>.&lt;/p>
&lt;h3 id="provision-purpose">&lt;code>provision&lt;/code> Purpose&lt;/h3>
&lt;p>The &lt;code>provision&lt;/code> purpose is used by &lt;code>gardenlet&lt;/code> for the user-data that it later passes to the machine-controller-manager (and then to the provider&amp;rsquo;s API) when creating new VMs.
It contains the &lt;code>gardener-node-init.sh&lt;/code> script and systemd unit.&lt;/p>
&lt;p>The OS controller has to translate the &lt;code>.spec.units&lt;/code> and &lt;code>.spec.files&lt;/code> into configuration that fits to the operating system.
For example, a Flatcar controller might generate a &lt;a href="https://github.com/flatcar/coreos-cloudinit/blob/flatcar-master/Documentation/cloud-config-examples.md">CoreOS cloud-config&lt;/a> or &lt;a href="https://coreos.com/ignition/docs/latest/what-is-ignition.html">Ignition&lt;/a>, SLES might generate &lt;a href="https://cloudinit.readthedocs.io/en/latest/">cloud-init&lt;/a>, and others might simply generate a bash script translating the &lt;code>.spec.units&lt;/code> into &lt;code>systemd&lt;/code> units, and &lt;code>.spec.files&lt;/code> into real files on the disk.&lt;/p>
&lt;blockquote>
&lt;p>⚠️ Please avoid mixing in additional systemd units or files - this step should just translate what &lt;code>gardenlet&lt;/code> put into &lt;code>.spec.units&lt;/code> and &lt;code>.spec.files&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>After generation, extension controllers are asked to store their OS config inside a &lt;code>Secret&lt;/code> (as it might contain confidential data) in the same namespace.
The secret&amp;rsquo;s &lt;code>.data&lt;/code> could look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: osc-result-pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ownerReferences:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blockOwnerDeletion: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> controller: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: OperatingSystemConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uid: 99c0c5ca-19b9-11e9-9ebd-d67077b40f82
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloud_config: base64(generated-user-data)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, the secret&amp;rsquo;s metadata must be provided in the &lt;code>OperatingSystemConfig&lt;/code>&amp;rsquo;s &lt;code>.status&lt;/code> field:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: osc-result-pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description: Successfully generated cloud config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastUpdateTime: &lt;span style="color:#a31515">&amp;#34;2019-01-23T07:45:23Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> progress: 100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: Succeeded
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: Reconcile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> observedGeneration: 5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="reconcile-purpose">&lt;code>reconcile&lt;/code> Purpose&lt;/h3>
&lt;p>The &lt;code>reconcile&lt;/code> purpose contains the &amp;ldquo;original&amp;rdquo; &lt;code>OperatingSystemConfig&lt;/code> (which is later stored in &lt;code>Secret&lt;/code>s in the shoot&amp;rsquo;s &lt;code>kube-system&lt;/code> namespace (see step 1)).&lt;/p>
&lt;p>The OS controller does not need to translate anything here, but it has the option to provide additional systemd units or files via the &lt;code>.status&lt;/code> field:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensionUnits:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: my-custom-service.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> command: start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [Unit]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> // some systemd unit content&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensionFiles:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - path: /etc/some/file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> permissions: 0644
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inline:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: some-file-content
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description: Successfully generated cloud config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastUpdateTime: &lt;span style="color:#a31515">&amp;#34;2019-01-23T07:45:23Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> progress: 100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: Succeeded
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: Reconcile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> observedGeneration: 5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>gardener-node-agent&lt;/code> will merge &lt;code>.spec.units&lt;/code> and &lt;code>.status.extensionUnits&lt;/code> as well as &lt;code>.spec.files&lt;/code> and &lt;code>.status.extensionFiles&lt;/code> when applying.&lt;/p>
&lt;p>You can find an example implementation &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/provider-local/controller/operatingsystemconfig/actuator.go">here&lt;/a>.&lt;/p>
&lt;h3 id="bootstrap-tokens">Bootstrap Tokens&lt;/h3>
&lt;p>&lt;code>gardenlet&lt;/code> adds a file with the content &lt;code>&amp;lt;&amp;lt;BOOTSTRAP_TOKEN&amp;gt;&amp;gt;&lt;/code> to the &lt;code>OperatingSystemConfig&lt;/code> with purpose &lt;code>provision&lt;/code> and sets &lt;code>transmitUnencoded=true&lt;/code>.
This instructs the responsible OS extension to pass this file (with its content in clear-text) to the corresponding &lt;code>Worker&lt;/code> resource.&lt;/p>
&lt;p>&lt;code>machine-controller-manager&lt;/code> makes sure that:&lt;/p>
&lt;ul>
&lt;li>a bootstrap token gets created per machine&lt;/li>
&lt;li>the &lt;code>&amp;lt;&amp;lt;BOOTSTRAP_TOKEN&amp;gt;&amp;gt;&lt;/code> string in the user data of the machine gets replaced by the generated token&lt;/li>
&lt;/ul>
&lt;p>After the machine has been bootstrapped, the token secret in the shoot cluster gets deleted again.&lt;/p>
&lt;p>The token is used to bootstrap &lt;a href="https://gardener.cloud/docs/gardener/concepts/node-agent/">Gardener Node Agent&lt;/a> and &lt;code>kubelet&lt;/code>.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-operating-system-1">What needs to be implemented to support a new operating system?&lt;/h2>
&lt;p>As part of the shoot flow Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: OperatingSystemConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: &amp;lt;my-operating-system&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: reconcile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> units:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: docker.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dropIns:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: 10-docker-opts.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [Service]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Environment=&amp;#34;DOCKER_OPTS=--log-opt max-size=60m --log-opt max-file=3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: docker-monitor.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> command: start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [Unit]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Description=Containerd-monitor daemon
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> After=kubelet.service
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [Install]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> WantedBy=multi-user.target
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> [Service]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> Restart=always
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> EnvironmentFile=/etc/environment
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> ExecStart=/opt/bin/health-monitor docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> files:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - path: /var/lib/kubelet/ca.crt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> permissions: 0644
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> encoding: b64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: default-token-5dtjz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataKey: token
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - path: /etc/sysctl.d/99-k8s-general.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> permissions: 0644
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inline:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> # A higher vm.max_map_count is great for elasticsearch, mongo, or other mmap users
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> # See https://github.com/kubernetes/kops/issues/1340
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> vm.max_map_count = 135217728&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to support a new operating system, you need to write a controller that watches all &lt;code>OperatingSystemConfig&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-operating-system&amp;gt;&lt;/code>.
For those it shall generate a configuration blob that fits to your operating system.
For example, a CoreOS controller might generate a &lt;a href="https://coreos.com/os/docs/latest/cloud-config.html">CoreOS cloud-config&lt;/a> or &lt;a href="https://coreos.com/ignition/docs/latest/what-is-ignition.html">Ignition&lt;/a>, SLES might generate &lt;a href="https://cloudinit.readthedocs.io/en/latest/">cloud-init&lt;/a>, and others might simply generate a bash script translating the &lt;code>.spec.units&lt;/code> into &lt;code>systemd&lt;/code> units, and &lt;code>.spec.files&lt;/code> into real files on the disk.&lt;/p>
&lt;p>&lt;code>OperatingSystemConfig&lt;/code>s can have two purposes which can be used (or ignored) by the extension controllers: either &lt;code>provision&lt;/code> or &lt;code>reconcile&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>The &lt;code>provision&lt;/code> purpose is used by Gardener for the user-data that it later passes to the machine-controller-manager (and then to the provider&amp;rsquo;s API) when creating new VMs. It contains the &lt;code>gardener-node-init&lt;/code> unit.&lt;/li>
&lt;li>The &lt;code>reconcile&lt;/code> purpose contains the &amp;ldquo;original&amp;rdquo; user-data (that is then stored in &lt;code>Secret&lt;/code>s in the shoot&amp;rsquo;s &lt;code>kube-system&lt;/code> namespace (see step 1)). This is downloaded and applies late (see step 5).&lt;/li>
&lt;/ul>
&lt;p>As described above, the &amp;ldquo;original&amp;rdquo; user-data must be re-applicable to allow in-place updates.
The way how this is done is specific to the generated operating system config (e.g., for CoreOS cloud-init the command is &lt;code>/usr/bin/coreos-cloudinit --from-file=&amp;lt;path&amp;gt;&lt;/code>, whereas SLES would run &lt;code>cloud-init --file &amp;lt;path&amp;gt; single -n write_files --frequency=once&lt;/code>).
Consequently, besides the generated OS config, the extension controller must also provide a command for re-application an updated version of the user-data.
As visible in the mentioned examples, the command requires a path to the user-data file.
As soon as Gardener detects that the user data has changed it will reload the systemd daemon and restart all the units provided in the &lt;code>.status.units[]&lt;/code> list (see the below example). The same logic applies during the very first application of the whole configuration.&lt;/p>
&lt;p>After generation, extension controllers are asked to store their OS config inside a &lt;code>Secret&lt;/code> (as it might contain confidential data) in the same namespace.
The secret&amp;rsquo;s &lt;code>.data&lt;/code> could look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: osc-result-pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ownerReferences:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blockOwnerDeletion: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> controller: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: OperatingSystemConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uid: 99c0c5ca-19b9-11e9-9ebd-d67077b40f82
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloud_config: base64(generated-user-data)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, the secret&amp;rsquo;s metadata, the OS-specific command to re-apply the configuration, and the list of &lt;code>systemd&lt;/code> units that shall be considered to be restarted if an updated version of the user-data is re-applied must be provided in the &lt;code>OperatingSystemConfig&lt;/code>&amp;rsquo;s &lt;code>.status&lt;/code> field:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: osc-result-pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description: Successfully generated cloud config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastUpdateTime: &lt;span style="color:#a31515">&amp;#34;2019-01-23T07:45:23Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> progress: 100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: Succeeded
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: Reconcile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> observedGeneration: 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> units:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - docker-monitor.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the &lt;code>.status&lt;/code> indicates that the extension controller finished reconciling Gardener will continue with the next step of the shoot reconciliation flow.&lt;/p>
&lt;h2 id="cri-support">CRI Support&lt;/h2>
&lt;p>Gardener supports specifying a Container Runtime Interface (CRI) configuration in the &lt;code>OperatingSystemConfig&lt;/code> resource. If the &lt;code>.spec.cri&lt;/code> section exists, then the &lt;code>name&lt;/code> property is mandatory. The only supported value for &lt;code>cri.name&lt;/code> at the moment is: &lt;code>containerd&lt;/code>.
For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: OperatingSystemConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: pool-01-original
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: &amp;lt;my-operating-system&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: reconcile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cri:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: containerd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># cgroupDriver: cgroupfs # or systemd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> containerd:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sandboxImage: registry.k8s.io/pause
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># registries:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># - upstream: docker.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># server: https://registry-1.docker.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># hosts:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># - url: http://&amp;lt;service-ip&amp;gt;:&amp;lt;port&amp;gt;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># plugins:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># - op: add # add (default) or remove&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># path: [io.containerd.grpc.v1.cri, containerd]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># values: &amp;#39;{&amp;#34;default_runtime_name&amp;#34;: &amp;#34;runc&amp;#34;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To support &lt;code>containerd&lt;/code>, an OS extension must satisfy the following criteria:&lt;/p>
&lt;ol>
&lt;li>The operating system must have built-in &lt;a href="https://containerd.io/">containerd&lt;/a> and &lt;a href="https://github.com/projectatomic/containerd/blob/master/docs/cli.md/">ctr (client CLI)&lt;/a>.&lt;/li>
&lt;li>&lt;code>containerd&lt;/code> must listen on its default socket path: &lt;code>unix:///run/containerd/containerd.sock&lt;/code>&lt;/li>
&lt;li>&lt;code>containerd&lt;/code> must be configured to work with the default configuration file in: &lt;code>/etc/containerd/config.toml&lt;/code> (Created by Gardener).&lt;/li>
&lt;/ol>
&lt;p>For a convenient handling, &lt;a href="https://gardener.cloud/docs/gardener/concepts/node-agent/">gardener-node-agent&lt;/a> can manage various aspects of containerd&amp;rsquo;s config, e.g. the registry configuration, if given in the &lt;code>OperatingSystemConfig&lt;/code>.
Any Gardener extension which needs to modify the config, should check the functionality exposed through this API first.
If applicable, adjustments can be implemented through mutating webhooks, acting on the created or updated &lt;code>OperatingSystemConfig&lt;/code> resource.&lt;/p>
&lt;p>If CRI configurations are not supported, it is recommended to create a validating webhook running in the garden cluster that prevents specifying the &lt;code>.spec.providers.workers[].cri&lt;/code> section in the &lt;code>Shoot&lt;/code> objects.&lt;/p>
&lt;h3 id="cgroup-driver">cgroup driver&lt;/h3>
&lt;p>For Shoot clusters using Kubernetes &amp;lt; 1.31, Gardener is setting the kubelet&amp;rsquo;s cgroup driver to &lt;a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#cgroupfs-cgroup-driver">&lt;code>cgroupfs&lt;/code>&lt;/a> and containerd&amp;rsquo;s cgroup driver is unmanaged. For Shoot clusters using Kubernetes 1.31+, Gardener is setting both kubelet&amp;rsquo;s and containerd&amp;rsquo;s cgroup driver to &lt;a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#systemd-cgroup-driver">&lt;code>systemd&lt;/code>&lt;/a>.&lt;/p>
&lt;p>The &lt;code>systemd&lt;/code> cgroup driver is a requirement for operating systems using &lt;a href="https://kubernetes.io/docs/concepts/architecture/cgroups/">cgroup v2&lt;/a>. It&amp;rsquo;s important to ensure that both kubelet and the container runtime (containerd) are using the same cgroup driver to avoid potential issues.&lt;/p>
&lt;p>OS extensions might also overwrite the cgroup driver for containerd and kubelet.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_operatingsystemconfig.go">&lt;code>OperatingSystemConfig&lt;/code> API (Golang Specification)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/concepts/node-agent/">Gardener Node Agent&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Worker</title><link>https://gardener.cloud/docs/gardener/extensions/resources/worker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/worker/</guid><description>
&lt;h1 id="contract-worker-resource">Contract: &lt;code>Worker&lt;/code> Resource&lt;/h1>
&lt;p>While the control plane of a shoot cluster is living in the seed and deployed as native Kubernetes workload, the worker nodes of the shoot clusters are normal virtual machines (VMs) in the end-users infrastructure account.
The Gardener project features a sub-project called &lt;a href="https://github.com/gardener/machine-controller-manager">machine-controller-manager&lt;/a>.
This controller is extending the Kubernetes API using custom resource definitions to represent actual VMs as &lt;code>Machine&lt;/code> objects inside a Kubernetes system.
This approach unlocks the possibility to manage virtual machines in the Kubernetes style and benefit from all its design principles.&lt;/p>
&lt;h2 id="what-is-the-machine-controller-manager-doing-exactly">What is the machine-controller-manager doing exactly?&lt;/h2>
&lt;p>Generally, there are provider-specific &lt;code>MachineClass&lt;/code> objects (&lt;code>AWSMachineClass&lt;/code>, &lt;code>AzureMachineClass&lt;/code>, etc.; similar to &lt;code>StorageClass&lt;/code>), and &lt;code>MachineDeployment&lt;/code>, &lt;code>MachineSet&lt;/code>, and &lt;code>Machine&lt;/code> objects (similar to &lt;code>Deployment&lt;/code>, &lt;code>ReplicaSet&lt;/code>, and &lt;code>Pod&lt;/code>).
A machine class describes &lt;strong>where&lt;/strong> and &lt;strong>how&lt;/strong> to create virtual machines (in which networks, region, availability zone, SSH key, user-data for bootstrapping, etc.), while a &lt;code>Machine&lt;/code> results in an actual virtual machine.
You can read up &lt;a href="https://github.com/gardener/machine-controller-manager">more information&lt;/a> in the machine-controller-manager&amp;rsquo;s &lt;a href="https://github.com/gardener/machine-controller-manager">repository&lt;/a>.&lt;/p>
&lt;p>The &lt;code>gardenlet&lt;/code> deploys the &lt;code>machine-controller-manager&lt;/code>, hence, provider extensions only have to inject their specific out-of-tree &lt;code>machine-controller-manager&lt;/code> sidecar container into the &lt;code>Deployment&lt;/code>.&lt;/p>
&lt;h2 id="what-needs-to-be-implemented-to-support-a-new-worker-provider">What needs to be implemented to support a new worker provider?&lt;/h2>
&lt;p>As part of the shoot flow Gardener will create a special CRD in the seed cluster that needs to be reconciled by an extension controller, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Worker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cloudprovider
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> infrastructureProviderStatus:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureStatus
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ec2:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keyName: shoot--foo--bar-ssh-publickey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iam:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instanceProfiles:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: shoot--foo--bar-nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> roles:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - arn: arn:aws:iam::0123456789:role/shoot--foo--bar-nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vpc:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: vpc-0123456789
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> securityGroups:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: sg-1234567890
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subnets:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: subnet-01234
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: eu-west-1b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: subnet-56789
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: eu-west-1b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: subnet-0123a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: eu-west-1c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - id: subnet-5678a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: public
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: eu-west-1c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pools:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: cpu-worker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minimum: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maximum: 5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxSurge: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxUnavailable: 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineType: m4.large
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineImage:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: coreos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> version: 1967.5.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodeAgentSecretName: gardener-node-agent-local-ee46034b8269353b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodeTemplate:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> capacity:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cpu: 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gpu: 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memory: 8Gi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node.kubernetes.io/role: node
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> worker.gardener.cloud/cri-name: containerd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> worker.gardener.cloud/pool: cpu-worker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> worker.gardener.cloud/system-components: &lt;span style="color:#a31515">&amp;#34;true&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userDataSecretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: user-data-secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key: cloud_config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volume:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size: 20Gi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: gp2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zones:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - eu-west-1b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - eu-west-1c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineControllerManager:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drainTimeout: 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> healthTimeout: 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> creationTimeout: 10m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxEvictRetries: 30
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodeConditions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ReadonlyFilesystem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - DiskPressure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - KernelDeadlock
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clusterAutoscaler:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scaleDownUtilizationThreshold: 0.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scaleDownGpuUtilizationThreshold: 0.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scaleDownUnneededTime: 30m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scaleDownUnreadyTime: 1h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxNodeProvisionTime: 15m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.secretRef&lt;/code> contains a reference to the provider secret pointing to the account that shall be used to create the needed virtual machines.
Also, as you can see, Gardener copies the output of the infrastructure creation (&lt;code>.spec.infrastructureProviderStatus&lt;/code>, see &lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/infrastructure/">&lt;code>Infrastructure&lt;/code> resource&lt;/a>), into the &lt;code>.spec&lt;/code>.&lt;/p>
&lt;p>In the &lt;code>.spec.pools[]&lt;/code> field, the desired worker pools are listed.
In the above example, one pool with machine type &lt;code>m4.large&lt;/code> and &lt;code>min=3&lt;/code>, &lt;code>max=5&lt;/code> machines shall be spread over two availability zones (&lt;code>eu-west-1b&lt;/code>, &lt;code>eu-west-1c&lt;/code>).
This information together with the infrastructure status must be used to determine the proper configuration for the machine classes.&lt;/p>
&lt;p>The &lt;code>spec.pools[].labels&lt;/code> map contains all labels that should be added to all nodes of the corresponding worker pool.
Gardener configures kubelet&amp;rsquo;s &lt;code>--node-labels&lt;/code> flag to contain all labels that are mentioned here and allowed by the &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#noderestriction">&lt;code>NodeRestriction&lt;/code> admission plugin&lt;/a>.
This makes sure that kubelet adds all user-specified and gardener-managed labels to the new &lt;code>Node&lt;/code> object when registering a new machine with the API server.
Nevertheless, this is only effective when bootstrapping new nodes.
The provider extension (respectively, machine-controller-manager) is still responsible for updating the labels of existing &lt;code>Nodes&lt;/code> when the worker specification changes.&lt;/p>
&lt;p>The &lt;code>spec.pools[].nodeTemplate.capacity&lt;/code> field contains the resource information of the machine like &lt;code>cpu&lt;/code>, &lt;code>gpu&lt;/code>, and &lt;code>memory&lt;/code>. This info is used by Cluster Autoscaler to generate &lt;code>nodeTemplate&lt;/code> during scaling the &lt;code>nodeGroup&lt;/code> from zero.&lt;/p>
&lt;p>The &lt;code>spec.pools[].machineControllerManager&lt;/code> field allows to configure the settings for machine-controller-manager component. Providers must populate these settings on worker-pool to the related &lt;a href="https://github.com/gardener/machine-controller-manager/blob/master/kubernetes/machine_objects/machine-deployment.yaml#L30-L34">fields&lt;/a> in MachineDeployment.&lt;/p>
&lt;p>The &lt;code>spec.pools[].clusterAutoscaler&lt;/code> field contains &lt;code>cluster-autoscaler&lt;/code> settings that are to be applied only to specific worker group. &lt;code>cluster-autoscaler&lt;/code> expects to find these settings as annotations on the &lt;code>MachineDeployment&lt;/code>, and so providers must pass these values to the corresponding &lt;code>MachineDeployment&lt;/code> via annotations. The keys for these annotations can be found &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_worker.go">here&lt;/a> and the values for the corresponding annotations should be the same as what is passed into the field. Providers can use the helper function &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/helper/helper.go#L73">&lt;code>extensionsv1alpha1helper.GetMachineDeploymentClusterAutoscalerAnnotations&lt;/code>&lt;/a> that returns the annotation map to be used.&lt;/p>
&lt;p>The controller must only inject its provider-specific sidecar container into the &lt;code>machine-controller-manager&lt;/code> &lt;code>Deployment&lt;/code> managed by &lt;code>gardenlet&lt;/code>.&lt;/p>
&lt;p>After that, it must compute the desired machine classes and the desired machine deployments.
Typically, one class maps to one deployment, and one class/deployment is created per availability zone.
Following this convention, the created resource would look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1-3db65
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gardener.cloud/purpose: machineclass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: Opaque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerAccessKeyId: eW91ci1hd3MtYWNjZXNzLWtleS1pZAo=
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerSecretAccessKey: eW91ci1hd3Mtc2VjcmV0LWFjY2Vzcy1rZXkK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userData: c29tZSBkYXRhIHRvIGJvb3RzdHJhcCB0aGUgVk0K
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: machine.sapcloud.io/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: AWSMachineClass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1-3db65
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ami: ami-0123456789 &lt;span style="color:#008000"># Your controller must map the stated version to the provider specific machine image information, in the AWS case the AMI.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blockDevices:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ebs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumeSize: 20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumeType: gp2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iam:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keyName: shoot--foo--bar-ssh-publickey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineType: m4.large
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networkInterfaces:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - securityGroupIDs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - sg-1234567890
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subnetID: subnet-01234
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1-3db65
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tags:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes.io/cluster/shoot--foo--bar: &lt;span style="color:#a31515">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes.io/role/node: &lt;span style="color:#a31515">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: machine.sapcloud.io/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: MachineDeployment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> replicas: 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selector:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matchLabels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strategy:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: RollingUpdate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rollingUpdate:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxSurge: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxUnavailable: 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: AWSMachineClass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1-3db65
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>for the first availability zone &lt;code>eu-west-1b&lt;/code>, and&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z2-5z6as
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gardener.cloud/purpose: machineclass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: Opaque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerAccessKeyId: eW91ci1hd3MtYWNjZXNzLWtleS1pZAo=
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerSecretAccessKey: eW91ci1hd3Mtc2VjcmV0LWFjY2Vzcy1rZXkK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> userData: c29tZSBkYXRhIHRvIGJvb3RzdHJhcCB0aGUgVk0K
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: machine.sapcloud.io/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: AWSMachineClass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z2-5z6as
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ami: ami-0123456789 &lt;span style="color:#008000"># Your controller must map the stated version to the provider specific machine image information, in the AWS case the AMI.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blockDevices:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ebs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumeSize: 20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumeType: gp2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iam:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-nodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> keyName: shoot--foo--bar-ssh-publickey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineType: m4.large
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networkInterfaces:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - securityGroupIDs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - sg-1234567890
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subnetID: subnet-0123a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z2-5z6as
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tags:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes.io/cluster/shoot--foo--bar: &lt;span style="color:#a31515">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes.io/role/node: &lt;span style="color:#a31515">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: machine.sapcloud.io/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: MachineDeployment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> replicas: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selector:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matchLabels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strategy:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: RollingUpdate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rollingUpdate:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxSurge: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxUnavailable: 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> class:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: AWSMachineClass
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: shoot--foo--bar-cpu-worker-z2-5z6as
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>for the second availability zone &lt;code>eu-west-1c&lt;/code>.&lt;/p>
&lt;p>Another convention is the 5-letter hash at the end of the machine class names.
Most controllers compute a checksum out of the specification of the machine class.
Any change to the value of the &lt;code>nodeAgentSecretName&lt;/code> field must result in a change of the machine class name.
The checksum in the machine class name helps to trigger a rolling update of the worker nodes if, for example, the machine image version changes.
In this case, a new checksum will be generated which results in the creation of a new machine class.
The &lt;code>MachineDeployment&lt;/code>&amp;rsquo;s machine class reference (&lt;code>.spec.template.spec.class.name&lt;/code>) is updated, which triggers the rolling update process in the machine-controller-manager.
However, all of this is only a convention that eases writing the controller, but you can do it completely differently if you desire - as long as you make sure that the described behaviours are implemented correctly.&lt;/p>
&lt;p>After the machine classes and machine deployments have been created, the machine-controller-manager will start talking to the provider&amp;rsquo;s IaaS API and create the virtual machines.
Gardener makes sure that the content of the &lt;code>Secret&lt;/code> referenced in the &lt;code>userDataSecretRef&lt;/code> field that is used to bootstrap the machines contains the required configuration for installation of the kubelet and registering the VM as worker node in the shoot cluster.
The &lt;code>Worker&lt;/code> extension controller shall wait until all the created &lt;code>MachineDeployment&lt;/code>s indicate healthiness/readiness before it ends the control loop.&lt;/p>
&lt;h2 id="does-gardener-need-some-information-that-must-be-returned-back">Does Gardener need some information that must be returned back?&lt;/h2>
&lt;p>Another important benefit of the machine-controller-manager&amp;rsquo;s design principles (extending the Kubernetes API using CRDs) is that the &lt;a href="https://github.com/gardener/autoscaler">cluster-autoscaler&lt;/a> can be used &lt;strong>without&lt;/strong> any provider-specific implementation.
We have forked the &lt;a href="https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler">upstream Kubernetes community&amp;rsquo;s cluster-autoscaler&lt;/a> and extended it so that it understands the machine API.
Definitely, we will merge it back into the community&amp;rsquo;s versions once it has been adapted properly.&lt;/p>
&lt;p>Our cluster-autoscaler only needs to know the minimum and maximum number of replicas &lt;strong>per&lt;/strong> &lt;code>MachineDeployment&lt;/code> and is ready to act. Without knowing that, it needs to talk to the provider APIs (it just modifies the &lt;code>.spec.replicas&lt;/code> field in the &lt;code>MachineDeployment&lt;/code> object).
Gardener deploys this autoscaler if there is at least one worker pool that specifies &lt;code>max&amp;gt;min&lt;/code>.
In order to know how it needs to configure it, the provider-specific &lt;code>Worker&lt;/code> extension controller must expose which &lt;code>MachineDeployment&lt;/code>s it has created and how the &lt;code>min&lt;/code>/&lt;code>max&lt;/code> numbers should look like.&lt;/p>
&lt;p>Consequently, your controller should write this information into the &lt;code>Worker&lt;/code> resource&amp;rsquo;s &lt;code>.status.machineDeployments&lt;/code> field. It should also update the &lt;code>.status.machineDeploymentsLastUpdateTime&lt;/code> field along with &lt;code>.status.machineDeployments&lt;/code>, so that gardener is able to deploy Cluster-Autoscaler right after the status is updated with the latest &lt;code>MachineDeployment&lt;/code>s and does not wait for the reconciliation to be completed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Worker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: worker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: shoot--foo--bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineDeployments:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: shoot--foo--bar-cpu-worker-z1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minimum: 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maximum: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: shoot--foo--bar-cpu-worker-z2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minimum: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maximum: 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineDeploymentsLastUpdateTime: &lt;span style="color:#a31515">&amp;#34;2023-05-01T12:44:27Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to support a new worker provider, you need to write a controller that watches all &lt;code>Worker&lt;/code>s with &lt;code>.spec.type=&amp;lt;my-provider-name&amp;gt;&lt;/code>.
You can take a look at the below referenced example implementation for the AWS provider.&lt;/p>
&lt;h2 id="that-sounds-like-a-lot-that-needs-to-be-done-can-you-help-me">That sounds like a lot that needs to be done, can you help me?&lt;/h2>
&lt;p>All of the described behaviour is mostly the same for every provider.
The only difference is maybe the version/configuration of the provider-specific &lt;code>machine-controller-manager&lt;/code> sidecar container, and the machine class specification itself.
You can take a look at our &lt;a href="https://github.com/gardener/gardener/tree/master/extensions">extension library&lt;/a>, especially the &lt;a href="https://github.com/gardener/gardener/tree/master/extensions/pkg/controller/worker">worker controller&lt;/a> part where you will find a lot of utilities that you can use.
Note that there are also utility functions for getting the default sidecar container specification or corresponding VPA container policy in the &lt;a href="https://github.com/gardener/gardener/tree/master/pkg/component/nodemanagement/machinecontrollermanager">&lt;code>machinecontrollermanager&lt;/code> package&lt;/a> called &lt;code>ProviderSidecarContainer&lt;/code> and &lt;code>ProviderSidecarVPAContainerPolicy&lt;/code>.
Also, using the library you only need to implement your provider specifics - all the things that can be handled generically can be taken for free and do not need to be re-implemented.
Take a look at the &lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/worker">AWS worker controller&lt;/a> for finding an example.&lt;/p>
&lt;h2 id="non-provider-specific-information-required-for-worker-creation">Non-provider specific information required for worker creation&lt;/h2>
&lt;p>All the providers require further information that is not provider specific but already part of the shoot resource.
One example for such information is whether the shoot is hibernated or not.
In this case, all the virtual machines should be deleted/terminated, and after that the machine controller-manager should be scaled down.
You can take a look at the &lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/worker">AWS worker controller&lt;/a> to see how it reads this information and how it is used.
As Gardener cannot know which information is required by providers, it simply mirrors the &lt;code>Shoot&lt;/code>, &lt;code>Seed&lt;/code>, and &lt;code>CloudProfile&lt;/code> resources into the seed.
They are part of the &lt;a href="https://gardener.cloud/docs/gardener/extensions/cluster/">&lt;code>Cluster&lt;/code> extension resource&lt;/a> and can be used to extract information that is not part of the &lt;code>Worker&lt;/code> resource itself.&lt;/p>
&lt;h2 id="references-and-additional-resources">References and Additional Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_worker.go">&lt;code>Worker&lt;/code> API (Golang Specification)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/tree/master/extensions">Extension Controller Library&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/tree/master/extensions/pkg/controller/worker">Generic Worker Controller&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/tree/master/pkg/controller/worker">Exemplary Implementation for the AWS Provider&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>