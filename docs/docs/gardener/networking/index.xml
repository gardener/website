<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Networking on Gardener</title><link>https://gardener.cloud/docs/gardener/networking/</link><description>Recent content in Networking on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/gardener/networking/index.xml" rel="self" type="application/rss+xml"/><item><title>Custom DNS Configuration</title><link>https://gardener.cloud/docs/gardener/networking/custom-dns-config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/networking/custom-dns-config/</guid><description>&lt;h1 id="custom-dns-configuration">Custom DNS Configuration&lt;a class="td-heading-self-link" href="#custom-dns-configuration" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;p>Gardener provides Kubernetes-Clusters-As-A-Service where all the system components (e.g., kube-proxy, networking, dns) are managed.
As a result, Gardener needs to ensure and auto-correct additional configuration to those system components to avoid unnecessary down-time.&lt;/p>
&lt;p>In some cases, auto-correcting system components can prevent users from deploying applications on top of the cluster that requires bits of customization, DNS configuration can be a good example.&lt;/p>
&lt;p>To allow for customizations for DNS configuration (that could potentially lead to downtime) while having the option to &amp;ldquo;undo&amp;rdquo;, we utilize the &lt;code>import&lt;/code> plugin from CoreDNS [1].
which enables in-line configuration changes.&lt;/p></description></item><item><title>DNS Search Path Optimization</title><link>https://gardener.cloud/docs/gardener/networking/dns-search-path-optimization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/networking/dns-search-path-optimization/</guid><description>&lt;h1 id="dns-search-path-optimization">DNS Search Path Optimization&lt;a class="td-heading-self-link" href="#dns-search-path-optimization" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;h2 id="dns-search-path">DNS Search Path&lt;a class="td-heading-self-link" href="#dns-search-path" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>Using fully qualified names has some downsides, e.g., it may become harder to move deployments from one landscape to the
next. It is far easier and simple to rely on short/local names, which may have different meaning depending on the context
they are used in.&lt;/p>
&lt;p>The DNS search path allows for the usage of short/local names. It is an ordered list of DNS suffixes to append to short/local
names to create a fully qualified name.&lt;/p></description></item><item><title>ExposureClasses</title><link>https://gardener.cloud/docs/gardener/networking/exposureclasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/networking/exposureclasses/</guid><description>&lt;h1 id="exposureclasses">ExposureClasses&lt;a class="td-heading-self-link" href="#exposureclasses" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;p>The Gardener API server provides a cluster-scoped &lt;code>ExposureClass&lt;/code> resource.
This resource is used to allow exposing the control plane of a Shoot cluster in various network environments like restricted corporate networks, DMZ, etc.&lt;/p>
&lt;h2 id="background">Background&lt;a class="td-heading-self-link" href="#background" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>The &lt;code>ExposureClass&lt;/code> resource is based on the concept for the &lt;code>RuntimeClass&lt;/code> resource in Kubernetes.&lt;/p>
&lt;p>A &lt;code>RuntimeClass&lt;/code> abstracts the installation of a certain container runtime (e.g., gVisor, Kata Containers) on all nodes or a subset of the nodes in a Kubernetes cluster.
See &lt;a href="https://kubernetes.io/docs/concepts/containers/runtime-class/">Runtime Class&lt;/a> for more information.&lt;/p></description></item><item><title>KUBERNETES_SERVICE_HOST Environment Variable Injection</title><link>https://gardener.cloud/docs/gardener/networking/shoot_kubernetes_service_host_injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/networking/shoot_kubernetes_service_host_injection/</guid><description>&lt;h1 id="kubernetes_service_host-environment-variable-injection">&lt;code>KUBERNETES_SERVICE_HOST&lt;/code> Environment Variable Injection&lt;a class="td-heading-self-link" href="#kubernetes_service_host-environment-variable-injection" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;p>In each Shoot cluster&amp;rsquo;s &lt;code>kube-system&lt;/code> namespace a &lt;code>DaemonSet&lt;/code> called &lt;code>apiserver-proxy&lt;/code> is deployed. It routes traffic to the upstream Shoot Kube APIServer. See the &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/08-shoot-apiserver-via-sni.md">APIServer SNI GEP&lt;/a> for more details.&lt;/p>
&lt;p>To skip this extra network hop, a &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#mutatingadmissionwebhook">mutating webhook&lt;/a> called &lt;code>apiserver-proxy.networking.gardener.cloud&lt;/code> is deployed next to the API server in the Seed. It adds a &lt;code>KUBERNETES_SERVICE_HOST&lt;/code> environment variable to each container and init container that do not specify it. See the webhook &lt;a href="https://github.com/gardener/apiserver-proxy/">repository&lt;/a> for more information.&lt;/p></description></item><item><title>NodeLocalDNS Configuration</title><link>https://gardener.cloud/docs/gardener/networking/node-local-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/networking/node-local-dns/</guid><description>&lt;h1 id="nodelocaldns-configuration">NodeLocalDNS Configuration&lt;a class="td-heading-self-link" href="#nodelocaldns-configuration" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;p>This is a short guide describing how to enable DNS caching on the shoot cluster nodes.&lt;/p>
&lt;h2 id="background">Background&lt;a class="td-heading-self-link" href="#background" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>Currently in Gardener we are using CoreDNS as a deployment that is auto-scaled horizontally to cover for QPS-intensive applications. However, doing so does not seem to be enough to completely circumvent DNS bottlenecks such as:&lt;/p>
&lt;ul>
&lt;li>Cloud provider limits for DNS lookups.&lt;/li>
&lt;li>Unreliable UDP connections that forces a period of timeout in case packets are dropped.&lt;/li>
&lt;li>Unnecessary node hopping since CoreDNS is not deployed on all nodes, and as a result DNS queries end-up traversing multiple nodes before reaching the destination server.&lt;/li>
&lt;li>Inefficient load-balancing of services (e.g., round-robin might not be enough when using IPTables mode)&lt;/li>
&lt;li>and more &amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>To workaround the issues described above, &lt;code>node-local-dns&lt;/code> was introduced. The architecture is described below. The idea is simple:&lt;/p></description></item><item><title>Shoot Networking Configurations</title><link>https://gardener.cloud/docs/gardener/networking/shoot_networking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/networking/shoot_networking/</guid><description>&lt;h1 id="shoot-networking-configurations">Shoot Networking Configurations&lt;a class="td-heading-self-link" href="#shoot-networking-configurations" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;p>This document contains network related information for Shoot clusters.&lt;/p>
&lt;h2 id="pod-network">Pod Network&lt;a class="td-heading-self-link" href="#pod-network" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>A Pod network is imperative for any kind of cluster communication with Pods not started within the Node&amp;rsquo;s host network.
More information about the Kubernetes network model can be found in the &lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/networking/">Cluster Networking&lt;/a> topic.&lt;/p>
&lt;p>Gardener allows users to configure the Pod network&amp;rsquo;s CIDR during Shoot creation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networking:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: &amp;lt;some-network-extension-name&amp;gt; &lt;span style="color:#008000"># {calico,cilium}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pods: 100.96.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodes: ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> services: ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
 &lt;p>&amp;#x26a0;&amp;#xfe0f; The &lt;code>networking.pods&lt;/code> IP configuration is immutable and cannot be changed afterwards.
Please consider the following paragraph to choose a configuration which will meet your demands.&lt;/p></description></item></channel></rss>