<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Features</title><link>https://gardener.cloud/docs/getting-started/features/</link><description>Recent content in Features on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/getting-started/features/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Hibernation</title><link>https://gardener.cloud/docs/getting-started/features/hibernation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/hibernation/</guid><description>
&lt;h2 id="hibernation">Hibernation&lt;/h2>
&lt;p>Some clusters need to be up all the time - typically, they would be hosting some kind of production workload. Others might be used for development purposes or testing during business hours only. Keeping them up and running all the time is a waste of money. Gardener can help you here with its &amp;ldquo;hibernation&amp;rdquo; feature. Essentially, hibernation means to shut down all components of a cluster.&lt;/p>
&lt;h2 id="how-hibernation-works">How Hibernation Works&lt;/h2>
&lt;p>The hibernation flow for a shoot attempts to reduce the resources consumed as much as possible. Hence everything not state-related is being decommissioned.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/hibernation_bbb3d7.gif" alt="">&lt;/p>
&lt;h3 id="data-plane">Data Plane&lt;/h3>
&lt;p>All nodes will be drained and the VMs will be deleted. As a result, all pods will be &amp;ldquo;stuck&amp;rdquo; in a &lt;code>Pending&lt;/code> state since no new nodes are added. Of course, PVC / PV holding data is not deleted.&lt;/p>
&lt;p>Services of type &lt;code>LoadBalancer&lt;/code> will keep their external IP addresses.&lt;/p>
&lt;h3 id="control-plane">Control Plane&lt;/h3>
&lt;p>All components will be scaled down and no pods will remain running. ETCD data is kept safe on the disk.&lt;/p>
&lt;p>The DNS records routing traffic for the API server are also destroyed. Trying to connect to a hibernated cluster via kubectl will result in a DNS lookup failure / no-such-host message.&lt;/p>
&lt;p>When waking up a cluster, all control plane components will be scaled up again and the DNS records will be re-created. Nodes will be created again and pods scheduled to run on them.&lt;/p>
&lt;h2 id="how-to-configure--trigger-hibernation">How to Configure / Trigger Hibernation&lt;/h2>
&lt;p>The easiest way to configure hibernation schedules is via the dashboard. Of course, this is reflected in the shoot&amp;rsquo;s spec and can also be maintained there. Before a cluster is hibernated, constraints in the shoot&amp;rsquo;s status will be evaluated. There might be conditions (mostly revolving around mutating / validating webhooks) that would block a successful wake-up. In such a case, the constraint will block hibernation in the first place.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/trigger-hibernation_d3b8a7.png" alt="">&lt;/p>
&lt;p>To wake-up or hibernate a shoot immediately, the dashboard can be used or a patch to the shoot&amp;rsquo;s spec can be applied directly.&lt;/p></description></item><item><title>Docs: Workerless Shoots</title><link>https://gardener.cloud/docs/getting-started/features/workerless-shoots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/workerless-shoots/</guid><description>
&lt;h2 id="controlplane-as-a-service">Controlplane as a Service&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/workerless-shoots_e2384f.png" alt="">&lt;/p>
&lt;p>Sometimes, there may be use cases for Kubernetes clusters that don&amp;rsquo;t require pods but only features of the control plane. Gardener can create the so-called &amp;ldquo;workerless&amp;rdquo; shoots, which are exactly that. A Kubernetes cluster without nodes (and without any controller related to them).&lt;/p>
&lt;p>In a scenario where you already have multiple clusters, you can use it for orchestration (leases) or factor out components that require many CRDs.&lt;/p>
&lt;p>As part of the control plane, the following components are deployed in the seed cluster for workerless shoot:&lt;/p>
&lt;ul>
&lt;li>etcds&lt;/li>
&lt;li>kube-apiserver&lt;/li>
&lt;li>kube-controller-manager&lt;/li>
&lt;li>gardener-resource-manager&lt;/li>
&lt;li>Logging and monitoring components&lt;/li>
&lt;li>Extension components (to find out if they support workerless shoots, see the &lt;a href="https://github.com/gardener/gardener/blob/master/docs/extensions/extension.md#what-is-required-to-register-and-support-an-extension-type">Extensions&lt;/a> documentation)&lt;/li>
&lt;/ul></description></item><item><title>Docs: Credential Rotation</title><link>https://gardener.cloud/docs/getting-started/features/credential-rotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/credential-rotation/</guid><description>
&lt;h2 id="keys">Keys&lt;/h2>
&lt;p>There are plenty of keys in Gardener. The ETCD needs one to store resources like secrets encrypted at rest. Gardener generates certificate authorities (CAs) to ensure secured communication between the various components and actors and service account tokens are signed with a dedicated key. There is also an SSH key pair to allow debugging of nodes and the observability stack has its own passwords too.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/keys_110bd7.png" alt="">&lt;/p>
&lt;p>All of these keys share a common property: they are managed by Gardener. Rotating them, however, is potentially very disruptive. Hence, Gardener does not do it automatically, but offers you means to perform these tasks easily. For a single cluster, you may conveniently use the dashboard. Of course, it is also possible to do the same by annotating the shoot resource accordingly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl -n &amp;lt;shoot-namespace&amp;gt; annotate shoot &amp;lt;shoot-name&amp;gt; gardener.cloud/operation=rotate-credentials-start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl -n &amp;lt;shoot-namespace&amp;gt; annotate shoot &amp;lt;shoot-name&amp;gt; gardener.cloud/operation=rotate-credentials-complete​
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where possible, the rotation happens in two phases. Phase 1 introduces new keys while the old ones are still valid. Users can safely exchange keys / CA bundles wherever they are used. Afterwards, phase 2 will invalidate the old keys / CA bundles.&lt;/p>
&lt;h2 id="rotation-phases">Rotation Phases&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/rotation-phases_f35ec8.png" alt="">&lt;/p>
&lt;p>At the beginning, only the old set of credentials exists. By triggering the rotation, new credentials are created in phase 1 and both sets are valid. Now, all clients have to update and start using the new credentials. Only afterwards it is safe to trigger phase 2, which invalidates the old credentials.&lt;/p>
&lt;p>The shoot&amp;rsquo;s status will always show the current status / phase of the rotation.&lt;/p>
&lt;p>For more information, see &lt;a href="https://github.com/gardener/gardener/blob/master/docs/usage/shoot_credentials_rotation.md">Credentials Rotation for Shoot Clusters&lt;/a>.&lt;/p>
&lt;h2 id="user-provided-credentials">User-Provided Credentials&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/user-provided-keys_f28100.png" alt="">&lt;/p>
&lt;p>You grant Gardener permissions to create resources by handing over cloud provider keys. These keys are stored in a secret and referenced to a shoot via a SecretBinding. Gardener uses the keys to create the network for the cluster resources, routes, VMs, disks, and IP addresses.&lt;/p>
&lt;p>When you rotate credentials, the new keys have to be stored in the same secret and the shoot needs to reconcile successfully to ensure the replication to every controller. Afterwards, the old keys can be deleted safely from Gardener&amp;rsquo;s perspective.&lt;/p>
&lt;p>While the reconciliation can be triggered manually, there is no need for it (if you&amp;rsquo;re not in a hurry). Each shoot reconciles once within 24h and the new keys will be picked up during the next maintenance window.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
It is not possible to move a shoot to a different infrastructure account (at all!).
&lt;/div></description></item><item><title>Docs: External DNS Management</title><link>https://gardener.cloud/docs/getting-started/features/dns-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/dns-management/</guid><description>
&lt;h2 id="external-dns-management">External DNS Management&lt;/h2>
&lt;p>When you deploy to Kubernetes, there is no native management of external DNS. Instead, the cloud-controller-manager requests (mostly IPv4) addresses for every service of type LoadBalancer. Of course, the Ingress resource helps here, but how is the external DNS entry for the ingress controller managed?&lt;/p>
&lt;p>Essentially, some sort of automation for DNS management is missing.&lt;/p>
&lt;h2 id="automating-dns-management">Automating DNS Management&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/automate-dns-management_c058df.png" alt="">&lt;/p>
&lt;p>From a user&amp;rsquo;s perspective, it is desirable to work with already known resources and concepts. Hence, the DNS management offered by Gardener plugs seamlessly into Kubernetes resources and you do not need to &amp;ldquo;leave&amp;rdquo; the context of the shoot cluster.&lt;/p>
&lt;p>To request a DNS record creation / update, a Service or Ingress resource is annotated accordingly. The shoot-dns-service extension will (if configured) will pick up the request and create a DNSEntry resource + reconcile it to have an actual DNS record created at a configured DNS provider. Gardener supports the following providers:&lt;/p>
&lt;ul>
&lt;li>aws-route53&lt;/li>
&lt;li>azure-dns&lt;/li>
&lt;li>azure-private-dns&lt;/li>
&lt;li>google-clouddns&lt;/li>
&lt;li>openstack-designate&lt;/li>
&lt;li>alicloud-dns&lt;/li>
&lt;li>cloudflare-dns&lt;/li>
&lt;/ul>
&lt;p>For more information, see &lt;a href="https://github.com/gardener/gardener-extension-shoot-dns-service/blob/master/docs/usage/dns_names.md">DNS Names&lt;/a>.&lt;/p>
&lt;h2 id="dns-provider">DNS Provider&lt;/h2>
&lt;p>For the above to work, we need some ingredients. Primarily, this is implemented via a so-called DNSProvider. Every shoot has a default provider that is used to set up the API server&amp;rsquo;s public DNS record. It can be used to request sub-domains as well.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/dns-provider_ecfee1.png" alt="">&lt;/p>
&lt;p>In addition, a shoot can reference credentials to a DNS provider. Those can be used to manage custom domains.&lt;/p>
&lt;p>Please have a look at the &lt;a href="https://gardener.cloud/docs/guides/networking/dns-extension/">documentation&lt;/a> for further details.&lt;/p></description></item><item><title>Docs: Certificate Management</title><link>https://gardener.cloud/docs/getting-started/features/certificate-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/certificate-management/</guid><description>
&lt;h2 id="certificate-management">Certificate Management&lt;/h2>
&lt;p>For proper consumption, any service should present a TLS certificate to its consumers. However, self-signed certificates are not fit for this purpose - the certificate should be signed by a CA trusted by an application&amp;rsquo;s userbase. Luckily, Issuers like Let&amp;rsquo;s Encrypt and others help here by offering a signing service that issues certificates based on the ACME challenge (Automatic Certificate Management Environment).&lt;/p>
&lt;p>There are plenty of tools you can use to perform the challenge. For Kubernetes, cert-manager certainly is the most common, however its configuration is rather cumbersome and error prone. So let&amp;rsquo;s see how a Gardener extension can help here.&lt;/p>
&lt;h2 id="manage-certificates-with-gardener">Manage Certificates with Gardener&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/manage-certificates_746a69.png" alt="">&lt;/p>
&lt;p>You may annotate a Service or Ingress resource to trigger the cert-manager to request a certificate from the any configured issuer (e.g. Let&amp;rsquo;s Encrypt) and perform the challenge. A Gardener operator can add a default issuer for convenience.
With the DNS extension discussed previously, setting up the DNS TXT record for the ACME challenge is fairly easy. The requested certificate can be customized by the means of several other annotations known to the controller. Most notably, it is possible to specify SANs via &lt;code>cert.gardener.cloud/dnsnames&lt;/code> to accommodate domain names that have more than 64 characters (the limit for the CN field).&lt;/p>
&lt;p>The user&amp;rsquo;s request for a certificate manifests as a &lt;code>certificate&lt;/code> resource. The status, issuer, and other properties can be checked there.&lt;/p>
&lt;p>Once successful, the resulting certificate will be stored in a secret and is ready for usage.&lt;/p>
&lt;p>With additional configuration, it is also possible to define custom issuers of certificates.&lt;/p>
&lt;p>For more information, see the &lt;a href="https://github.com/gardener/gardener-extension-shoot-cert-service/blob/master/docs/usage/request_cert.md">Manage certificates with Gardener for public domain&lt;/a> topic and the &lt;a href="https://github.com/gardener/cert-management#follow-cname">cert-management repository&lt;/a>.&lt;/p></description></item><item><title>Docs: Vertical Pod Autoscaler</title><link>https://gardener.cloud/docs/getting-started/features/vpa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/vpa/</guid><description>
&lt;h2 id="vertical-pod-autoscaler">Vertical Pod Autoscaler&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/vpa_f683c9.gif" alt="">&lt;/p>
&lt;p>When a pod&amp;rsquo;s resource CPU or memory grows, it will hit a limit eventually. Either the pod has resource limits specified or the node will run short of resources. In both cases, the workload might be throttled or even terminated. When this happens, it is often desirable to increase the request or limits. To do this autonomously within certain boundaries is the goal of the Vertical Pod Autoscaler project.&lt;/p>
&lt;p>Since it is not part of the standard Kubernetes API, you have to install the CRDs and controller manually. With Gardener, you can simply flip the switch in the shoot&amp;rsquo;s spec and start creating your VPA objects.&lt;/p>
&lt;p>Please be aware that VPA and HPA operate in similar domains and might interfere.&lt;/p>
&lt;p>A controller &amp;amp; CRDs for vertical pod auto-scaling can be activated via the shoot&amp;rsquo;s spec.&lt;/p></description></item><item><title>Docs: Cluster Autoscaler</title><link>https://gardener.cloud/docs/getting-started/features/cluster-autoscaler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/cluster-autoscaler/</guid><description>
&lt;h2 id="obtaining-aditional-nodes">Obtaining Aditional Nodes&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/additional-nodes_fa975f.gif" alt="">&lt;/p>
&lt;p>The scheduler will assign pods to nodes, as long as they have capacity (CPU, memory, Pod limit, # attachable disks, &amp;hellip;). But what happens when all nodes are fully utilized and the scheduler does not find any suitable target?&lt;/p>
&lt;p>&lt;strong>Option 1:&lt;/strong> Evict other pods based on priority. However, this has the downside that other workloads with lower priority might become unschedulable.&lt;/p>
&lt;p>&lt;strong>Option 2:&lt;/strong> Add more nodes. There is an upstream Cluster Autoscaler project that does exactly this. It simulates the scheduling and reacts to pods not being schedulable events. Gardener has forked it to make it work with machine-controller-manager abstraction of how node (groups) are defined in Gardener.
The cluster autoscaler respects the limits (min / max) of any worker pool in a shoot&amp;rsquo;s spec. It can also scale down nodes based on utilization thresholds. For more details, see the &lt;a href="https://github.com/gardener/autoscaler/blob/machine-controller-manager-provider/cluster-autoscaler/FAQ.md">autoscaler documentation&lt;/a>.&lt;/p>
&lt;h2 id="scaling-by-priority">Scaling by Priority&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/priority-scaling_add1b1.gif" alt="">&lt;/p>
&lt;p>For clusters with more than one node pool, the cluster autoscaler has to decide which group to scale up. By default, it randomly picks from the available / applicable. However, this behavior is customizable by the use of so-called expanders.&lt;/p>
&lt;p>This section will focus on the priority based expander.&lt;/p>
&lt;p>Each worker pool gets a priority and the cluster autoscaler will scale up the one with the highest priority until it reaches its limit.&lt;/p>
&lt;p>To get more information on the current status of the autoscaler, you can check a &amp;ldquo;status&amp;rdquo; configmap in the &lt;code>kube-system&lt;/code> namespace with the following command:&lt;/p>
&lt;p>&lt;code>kubectl get cm -n kube-system cluster-autoscaler-status -oyaml&lt;/code>&lt;/p>
&lt;p>To obtain information about the decision making, you can check the logs of the cluster-autoscaler pod by using the shoot&amp;rsquo;s monitoring stack.&lt;/p>
&lt;p>For more information, see the &lt;a href="https://github.com/gardener/autoscaler/blob/machine-controller-manager-provider/cluster-autoscaler/FAQ.md#what-are-expanders">cluster-autoscaler FAQ&lt;/a> and the &lt;a href="https://github.com/gardener/autoscaler/blob/machine-controller-manager-provider/cluster-autoscaler/expander/priority/readme.md">Priority based expander for cluster-autoscaler&lt;/a> topic.&lt;/p></description></item></channel></rss>