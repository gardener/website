<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Development</title><link>https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/</link><description>Recent content in Development on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Adding Support for a Cloud Provider</title><link>https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/cp_support_new/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/cp_support_new/</guid><description>
&lt;h1 id="adding-support-for-a-new-provider">Adding support for a new provider&lt;/h1>
&lt;p>Steps to be followed while implementing a new (hyperscale) provider are mentioned below. This is the easiest way to add new provider support using a blueprint code.&lt;/p>
&lt;p>However, you may also develop your machine controller from scratch, which would provide you with more flexibility. First, however, make sure that your custom machine controller adheres to the &lt;code>Machine.Status&lt;/code> struct defined in the &lt;a href="https://github.com/gardener/machine-controller-manager/blob/master/pkg/apis/machine/types.go">MachineAPIs&lt;/a>. This will make sure the MCM can act with higher-level controllers like MachineSet and MachineDeployment controller. The key is the &lt;code>Machine.Status.CurrentStatus.Phase&lt;/code> key that indicates the status of the machine object.&lt;/p>
&lt;p>Our strong recommendation would be to follow the steps below. This provides the most flexibility required to support machine management for adding new providers. And if you feel to extend the functionality, feel free to update our &lt;a href="https://github.com/gardener/machine-controller-manager/tree/master/pkg/util/provider">machine controller libraries&lt;/a>.&lt;/p>
&lt;h2 id="setting-up-your-repository">Setting up your repository&lt;/h2>
&lt;ol>
&lt;li>Create a new empty repository named &lt;code>machine-controller-manager-provider-{provider-name}&lt;/code> on GitHub username/project. Do not initialize this repository with a README.&lt;/li>
&lt;li>Copy the remote repository &lt;code>URL&lt;/code> (HTTPS/SSH) to this repository displayed once you create this repository.&lt;/li>
&lt;li>Now, on your local system, create directories as required. {your-github-username} given below could also be {github-project} depending on where you have created the new repository.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p $GOPATH/src/github.com/{your-github-username}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Navigate to this created directory.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd $GOPATH/src/github.com/{your-github-username}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Clone &lt;a href="https://github.com/gardener/machine-controller-manager-provider-sampleprovider">this repository&lt;/a> on your local machine.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone git@github.com:gardener/machine-controller-manager-provider-sampleprovider.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Rename the directory from &lt;code>machine-controller-manager-provider-sampleprovider&lt;/code> to &lt;code>machine-controller-manager-provider-{provider-name}&lt;/code>.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mv machine-controller-manager-provider-sampleprovider machine-controller-manager-provider-{provider-name}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Navigate into the newly-created directory.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd machine-controller-manager-provider-{provider-name}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Update the remote &lt;code>origin&lt;/code> URL to the newly created repository&amp;rsquo;s URL you had copied above.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git remote set-url origin git@github.com:{your-github-username}/machine-controller-manager-provider-{provider-name}.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Rename GitHub project from &lt;code>gardener&lt;/code> to &lt;code>{github-org/your-github-username}&lt;/code> wherever you have cloned the repository above. Also, edit all occurrences of the word &lt;code>sampleprovider&lt;/code> to &lt;code>{provider-name}&lt;/code> in the code. Then, use the hack script given below to do the same.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make rename-project PROJECT_NAME={github-org/your-github-username} PROVIDER_NAME={provider-name}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>eg:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> make rename-project PROJECT_NAME=gardener PROVIDER_NAME=AmazonWebServices (or)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> make rename-project PROJECT_NAME=githubusername PROVIDER_NAME=AWS
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Now, commit your changes and push them upstream.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git add -A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="color:#a31515">&amp;#34;Renamed SampleProvide to {provider-name}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="code-changes-required">Code changes required&lt;/h2>
&lt;p>The contract between the Machine Controller Manager (MCM) and the Machine Controller (MC) AKA driver has been &lt;a href="https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/machine_error_codes/">documented here&lt;/a> and the &lt;a href="https://github.com/gardener/machine-controller-manager/blob/master/pkg/util/provider/machinecodes/codes/codes.go">machine error codes can be found here&lt;/a>. You may refer to them for any queries.&lt;/p>
&lt;p>⚠️&lt;/p>
&lt;ul>
&lt;li>Keep in mind that &lt;strong>there should be a unique way to map between machine objects and VMs&lt;/strong>. This can be done by mapping machine object names with VM-Name/ tags/ other metadata.&lt;/li>
&lt;li>Optionally, there should also be a unique way to map a VM to its machine class object. This can be done by tagging VM objects with tags/resource groups associated with the machine class.&lt;/li>
&lt;/ul>
&lt;h4 id="steps-to-integrate">Steps to integrate&lt;/h4>
&lt;ol>
&lt;li>Update the &lt;code>pkg/provider/apis/provider_spec.go&lt;/code> specification file to reflect the structure of the &lt;code>ProviderSpec&lt;/code> blob. It typically contains the machine template details in the &lt;code>MachineClass&lt;/code> object. Follow the sample spec provided already in the file. A sample provider specification can be found &lt;a href="https://github.com/gardener/machine-controller-manager-provider-aws/blob/master/pkg/aws/apis/aws_provider_spec.go">here&lt;/a>.&lt;/li>
&lt;li>Fill in the methods described at &lt;code>pkg/provider/core.go&lt;/code> to manage VMs on your cloud provider. Comments are provided above each method to help you fill them up with desired &lt;code>REQUEST&lt;/code> and &lt;code>RESPONSE&lt;/code> parameters.
&lt;ul>
&lt;li>A sample provider implementation for these methods can be found &lt;a href="https://github.com/gardener/machine-controller-manager-provider-aws/blob/master/pkg/aws/core.go">here&lt;/a>.&lt;/li>
&lt;li>Fill in the required methods &lt;code>CreateMachine()&lt;/code>, and &lt;code>DeleteMachine()&lt;/code> methods.&lt;/li>
&lt;li>Optionally fill in methods like &lt;code>GetMachineStatus()&lt;/code>, &lt;code>ListMachines()&lt;/code>, and &lt;code>GetVolumeIDs()&lt;/code>. You may choose to fill these once the working of the required methods seems to be working.&lt;/li>
&lt;li>&lt;code>GetVolumeIDs()&lt;/code> expects VolumeIDs to be decoded from the volumeSpec based on the cloud provider.&lt;/li>
&lt;li>There is also an OPTIONAL method &lt;code>GenerateMachineClassForMigration()&lt;/code> that helps in migration of &lt;code>{ProviderSpecific}MachineClass&lt;/code> to &lt;code>MachineClass&lt;/code> CR (custom resource). This only makes sense if you have an existing implementation (in-tree) acting on different CRD types. You would like to migrate this. If not, you MUST return an error (machine error UNIMPLEMENTED) to avoid processing this step.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Perform validation of APIs that you have described and make it a part of your methods as required at each request.&lt;/li>
&lt;li>Write unit tests to make it work with your implementation by running &lt;code>make test&lt;/code>.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Re-generate the vendors to update any new vendors imported.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make revendor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Update the sample YAML files on the &lt;code>kubernetes/&lt;/code> directory to provide sample files through which the working of the machine controller can be tested.&lt;/li>
&lt;li>Update &lt;code>README.md&lt;/code> to reflect any additional changes&lt;/li>
&lt;/ol>
&lt;h2 id="testing-your-code-changes">Testing your code changes&lt;/h2>
&lt;p>Make sure &lt;code>$TARGET_KUBECONFIG&lt;/code> points to the cluster where you wish to manage machines. Likewise, &lt;code>$CONTROL_NAMESPACE&lt;/code> represents the namespaces where MCM is looking for machine CR objects, and &lt;code>$CONTROL_KUBECONFIG&lt;/code> points to the cluster that holds these machine CRs.&lt;/p>
&lt;ol>
&lt;li>On the first terminal running at &lt;code>$GOPATH/src/github.com/{github-org/your-github-username}/machine-controller-manager-provider-{provider-name}&lt;/code>,
&lt;ul>
&lt;li>Run the machine controller (driver) using the command below.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>On the second terminal pointing to &lt;code>$GOPATH/src/github.com/gardener&lt;/code>,
&lt;ul>
&lt;li>Clone the &lt;a href="https://github.com/gardener/machine-controller-manager">latest MCM code&lt;/a>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone git@github.com:gardener/machine-controller-manager.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Navigate to the newly-created directory.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd machine-controller-manager
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Deploy the required CRDs from the machine-controller-manager repo,
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f kubernetes/crds
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Run the machine-controller-manager in the &lt;code>master&lt;/code> branch
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>On the third terminal pointing to &lt;code>$GOPATH/src/github.com/{github-org/your-github-username}/machine-controller-manager-provider-{provider-name}&lt;/code>
&lt;ul>
&lt;li>Fill in the object files given below and deploy them as described below.&lt;/li>
&lt;li>Deploy the &lt;code>machine-class&lt;/code>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f kubernetes/machine-class.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Deploy the &lt;code>kubernetes secret&lt;/code> if required.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f kubernetes/secret.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Deploy the &lt;code>machine&lt;/code> object and make sure it joins the cluster successfully.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f kubernetes/machine.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Once the machine joins, you can test by deploying a machine-deployment.&lt;/li>
&lt;li>Deploy the &lt;code>machine-deployment&lt;/code> object and make sure it joins the cluster successfully.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f kubernetes/machine-deployment.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Make sure to delete both the &lt;code>machine&lt;/code> and &lt;code>machine-deployment&lt;/code> objects after use.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl delete -f kubernetes/machine.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl delete -f kubernetes/machine-deployment.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="releasing-your-docker-image">Releasing your docker image&lt;/h2>
&lt;ol>
&lt;li>Make sure you have logged into gcloud/docker using the CLI.&lt;/li>
&lt;li>To release your docker image, run the following.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> make release IMAGE_REPOSITORY=&amp;lt;link-to-image-repo&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>A sample kubernetes deploy file can be found at &lt;code>kubernetes/deployment.yaml&lt;/code>. Update the same (with your desired MCM and MC images) to deploy your MCM pod.&lt;/li>
&lt;/ol></description></item><item><title>Docs: Integration Tests</title><link>https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/integration_tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/integration_tests/</guid><description>
&lt;h1 id="integration-tests">Integration tests&lt;/h1>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;h2 id="general-setup--configurations">General setup &amp;amp; configurations&lt;/h2>
&lt;p>Integration tests for &lt;code>machine-controller-manager-provider-{provider-name}&lt;/code> can be executed manually by following below steps.&lt;/p>
&lt;ol>
&lt;li>Clone the repository &lt;code>machine-controller-manager-provider-{provider-name}&lt;/code> on the local system.&lt;/li>
&lt;li>Navigate to &lt;code>machine-controller-manager-provider-{provider-name}&lt;/code> directory and create a &lt;code>dev&lt;/code> sub-directory in it.&lt;/li>
&lt;li>Copy the kubeconfig of Control Cluster from into &lt;code>dev/control-kubeconfig.yaml&lt;/code>.&lt;/li>
&lt;li>(optional) Copy the kubeconfig of Target Cluster into &lt;code>dev/target-kubeconfig.yaml&lt;/code> and update the &lt;code>Makefile&lt;/code> variable &lt;code>TARGET_KUBECONFIG&lt;/code> to point to &lt;code>dev/target-kubeconfig.yaml&lt;/code>.&lt;/li>
&lt;li>If the tags on instances &amp;amp; associated resources on the provider are of &lt;code>String&lt;/code> type (for example, GCP tags on its instances are of type &lt;code>String&lt;/code> and not key-value pair) then add &lt;code>TAGS_ARE_STRINGS := true&lt;/code> in the &lt;code>Makefile&lt;/code> and export it.&lt;/li>
&lt;li>Atleast, one of the two controllers&amp;rsquo; container images must be set in the &lt;code>Makefile&lt;/code> variables &lt;code>MCM_IMAGE_TAG&lt;/code> and &lt;code>MC_IMAGE_TAG&lt;/code> for the controllers to run in the Control Cluster . These images will be used along with &lt;code>kubernetes/deployment.yaml&lt;/code> to deploy/update controllers in the Control Cluster . If the intention is to run the controllers locally then unset the variables &lt;code>MCM_IMAGE_TAG&lt;/code> and &lt;code>MC_IMAGE_TAG&lt;/code> and set variable &lt;code>MACHINE_CONTROLLER_MANAGER_DEPLOYMENT_NAME := machine-controller-manager&lt;/code> in the &lt;code>Makefile&lt;/code>.&lt;/li>
&lt;li>In order to apply the CRDs when the Control Cluster is a Gardener Shoot or if none of the controller images are specified, &lt;code>machine-controller-manager&lt;/code> repository will be cloned automatically. Incase, this repository already exists in local system, then create a softlink as below which helps to test changes in &lt;code>machine-controller-manager&lt;/code> quickly.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>ln -sf &amp;lt;path-for-machine-controller-manager-repo&amp;gt; dev/mcm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="scenario-based-additional-configurations">Scenario based additional configurations&lt;/h2>
&lt;h3 id="gardener-shoot-as-the-control-cluster">Gardener Shoot as the Control Cluster&lt;/h3>
&lt;p>If the Control Cluster is a Gardener Shoot cluster then,&lt;/p>
&lt;ol>
&lt;li>Deploy a &lt;code>Secret&lt;/code> named &lt;code>test-mc-secret&lt;/code> (that contains the provider secret and cloud-config) in the &lt;code>default&lt;/code> namespace of the Control Cluster. Refer &lt;a href="https://github.com/gardener/machine-controller-manager/tree/master/kubernetes/machine_classes">these&lt;/a> &lt;code>MachineClass&lt;/code> templates for the same.&lt;/li>
&lt;li>Create a &lt;code>dev/machineclassv1.yaml&lt;/code> file in the cloned repository. The name of the &lt;code>MachineClass&lt;/code> itself should be &lt;code>test-mc-v1&lt;/code>. The value of &lt;code>providerSpec.secretRef.name&lt;/code> should be &lt;code>test-mc-secret&lt;/code>.&lt;/li>
&lt;li>(Optional) Create an additional &lt;code>dev/machineclassv2.yaml&lt;/code> file similar to above but with a bigger machine type and update the &lt;code>Makefile&lt;/code> variable &lt;code>MACHINECLASS_V2&lt;/code> to point to &lt;code>dev/machineclassv2.yaml&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h3 id="gardener-seed-as-the-control-cluster">Gardener Seed as the Control Cluster&lt;/h3>
&lt;p>If the Control Cluster is a Gardener SEED cluster then, the suite ideally employs the already existing &lt;code>MachineClass&lt;/code> and Secrets. However,&lt;/p>
&lt;ol>
&lt;li>(Optional) User can employ a custom &lt;code>MachineClass&lt;/code> for the tests using below steps:
&lt;ol>
&lt;li>Deploy a &lt;code>Secret&lt;/code> named &lt;code>test-mc-secret&lt;/code> (that contains the provider secret and cloud-config) in the shoot namespace of the Control Cluster. That is, the value of &lt;code>metadata.namespace&lt;/code> should be &lt;code>technicalID&lt;/code> of the Shoot and it will be of the pattern &lt;code>shoot--&amp;lt;project&amp;gt;--&amp;lt;shoot-name&amp;gt;&lt;/code>. Refer &lt;a href="https://github.com/gardener/machine-controller-manager/tree/master/kubernetes/machine_classes">these&lt;/a> &lt;code>MachineClass&lt;/code> templates for the same.&lt;/li>
&lt;li>Create a &lt;code>dev/machineclassv1.yaml&lt;/code> file.
&lt;ol>
&lt;li>&lt;code>providerSpec.secretRef.name&lt;/code> should refer the secret created in the previous step.&lt;/li>
&lt;li>&lt;code>metadata.namespace&lt;/code> and &lt;code>providerSpec.secretRef.namespace&lt;/code> should be &lt;code>technicalID&lt;/code> (&lt;code>shoot--&amp;lt;project&amp;gt;--&amp;lt;shoot-name&amp;gt;&lt;/code>) of the shoot.&lt;/li>
&lt;li>The name of the &lt;code>MachineClass&lt;/code> itself should be &lt;code>test-mc-v1&lt;/code>.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="running-the-tests">Running the tests&lt;/h2>
&lt;ol>
&lt;li>There is a rule &lt;code>test-integration&lt;/code> in the &lt;code>Makefile&lt;/code>, which can be used to start the integration test:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ make test-integration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Starting integration tests...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Running Suite: Controller Suite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>===============================
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>The controllers log files (&lt;code>mcm_process.log&lt;/code> and &lt;code>mc_process.log&lt;/code>) are stored in &lt;code>.ci/controllers-test/logs&lt;/code> repo and can be used later.&lt;/li>
&lt;/ol>
&lt;h2 id="adding-integration-tests-for-new-providers">Adding Integration Tests for new providers&lt;/h2>
&lt;p>For a new provider, Running Integration tests works with no changes. But for the orphan resource test cases to work correctly, the provider-specific API calls and the Resource Tracker Interface (RTI) should be implemented. Please check &lt;a href="https://github.com/gardener/machine-controller-manager-provider-aws/blob/master/test/integration/provider/">&lt;code>machine-controller-manager-provider-aws&lt;/code>&lt;/a> for reference.&lt;/p>
&lt;h2 id="extending-integration-tests">Extending integration tests&lt;/h2>
&lt;ul>
&lt;li>Update &lt;a href="https://github.com/gardener/machine-controller-manager/blob/master/pkg/test/integration/common/framework.go#L481">ControllerTests&lt;/a> to be extend the testcases for all providers. Common testcases for machine|machineDeployment creation|deletion|scaling are packaged into &lt;a href="https://github.com/gardener/machine-controller-manager/blob/master/pkg/test/integration/common/framework.go#L481">ControllerTests&lt;/a>.&lt;/li>
&lt;li>To extend the provider specfic test cases, the changes should be done in the &lt;code>machine-controller-manager-provider-{provider-name}&lt;/code> repository. For example, to extended the testcases for &lt;code>machine-controller-manager-provider-aws&lt;/code>, make changes to &lt;code>test/integration/controller/controller_test.go&lt;/code> inside the &lt;code>machine-controller-manager-provider-aws&lt;/code> repository. &lt;code>commons&lt;/code> contains the &lt;code>Cluster&lt;/code> and &lt;code>Clientset&lt;/code> objects that makes it easy to extend the tests.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Local Setup</title><link>https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/local_setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/local_setup/</guid><description>
&lt;h1 id="preparing-the-local-development-setup-mac-os-x">Preparing the Local Development Setup (Mac OS X)&lt;/h1>
&lt;!-- TOC -->
&lt;ul>
&lt;li>&lt;a href="#preparing-the-local-development-setup-mac-os-x">Preparing the Local Development Setup (Mac OS X)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#installing-golang-environment">Installing Golang environment&lt;/a>&lt;/li>
&lt;li>&lt;a href="#installing-docker-optional">Installing &lt;code>Docker&lt;/code> (Optional)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#setup-docker-hub-account-optional">Setup &lt;code>Docker Hub&lt;/code> account (Optional)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#local-development">Local development&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#installing-the-machine-controller-manager-locally">Installing the Machine Controller Manager locally&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#prepare-the-cluster">Prepare the cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="#getting-started">Getting started&lt;/a>&lt;/li>
&lt;li>&lt;a href="#testing-machine-classes">Testing Machine Classes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#usage">Usage&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;!-- /TOC -->
&lt;p>Conceptionally, the Machine Controller Manager is designed to run in a container within a Pod inside a Kubernetes cluster. For development purposes, you can run the Machine Controller Manager as a Go process on your local machine. This process connects to your remote cluster to manage VMs for that cluster. That means that the Machine Controller Manager runs outside a Kubernetes cluster which requires providing a &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/authenticate-across-clusters-kubeconfig/">Kubeconfig&lt;/a> in your local filesystem and point the Machine Controller Manager to it when running it (see below).&lt;/p>
&lt;p>Although the following installation instructions are for Mac OS X, similar alternate commands could be found for any Linux distribution.&lt;/p>
&lt;h2 id="installing-golang-environment">Installing Golang environment&lt;/h2>
&lt;p>Install the latest version of Golang (at least &lt;code>v1.8.3&lt;/code> is required) by using &lt;a href="https://brew.sh/">Homebrew&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ brew install golang
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to perform linting on the Go source code, install &lt;a href="https://github.com/golang/lint">Golint&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ go get -u golang.org/x/lint/golint
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installing-docker-optional">Installing &lt;code>Docker&lt;/code> (Optional)&lt;/h2>
&lt;p>In case you want to build Docker images for the Machine Controller Manager you have to install Docker itself. We recommend using &lt;a href="https://docs.docker.com/docker-for-mac/">Docker for Mac OS X&lt;/a> which can be downloaded from &lt;a href="https://download.docker.com/mac/stable/Docker.dmg">here&lt;/a>.&lt;/p>
&lt;h2 id="setup-docker-hub-account-optional">Setup &lt;code>Docker Hub&lt;/code> account (Optional)&lt;/h2>
&lt;p>Create a Docker hub account at &lt;a href="https://hub.docker.com/">Docker Hub&lt;/a> if you don&amp;rsquo;t already have one.&lt;/p>
&lt;h2 id="local-development">Local development&lt;/h2>
&lt;p>⚠️ Before you start developing, please ensure to comply with the following requirements:&lt;/p>
&lt;ol>
&lt;li>You have understood the &lt;a href="https://kubernetes.io/docs/concepts/">principles of Kubernetes&lt;/a>, and its &lt;a href="https://kubernetes.io/docs/concepts/overview/components/">components&lt;/a>, what their purpose is and how they interact with each other.&lt;/li>
&lt;li>You have understood the &lt;a href="https://gardener.cloud/docs/other-components/machine-controller-manager/#design-of-machine-controller-manager">architecture of the Machine Controller Manager&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>The development of the Machine Controller Manager could happen by targetting any cluster. You basically need a Kubernetes cluster running on a set of machines. You just need the &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/authenticate-across-clusters-kubeconfig/">Kubeconfig&lt;/a> file with the required access permissions attached to it.&lt;/p>
&lt;h3 id="installing-the-machine-controller-manager-locally">Installing the Machine Controller Manager locally&lt;/h3>
&lt;p>Clone the repository from GitHub.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git clone git@github.com:gardener/machine-controller-manager.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd machine-controller-manager
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="prepare-the-cluster">Prepare the cluster&lt;/h2>
&lt;ul>
&lt;li>Connect to the remote kubernetes cluster where you plan to deploy the Machine Controller Manager using kubectl. Set the environment variable KUBECONFIG to the path of the yaml file containing your cluster info&lt;/li>
&lt;li>Now, create the required CRDs on the remote cluster using the following command,&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl apply -f kubernetes/crds.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;ul>
&lt;li>Create a &lt;code>dev&lt;/code> directory.&lt;/li>
&lt;li>Copy the kubeconfig of kubernetes cluster where you wish to deploy the machines into &lt;code>dev/target-kubeconfig.yaml&lt;/code>.&lt;/li>
&lt;li>(optional) Copy the kubeconfig of kubernetes cluster from where you wish to manage the machines into &lt;code>dev/control-kubeconfig.yaml&lt;/code>. If you do this, also update the &lt;code>Makefile&lt;/code> variable CONTROL_KUBECONFIG to point to &lt;code>dev/control-kubeconfig.yaml&lt;/code> and CONTROL_NAMESPACE to the namespace in which your controller watches over.&lt;/li>
&lt;li>There is a rule dev in the &lt;code>Makefile&lt;/code> which will automatically start the Machine Controller Manager with development settings:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ make start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I1227 11:08:19.963638 55523 controllermanager.go:204] Starting shared informers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I1227 11:08:20.766085 55523 controller.go:247] Starting machine-controller-manager
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>⚠️ The file &lt;code>dev/target-kubeconfig.yaml&lt;/code> points to the cluster whose nodes you want to manage. &lt;code>dev/control-kubeconfig.yaml&lt;/code> points to the cluster from where you want to manage the nodes from. However, &lt;code>dev/control-kubeconfig.yaml&lt;/code> is optional.&lt;/p>
&lt;p>The Machine Controller Manager should now be ready to manage the VMs in your kubernetes cluster.&lt;/p>
&lt;p>⚠️ This is assuming that your MCM is built to manage machines for any in-tree supported providers. There is a new way to deploy and manage out of tree (external) support for providers whose development can be &lt;a href="https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/cp_support_new/">found here&lt;/a>&lt;/p>
&lt;h2 id="testing-machine-classes">Testing Machine Classes&lt;/h2>
&lt;p>To test the creation/deletion of a single instance for one particular machine class you can use the &lt;code>managevm&lt;/code> cli. The corresponding &lt;code>INFRASTRUCTURE-machine-class.yaml&lt;/code> and the &lt;code>INFRASTRUCTURE-secret.yaml&lt;/code> need to be defined upfront. To build and run it&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>GO111MODULE=on go build -mod=vendor -o managevm cmd/machine-controller-manager-cli/main.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># create machine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./managevm --secret PATH_TO/INFRASTRUCTURE-secret.yaml --machineclass PATH_TO/INFRASTRUCTURE-machine-class.yaml --classkind INFRASTRUCTURE --machinename test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># delete machine&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./managevm --secret PATH_TO/INFRASTRUCTURE-secret.yaml --machineclass PATH_TO/INFRASTRUCTURE-machine-class.yaml --classkind INFRASTRUCTURE --machinename test --machineid INFRASTRUCTURE:///REGION/INSTANCE_ID
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>To start using Machine Controller Manager, follow the links given at &lt;a href="https://gardener.cloud/docs/other-components/machine-controller-manager/docs/">usage here&lt;/a>.&lt;/p></description></item><item><title>Docs: Machine Error Codes</title><link>https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/machine_error_codes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/machine_error_codes/</guid><description>
&lt;h1 id="machine-error-code-handling">Machine Error code handling&lt;/h1>
&lt;h2 id="notational-conventions">Notational Conventions&lt;/h2>
&lt;p>The keywords &amp;ldquo;MUST&amp;rdquo;, &amp;ldquo;MUST NOT&amp;rdquo;, &amp;ldquo;REQUIRED&amp;rdquo;, &amp;ldquo;SHALL&amp;rdquo;, &amp;ldquo;SHALL NOT&amp;rdquo;, &amp;ldquo;SHOULD&amp;rdquo;, &amp;ldquo;SHOULD NOT&amp;rdquo;, &amp;ldquo;RECOMMENDED&amp;rdquo;, &amp;ldquo;NOT RECOMMENDED&amp;rdquo;, &amp;ldquo;MAY&amp;rdquo;, and &amp;ldquo;OPTIONAL&amp;rdquo; are to be interpreted as described in &lt;a href="https://datatracker.ietf.org/doc/html/rfc2119">RFC 2119&lt;/a> (Bradner, S., &amp;ldquo;Key words for use in RFCs to Indicate Requirement Levels&amp;rdquo;, BCP 14, RFC 2119, March 1997).&lt;/p>
&lt;p>The key words &amp;ldquo;unspecified&amp;rdquo;, &amp;ldquo;undefined&amp;rdquo;, and &amp;ldquo;implementation-defined&amp;rdquo; are to be interpreted as described in the &lt;a href="https://www.open-std.org/jtc1/sc22/wg14/www/C99RationaleV5.10.pdf#page=18">rationale for the C99 standard&lt;/a>.&lt;/p>
&lt;p>An implementation is not compliant if it fails to satisfy one or more of the MUST, REQUIRED, or SHALL requirements for the protocols it implements.
An implementation is compliant if it satisfies all the MUST, REQUIRED, and SHALL requirements for the protocols it implements.&lt;/p>
&lt;h2 id="terminology">Terminology&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Term&lt;/th>
&lt;th>Definition&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CR&lt;/td>
&lt;td>Custom Resource (CR) is defined by a cluster admin using the Kubernetes Custom Resource Definition primitive.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>VM&lt;/td>
&lt;td>A Virtual Machine (VM) provisioned and managed by a provider. It could also refer to a physical machine in case of a bare metal provider.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Machine&lt;/td>
&lt;td>Machine refers to a VM that is provisioned/managed by MCM. It typically describes the metadata used to store/represent a Virtual Machine&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Node&lt;/td>
&lt;td>Native kubernetes &lt;code>Node&lt;/code> object. The objects you get to see when you do a &amp;ldquo;kubectl get nodes&amp;rdquo;. Although nodes can be either physical/virtual machines, for the purposes of our discussions it refers to a VM.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MCM&lt;/td>
&lt;td>&lt;a href="https://github.com/gardener/machine-controller-manager">Machine Controller Manager (MCM)&lt;/a> is the controller used to manage higher level Machine Custom Resource (CR) such as machine-set and machine-deployment CRs.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Provider/Driver/MC&lt;/td>
&lt;td>&lt;code>Provider&lt;/code> (or) &lt;code>Driver&lt;/code> (or) &lt;code>Machine Controller (MC)&lt;/code> is the driver responsible for managing machine objects present in the cluster from whom it manages these machines. A simple example could be creation/deletion of VM on the provider.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="pre-requisite">Pre-requisite&lt;/h2>
&lt;h3 id="machineclass-resources">MachineClass Resources&lt;/h3>
&lt;p>MCM introduces the CRD &lt;code>MachineClass&lt;/code>. This is a blueprint for creating machines that join a certain cluster as nodes in a certain role. The provider only works with &lt;code>MachineClass&lt;/code> resources that have the structure described here.&lt;/p>
&lt;h4 id="providerspec">ProviderSpec&lt;/h4>
&lt;p>The &lt;code>MachineClass&lt;/code> resource contains a &lt;code>providerSpec&lt;/code> field that is passed in the &lt;code>ProviderSpec&lt;/code> request field to CMI methods such as &lt;a href="#createmachine">CreateMachine&lt;/a>. The &lt;code>ProviderSpec&lt;/code> can be thought of as a machine template from which the VM specification must be adopted. It can contain key-value pairs of these specs. An example for these key-value pairs are given below.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Parameter&lt;/th>
&lt;th>Mandatory&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>vmPool&lt;/code>&lt;/td>
&lt;td>Yes&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>VM pool name, e.g. &lt;code>TEST-WOKER-POOL&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>size&lt;/code>&lt;/td>
&lt;td>Yes&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>VM size, e.g. &lt;code>xsmall&lt;/code>, &lt;code>small&lt;/code>, etc. Each size maps to a number of CPUs and memory size.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>rootFsSize&lt;/code>&lt;/td>
&lt;td>No&lt;/td>
&lt;td>&lt;code>int&lt;/code>&lt;/td>
&lt;td>Root (&lt;code>/&lt;/code>) filesystem size in GB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>tags&lt;/code>&lt;/td>
&lt;td>Yes&lt;/td>
&lt;td>&lt;code>map&lt;/code>&lt;/td>
&lt;td>Tags to be put on the created VM&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Most of the &lt;code>ProviderSpec&lt;/code> fields are not mandatory. If not specified, the provider passes an empty value in the respective &lt;code>Create VM&lt;/code> parameter.&lt;/p>
&lt;p>The &lt;code>tags&lt;/code> can be used to map a VM to its corresponding machine object&amp;rsquo;s Name&lt;/p>
&lt;p>The &lt;code>ProviderSpec&lt;/code> is validated by methods that receive it as a request field for presence of all mandatory parameters and tags, and for validity of all parameters.&lt;/p>
&lt;h4 id="secrets">Secrets&lt;/h4>
&lt;p>The &lt;code>MachineClass&lt;/code> resource also contains a &lt;code>secretRef&lt;/code> field that contains a reference to a secret. The keys of this secret are passed in the &lt;code>Secrets&lt;/code> request field to CMI methods.&lt;/p>
&lt;p>The secret can contain sensitive data such as&lt;/p>
&lt;ul>
&lt;li>&lt;code>cloud-credentials&lt;/code> secret data used to authenticate at the provider&lt;/li>
&lt;li>&lt;code>cloud-init&lt;/code> scripts used to initialize a new VM. The cloud-init script is expected to contain scripts to initialize the Kubelet and make it join the cluster.&lt;/li>
&lt;/ul>
&lt;h4 id="identifying-cluster-machines">Identifying Cluster Machines&lt;/h4>
&lt;p>To implement certain methods, the provider should be able to identify all machines associated with a particular Kubernetes cluster. This can be achieved using one/more of the below mentioned ways:&lt;/p>
&lt;ul>
&lt;li>Names of VMs created by the provider are prefixed by the cluster ID specified in the ProviderSpec.&lt;/li>
&lt;li>VMs created by the provider are tagged with the special tags like &lt;code>kubernetes.io/cluster&lt;/code> (for the cluster ID) and &lt;code>kubernetes.io/role&lt;/code> (for the role), specified in the ProviderSpec.&lt;/li>
&lt;li>Mapping &lt;code>Resource Groups&lt;/code> to individual cluster.&lt;/li>
&lt;/ul>
&lt;h3 id="error-scheme">Error Scheme&lt;/h3>
&lt;p>All provider API calls defined in this spec MUST return a &lt;a href="https://github.com/gardener/machine-controller-manager/blob/master/pkg/util/provider/machinecodes/codes/codes.go">machine error status&lt;/a>, which is very similar to &lt;a href="https://github.com/grpc/grpc/blob/master/src/proto/grpc/status/status.proto">standard machine status&lt;/a>.&lt;/p>
&lt;h3 id="machine-provider-interface">Machine Provider Interface&lt;/h3>
&lt;ul>
&lt;li>The provider MUST have a unique way to map a &lt;code>machine object&lt;/code> to a &lt;code>VM&lt;/code> which triggers the deletion for the corresponding VM backing the machine object.&lt;/li>
&lt;li>The provider SHOULD have a unique way to map the &lt;code>ProviderSpec&lt;/code> of a machine-class to a unique &lt;code>Cluster&lt;/code>. This avoids deletion of other machines, not backed by the MCM.&lt;/li>
&lt;/ul>
&lt;h4 id="createmachine">&lt;code>CreateMachine&lt;/code>&lt;/h4>
&lt;p>A Provider is REQUIRED to implement this interface method.
This interface method will be called by the MCM to provision a new VM on behalf of the requesting machine object.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>This call requests the provider to create a VM backing the machine-object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If VM backing the &lt;code>Machine.Name&lt;/code> already exists, and is compatible with the specified &lt;code>Machine&lt;/code> object in the &lt;code>CreateMachineRequest&lt;/code>, the Provider MUST reply &lt;code>0 OK&lt;/code> with the corresponding &lt;code>CreateMachineResponse&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The provider can OPTIONALLY make use of the MachineClass supplied in the &lt;code>MachineClass&lt;/code> in the &lt;code>CreateMachineRequest&lt;/code> to communicate with the provider.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The provider can OPTIONALLY make use of the secrets supplied in the &lt;code>Secret&lt;/code> in the &lt;code>CreateMachineRequest&lt;/code> to communicate with the provider.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The provider can OPTIONALLY make use of the &lt;code>Status.LastKnownState&lt;/code> in the &lt;code>Machine&lt;/code> object to decode the state of the VM operation based on the last known state of the VM. This can be useful to restart/continue an operations which are mean&amp;rsquo;t to be atomic.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The provider MUST have a unique way to map a &lt;code>machine object&lt;/code> to a &lt;code>VM&lt;/code>. This could be implicitly provided by the provider by letting you set VM-names (or) could be explicitly specified by the provider using appropriate tags to map the same.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This operation SHOULD be idempotent.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>CreateMachineResponse&lt;/code> returned by this method is expected to return&lt;/p>
&lt;ul>
&lt;li>&lt;code>ProviderID&lt;/code> that uniquely identifys the VM at the provider. This is expected to match with the node.Spec.ProviderID on the node object.&lt;/li>
&lt;li>&lt;code>NodeName&lt;/code> that is the expected name of the machine when it joins the cluster. It must match with the node name.&lt;/li>
&lt;li>&lt;code>LastKnownState&lt;/code> is an OPTIONAL field that can store details of the last known state of the VM. It can be used by future operation calls to determine current infrastucture state. This state is saved on the machine object.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// CreateMachine call is responsible for VM creation on the provider
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>CreateMachine(context.Context, &lt;span style="">*&lt;/span>CreateMachineRequest) (&lt;span style="">*&lt;/span>CreateMachineResponse, error)&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>&lt;span style="color:#008000">// CreateMachineRequest is the create request for VM creation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>type CreateMachineRequest struct {&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// Machine object from whom VM is to be created
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Machine &lt;span style="">*&lt;/span>v1alpha1.Machine&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// MachineClass backing the machine object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> MachineClass &lt;span style="">*&lt;/span>v1alpha1.MachineClass&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// Secret backing the machineClass object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Secret &lt;span style="">*&lt;/span>corev1.Secret&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>}&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>&lt;span style="color:#008000">// CreateMachineResponse is the create response for VM creation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>type CreateMachineResponse struct {&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// ProviderID is the unique identification of the VM at the cloud provider.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// ProviderID typically matches with the node.Spec.ProviderID on the node object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// Eg: gce://project-name/region/vm-ID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> ProviderID &lt;span style="color:#2b91af">string&lt;/span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// NodeName is the name of the node-object registered to kubernetes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> NodeName &lt;span style="color:#2b91af">string&lt;/span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// LastKnownState represents the last state of the VM during an creation/deletion error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> LastKnownState &lt;span style="color:#2b91af">string&lt;/span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>}&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="createmachine-errors">CreateMachine Errors&lt;/h5>
&lt;p>If the provider is unable to complete the CreateMachine call successfully, it MUST return a non-ok ginterface method code in the machine status.
If the conditions defined below are encountered, the provider MUST return the specified machine error code.
The MCM MUST implement the specified error recovery behavior when it encounters the machine error code.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>machine Code&lt;/th>
&lt;th>Condition&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Recovery Behavior&lt;/th>
&lt;th>Auto Retry Required&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0 OK&lt;/td>
&lt;td>Successful&lt;/td>
&lt;td>The call was successful in creating/adopting a VM that matches supplied creation request. The &lt;code>CreateMachineResponse&lt;/code> is returned with desired values&lt;/td>
&lt;td>&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1 CANCELED&lt;/td>
&lt;td>Cancelled&lt;/td>
&lt;td>Call was cancelled. Perform any pending clean-up tasks and return the call&lt;/td>
&lt;td>&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 UNKNOWN&lt;/td>
&lt;td>Something went wrong&lt;/td>
&lt;td>Not enough information on what went wrong&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 INVALID_ARGUMENT&lt;/td>
&lt;td>Re-check supplied parameters&lt;/td>
&lt;td>Re-check the supplied &lt;code>Machine.Name&lt;/code> and &lt;code>ProviderSpec&lt;/code>. Make sure all parameters are in permitted range of values. Exact issue to be given in &lt;code>.message&lt;/code>&lt;/td>
&lt;td>Update providerSpec to fix issues.&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 DEADLINE_EXCEEDED&lt;/td>
&lt;td>Timeout&lt;/td>
&lt;td>The call processing exceeded supplied deadline&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6 ALREADY_EXISTS&lt;/td>
&lt;td>Already exists but desired parameters doesn&amp;rsquo;t match&lt;/td>
&lt;td>Parameters of the existing VM don&amp;rsquo;t match the ProviderSpec&lt;/td>
&lt;td>Create machine with a different name&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7 PERMISSION_DENIED&lt;/td>
&lt;td>Insufficent permissions&lt;/td>
&lt;td>The requestor doesn&amp;rsquo;t have enough permissions to create an VM and it&amp;rsquo;s required dependencies&lt;/td>
&lt;td>Update requestor permissions to grant the same&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8 RESOURCE_EXHAUSTED&lt;/td>
&lt;td>Resource limits have been reached&lt;/td>
&lt;td>The requestor doesn&amp;rsquo;t have enough resource limits to process this creation request&lt;/td>
&lt;td>Enhance resource limits associated with the user/account to process this&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9 PRECONDITION_FAILED&lt;/td>
&lt;td>VM is in inconsistent state&lt;/td>
&lt;td>The VM is in a state that is invalid for this operation&lt;/td>
&lt;td>Manual intervention might be needed to fix the state of the VM&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10 ABORTED&lt;/td>
&lt;td>Operation is pending&lt;/td>
&lt;td>Indicates that there is already an operation pending for the specified machine&lt;/td>
&lt;td>Wait until previous pending operation is processed&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>11 OUT_OF_RANGE&lt;/td>
&lt;td>Resources were out of range&lt;/td>
&lt;td>The requested number of CPUs, memory size, of FS size in ProviderSpec falls outside of the corresponding valid range&lt;/td>
&lt;td>Update request paramaters to request valid resource requests&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12 UNIMPLEMENTED&lt;/td>
&lt;td>Not implemented&lt;/td>
&lt;td>Unimplemented indicates operation is not implemented or not supported/enabled in this service.&lt;/td>
&lt;td>Retry with an alternate logic or implement this method at the provider. Most methods by default are in this state&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>13 INTERNAL&lt;/td>
&lt;td>Major error&lt;/td>
&lt;td>Means some invariants expected by underlying system has been broken. If you see one of these errors, something is very broken.&lt;/td>
&lt;td>Needs manual intervension to fix this&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>14 UNAVAILABLE&lt;/td>
&lt;td>Not Available&lt;/td>
&lt;td>Unavailable indicates the service is currently unavailable.&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16 UNAUTHENTICATED&lt;/td>
&lt;td>Missing provider credentials&lt;/td>
&lt;td>Request does not have valid authentication credentials for the operation&lt;/td>
&lt;td>Fix the provider credentials&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The status &lt;code>message&lt;/code> MUST contain a human readable description of error, if the status &lt;code>code&lt;/code> is not &lt;code>OK&lt;/code>.
This string MAY be surfaced by MCM to end users.&lt;/p>
&lt;h4 id="deletemachine">&lt;code>DeleteMachine&lt;/code>&lt;/h4>
&lt;p>A Provider is REQUIRED to implement this driver call.
This driver call will be called by the MCM to deprovision/delete/terminate a VM backed by the requesting machine object.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>If a VM corresponding to the specified machine-object&amp;rsquo;s name does not exist or the artifacts associated with the VM do not exist anymore (after deletion), the Provider MUST reply &lt;code>0 OK&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The provider SHALL only act on machines belonging to the cluster-id/cluster-name obtained from the &lt;code>ProviderSpec&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The provider can OPTIONALY make use of the secrets supplied in the &lt;code>Secrets&lt;/code> map in the &lt;code>DeleteMachineRequest&lt;/code> to communicate with the provider.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The provider can OPTIONALY make use of the &lt;code>Spec.ProviderID&lt;/code> map in the &lt;code>Machine&lt;/code> object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The provider can OPTIONALLY make use of the &lt;code>Status.LastKnownState&lt;/code> in the &lt;code>Machine&lt;/code> object to decode the state of the VM operation based on the last known state of the VM. This can be useful to restart/continue an operations which are mean&amp;rsquo;t to be atomic.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This operation SHOULD be idempotent.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The provider must have a unique way to map a &lt;code>machine object&lt;/code> to a &lt;code>VM&lt;/code> which triggers the deletion for the corresponding VM backing the machine object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>DeleteMachineResponse&lt;/code> returned by this method is expected to return&lt;/p>
&lt;ul>
&lt;li>&lt;code>LastKnownState&lt;/code> is an OPTIONAL field that can store details of the last known state of the VM. It can be used by future operation calls to determine current infrastucture state. This state is saved on the machine object.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// DeleteMachine call is responsible for VM deletion/termination on the provider
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>DeleteMachine(context.Context, &lt;span style="">*&lt;/span>DeleteMachineRequest) (&lt;span style="">*&lt;/span>DeleteMachineResponse, error)&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>&lt;span style="color:#008000">// DeleteMachineRequest is the delete request for VM deletion
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>type DeleteMachineRequest struct {&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// Machine object from whom VM is to be deleted
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Machine &lt;span style="">*&lt;/span>v1alpha1.Machine&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// MachineClass backing the machine object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> MachineClass &lt;span style="">*&lt;/span>v1alpha1.MachineClass&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// Secret backing the machineClass object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Secret &lt;span style="">*&lt;/span>corev1.Secret&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>}&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>&lt;span style="color:#008000">// DeleteMachineResponse is the delete response for VM deletion
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>type DeleteMachineResponse struct {&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// LastKnownState represents the last state of the VM during an creation/deletion error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> LastKnownState &lt;span style="color:#2b91af">string&lt;/span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>}&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="deletemachine-errors">DeleteMachine Errors&lt;/h5>
&lt;p>If the provider is unable to complete the DeleteMachine call successfully, it MUST return a non-ok machine code in the machine status.
If the conditions defined below are encountered, the provider MUST return the specified machine error code.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>machine Code&lt;/th>
&lt;th>Condition&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Recovery Behavior&lt;/th>
&lt;th>Auto Retry Required&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0 OK&lt;/td>
&lt;td>Successful&lt;/td>
&lt;td>The call was successful in deleting a VM that matches supplied deletion request.&lt;/td>
&lt;td>&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1 CANCELED&lt;/td>
&lt;td>Cancelled&lt;/td>
&lt;td>Call was cancelled. Perform any pending clean-up tasks and return the call&lt;/td>
&lt;td>&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 UNKNOWN&lt;/td>
&lt;td>Something went wrong&lt;/td>
&lt;td>Not enough information on what went wrong&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 INVALID_ARGUMENT&lt;/td>
&lt;td>Re-check supplied parameters&lt;/td>
&lt;td>Re-check the supplied &lt;code>Machine.Name&lt;/code> and make sure that it is in the desired format and not a blank value. Exact issue to be given in &lt;code>.message&lt;/code>&lt;/td>
&lt;td>Update &lt;code>Machine.Name&lt;/code> to fix issues.&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 DEADLINE_EXCEEDED&lt;/td>
&lt;td>Timeout&lt;/td>
&lt;td>The call processing exceeded supplied deadline&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7 PERMISSION_DENIED&lt;/td>
&lt;td>Insufficent permissions&lt;/td>
&lt;td>The requestor doesn&amp;rsquo;t have enough permissions to delete an VM and it&amp;rsquo;s required dependencies&lt;/td>
&lt;td>Update requestor permissions to grant the same&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9 PRECONDITION_FAILED&lt;/td>
&lt;td>VM is in inconsistent state&lt;/td>
&lt;td>The VM is in a state that is invalid for this operation&lt;/td>
&lt;td>Manual intervention might be needed to fix the state of the VM&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10 ABORTED&lt;/td>
&lt;td>Operation is pending&lt;/td>
&lt;td>Indicates that there is already an operation pending for the specified machine&lt;/td>
&lt;td>Wait until previous pending operation is processed&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12 UNIMPLEMENTED&lt;/td>
&lt;td>Not implemented&lt;/td>
&lt;td>Unimplemented indicates operation is not implemented or not supported/enabled in this service.&lt;/td>
&lt;td>Retry with an alternate logic or implement this method at the provider. Most methods by default are in this state&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>13 INTERNAL&lt;/td>
&lt;td>Major error&lt;/td>
&lt;td>Means some invariants expected by underlying system has been broken. If you see one of these errors, something is very broken.&lt;/td>
&lt;td>Needs manual intervension to fix this&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>14 UNAVAILABLE&lt;/td>
&lt;td>Not Available&lt;/td>
&lt;td>Unavailable indicates the service is currently unavailable.&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16 UNAUTHENTICATED&lt;/td>
&lt;td>Missing provider credentials&lt;/td>
&lt;td>Request does not have valid authentication credentials for the operation&lt;/td>
&lt;td>Fix the provider credentials&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The status &lt;code>message&lt;/code> MUST contain a human readable description of error, if the status &lt;code>code&lt;/code> is not &lt;code>OK&lt;/code>.
This string MAY be surfaced by MCM to end users.&lt;/p>
&lt;h4 id="getmachinestatus">&lt;code>GetMachineStatus&lt;/code>&lt;/h4>
&lt;p>A Provider can OPTIONALLY implement this driver call. Else should return a &lt;code>UNIMPLEMENTED&lt;/code> status in error.
This call will be invoked by the MC to get the status of a machine.
This optional driver call helps in optimizing the working of the provider by avoiding unwanted calls to &lt;code>CreateMachine()&lt;/code> and &lt;code>DeleteMachine()&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>If a VM corresponding to the specified machine object&amp;rsquo;s &lt;code>Machine.Name&lt;/code> exists on provider the &lt;code>GetMachineStatusResponse&lt;/code> fields are to be filled similar to the &lt;code>CreateMachineResponse&lt;/code>.&lt;/li>
&lt;li>The provider SHALL only act on machines belonging to the cluster-id/cluster-name obtained from the &lt;code>ProviderSpec&lt;/code>.&lt;/li>
&lt;li>The provider can OPTIONALY make use of the secrets supplied in the &lt;code>Secrets&lt;/code> map in the &lt;code>GetMachineStatusRequest&lt;/code> to communicate with the provider.&lt;/li>
&lt;li>The provider can OPTIONALY make use of the VM unique ID (returned by the provider on machine creation) passed in the &lt;code>ProviderID&lt;/code> map in the &lt;code>GetMachineStatusRequest&lt;/code>.&lt;/li>
&lt;li>This operation MUST be idempotent.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// GetMachineStatus call get&amp;#39;s the status of the VM backing the machine object on the provider
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>GetMachineStatus(context.Context, &lt;span style="">*&lt;/span>GetMachineStatusRequest) (&lt;span style="">*&lt;/span>GetMachineStatusResponse, error)&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>&lt;span style="color:#008000">// GetMachineStatusRequest is the get request for VM info
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>type GetMachineStatusRequest struct {&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// Machine object from whom VM status is to be fetched
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Machine &lt;span style="">*&lt;/span>v1alpha1.Machine&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// MachineClass backing the machine object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> MachineClass &lt;span style="">*&lt;/span>v1alpha1.MachineClass&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// Secret backing the machineClass object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Secret &lt;span style="">*&lt;/span>corev1.Secret&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>}&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>&lt;span style="color:#008000">// GetMachineStatusResponse is the get response for VM info
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>type GetMachineStatusResponse struct {&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// ProviderID is the unique identification of the VM at the cloud provider.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// ProviderID typically matches with the node.Spec.ProviderID on the node object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// Eg: gce://project-name/region/vm-ID
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> ProviderID &lt;span style="color:#2b91af">string&lt;/span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// NodeName is the name of the node-object registered to kubernetes.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> NodeName &lt;span style="color:#2b91af">string&lt;/span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>}&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="getmachinestatus-errors">GetMachineStatus Errors&lt;/h5>
&lt;p>If the provider is unable to complete the GetMachineStatus call successfully, it MUST return a non-ok machine code in the machine status.
If the conditions defined below are encountered, the provider MUST return the specified machine error code.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>machine Code&lt;/th>
&lt;th>Condition&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Recovery Behavior&lt;/th>
&lt;th>Auto Retry Required&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0 OK&lt;/td>
&lt;td>Successful&lt;/td>
&lt;td>The call was successful in getting machine details for given machine &lt;code>Machine.Name&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1 CANCELED&lt;/td>
&lt;td>Cancelled&lt;/td>
&lt;td>Call was cancelled. Perform any pending clean-up tasks and return the call&lt;/td>
&lt;td>&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 UNKNOWN&lt;/td>
&lt;td>Something went wrong&lt;/td>
&lt;td>Not enough information on what went wrong&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 INVALID_ARGUMENT&lt;/td>
&lt;td>Re-check supplied parameters&lt;/td>
&lt;td>Re-check the supplied &lt;code>Machine.Name&lt;/code> and make sure that it is in the desired format and not a blank value. Exact issue to be given in &lt;code>.message&lt;/code>&lt;/td>
&lt;td>Update &lt;code>Machine.Name&lt;/code> to fix issues.&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 DEADLINE_EXCEEDED&lt;/td>
&lt;td>Timeout&lt;/td>
&lt;td>The call processing exceeded supplied deadline&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5 NOT_FOUND&lt;/td>
&lt;td>Machine isn&amp;rsquo;t found at provider&lt;/td>
&lt;td>The machine could not be found at provider&lt;/td>
&lt;td>Not required&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7 PERMISSION_DENIED&lt;/td>
&lt;td>Insufficent permissions&lt;/td>
&lt;td>The requestor doesn&amp;rsquo;t have enough permissions to get details for the VM and it&amp;rsquo;s required dependencies&lt;/td>
&lt;td>Update requestor permissions to grant the same&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9 PRECONDITION_FAILED&lt;/td>
&lt;td>VM is in inconsistent state&lt;/td>
&lt;td>The VM is in a state that is invalid for this operation&lt;/td>
&lt;td>Manual intervention might be needed to fix the state of the VM&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>11 OUT_OF_RANGE&lt;/td>
&lt;td>Multiple VMs found&lt;/td>
&lt;td>Multiple VMs found with matching machine object names&lt;/td>
&lt;td>Orphan VM handler to cleanup orphan VMs / Manual intervention maybe required if orphan VM handler isn&amp;rsquo;t enabled.&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12 UNIMPLEMENTED&lt;/td>
&lt;td>Not implemented&lt;/td>
&lt;td>Unimplemented indicates operation is not implemented or not supported/enabled in this service.&lt;/td>
&lt;td>Retry with an alternate logic or implement this method at the provider. Most methods by default are in this state&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>13 INTERNAL&lt;/td>
&lt;td>Major error&lt;/td>
&lt;td>Means some invariants expected by underlying system has been broken. If you see one of these errors, something is very broken.&lt;/td>
&lt;td>Needs manual intervension to fix this&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>14 UNAVAILABLE&lt;/td>
&lt;td>Not Available&lt;/td>
&lt;td>Unavailable indicates the service is currently unavailable.&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16 UNAUTHENTICATED&lt;/td>
&lt;td>Missing provider credentials&lt;/td>
&lt;td>Request does not have valid authentication credentials for the operation&lt;/td>
&lt;td>Fix the provider credentials&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The status &lt;code>message&lt;/code> MUST contain a human readable description of error, if the status &lt;code>code&lt;/code> is not &lt;code>OK&lt;/code>.
This string MAY be surfaced by MCM to end users.&lt;/p>
&lt;h4 id="listmachines">&lt;code>ListMachines&lt;/code>&lt;/h4>
&lt;p>A Provider can OPTIONALLY implement this driver call. Else should return a &lt;code>UNIMPLEMENTED&lt;/code> status in error.
The Provider SHALL return the information about all the machines associated with the &lt;code>MachineClass&lt;/code>.
Make sure to use appropriate filters to achieve the same to avoid data transfer overheads.
This optional driver call helps in cleaning up orphan VMs present in the cluster. If not implemented, any orphan VM that might have been created incorrectly by the MCM/Provider (due to bugs in code/infra) might require manual clean up.&lt;/p>
&lt;ul>
&lt;li>If the Provider succeeded in returning a list of &lt;code>Machine.Name&lt;/code> with their corresponding &lt;code>ProviderID&lt;/code>, then return &lt;code>0 OK&lt;/code>.&lt;/li>
&lt;li>The &lt;code>ListMachineResponse&lt;/code> contains a map of &lt;code>MachineList&lt;/code> whose
&lt;ul>
&lt;li>Key is expected to contain the &lt;code>ProviderID&lt;/code> &amp;amp;&lt;/li>
&lt;li>Value is expected to contain the &lt;code>Machine.Name&lt;/code> corresponding to it&amp;rsquo;s kubernetes machine CR object&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The provider can OPTIONALY make use of the secrets supplied in the &lt;code>Secrets&lt;/code> map in the &lt;code>ListMachinesRequest&lt;/code> to communicate with the provider.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// ListMachines lists all the machines that might have been created by the supplied machineClass
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>ListMachines(context.Context, &lt;span style="">*&lt;/span>ListMachinesRequest) (&lt;span style="">*&lt;/span>ListMachinesResponse, error)&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>&lt;span style="color:#008000">// ListMachinesRequest is the request object to get a list of VMs belonging to a machineClass
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>type ListMachinesRequest struct {&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// MachineClass object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> MachineClass &lt;span style="">*&lt;/span>v1alpha1.MachineClass&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// Secret backing the machineClass object
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Secret &lt;span style="">*&lt;/span>corev1.Secret&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>}&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>&lt;span style="color:#008000">// ListMachinesResponse is the response object of the list of VMs belonging to a machineClass
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>type ListMachinesResponse struct {&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// MachineList is the map of list of machines. Format for the map should be &amp;lt;ProviderID, MachineName&amp;gt;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> MachineList map[&lt;span style="color:#2b91af">string&lt;/span>]&lt;span style="color:#2b91af">string&lt;/span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>}&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="listmachines-errors">ListMachines Errors&lt;/h5>
&lt;p>If the provider is unable to complete the ListMachines call successfully, it MUST return a non-ok machine code in the machine status.
If the conditions defined below are encountered, the provider MUST return the specified machine error code.
The MCM MUST implement the specified error recovery behavior when it encounters the machine error code.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>machine Code&lt;/th>
&lt;th>Condition&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Recovery Behavior&lt;/th>
&lt;th>Auto Retry Required&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0 OK&lt;/td>
&lt;td>Successful&lt;/td>
&lt;td>The call for listing all VMs associated with &lt;code>ProviderSpec&lt;/code> was successful.&lt;/td>
&lt;td>&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1 CANCELED&lt;/td>
&lt;td>Cancelled&lt;/td>
&lt;td>Call was cancelled. Perform any pending clean-up tasks and return the call&lt;/td>
&lt;td>&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 UNKNOWN&lt;/td>
&lt;td>Something went wrong&lt;/td>
&lt;td>Not enough information on what went wrong&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 INVALID_ARGUMENT&lt;/td>
&lt;td>Re-check supplied parameters&lt;/td>
&lt;td>Re-check the supplied &lt;code>ProviderSpec&lt;/code> and make sure that all required fields are present in their desired value format. Exact issue to be given in &lt;code>.message&lt;/code>&lt;/td>
&lt;td>Update &lt;code>ProviderSpec&lt;/code> to fix issues.&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 DEADLINE_EXCEEDED&lt;/td>
&lt;td>Timeout&lt;/td>
&lt;td>The call processing exceeded supplied deadline&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7 PERMISSION_DENIED&lt;/td>
&lt;td>Insufficent permissions&lt;/td>
&lt;td>The requestor doesn&amp;rsquo;t have enough permissions to list VMs and it&amp;rsquo;s required dependencies&lt;/td>
&lt;td>Update requestor permissions to grant the same&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12 UNIMPLEMENTED&lt;/td>
&lt;td>Not implemented&lt;/td>
&lt;td>Unimplemented indicates operation is not implemented or not supported/enabled in this service.&lt;/td>
&lt;td>Retry with an alternate logic or implement this method at the provider. Most methods by default are in this state&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>13 INTERNAL&lt;/td>
&lt;td>Major error&lt;/td>
&lt;td>Means some invariants expected by underlying system has been broken. If you see one of these errors, something is very broken.&lt;/td>
&lt;td>Needs manual intervension to fix this&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>14 UNAVAILABLE&lt;/td>
&lt;td>Not Available&lt;/td>
&lt;td>Unavailable indicates the service is currently unavailable.&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16 UNAUTHENTICATED&lt;/td>
&lt;td>Missing provider credentials&lt;/td>
&lt;td>Request does not have valid authentication credentials for the operation&lt;/td>
&lt;td>Fix the provider credentials&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The status &lt;code>message&lt;/code> MUST contain a human readable description of error, if the status &lt;code>code&lt;/code> is not &lt;code>OK&lt;/code>.
This string MAY be surfaced by MCM to end users.&lt;/p>
&lt;h4 id="getvolumeids">&lt;code>GetVolumeIDs&lt;/code>&lt;/h4>
&lt;p>A Provider can OPTIONALLY implement this driver call. Else should return a &lt;code>UNIMPLEMENTED&lt;/code> status in error.
This driver call will be called by the MCM to get the &lt;code>VolumeIDs&lt;/code> for the list of &lt;code>PersistentVolumes (PVs)&lt;/code> supplied.
This OPTIONAL (but recommended) driver call helps in serailzied eviction of pods with PVs while draining of machines. This implies applications backed by PVs would be evicted one by one, leading to shorter application downtimes.&lt;/p>
&lt;ul>
&lt;li>On succesful returnal of a list of &lt;code>Volume-IDs&lt;/code> for all supplied &lt;code>PVSpecs&lt;/code>, the Provider MUST reply &lt;code>0 OK&lt;/code>.&lt;/li>
&lt;li>The &lt;code>GetVolumeIDsResponse&lt;/code> is expected to return a repeated list of &lt;code>strings&lt;/code> consisting of the &lt;code>VolumeIDs&lt;/code> for &lt;code>PVSpec&lt;/code> that could be extracted.&lt;/li>
&lt;li>If for any &lt;code>PV&lt;/code> the Provider wasn&amp;rsquo;t able to identify the &lt;code>Volume-ID&lt;/code>, the provider MAY chose to ignore it and return the &lt;code>Volume-IDs&lt;/code> for the rest of the &lt;code>PVs&lt;/code> for whom the &lt;code>Volume-ID&lt;/code> was found.&lt;/li>
&lt;li>Getting the &lt;code>VolumeID&lt;/code> from the &lt;code>PVSpec&lt;/code> depends on the Cloud-provider. You can extract this information by parsing the &lt;code>PVSpec&lt;/code> based on the &lt;code>ProviderType&lt;/code>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes/api/blob/release-1.15/core/v1/types.go#L297-L339">https://github.com/kubernetes/api/blob/release-1.15/core/v1/types.go#L297-L339&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/api/blob/release-1.15//core/v1/types.go#L175-L257">https://github.com/kubernetes/api/blob/release-1.15//core/v1/types.go#L175-L257&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>This operation MUST be idempotent.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// GetVolumeIDsRequest is the request object to get a list of VolumeIDs for a PVSpec
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>type GetVolumeIDsRequest struct {&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// PVSpecsList is a list of PV specs for whom volume-IDs are required
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// Plugin should parse this raw data into pre-defined list of PVSpecs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> PVSpecs []&lt;span style="">*&lt;/span>corev1.PersistentVolumeSpec&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>}&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>&lt;span style="color:#008000">// GetVolumeIDsResponse is the response object of the list of VolumeIDs for a PVSpec
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>type GetVolumeIDsResponse struct {&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// VolumeIDs is a list of VolumeIDs.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> VolumeIDs []&lt;span style="color:#2b91af">string&lt;/span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>}&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="getvolumeids-errors">GetVolumeIDs Errors&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>machine Code&lt;/th>
&lt;th>Condition&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Recovery Behavior&lt;/th>
&lt;th>Auto Retry Required&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0 OK&lt;/td>
&lt;td>Successful&lt;/td>
&lt;td>The call getting list of &lt;code>VolumeIDs&lt;/code> for the list of &lt;code>PersistentVolumes&lt;/code> was successful.&lt;/td>
&lt;td>&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1 CANCELED&lt;/td>
&lt;td>Cancelled&lt;/td>
&lt;td>Call was cancelled. Perform any pending clean-up tasks and return the call&lt;/td>
&lt;td>&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2 UNKNOWN&lt;/td>
&lt;td>Something went wrong&lt;/td>
&lt;td>Not enough information on what went wrong&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3 INVALID_ARGUMENT&lt;/td>
&lt;td>Re-check supplied parameters&lt;/td>
&lt;td>Re-check the supplied &lt;code>PVSpecList&lt;/code> and make sure that it is in the desired format. Exact issue to be given in &lt;code>.message&lt;/code>&lt;/td>
&lt;td>Update &lt;code>PVSpecList&lt;/code> to fix issues.&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4 DEADLINE_EXCEEDED&lt;/td>
&lt;td>Timeout&lt;/td>
&lt;td>The call processing exceeded supplied deadline&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12 UNIMPLEMENTED&lt;/td>
&lt;td>Not implemented&lt;/td>
&lt;td>Unimplemented indicates operation is not implemented or not supported/enabled in this service.&lt;/td>
&lt;td>Retry with an alternate logic or implement this method at the provider. Most methods by default are in this state&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>13 INTERNAL&lt;/td>
&lt;td>Major error&lt;/td>
&lt;td>Means some invariants expected by underlying system has been broken. If you see one of these errors, something is very broken.&lt;/td>
&lt;td>Needs manual intervension to fix this&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>14 UNAVAILABLE&lt;/td>
&lt;td>Not Available&lt;/td>
&lt;td>Unavailable indicates the service is currently unavailable.&lt;/td>
&lt;td>Retry operation after sometime&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The status &lt;code>message&lt;/code> MUST contain a human readable description of error, if the status &lt;code>code&lt;/code> is not &lt;code>OK&lt;/code>.
This string MAY be surfaced by MCM to end users.&lt;/p>
&lt;h4 id="generatemachineclassformigration">&lt;code>GenerateMachineClassForMigration&lt;/code>&lt;/h4>
&lt;p>A Provider SHOULD implement this driver call, else it MUST return a &lt;code>UNIMPLEMENTED&lt;/code> status in error.
This driver call will be called by the Machine Controller to try to perform a machineClass migration for an unknown machineClass Kind. This helps in migration of one kind of machineClass to another kind. For instance an machineClass custom resource of &lt;code>AWSMachineClass&lt;/code> to &lt;code>MachineClass&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>On successful generation of machine class the Provider MUST reply &lt;code>0 OK&lt;/code> (or) &lt;code>nil&lt;/code> error.&lt;/li>
&lt;li>&lt;code>GenerateMachineClassForMigrationRequest&lt;/code> expects the provider-specific machine class (eg. AWSMachineClass)
to be supplied as the &lt;code>ProviderSpecificMachineClass&lt;/code>. The provider is responsible for unmarshalling the golang struct. It also passes a reference to an existing &lt;code>MachineClass&lt;/code> object.&lt;/li>
&lt;li>The provider is expected to fill in this&lt;code>MachineClass&lt;/code> object based on the conversions.&lt;/li>
&lt;li>An optional &lt;code>ClassSpec&lt;/code> containing the &lt;code>type ClassSpec struct&lt;/code> is also provided to decode the provider info.&lt;/li>
&lt;li>&lt;code>GenerateMachineClassForMigration&lt;/code> is only responsible for filling up the passed &lt;code>MachineClass&lt;/code> object.&lt;/li>
&lt;li>The task of creating the new &lt;code>CR&lt;/code> of the new kind (MachineClass) with the same name as the previous one and also annotating the old machineClass CR with a migrated annotation and migrating existing references is done by the calling library implicitly.&lt;/li>
&lt;li>This operation MUST be idempotent.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// GenerateMachineClassForMigrationRequest is the request for generating the generic machineClass
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// for the provider specific machine class
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>type GenerateMachineClassForMigrationRequest struct {&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// ProviderSpecificMachineClass is provider specfic machine class object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// E.g. AWSMachineClass
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> ProviderSpecificMachineClass interface{}&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// MachineClass is the machine class object generated that is to be filled up
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> MachineClass &lt;span style="">*&lt;/span>v1alpha1.MachineClass&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span> &lt;span style="color:#008000">// ClassSpec contains the class spec object to determine the machineClass kind
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> ClassSpec &lt;span style="">*&lt;/span>v1alpha1.ClassSpec&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>}&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="">&lt;/span>&lt;span style="color:#008000">// GenerateMachineClassForMigrationResponse is the response for generating the generic machineClass
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// for the provider specific machine class
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>type GenerateMachineClassForMigrationResponse struct{}&lt;span style="">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="migratemachineclass-errors">MigrateMachineClass Errors&lt;/h5>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>machine Code&lt;/th>
&lt;th>Condition&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Recovery Behavior&lt;/th>
&lt;th>Auto Retry Required&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0 OK&lt;/td>
&lt;td>Successful&lt;/td>
&lt;td>Migration of provider specific machine class was successful&lt;/td>
&lt;td>Machine reconcilation is retried once the new class has been created&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12 UNIMPLEMENTED&lt;/td>
&lt;td>Not implemented&lt;/td>
&lt;td>Unimplemented indicates operation is not implemented or not supported/enabled in this provider.&lt;/td>
&lt;td>None&lt;/td>
&lt;td>N&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>13 INTERNAL&lt;/td>
&lt;td>Major error&lt;/td>
&lt;td>Means some invariants expected by underlying system has been broken. If you see one of these errors, something is very broken.&lt;/td>
&lt;td>Might need manual intervension to fix this&lt;/td>
&lt;td>Y&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The status &lt;code>message&lt;/code> MUST contain a human readable description of error, if the status &lt;code>code&lt;/code> is not &lt;code>OK&lt;/code>.
This string MAY be surfaced by MCM to end users.&lt;/p>
&lt;h2 id="configuration-and-operation">Configuration and Operation&lt;/h2>
&lt;h3 id="supervised-lifecycle-management">Supervised Lifecycle Management&lt;/h3>
&lt;ul>
&lt;li>For Providers packaged in software form:
&lt;ul>
&lt;li>Provider Packages SHOULD use a well-documented container image format (e.g., Docker, OCI).&lt;/li>
&lt;li>The chosen package image format MAY expose configurable Provider properties as environment variables, unless otherwise indicated in the section below.
Variables so exposed SHOULD be assigned default values in the image manifest.&lt;/li>
&lt;li>A Provider Supervisor MAY programmatically evaluate or otherwise scan a Provider Package’s image manifest in order to discover configurable environment variables.&lt;/li>
&lt;li>A Provider SHALL NOT assume that an operator or Provider Supervisor will scan an image manifest for environment variables.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="environment-variables">Environment Variables&lt;/h4>
&lt;ul>
&lt;li>Variables defined by this specification SHALL be identifiable by their &lt;code>MC_&lt;/code> name prefix.&lt;/li>
&lt;li>Configuration properties not defined by the MC specification SHALL NOT use the same &lt;code>MC_&lt;/code> name prefix; this prefix is reserved for common configuration properties defined by the MC specification.&lt;/li>
&lt;li>The Provider Supervisor SHOULD supply all RECOMMENDED MC environment variables to a Provider.&lt;/li>
&lt;li>The Provider Supervisor SHALL supply all REQUIRED MC environment variables to a Provider.&lt;/li>
&lt;/ul>
&lt;h5 id="logging">Logging&lt;/h5>
&lt;ul>
&lt;li>Providers SHOULD generate log messages to ONLY standard output and/or standard error.
&lt;ul>
&lt;li>In this case the Provider Supervisor SHALL assume responsibility for all log lifecycle management.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Provider implementations that deviate from the above recommendation SHALL clearly and unambiguously document the following:
&lt;ul>
&lt;li>Logging configuration flags and/or variables, including working sample configurations.&lt;/li>
&lt;li>Default log destination(s) (where do the logs go if no configuration is specified?)&lt;/li>
&lt;li>Log lifecycle management ownership and related guidance (size limits, rate limits, rolling, archiving, expunging, etc.) applicable to the logging mechanism embedded within the Provider.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Providers SHOULD NOT write potentially sensitive data to logs (e.g. secrets).&lt;/li>
&lt;/ul>
&lt;h5 id="available-services">Available Services&lt;/h5>
&lt;ul>
&lt;li>Provider Packages MAY support all or a subset of CMI services; service combinations MAY be configurable at runtime by the Provider Supervisor.
&lt;ul>
&lt;li>This specification does not dictate the mechanism by which mode of operation MUST be discovered, and instead places that burden upon the VM Provider.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Misconfigured provider software SHOULD fail-fast with an OS-appropriate error code.&lt;/li>
&lt;/ul>
&lt;h5 id="linux-capabilities">Linux Capabilities&lt;/h5>
&lt;ul>
&lt;li>Providers SHOULD clearly document any additionally required capabilities and/or security context.&lt;/li>
&lt;/ul>
&lt;h5 id="cgroup-isolation">Cgroup Isolation&lt;/h5>
&lt;ul>
&lt;li>A Provider MAY be constrained by cgroups.&lt;/li>
&lt;/ul>
&lt;h5 id="resource-requirements">Resource Requirements&lt;/h5>
&lt;ul>
&lt;li>VM Providers SHOULD unambiguously document all of a Provider’s resource requirements.&lt;/li>
&lt;/ul>
&lt;h3 id="deploying">Deploying&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Recommended:&lt;/strong> The MCM and Provider are typically expected to run as two containers inside a common &lt;code>Pod&lt;/code>.&lt;/li>
&lt;li>However, for the security reasons they could execute on seperate Pods provided they have a secure way to exchange data between them.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Testing And Dependencies</title><link>https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/testing_and_dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/testing_and_dependencies/</guid><description>
&lt;h2 id="dependency-management">Dependency management&lt;/h2>
&lt;p>We use golang modules to manage golang dependencies. In order to add a new package dependency to the project, you can perform &lt;code>go get &amp;lt;PACKAGE&amp;gt;@&amp;lt;VERSION&amp;gt;&lt;/code> or edit the &lt;code>go.mod&lt;/code> file and append the package along with the version you want to use.&lt;/p>
&lt;h3 id="updating-dependencies">Updating dependencies&lt;/h3>
&lt;p>The &lt;code>Makefile&lt;/code> contains a rule called &lt;code>revendor&lt;/code> which performs &lt;code>go mod vendor&lt;/code> and &lt;code>go mod tidy&lt;/code>.&lt;/p>
&lt;p>&lt;code>go mod vendor&lt;/code> resets the main module&amp;rsquo;s vendor directory to include all packages needed to build and test all the main module&amp;rsquo;s packages. It does not include test code for vendored packages.&lt;/p>
&lt;p>&lt;code>go mod tidy&lt;/code> makes sure go.mod matches the source code in the module. It adds any missing modules necessary to build the current module&amp;rsquo;s packages and dependencies, and it removes unused modules that don&amp;rsquo;t provide any relevant packages.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ make revendor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The dependencies are installed into the &lt;code>vendor&lt;/code> folder which &lt;strong>should be added&lt;/strong> to the VCS.&lt;/p>
&lt;p>⚠️ Make sure you test the code after you have updated the dependencies!&lt;/p></description></item></channel></rss>