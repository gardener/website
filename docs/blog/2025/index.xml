<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2025 on Gardener</title><link>https://gardener.cloud/blog/2025/</link><description>Recent content in 2025 on Gardener</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Wed, 25 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://gardener.cloud/blog/2025/index.xml" rel="self" type="application/rss+xml"/><item><title>Enabling Seamless IPv4 to Dual-Stack Migration for Kubernetes Clusters on GCP</title><link>https://gardener.cloud/blog/2025/06-18-enabling-seamless-ipv4-to-dual-stack-migration-for-kubernetes-clusters-on-gcp/</link><pubDate>Wed, 25 Jun 2025 00:00:00 +0000</pubDate><guid>https://gardener.cloud/blog/2025/06-18-enabling-seamless-ipv4-to-dual-stack-migration-for-kubernetes-clusters-on-gcp/</guid><description>&lt;p>Gardener continues to enhance its networking capabilities, now offering a streamlined migration path for existing IPv4-only shoot clusters on Google Cloud Platform (GCP) to dual-stack (IPv4 and IPv6). This allows clusters to leverage the benefits of IPv6 networking while maintaining IPv4 compatibility.&lt;/p>
&lt;h3 id="the-shift-to-dual-stack-what-changes">The Shift to Dual-Stack: What Changes?&lt;a class="td-heading-self-link" href="#the-shift-to-dual-stack-what-changes" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;p>Transitioning a Gardener-managed Kubernetes cluster on GCP from a single-stack IPv4 to a dual-stack setup involves several key modifications to the underlying infrastructure and networking configuration.&lt;/p></description></item><item><title>Enhancing Meltdown Protection with Dependency-Watchdog Annotations</title><link>https://gardener.cloud/blog/2025/06-25-enhancing-meltdown-protection-with-dependency-watchdog-annotations/</link><pubDate>Wed, 25 Jun 2025 00:00:00 +0000</pubDate><guid>https://gardener.cloud/blog/2025/06-25-enhancing-meltdown-protection-with-dependency-watchdog-annotations/</guid><description>&lt;p>Gardener&amp;rsquo;s &lt;code>dependency-watchdog&lt;/code> is a crucial component for ensuring cluster stability. During infrastructure-level outages where worker nodes cannot communicate with the control plane, it activates a &amp;ldquo;meltdown protection&amp;rdquo; mechanism. This involves scaling down key control plane components like the &lt;code>machine-controller-manager&lt;/code> (MCM), &lt;code>cluster-autoscaler&lt;/code> (CA), and &lt;code>kube-controller-manager&lt;/code> (KCM) to prevent them from taking incorrect actions based on stale information, such as deleting healthy nodes that are only temporarily unreachable.&lt;/p>
&lt;h3 id="the-challenge-premature-scale-up-during-reconciliation">The Challenge: Premature Scale-Up During Reconciliation&lt;a class="td-heading-self-link" href="#the-challenge-premature-scale-up-during-reconciliation" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;p>Previously, a potential race condition could undermine this protection. While &lt;code>dependency-watchdog&lt;/code> scaled down the necessary components, a concurrent &lt;code>Shoot&lt;/code> reconciliation, whether triggered manually by an operator or by other events, could misinterpret the situation. The reconciliation logic, unaware that the scale-down was a deliberate protective measure, would attempt to restore the &amp;ldquo;desired&amp;rdquo; state by scaling the &lt;code>machine-controller-manager&lt;/code> and &lt;code>cluster-autoscaler&lt;/code> back up.&lt;/p></description></item><item><title>Improving Credential Management for Seed Backups</title><link>https://gardener.cloud/blog/2025/06-25-improving-credential-management-for-seed-backups/</link><pubDate>Wed, 25 Jun 2025 00:00:00 +0000</pubDate><guid>https://gardener.cloud/blog/2025/06-25-improving-credential-management-for-seed-backups/</guid><description>&lt;p>Gardener has introduced a new feature gate, &lt;code>DoNotCopyBackupCredentials&lt;/code>, to enhance the security and clarity of how backup credentials for managed seeds are handled. This change moves away from an implicit credential-copying mechanism to a more explicit and secure configuration practice.&lt;/p>
&lt;h3 id="the-old-behavior-and-its-drawbacks">The Old Behavior and Its Drawbacks&lt;a class="td-heading-self-link" href="#the-old-behavior-and-its-drawbacks" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;p>Previously, when setting up a managed seed, the controller would automatically copy the shoot&amp;rsquo;s infrastructure credentials to serve as the seed&amp;rsquo;s backup credentials if a backup secret was not explicitly provided. While this offered some convenience, it had several disadvantages:&lt;/p></description></item><item><title>Enhanced Extension Management: Introducing `autoEnable` and `clusterCompatibility`</title><link>https://gardener.cloud/blog/2025/06-18-enhanced-extension-management-introducing-autoenable-and-clustercompatibility/</link><pubDate>Wed, 18 Jun 2025 00:00:00 +0000</pubDate><guid>https://gardener.cloud/blog/2025/06-18-enhanced-extension-management-introducing-autoenable-and-clustercompatibility/</guid><description>&lt;p>Gardener&amp;rsquo;s extension mechanism has been enhanced with two new fields in the &lt;code>ControllerRegistration&lt;/code> and &lt;code>operatorv1alpha1.Extension&lt;/code> APIs, offering operators more granular control and improved safety when managing extensions. These changes, detailed in &lt;a href="https://github.com/gardener/gardener/pull/11982">PR #11982&lt;/a>, introduce &lt;code>autoEnable&lt;/code> and &lt;code>clusterCompatibility&lt;/code> for resources of &lt;code>kind: Extension&lt;/code>.&lt;/p>
&lt;h3 id="fine-grained-automatic-enablement-with-autoenable">Fine-Grained Automatic Enablement with &lt;code>autoEnable&lt;/code>&lt;a class="td-heading-self-link" href="#fine-grained-automatic-enablement-with-autoenable" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;p>Previously, operators could use the &lt;code>globallyEnabled&lt;/code> field to automatically enable an extension resource for all shoot clusters. This field is now deprecated and will be removed in Gardener &lt;code>v1.123&lt;/code>.&lt;/p></description></item><item><title>Enhanced Internal Traffic Management: L7 Load Balancing for kube-apiservers in Gardener</title><link>https://gardener.cloud/blog/2025/06-18-enhanced-internal-traffic-management-l7-load-balancing-for-kube-apiservers-in-gardener/</link><pubDate>Wed, 18 Jun 2025 00:00:00 +0000</pubDate><guid>https://gardener.cloud/blog/2025/06-18-enhanced-internal-traffic-management-l7-load-balancing-for-kube-apiservers-in-gardener/</guid><description>&lt;p>Gardener continuously evolves to optimize performance and reliability. A recent improvement focuses on how internal control plane components communicate with &lt;code>kube-apiserver&lt;/code> instances, introducing cluster-internal Layer 7 (L7) load balancing to ensure better resource distribution and system stability.&lt;/p>
&lt;h3 id="the-challenge-unbalanced-internal-load-on-kube-apiservers">The Challenge: Unbalanced Internal Load on kube-apiservers&lt;a class="td-heading-self-link" href="#the-challenge-unbalanced-internal-load-on-kube-apiservers" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;p>Previously, while external access to Gardener-managed &lt;code>kube-apiserver&lt;/code>s (for Shoots and the Virtual Garden) benefited from L7 load balancing via Istio, internal traffic took a more direct route. Components running within the seed cluster, such as &lt;code>gardener-resource-manager&lt;/code> and &lt;code>gardener-controller-manager&lt;/code>, would access the &lt;code>kube-apiserver&lt;/code>&amp;rsquo;s internal Kubernetes service directly. This direct access bypassed the L7 load balancing capabilities of the Istio ingress gateway.&lt;/p></description></item></channel></rss>