<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Provider AWS</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/</link><description>Recent content in Provider AWS on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Deployment</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/docs/deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/docs/deployment/</guid><description>
&lt;h1 id="deployment-of-the-aws-provider-extension">Deployment of the AWS provider extension&lt;/h1>
&lt;p>&lt;strong>Disclaimer:&lt;/strong> This document is NOT a step by step installation guide for the AWS provider extension and only contains some configuration specifics regarding the installation of different components via the helm charts residing in the AWS provider extension &lt;a href="https://github.com/gardener/gardener-extension-provider-aws">repository&lt;/a>.&lt;/p>
&lt;h2 id="gardener-extension-admission-aws">gardener-extension-admission-aws&lt;/h2>
&lt;h3 id="authentication-against-the-garden-cluster">Authentication against the Garden cluster&lt;/h3>
&lt;p>There are several authentication possibilities depending on whether or not &lt;a href="https://github.com/gardener/garden-setup#concept-the-virtual-cluster">the concept of &lt;em>Virtual Garden&lt;/em>&lt;/a> is used.&lt;/p>
&lt;h4 id="virtual-garden-is-not-used-ie-the-runtime-garden-cluster-is-also-the-target-garden-cluster">&lt;em>Virtual Garden&lt;/em> is not used, i.e., the &lt;code>runtime&lt;/code> Garden cluster is also the &lt;code>target&lt;/code> Garden cluster.&lt;/h4>
&lt;p>&lt;strong>Automounted Service Account Token&lt;/strong>
The easiest way to deploy the &lt;code>gardener-extension-admission-aws&lt;/code> component will be to not provide &lt;code>kubeconfig&lt;/code> at all. This way in-cluster configuration and an automounted service account token will be used. The drawback of this approach is that the automounted token will not be automatically rotated.&lt;/p>
&lt;p>&lt;strong>Service Account Token Volume Projection&lt;/strong>
Another solution will be to use &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection">Service Account Token Volume Projection&lt;/a> combined with a &lt;code>kubeconfig&lt;/code> referencing a token file (see example below).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: v1
kind: Config
clusters:
- cluster:
certificate-authority-data: &amp;lt;CA-DATA&amp;gt;
server: https://default.kubernetes.svc.cluster.local
name: garden
contexts:
- context:
cluster: garden
user: garden
name: garden
current-context: garden
users:
- name: garden
user:
tokenFile: /var/run/secrets/projected/serviceaccount/token
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will allow for automatic rotation of the service account token by the &lt;code>kubelet&lt;/code>. The configuration can be achieved by setting both &lt;code>.Values.global.serviceAccountTokenVolumeProjection.enabled: true&lt;/code> and &lt;code>.Values.global.kubeconfig&lt;/code> in the respective chart&amp;rsquo;s &lt;code>values.yaml&lt;/code> file.&lt;/p>
&lt;h4 id="virtual-garden-is-used-ie-the-runtime-garden-cluster-is-different-from-the-target-garden-cluster">&lt;em>Virtual Garden&lt;/em> is used, i.e., the &lt;code>runtime&lt;/code> Garden cluster is different from the &lt;code>target&lt;/code> Garden cluster.&lt;/h4>
&lt;p>&lt;strong>Service Account&lt;/strong>
The easiest way to setup the authentication will be to create a service account and the respective roles will be bound to this service account in the &lt;code>target&lt;/code> cluster. Then use the generated service account token and craft a &lt;code>kubeconfig&lt;/code> which will be used by the workload in the &lt;code>runtime&lt;/code> cluster. This approach does not provide a solution for the rotation of the service account token. However, this setup can be achieved by setting &lt;code>.Values.global.virtualGarden.enabled: true&lt;/code> and following these steps:&lt;/p>
&lt;ol>
&lt;li>Deploy the &lt;code>application&lt;/code> part of the charts in the &lt;code>target&lt;/code> cluster.&lt;/li>
&lt;li>Get the service account token and craft the &lt;code>kubeconfig&lt;/code>.&lt;/li>
&lt;li>Set the crafted &lt;code>kubeconfig&lt;/code> and deploy the &lt;code>runtime&lt;/code> part of the charts in the &lt;code>runtime&lt;/code> cluster.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Client Certificate&lt;/strong>
Another solution will be to bind the roles in the &lt;code>target&lt;/code> cluster to a &lt;code>User&lt;/code> subject instead of a service account and use a client certificate for authentication. This approach does not provide a solution for the client certificate rotation. However, this setup can be achieved by setting both &lt;code>.Values.global.virtualGarden.enabled: true&lt;/code> and &lt;code>.Values.global.virtualGarden.user.name&lt;/code>, then following these steps:&lt;/p>
&lt;ol>
&lt;li>Generate a client certificate for the &lt;code>target&lt;/code> cluster for the respective user.&lt;/li>
&lt;li>Deploy the &lt;code>application&lt;/code> part of the charts in the &lt;code>target&lt;/code> cluster.&lt;/li>
&lt;li>Craft a &lt;code>kubeconfig&lt;/code> using the already generated client certificate.&lt;/li>
&lt;li>Set the crafted &lt;code>kubeconfig&lt;/code> and deploy the &lt;code>runtime&lt;/code> part of the charts in the &lt;code>runtime&lt;/code> cluster.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Projected Service Account Token&lt;/strong>
This approach requires an already deployed and configured &lt;a href="https://github.com/gardener/oidc-webhook-authenticator">oidc-webhook-authenticator&lt;/a> for the &lt;code>target&lt;/code> cluster. Also the &lt;code>runtime&lt;/code> cluster should be registered as a trusted identity provider in the &lt;code>target&lt;/code> cluster. Then projected service accounts tokens from the &lt;code>runtime&lt;/code> cluster can be used to authenticate against the &lt;code>target&lt;/code> cluster. The needed steps are as follows:&lt;/p>
&lt;ol>
&lt;li>Deploy &lt;a href="https://github.com/gardener/oidc-webhook-authenticator">OWA&lt;/a> and establish the needed trust.&lt;/li>
&lt;li>Set &lt;code>.Values.global.virtualGarden.enabled: true&lt;/code> and &lt;code>.Values.global.virtualGarden.user.name&lt;/code>. &lt;strong>Note:&lt;/strong> username value will depend on the trust configuration, e.g., &lt;code>&amp;lt;prefix&amp;gt;:system:serviceaccount:&amp;lt;namespace&amp;gt;:&amp;lt;serviceaccount&amp;gt;&lt;/code>&lt;/li>
&lt;li>Set &lt;code>.Values.global.serviceAccountTokenVolumeProjection.enabled: true&lt;/code> and &lt;code>.Values.global.serviceAccountTokenVolumeProjection.audience&lt;/code>. &lt;strong>Note:&lt;/strong> audience value will depend on the trust configuration, e.g., &lt;code>&amp;lt;cliend-id-from-trust-config&amp;gt;&lt;/code>.&lt;/li>
&lt;li>Craft a kubeconfig (see example below).&lt;/li>
&lt;li>Deploy the &lt;code>application&lt;/code> part of the charts in the &lt;code>target&lt;/code> cluster.&lt;/li>
&lt;li>Deploy the &lt;code>runtime&lt;/code> part of the charts in the &lt;code>runtime&lt;/code> cluster.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: v1
kind: Config
clusters:
- cluster:
certificate-authority-data: &amp;lt;CA-DATA&amp;gt;
server: https://virtual-garden.api
name: virtual-garden
contexts:
- context:
cluster: virtual-garden
user: virtual-garden
name: virtual-garden
current-context: virtual-garden
users:
- name: virtual-garden
user:
tokenFile: /var/run/secrets/projected/serviceaccount/token
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Local Setup</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/docs/local-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/docs/local-setup/</guid><description>
&lt;h3 id="admission-aws">admission-aws&lt;/h3>
&lt;p>&lt;code>admission-aws&lt;/code> is an admission webhook server which is responsible for the validation of the cloud provider (AWS in this case) specific fields and resources. The Gardener API server is cloud provider agnostic and it wouldn&amp;rsquo;t be able to perform similar validation.&lt;/p>
&lt;p>Follow the steps below to run the admission webhook server locally.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Start the Gardener API server.&lt;/p>
&lt;p>For details, check the Gardener &lt;a href="https://gardener.cloud/docs/gardener/development/local_setup/">local setup&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start the webhook server&lt;/p>
&lt;p>Make sure that the &lt;code>KUBECONFIG&lt;/code> environment variable is pointing to the local garden cluster.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make start-admission
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Setup the &lt;code>ValidatingWebhookConfiguration&lt;/code>.&lt;/p>
&lt;p>&lt;code>hack/dev-setup-admission-aws.sh&lt;/code> will configure the webhook Service which will allow the kube-apiserver of your local cluster to reach the webhook server. It will also apply the &lt;code>ValidatingWebhookConfiguration&lt;/code> manifest.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./hack/dev-setup-admission-aws.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>You are now ready to experiment with the &lt;code>admission-aws&lt;/code> webhook server locally.&lt;/p></description></item><item><title>Docs: Usage As End User</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/docs/usage-as-end-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/docs/usage-as-end-user/</guid><description>
&lt;h1 id="using-the-aws-provider-extension-with-gardener-as-end-user">Using the AWS provider extension with Gardener as end-user&lt;/h1>
&lt;p>The &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-shoot.yaml">&lt;code>core.gardener.cloud/v1beta1.Shoot&lt;/code> resource&lt;/a> declares a few fields that are meant to contain provider-specific configuration.&lt;/p>
&lt;p>In this document we are describing how this configuration looks like for AWS and provide an example &lt;code>Shoot&lt;/code> manifest with minimal configuration that you can use to create an AWS cluster (modulo the landscape-specific information like cloud profile names, secret binding names, etc.).&lt;/p>
&lt;h2 id="provider-secret-data">Provider Secret Data&lt;/h2>
&lt;p>Every shoot cluster references a &lt;code>SecretBinding&lt;/code> which itself references a &lt;code>Secret&lt;/code>, and this &lt;code>Secret&lt;/code> contains the provider credentials of your AWS account.
This &lt;code>Secret&lt;/code> must look as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: v1
kind: Secret
metadata:
name: core-aws
namespace: garden-dev
type: Opaque
data:
accessKeyID: base64(access-key-id)
secretAccessKey: base64(secret-access-key)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys">AWS documentation&lt;/a> explains the necessary steps to enable programmatic access, i.e. create &lt;strong>access key ID&lt;/strong> and &lt;strong>access key&lt;/strong>, for the user of your choice.&lt;/p>
&lt;p>⚠️ For security reasons, we recommend creating a &lt;strong>dedicated user with programmatic access only&lt;/strong>. Please avoid re-using a IAM user which has access to the AWS console (human user).&lt;/p>
&lt;p>⚠️ Depending on your AWS API usage it can be problematic to reuse the same AWS Account for different Shoot clusters in the same region due to rate limits. Please consider spreading your Shoots over multiple AWS Accounts if you are hitting those limits.&lt;/p>
&lt;h3 id="permissions">Permissions&lt;/h3>
&lt;p>Please make sure that the provided credentials have the correct privileges. You can use the following AWS IAM policy document and attach it to the IAM user backed by the credentials you provided (please check the &lt;a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage.html">official AWS documentation&lt;/a> as well):&lt;/p>
&lt;details>
&lt;summary>Click to expand the AWS IAM policy document!&lt;/summary>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&amp;#34;Version&amp;#34;: &lt;span style="color:#a31515">&amp;#34;2012-10-17&amp;#34;&lt;/span>,
&amp;#34;Statement&amp;#34;: [
{
&amp;#34;Effect&amp;#34;: &lt;span style="color:#a31515">&amp;#34;Allow&amp;#34;&lt;/span>,
&amp;#34;Action&amp;#34;: &lt;span style="color:#a31515">&amp;#34;autoscaling:*&amp;#34;&lt;/span>,
&amp;#34;Resource&amp;#34;: &lt;span style="color:#a31515">&amp;#34;*&amp;#34;&lt;/span>
},
{
&amp;#34;Effect&amp;#34;: &lt;span style="color:#a31515">&amp;#34;Allow&amp;#34;&lt;/span>,
&amp;#34;Action&amp;#34;: &lt;span style="color:#a31515">&amp;#34;ec2:*&amp;#34;&lt;/span>,
&amp;#34;Resource&amp;#34;: &lt;span style="color:#a31515">&amp;#34;*&amp;#34;&lt;/span>
},
{
&amp;#34;Effect&amp;#34;: &lt;span style="color:#a31515">&amp;#34;Allow&amp;#34;&lt;/span>,
&amp;#34;Action&amp;#34;: &lt;span style="color:#a31515">&amp;#34;elasticloadbalancing:*&amp;#34;&lt;/span>,
&amp;#34;Resource&amp;#34;: &lt;span style="color:#a31515">&amp;#34;*&amp;#34;&lt;/span>
},
{
&amp;#34;Action&amp;#34;: [
&lt;span style="color:#a31515">&amp;#34;iam:GetInstanceProfile&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:GetPolicy&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:GetPolicyVersion&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:GetRole&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:GetRolePolicy&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:ListPolicyVersions&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:ListRolePolicies&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:ListAttachedRolePolicies&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:ListInstanceProfilesForRole&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:CreateInstanceProfile&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:CreatePolicy&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:CreatePolicyVersion&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:CreateRole&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:CreateServiceLinkedRole&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:AddRoleToInstanceProfile&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:AttachRolePolicy&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:DetachRolePolicy&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:RemoveRoleFromInstanceProfile&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:DeletePolicy&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:DeletePolicyVersion&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:DeleteRole&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:DeleteRolePolicy&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:DeleteInstanceProfile&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:PutRolePolicy&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:PassRole&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;iam:UpdateAssumeRolePolicy&amp;#34;&lt;/span>
],
&amp;#34;Effect&amp;#34;: &lt;span style="color:#a31515">&amp;#34;Allow&amp;#34;&lt;/span>,
&amp;#34;Resource&amp;#34;: &lt;span style="color:#a31515">&amp;#34;*&amp;#34;&lt;/span>
}
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;h2 id="infrastructureconfig">&lt;code>InfrastructureConfig&lt;/code>&lt;/h2>
&lt;p>The infrastructure configuration mainly describes how the network layout looks like in order to create the shoot worker nodes in a later step, thus, prepares everything relevant to create VMs, load balancers, volumes, etc.&lt;/p>
&lt;p>An example &lt;code>InfrastructureConfig&lt;/code> for the AWS extension looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
kind: InfrastructureConfig
enableECRAccess: &lt;span style="color:#00f">true&lt;/span>
networks:
vpc: &lt;span style="color:#008000"># specify either &amp;#39;id&amp;#39; or &amp;#39;cidr&amp;#39;&lt;/span>
&lt;span style="color:#008000"># id: vpc-123456&lt;/span>
cidr: 10.250.0.0/16
&lt;span style="color:#008000"># gatewayEndpoints:&lt;/span>
&lt;span style="color:#008000"># - s3&lt;/span>
zones:
- name: eu-west-1a
internal: 10.250.112.0/22
public: 10.250.96.0/22
workers: 10.250.0.0/19
&lt;span style="color:#008000"># elasticIPAllocationID: eipalloc-123456&lt;/span>
ignoreTags:
keys: &lt;span style="color:#008000"># individual ignored tag keys&lt;/span>
- SomeCustomKey
- AnotherCustomKey
keyPrefixes: &lt;span style="color:#008000"># ignored tag key prefixes&lt;/span>
- user.specific/prefix/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>enableECRAccess&lt;/code> flag specifies whether the AWS IAM role policy attached to all worker nodes of the cluster shall contain permissions to access the Elastic Container Registry of the respective AWS account.
If the flag is not provided it is defaulted to &lt;code>true&lt;/code>.
Please note that if the &lt;code>iamInstanceProfile&lt;/code> is set for a worker pool in the &lt;code>WorkerConfig&lt;/code> (see below) then &lt;code>enableECRAccess&lt;/code> does not have any effect.
It only applies for those worker pools whose &lt;code>iamInstanceProfile&lt;/code> is not set.&lt;/p>
&lt;details>
&lt;summary>Click to expand the default AWS IAM policy document used for the instance profiles!&lt;/summary>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&amp;#34;Version&amp;#34;: &lt;span style="color:#a31515">&amp;#34;2012-10-17&amp;#34;&lt;/span>,
&amp;#34;Statement&amp;#34;: [
{
&amp;#34;Effect&amp;#34;: &lt;span style="color:#a31515">&amp;#34;Allow&amp;#34;&lt;/span>,
&amp;#34;Action&amp;#34;: [
&lt;span style="color:#a31515">&amp;#34;ec2:DescribeInstances&amp;#34;&lt;/span>
],
&amp;#34;Resource&amp;#34;: [
&lt;span style="color:#a31515">&amp;#34;*&amp;#34;&lt;/span>
]
},
&lt;span style="">//&lt;/span> &lt;span style="">Only&lt;/span> &lt;span style="">if&lt;/span> &lt;span style="">`.enableECRAccess`&lt;/span> &lt;span style="">is&lt;/span> &lt;span style="">`&lt;/span>&lt;span style="color:#00f">true&lt;/span>&lt;span style="">`.&lt;/span>
{
&amp;#34;Effect&amp;#34;: &lt;span style="color:#a31515">&amp;#34;Allow&amp;#34;&lt;/span>,
&amp;#34;Action&amp;#34;: [
&lt;span style="color:#a31515">&amp;#34;ecr:GetAuthorizationToken&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;ecr:BatchCheckLayerAvailability&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;ecr:GetDownloadUrlForLayer&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;ecr:GetRepositoryPolicy&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;ecr:DescribeRepositories&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;ecr:ListImages&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;ecr:BatchGetImage&amp;#34;&lt;/span>
],
&amp;#34;Resource&amp;#34;: [
&lt;span style="color:#a31515">&amp;#34;*&amp;#34;&lt;/span>
]
}
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;p>The &lt;code>networks.vpc&lt;/code> section describes whether you want to create the shoot cluster in an already existing VPC or whether to create a new one:&lt;/p>
&lt;ul>
&lt;li>If &lt;code>networks.vpc.id&lt;/code> is given then you have to specify the VPC ID of the existing VPC that was created by other means (manually, other tooling, &amp;hellip;).
Please make sure that the VPC has attached an internet gateway - the AWS controller won&amp;rsquo;t create one automatically for existing VPCs. To make sure the nodes are able to join and operate in your cluster properly, please make sure that your VPC has enabled &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html">DNS Support&lt;/a>, explicitly the attributes &lt;code>enableDnsHostnames&lt;/code> and &lt;code>enableDnsSupport&lt;/code> must be set to &lt;code>true&lt;/code>.&lt;/li>
&lt;li>If &lt;code>networks.vpc.cidr&lt;/code> is given then you have to specify the VPC CIDR of a new VPC that will be created during shoot creation.
You can freely choose a private CIDR range.&lt;/li>
&lt;li>Either &lt;code>networks.vpc.id&lt;/code> or &lt;code>networks.vpc.cidr&lt;/code> must be present, but not both at the same time.&lt;/li>
&lt;li>&lt;code>networks.vpc.gatewayEndpoints&lt;/code> is optional. If specified then each item is used as service name in a corresponding Gateway VPC Endpoint.&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>networks.zones&lt;/code> section contains configuration for resources you want to create or use in availability zones.
For every zone, the AWS extension creates three subnets:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>internal&lt;/code> subnet is used for &lt;a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-internal-load-balancers.html">internal AWS load balancers&lt;/a>.&lt;/li>
&lt;li>The &lt;code>public&lt;/code> subnet is used for &lt;a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-internet-facing-load-balancers.html">public AWS load balancers&lt;/a>.&lt;/li>
&lt;li>The &lt;code>workers&lt;/code> subnet is used for all shoot worker nodes, i.e., VMs which later run your applications.&lt;/li>
&lt;/ul>
&lt;p>For every subnet, you have to specify a CIDR range contained in the VPC CIDR specified above, or the VPC CIDR of your already existing VPC.
You can freely choose these CIDRs and it is your responsibility to properly design the network layout to suit your needs.&lt;/p>
&lt;p>Also, the AWS extension creates a dedicated NAT gateway for each zone.
By default, it also creates a corresponding Elastic IP that it attaches to this NAT gateway and which is used for egress traffic.
The &lt;code>elasticIPAllocationID&lt;/code> field allows you to specify the ID of an existing Elastic IP allocation in case you want to bring your own.
If provided, no new Elastic IP will be created and, instead, the Elastic IP specified by you will be used.&lt;/p>
&lt;p>⚠️ If you change this field for an already existing infrastructure then it will disrupt egress traffic while AWS applies this change.
The reason is that the NAT gateway must be recreated with the new Elastic IP association.
Also, please note that the existing Elastic IP will be permanently deleted if it was earlier created by the AWS extension.&lt;/p>
&lt;p>You can configure &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpce-gateway.html">Gateway VPC Endpoints&lt;/a> by adding items in the optional list &lt;code>networks.vpc.gatewayEndpoints&lt;/code>. Each item in the list is used as a service name and a corresponding endpoint is created for it. All created endpoints point to the service within the cluster&amp;rsquo;s region. For example, consider this (partial) shoot config:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">spec:
region: eu-central-1
provider:
type: aws
infrastructureConfig:
apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
kind: InfrastructureConfig
networks:
vpc:
gatewayEndpoints:
- s3
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The service name of the S3 Gateway VPC Endpoint in this example is &lt;code>com.amazonaws.eu-central-1.s3&lt;/code>.&lt;/p>
&lt;p>If you want to use multiple availability zones then add a second, third, &amp;hellip; entry to the &lt;code>networks.zones[]&lt;/code> list and properly specify the AZ name in &lt;code>networks.zones[].name&lt;/code>.&lt;/p>
&lt;p>Apart from the VPC and the subnets the AWS extension will also create DHCP options and an internet gateway (only if a new VPC is created), routing tables, security groups, elastic IPs, NAT gateways, EC2 key pairs, IAM roles, and IAM instance profiles.&lt;/p>
&lt;p>The &lt;code>ignoreTags&lt;/code> section allows to configure which resource tags on AWS resources managed by Gardener should be ignored during
infrastructure reconciliation. By default, all tags that are added outside of Gardener&amp;rsquo;s
reconciliation will be removed during the next reconciliation. This field allows users and automation to add
custom tags on AWS resources created and managed by Gardener without loosing them on the next reconciliation.
Tags can ignored either by specifying exact key values (&lt;code>ignoreTags.keys&lt;/code>) or key prefixes (&lt;code>ignoreTags.keyPrefixes&lt;/code>).
In both cases it is forbidden to ignore the &lt;code>Name&lt;/code> tag or any tag starting with &lt;code>kubernetes.io&lt;/code> or &lt;code>gardener.cloud&lt;/code>.&lt;br>
Please note though, that the tags are only ignored on resources created on behalf of the &lt;code>Infrastructure&lt;/code> CR (i.e. VPC,
subnets, security groups, keypair, etc.), while tags on machines, volumes, etc. are not in the scope of this controller.&lt;/p>
&lt;h2 id="controlplaneconfig">&lt;code>ControlPlaneConfig&lt;/code>&lt;/h2>
&lt;p>The control plane configuration mainly contains values for the AWS-specific control plane components.
Today, the only component deployed by the AWS extension is the &lt;code>cloud-controller-manager&lt;/code>.&lt;/p>
&lt;p>An example &lt;code>ControlPlaneConfig&lt;/code> for the AWS extension looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
kind: ControlPlaneConfig
cloudControllerManager:
featureGates:
CustomResourceValidation: &lt;span style="color:#00f">true&lt;/span>
storage:
managedDefaultClass: &lt;span style="color:#00f">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>cloudControllerManager.featureGates&lt;/code> contains a map of explicitly enabled or disabled feature gates.
For production usage it&amp;rsquo;s not recommend to use this field at all as you can enable alpha features or disable beta/stable features, potentially impacting the cluster stability.
If you don&amp;rsquo;t want to configure anything for the &lt;code>cloudControllerManager&lt;/code> simply omit the key in the YAML specification.&lt;/p>
&lt;p>The &lt;code>storage.managedDefaultClass&lt;/code> controls if the &lt;code>default&lt;/code> storage / volume snapshot classes are marked as default by Gardener. Set it to &lt;code>false&lt;/code> to &lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/change-default-storage-class/">mark another storage / volume snapshot class as default&lt;/a> without Gardener overwriting this change. If unset, this field defaults to &lt;code>true&lt;/code>.&lt;/p>
&lt;h2 id="workerconfig">&lt;code>WorkerConfig&lt;/code>&lt;/h2>
&lt;p>The AWS extension supports encryption for volumes plus support for additional data volumes per machine.
For each data volume, you have to specify a name.
By default (if not stated otherwise), all the disks (root &amp;amp; data volumes) are encrypted.
Please make sure that your &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">instance-type supports encryption&lt;/a>.
If your instance-type doesn&amp;rsquo;t support encryption, you will have to disable encryption (which is enabled by default) by setting &lt;code>volume.encrpyted&lt;/code> to &lt;code>false&lt;/code> (refer below shown YAML snippet).&lt;/p>
&lt;p>The following YAML is a snippet of a &lt;code>Shoot&lt;/code> resource:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">spec:
provider:
workers:
- name: cpu-worker
...
volume:
type: gp2
size: 20Gi
encrypted: &lt;span style="color:#00f">false&lt;/span>
dataVolumes:
- name: kubelet-dir
type: gp2
size: 25Gi
encrypted: &lt;span style="color:#00f">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Note: The AWS extension does not support EBS volume (root &amp;amp; data volumes) encryption with &lt;a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed CMK&lt;/a>. Support for &lt;a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk">customer managed CMK&lt;/a> is out of scope for now. Only &lt;a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">AWS managed CMK&lt;/a> is supported.&lt;/p>
&lt;/blockquote>
&lt;p>Additionally, it is possible to provide further AWS-specific values for configuring the worker pools.
It can be provided in &lt;code>.spec.provider.workers[].providerConfig&lt;/code> and is evaluated by the AWS worker controller when it reconciles the shoot machines.&lt;/p>
&lt;p>An example &lt;code>WorkerConfig&lt;/code> for the AWS extension looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
kind: WorkerConfig
volume:
iops: 10000
dataVolumes:
- name: kubelet-dir
iops: 12345
snapshotID: snap-1234
iamInstanceProfile: &lt;span style="color:#008000"># (specify either ARN or name)&lt;/span>
name: my-profile
&lt;span style="color:#008000"># arn: my-instance-profile-arn&lt;/span>
nodeTemplate: &lt;span style="color:#008000"># (to be specified only if the node capacity would be different from cloudprofile info during runtime)&lt;/span>
capacity:
cpu: 2
gpu: 0
memory: 50Gi
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.volume.iops&lt;/code> is the number of I/O operations per second (IOPS) that the volume supports.
For &lt;code>io1&lt;/code> volume type, this represents the number of IOPS that are provisioned for the volume.
For &lt;code>gp2&lt;/code> volume type, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about General Purpose SSD baseline performance, I/O credits, and bursting, see Amazon EBS Volume Types (&lt;a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html&lt;/a>) in the Amazon Elastic Compute Cloud User Guide.&lt;br>
Constraint: Range is 100-20000 IOPS for &lt;code>io1&lt;/code> volumes and 100-10000 IOPS for &lt;code>gp2&lt;/code> volumes.&lt;/p>
&lt;p>The &lt;code>.dataVolumes&lt;/code> can optionally contain configurations for the data volumes stated in the &lt;code>Shoot&lt;/code> specification in the &lt;code>.spec.provider.workers[].dataVolumes&lt;/code> list.
The &lt;code>.name&lt;/code> must match to the name of the data volume in the shoot.
Apart from the &lt;code>.iops&lt;/code> (which, again, is only valid for &lt;code>io1&lt;/code> or &lt;code>gp2&lt;/code> volumes), it is also possible to provide a snapshot ID.
It allows to &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-restoring-volume.html">restore the data volume from an existing snapshot&lt;/a>.&lt;/p>
&lt;p>The &lt;code>iamInstanceProfile&lt;/code> section allows to specify the IAM instance profile name xor ARN that should be used for this worker pool.
If not specified, a dedicated IAM instance profile created by the infrastructure controller is used (see above).&lt;/p>
&lt;h2 id="example-shoot-manifest-one-availability-zone">Example &lt;code>Shoot&lt;/code> manifest (one availability zone)&lt;/h2>
&lt;p>Please find below an example &lt;code>Shoot&lt;/code> manifest for one availability zone:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1alpha1
kind: Shoot
metadata:
name: johndoe-aws
namespace: garden-dev
spec:
cloudProfileName: aws
region: eu-central-1
secretBindingName: core-aws
provider:
type: aws
infrastructureConfig:
apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
kind: InfrastructureConfig
networks:
vpc:
cidr: 10.250.0.0/16
zones:
- name: eu-central-1a
internal: 10.250.112.0/22
public: 10.250.96.0/22
workers: 10.250.0.0/19
controlPlaneConfig:
apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
kind: ControlPlaneConfig
workers:
- name: worker-xoluy
machine:
type: m5.large
minimum: 2
maximum: 2
volume:
size: 50Gi
type: gp2
&lt;span style="color:#008000"># The following provider config is only valid if the volume type is `io1`.&lt;/span>
&lt;span style="color:#008000"># providerConfig:&lt;/span>
&lt;span style="color:#008000"># apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1&lt;/span>
&lt;span style="color:#008000"># kind: WorkerConfig&lt;/span>
&lt;span style="color:#008000"># volume:&lt;/span>
&lt;span style="color:#008000"># iops: 10000&lt;/span>
zones:
- eu-central-1a
networking:
nodes: 10.250.0.0/16
type: calico
kubernetes:
version: 1.16.1
maintenance:
autoUpdate:
kubernetesVersion: &lt;span style="color:#00f">true&lt;/span>
machineImageVersion: &lt;span style="color:#00f">true&lt;/span>
addons:
kubernetes-dashboard:
enabled: &lt;span style="color:#00f">true&lt;/span>
nginx-ingress:
enabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="example-shoot-manifest-three-availability-zones">Example &lt;code>Shoot&lt;/code> manifest (three availability zones)&lt;/h2>
&lt;p>Please find below an example &lt;code>Shoot&lt;/code> manifest for three availability zones:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1alpha1
kind: Shoot
metadata:
name: johndoe-aws
namespace: garden-dev
spec:
cloudProfileName: aws
region: eu-central-1
secretBindingName: core-aws
provider:
type: aws
infrastructureConfig:
apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
kind: InfrastructureConfig
networks:
vpc:
cidr: 10.250.0.0/16
zones:
- name: eu-central-1a
workers: 10.250.0.0/26
public: 10.250.96.0/26
internal: 10.250.112.0/26
- name: eu-central-1b
workers: 10.250.0.64/26
public: 10.250.96.64/26
internal: 10.250.112.64/26
- name: eu-central-1c
workers: 10.250.0.128/26
public: 10.250.96.128/26
internal: 10.250.112.128/26
controlPlaneConfig:
apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
kind: ControlPlaneConfig
workers:
- name: worker-xoluy
machine:
type: m5.large
minimum: 3
maximum: 9
volume:
size: 50Gi
type: gp2
zones:
- eu-central-1a
- eu-central-1b
- eu-central-1c
networking:
nodes: 10.250.0.0/16
type: calico
kubernetes:
version: 1.16.1
maintenance:
autoUpdate:
kubernetesVersion: &lt;span style="color:#00f">true&lt;/span>
machineImageVersion: &lt;span style="color:#00f">true&lt;/span>
addons:
kubernetes-dashboard:
enabled: &lt;span style="color:#00f">true&lt;/span>
nginx-ingress:
enabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="csi-volume-provisioners">CSI volume provisioners&lt;/h2>
&lt;p>Every AWS shoot cluster that has at least Kubernetes v1.18 will be deployed with the AWS EBS CSI driver.
It is compatible with the legacy in-tree volume provisioner that was deprecated by the Kubernetes community and will be removed in future versions of Kubernetes.
End-users might want to update their custom &lt;code>StorageClass&lt;/code>es to the new &lt;code>ebs.csi.aws.com&lt;/code> provisioner.
Shoot clusters with Kubernetes v1.17 or less will use the in-tree &lt;code>kubernetes.io/aws-ebs&lt;/code> volume provisioner in the kube-controller-manager and the kubelet.&lt;/p>
&lt;h3 id="node-specific-volume-limits">Node-specific Volume Limits&lt;/h3>
&lt;p>The Kubernetes scheduler allows configurable limit for the number of volumes that can be attached to a node. See &lt;a href="https://k8s.io/docs/concepts/storage/storage-limits/#custom-limits">https://k8s.io/docs/concepts/storage/storage-limits/#custom-limits&lt;/a>.&lt;/p>
&lt;p>CSI drivers usually have a different procedure for configuring this custom limit. By default, the EBS CSI driver parses the machine type name and then decides the volume limit. However, this is only a rough approximation and not good enough in most cases. Specifying the volume attach limit via command line flag (&lt;code>--volume-attach-limit&lt;/code>) is currently the alternative until a more sophisticated solution presents itself (dynamically discovering the maximum number of attachable volume per EC2 machine type, see also &lt;a href="https://github.com/kubernetes-sigs/aws-ebs-csi-driver/issues/347)">https://github.com/kubernetes-sigs/aws-ebs-csi-driver/issues/347)&lt;/a>. The AWS extension allows the &lt;code>--volume-attach-limit&lt;/code> flag of the EBS CSI driver to be configurable via &lt;code>aws.provider.extensions.gardener.cloud/volume-attach-limit&lt;/code> annotation on the &lt;code>Shoot&lt;/code> resource. If the annotation is added to an existing &lt;code>Shoot&lt;/code>, then reconciliation needs to be triggered manually (see &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_operations/#immediate-reconciliation">Immediate reconciliation&lt;/a>), as in general adding annotation to resource is not a change that leads to &lt;code>.metadata.generation&lt;/code> increase in general.&lt;/p>
&lt;h2 id="kubernetes-versions-per-worker-pool">Kubernetes Versions per Worker Pool&lt;/h2>
&lt;p>This extension supports &lt;code>gardener/gardener&lt;/code>&amp;rsquo;s &lt;code>WorkerPoolKubernetesVersion&lt;/code> feature gate, i.e., having &lt;a href="https://github.com/gardener/gardener/blob/8a9c88866ec5fce59b5acf57d4227eeeb73669d7/example/90-shoot.yaml#L69-L70">worker pools with overridden Kubernetes versions&lt;/a> since &lt;code>gardener-extension-provider-aws@v1.34&lt;/code>.
Note that this feature is only usable for &lt;code>Shoot&lt;/code>s whose &lt;code>.spec.kubernetes.version&lt;/code> is greater or equal than the CSI migration version (&lt;code>1.18&lt;/code>).&lt;/p></description></item><item><title>Docs: Usage As Operator</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/docs/usage-as-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/docs/usage-as-operator/</guid><description>
&lt;h1 id="using-the-aws-provider-extension-with-gardener-as-operator">Using the AWS provider extension with Gardener as operator&lt;/h1>
&lt;p>The &lt;a href="https://github.com/gardener/gardener/blob/master/example/30-cloudprofile.yaml">&lt;code>core.gardener.cloud/v1beta1.CloudProfile&lt;/code> resource&lt;/a> declares a &lt;code>providerConfig&lt;/code> field that is meant to contain provider-specific configuration.
Similarly, the &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">&lt;code>core.gardener.cloud/v1beta1.Seed&lt;/code> resource&lt;/a> is structured.
Additionally, it allows to configure settings for the backups of the main etcds' data of shoot clusters control planes running in this seed cluster.&lt;/p>
&lt;p>This document explains what is necessary to configure for this provider extension.&lt;/p>
&lt;h2 id="cloudprofile-resource">&lt;code>CloudProfile&lt;/code> resource&lt;/h2>
&lt;p>In this section we are describing how the configuration for &lt;code>CloudProfile&lt;/code>s looks like for AWS and provide an example &lt;code>CloudProfile&lt;/code> manifest with minimal configuration that you can use to allow creating AWS shoot clusters.&lt;/p>
&lt;h3 id="cloudprofileconfig">&lt;code>CloudProfileConfig&lt;/code>&lt;/h3>
&lt;p>The cloud profile configuration contains information about the real machine image IDs in the AWS environment (AMIs).
You have to map every version that you specify in &lt;code>.spec.machineImages[].versions&lt;/code> here such that the AWS extension knows the AMI for every version you want to offer.&lt;/p>
&lt;p>An example &lt;code>CloudProfileConfig&lt;/code> for the AWS extension looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
kind: CloudProfileConfig
machineImages:
- name: coreos
versions:
- version: 2135.6.0
regions:
- name: eu-central-1
ami: ami-034fd8c3f4026eb39
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="example-cloudprofile-manifest">Example &lt;code>CloudProfile&lt;/code> manifest&lt;/h3>
&lt;p>Please find below an example &lt;code>CloudProfile&lt;/code> manifest:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: CloudProfile
metadata:
name: aws
spec:
type: aws
kubernetes:
versions:
- version: 1.16.1
- version: 1.16.0
expirationDate: &lt;span style="color:#a31515">&amp;#34;2020-04-05T01:02:03Z&amp;#34;&lt;/span>
machineImages:
- name: coreos
versions:
- version: 2135.6.0
machineTypes:
- name: m5.large
cpu: &lt;span style="color:#a31515">&amp;#34;2&amp;#34;&lt;/span>
gpu: &lt;span style="color:#a31515">&amp;#34;0&amp;#34;&lt;/span>
memory: 8Gi
usable: &lt;span style="color:#00f">true&lt;/span>
volumeTypes:
- name: gp2
class: standard
usable: &lt;span style="color:#00f">true&lt;/span>
- name: io1
class: premium
usable: &lt;span style="color:#00f">true&lt;/span>
regions:
- name: eu-central-1
zones:
- name: eu-central-1a
- name: eu-central-1b
- name: eu-central-1c
providerConfig:
apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
kind: CloudProfileConfig
machineImages:
- name: coreos
versions:
- version: 2135.6.0
regions:
- name: eu-central-1
ami: ami-034fd8c3f4026eb39
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="seed-resource">&lt;code>Seed&lt;/code> resource&lt;/h2>
&lt;p>This provider extension does not support any provider configuration for the &lt;code>Seed&lt;/code>&amp;rsquo;s &lt;code>.spec.provider.providerConfig&lt;/code> field.
However, it supports to manage backup infrastructure, i.e., you can specify configuration for the &lt;code>.spec.backup&lt;/code> field.&lt;/p>
&lt;h3 id="backup-configuration">Backup configuration&lt;/h3>
&lt;p>Please find below an example &lt;code>Seed&lt;/code> manifest (partly) that configures backups.
As you can see, the location/region where the backups will be stored can be different to the region where the seed cluster is running.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: v1
kind: Secret
metadata:
name: backup-credentials
namespace: garden
type: Opaque
data:
accessKeyID: base64(access-key-id)
secretAccessKey: base64(secret-access-key)
---
apiVersion: core.gardener.cloud/v1beta1
kind: Seed
metadata:
name: my-seed
spec:
provider:
type: aws
region: eu-west-1
backup:
provider: aws
region: eu-central-1
secretRef:
name: backup-credentials
namespace: garden
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please look up &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys">https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys&lt;/a> as well.&lt;/p>
&lt;h4 id="permissions-for-aws-iam-user">Permissions for AWS IAM user&lt;/h4>
&lt;p>Please make sure that the provided credentials have the correct privileges. You can use the following AWS IAM policy document and attach it to the IAM user backed by the credentials you provided (please check the &lt;a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_manage.html">official AWS documentation&lt;/a> as well):&lt;/p>
&lt;details>
&lt;summary>Click to expand the AWS IAM policy document!&lt;/summary>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&amp;#34;Version&amp;#34;: &lt;span style="color:#a31515">&amp;#34;2012-10-17&amp;#34;&lt;/span>,
&amp;#34;Statement&amp;#34;: [
{
&amp;#34;Effect&amp;#34;: &lt;span style="color:#a31515">&amp;#34;Allow&amp;#34;&lt;/span>,
&amp;#34;Action&amp;#34;: &lt;span style="color:#a31515">&amp;#34;s3:*&amp;#34;&lt;/span>,
&amp;#34;Resource&amp;#34;: &lt;span style="color:#a31515">&amp;#34;*&amp;#34;&lt;/span>
}
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/details></description></item></channel></rss>