<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Features on Gardener</title><link>https://gardener.cloud/docs/getting-started/features/</link><description>Recent content in Features on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/getting-started/features/index.xml" rel="self" type="application/rss+xml"/><item><title>Hibernation</title><link>https://gardener.cloud/docs/getting-started/features/hibernation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/hibernation/</guid><description>&lt;h2 id="hibernation">Hibernation&lt;/h2>
&lt;p>Some clusters need to be up all the time - typically, they would be hosting some kind of production workload. Others might be used for development purposes or testing during business hours only. Keeping them up and running all the time is a waste of money. Gardener can help you here with its &amp;ldquo;hibernation&amp;rdquo; feature. Essentially, hibernation means to shut down all components of a cluster.&lt;/p>
&lt;h2 id="how-hibernation-works">How Hibernation Works&lt;/h2>
&lt;p>The hibernation flow for a shoot attempts to reduce the resources consumed as much as possible. Hence everything not state-related is being decommissioned.&lt;/p></description></item><item><title>Workerless Shoots</title><link>https://gardener.cloud/docs/getting-started/features/workerless-shoots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/workerless-shoots/</guid><description>&lt;h2 id="controlplane-as-a-service">Controlplane as a Service&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/workerless-shoots_0af834.png" alt="workerless-shoots">&lt;/p>
&lt;p>Sometimes, there may be use cases for Kubernetes clusters that don&amp;rsquo;t require pods but only features of the control plane. Gardener can create the so-called &amp;ldquo;workerless&amp;rdquo; shoots, which are exactly that. A Kubernetes cluster without nodes (and without any controller related to them).&lt;/p>
&lt;p>In a scenario where you already have multiple clusters, you can use it for orchestration (leases) or factor out components that require many CRDs.&lt;/p></description></item><item><title>Credential Rotation</title><link>https://gardener.cloud/docs/getting-started/features/credential-rotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/credential-rotation/</guid><description>&lt;h2 id="keys">Keys&lt;/h2>
&lt;p>There are plenty of keys in Gardener. The ETCD needs one to store resources like secrets encrypted at rest. Gardener generates certificate authorities (CAs) to ensure secured communication between the various components and actors and service account tokens are signed with a dedicated key. There is also an SSH key pair to allow debugging of nodes and the observability stack has its own passwords too.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/keys_ef3249.png" alt="keys">&lt;/p>
&lt;p>All of these keys share a common property: they are managed by Gardener. Rotating them, however, is potentially very disruptive. Hence, Gardener does not do it automatically, but offers you means to perform these tasks easily. For a single cluster, you may conveniently use the dashboard. Of course, it is also possible to do the same by annotating the shoot resource accordingly:&lt;/p></description></item><item><title>External DNS Management</title><link>https://gardener.cloud/docs/getting-started/features/dns-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/dns-management/</guid><description>&lt;h2 id="external-dns-management">External DNS Management&lt;/h2>
&lt;p>When you deploy to Kubernetes, there is no native management of external DNS. Instead, the cloud-controller-manager requests (mostly IPv4) addresses for every service of type LoadBalancer. Of course, the Ingress resource helps here, but how is the external DNS entry for the ingress controller managed?&lt;/p>
&lt;p>Essentially, some sort of automation for DNS management is missing.&lt;/p>
&lt;h2 id="automating-dns-management">Automating DNS Management&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/automate-dns-management_f9812b.png" alt="automate-dns-management">&lt;/p>
&lt;p>From a user&amp;rsquo;s perspective, it is desirable to work with already known resources and concepts. Hence, the DNS management offered by Gardener plugs seamlessly into Kubernetes resources and you do not need to &amp;ldquo;leave&amp;rdquo; the context of the shoot cluster.&lt;/p></description></item><item><title>Certificate Management</title><link>https://gardener.cloud/docs/getting-started/features/certificate-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/certificate-management/</guid><description>&lt;h2 id="certificate-management">Certificate Management&lt;/h2>
&lt;p>For proper consumption, any service should present a TLS certificate to its consumers. However, self-signed certificates are not fit for this purpose - the certificate should be signed by a CA trusted by an application&amp;rsquo;s userbase. Luckily, Issuers like Let&amp;rsquo;s Encrypt and others help here by offering a signing service that issues certificates based on the ACME challenge (Automatic Certificate Management Environment).&lt;/p>
&lt;p>There are plenty of tools you can use to perform the challenge. For Kubernetes, cert-manager certainly is the most common, however its configuration is rather cumbersome and error prone. So let&amp;rsquo;s see how a Gardener extension can help here.&lt;/p></description></item><item><title>Vertical Pod Autoscaler</title><link>https://gardener.cloud/docs/getting-started/features/vpa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/vpa/</guid><description>&lt;h2 id="vertical-pod-autoscaler">Vertical Pod Autoscaler&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/vpa_43b432.gif" alt="vpa">&lt;/p>
&lt;p>When a pod&amp;rsquo;s resource CPU or memory grows, it will hit a limit eventually. Either the pod has resource limits specified or the node will run short of resources. In both cases, the workload might be throttled or even terminated. When this happens, it is often desirable to increase the request or limits. To do this autonomously within certain boundaries is the goal of the Vertical Pod Autoscaler project.&lt;/p></description></item><item><title>Cluster Autoscaler</title><link>https://gardener.cloud/docs/getting-started/features/cluster-autoscaler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/features/cluster-autoscaler/</guid><description>&lt;h2 id="obtaining-aditional-nodes">Obtaining Aditional Nodes&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/additional-nodes_4a5ea7.gif" alt="additional-nodes">&lt;/p>
&lt;p>The scheduler will assign pods to nodes, as long as they have capacity (CPU, memory, Pod limit, # attachable disks, &amp;hellip;). But what happens when all nodes are fully utilized and the scheduler does not find any suitable target?&lt;/p>
&lt;p>&lt;strong>Option 1:&lt;/strong> Evict other pods based on priority. However, this has the downside that other workloads with lower priority might become unschedulable.&lt;/p>
&lt;p>&lt;strong>Option 2:&lt;/strong> Add more nodes. There is an upstream Cluster Autoscaler project that does exactly this. It simulates the scheduling and reacts to pods not being schedulable events. Gardener has forked it to make it work with machine-controller-manager abstraction of how node (groups) are defined in Gardener.
The cluster autoscaler respects the limits (min / max) of any worker pool in a shoot&amp;rsquo;s spec. It can also scale down nodes based on utilization thresholds. For more details, see the &lt;a href="https://github.com/gardener/autoscaler/blob/machine-controller-manager-provider/cluster-autoscaler/FAQ.md">autoscaler documentation&lt;/a>.&lt;/p></description></item></channel></rss>