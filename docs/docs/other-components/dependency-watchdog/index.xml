<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener â€“ Dependency Watchdog</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/</link><description>Recent content in Dependency Watchdog on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/other-components/dependency-watchdog/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Concepts</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/dependency-watchdog/concepts/</guid><description/></item><item><title>Docs: Deployment</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/dependency-watchdog/deployment/</guid><description/></item><item><title>Docs: Contribution</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/contribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/dependency-watchdog/contribution/</guid><description>
&lt;h1 id="how-to-contribute">How to contribute?&lt;/h1>
&lt;p>Contributions are always welcome!&lt;/p>
&lt;p>In order to contribute ensure that you have the development environment setup and you familiarize yourself with required steps to build, verify-quality and test.&lt;/p>
&lt;h2 id="setting-up-development-environment">Setting up development environment&lt;/h2>
&lt;h3 id="installing-go">Installing Go&lt;/h3>
&lt;p>Minimum Golang version required: &lt;code>1.18&lt;/code>.
On MacOS run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For other OS, follow the &lt;a href="https://go.dev/doc/install">installation instructions&lt;/a>.&lt;/p>
&lt;h3 id="installing-git">Installing Git&lt;/h3>
&lt;p>Git is used as version control for dependency-watchdog. On MacOS run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you do not have git installed already then please follow the &lt;a href="https://git-scm.com/downloads">installation instructions&lt;/a>.&lt;/p>
&lt;h3 id="installing-docker">Installing Docker&lt;/h3>
&lt;p>In order to test dependency-watchdog containers you will need a local kubernetes setup. Easiest way is to first install Docker. This becomes a pre-requisite to setting up either a vanilla KIND/minikube cluster or a local Gardener cluster.&lt;/p>
&lt;p>On MacOS run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install -cash docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For other OS, follow the &lt;a href="https://docs.docker.com/get-docker/">installation instructions&lt;/a>.&lt;/p>
&lt;h3 id="installing-kubectl">Installing Kubectl&lt;/h3>
&lt;p>To interact with the local Kubernetes cluster you will need kubectl. On MacOS run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install kubernetes-cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For other IS, follow the &lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">installation instructions&lt;/a>.&lt;/p>
&lt;h2 id="get-the-sources">Get the sources&lt;/h2>
&lt;p>Clone the repository from Github:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/gardener/dependency-watchdog.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="using-makefile">Using Makefile&lt;/h2>
&lt;p>For every change following make targets are recommended to run.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># build the code changes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; make build
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># ensure that all required checks pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; make verify &lt;span style="color:#008000"># this will check formatting, linting and will run unit tests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># if you do not wish to run tests then you can use the following make target.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; make check
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All tests should be run and the test coverage should ideally not reduce.
Please ensure that you have read &lt;a href="https://gardener.cloud/docs/other-components/dependency-watchdog/testing/">testing guidelines&lt;/a>.&lt;/p>
&lt;p>Before raising a pull request ensure that if you are introducing any new file then you must add licesence header to all new files. To add license header you can run this make target:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt; make add-license-headers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># This will add license headers to any file which does not already have it.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>NOTE: Also have a look at the Makefile as it has other targets that are not mentioned here.&lt;/p>
&lt;/blockquote>
&lt;h2 id="raising-a-pull-request">Raising a Pull Request&lt;/h2>
&lt;p>To raise a pull request do the following:&lt;/p>
&lt;ol>
&lt;li>Create a fork of &lt;a href="https://github.com/gardener/dependency-watchdog">dependency-watchdog&lt;/a>&lt;/li>
&lt;li>Add &lt;a href="https://github.com/gardener/dependency-watchdog">dependency-watchdog&lt;/a> as upstream remote via&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> git remote add upstream https://github.com/gardener/dependency-watchdog
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>It is recommended that you create a git branch and push all your changes for the pull-request.&lt;/li>
&lt;li>Ensure that while you work on your pull-request, you continue to rebase the changes from upstream to your branch. To do that execute the following command:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> git pull --rebase upstream master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>We prefer clean commits. If you have multiple commits in the pull-request, then squash the commits to a single commit. You can do this via &lt;code>interactive git rebase&lt;/code> command. For example if your PR branch is ahead of remote origin HEAD by 5 commits then you can execute the following command and pick the first commit and squash the remaining commits.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> git rebase -i HEAD~5 &lt;span style="color:#008000">#actual number from the head will depend upon how many commits your branch is ahead of remote origin master&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Dependency Watchdog</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/dependency-watchdog/readme/</guid><description>
&lt;h1 id="documentation-index">Documentation Index&lt;/h1>
&lt;h2 id="concepts">Concepts&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/dependency-watchdog/concepts/prober/">Prober&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/dependency-watchdog/concepts/weeder/">Weeder&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="development">Development&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/dependency-watchdog/contribution/">Contributions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/dependency-watchdog/testing/">Testing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/dependency-watchdog/setup/dwd-using-local-garden/">Setup Dependency Watchdog using local Garden cluster&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="deployment">Deployment&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/dependency-watchdog/deployment/configure/">Configure dependency watchdog&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Dwd Using Local Garden</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/setup/dwd-using-local-garden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/dependency-watchdog/setup/dwd-using-local-garden/</guid><description>
&lt;h1 id="dependency-watchdog-with-local-garden-cluster">Dependency Watchdog with Local Garden Cluster&lt;/h1>
&lt;h2 id="setting-up-local-garden-cluster">Setting up Local Garden cluster&lt;/h2>
&lt;p>A convenient way to test local dependency-watchdog changes is to use a local garden cluster.
To setup a local garden cluster you can follow the &lt;a href="https://gardener.cloud/docs/gardener/deployment/getting_started_locally/">setup-guide&lt;/a>.&lt;/p>
&lt;h2 id="dependency-watchdog-resources">Dependency Watchdog resources&lt;/h2>
&lt;p>As part of the local garden installation, a &lt;code>local&lt;/code> seed will be available.&lt;/p>
&lt;h3 id="dependency-watchdog-resources-created-in-the-seed">Dependency Watchdog resources created in the seed&lt;/h3>
&lt;h4 id="namespaced-resources">Namespaced resources&lt;/h4>
&lt;p>In the &lt;code>garden&lt;/code> namespace of the seed cluster, following resources will be created:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Resource (GVK)&lt;/th>
&lt;th>Name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>{apiVersion: v1, Kind: ServiceAccount}&lt;/td>
&lt;td>dependency-watchdog-prober&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: v1, Kind: ServiceAccount}&lt;/td>
&lt;td>dependency-watchdog-weeder&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: apps/v1, Kind: Deployment}&lt;/td>
&lt;td>dependency-watchdog-prober&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: apps/v1, Kind: Deployment}&lt;/td>
&lt;td>dependency-watchdog-weeder&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: v1, Kind: ConfigMap}&lt;/td>
&lt;td>dependency-watchdog-prober-*&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: v1, Kind: ConfigMap}&lt;/td>
&lt;td>dependency-watchdog-weeder-*&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: rbac.authorization.k8s.io/v1, Kind: Role}&lt;/td>
&lt;td>gardener.cloud:dependency-watchdog-prober:role&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: rbac.authorization.k8s.io/v1, Kind: Role}&lt;/td>
&lt;td>gardener.cloud:dependency-watchdog-weeder:role&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: rbac.authorization.k8s.io/v1, Kind: RoleBinding}&lt;/td>
&lt;td>gardener.cloud:dependency-watchdog-prober:role-binding&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: rbac.authorization.k8s.io/v1, Kind: RoleBinding}&lt;/td>
&lt;td>gardener.cloud:dependency-watchdog-weeder:role-binding&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: resources.gardener.cloud/v1alpha1, Kind: ManagedResource}&lt;/td>
&lt;td>dependency-watchdog-prober&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: resources.gardener.cloud/v1alpha1, Kind: ManagedResource}&lt;/td>
&lt;td>dependency-watchdog-weeder&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: v1, Kind: Secret}&lt;/td>
&lt;td>managedresource-dependency-watchdog-weeder&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: v1, Kind: Secret}&lt;/td>
&lt;td>managedresource-dependency-watchdog-prober&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="cluster-resources">Cluster resources&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Resource (GVK)&lt;/th>
&lt;th>Name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>{apiVersion: rbac.authorization.k8s.io/v1, Kind: ClusterRole}&lt;/td>
&lt;td>gardener.cloud:dependency-watchdog-prober:cluster-role&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: rbac.authorization.k8s.io/v1, Kind: ClusterRole}&lt;/td>
&lt;td>gardener.cloud:dependency-watchdog-weeder:cluster-role&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: rbac.authorization.k8s.io/v1, Kind: ClusterRoleBinding}&lt;/td>
&lt;td>gardener.cloud:dependency-watchdog-prober:cluster-role-binding&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: rbac.authorization.k8s.io/v1, Kind: ClusterRoleBinding}&lt;/td>
&lt;td>gardener.cloud:dependency-watchdog-weeder:cluster-role-binding&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="dependency-watchdog-resources-created-in-shoot-control-namespace">Dependency Watchdog resources created in Shoot control namespace&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Resource (GVK)&lt;/th>
&lt;th>Name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>{apiVersion: v1, Kind: Secret}&lt;/td>
&lt;td>dependency-watchdog-prober&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: resources.gardener.cloud/v1alpha1, Kind: ManagedResource}&lt;/td>
&lt;td>shoot-core-dependency-watchdog&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="dependency-watchdog-resources-created-in-the-kube-node-lease-namespace-of-the-shoot">Dependency Watchdog resources created in the kube-node-lease namespace of the shoot&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Resource (GVK)&lt;/th>
&lt;th>Name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>{apiVersion: rbac.authorization.k8s.io/v1, Kind: Role}&lt;/td>
&lt;td>gardener.cloud:target:dependency-watchdog&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>{apiVersion: rbac.authorization.k8s.io/v1, Kind: RoleBinding}&lt;/td>
&lt;td>gardener.cloud:target:dependency-watchdog&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>These will be created by the GRM and will have a managed resource named &lt;code>shoot-core-dependency-watchdog&lt;/code> in the shoot namespace in the seed.&lt;/p>
&lt;h2 id="update-gardener-with-custom-dependency-watchdog-docker-images">Update Gardener with custom Dependency Watchdog Docker images&lt;/h2>
&lt;h3 id="build-tag-and-push-docker-images">Build, Tag and Push docker images&lt;/h3>
&lt;p>To build dependency watchdog docker images run the following make target:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt; make docker-build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Local gardener hosts a docker registry which can be access at &lt;code>localhost:5001&lt;/code>. To enable local gardener to be able to access the custom docker images you need to tag and push these images to the embedded docker registry. To do that execute the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt; docker images
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Get the IMAGE ID of the dependency watchdog images that were built using docker-build make target.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; docker tag &amp;lt;IMAGE-ID&amp;gt; localhost:5001/europe-docker.pkg.dev/gardener-project/public/gardener/dependency-watchdog-prober:&amp;lt;TAGNAME&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; docker push localhost:5001/europe-docker.pkg.dev/gardener-project/public/gardener/dependency-watchdog-prober:&amp;lt;TAGNAME&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="update-managedresource">Update ManagedResource&lt;/h3>
&lt;p>Garden resource manager will revert back any changes that are done to the kubernetes deployment for dependency watchdog. This is quite useful in live landscapes where only tested and qualified images are used for all gardener managed components. Any change therefore is automatically reverted.&lt;/p>
&lt;p>However, during development and testing you will need to use custom docker images. To prevent garden resource manager from reverting the changes done to the kubernetes deployment for dependency watchdog components you must update the respective managed resources first.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># List the managed resources&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; kubectl get mr -n garden | grep dependency
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Sample response&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dependency-watchdog-weeder seed True True False 26h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dependency-watchdog-prober seed True True False 26h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Lets assume that you are currently testing prober and would like to use a custom docker image&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; kubectl edit mr dependency-watchdog-prober -n garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># This will open the resource YAML for editing. Add the annotation resources.gardener.cloud/ignore=true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Reference: https://github.com/gardener/gardener/blob/master/docs/concepts/resource-manager.md&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Save the YAML file.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you are done with your testing then you can again edit the ManagedResource and remove the annotation. Garden resource manager will revert back to the image with which gardener was initially built and started.&lt;/p>
&lt;h3 id="update-kubernetes-deployment">Update Kubernetes Deployment&lt;/h3>
&lt;p>Find and update the kubernetes deployment for dependency watchdog.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt; kubectl get deploy -n garden | grep dependency
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Sample response&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dependency-watchdog-weeder 1/1 1 1 26h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dependency-watchdog-prober 1/1 1 1 26h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Lets assume that you are currently testing prober and would like to use a custom docker image&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; kubectl edit deploy dependency-watchdog-prober -n garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># This will open the resource YAML for editing. Change the image or any other changes and save.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Testing</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/dependency-watchdog/testing/</guid><description>
&lt;h1 id="testing-strategy-and-developer-guideline">Testing Strategy and Developer Guideline&lt;/h1>
&lt;p>Intent of this document is to introduce you (the developer) to the following:&lt;/p>
&lt;ul>
&lt;li>Category of tests that exists.&lt;/li>
&lt;li>Libraries that are used to write tests.&lt;/li>
&lt;li>Best practices to write tests that are correct, stable, fast and maintainable.&lt;/li>
&lt;li>How to run each category of tests.&lt;/li>
&lt;/ul>
&lt;p>For any new contributions &lt;strong>tests are a strict requirement&lt;/strong>. &lt;code>Boy Scouts Rule&lt;/code> is followed: If you touch a code for which either no tests exist or coverage is insufficient then it is expected that you will add relevant tests.&lt;/p>
&lt;h2 id="tools-used-for-writing-tests">Tools Used for Writing Tests&lt;/h2>
&lt;p>These are the following tools that were used to write all the tests (unit + envtest + vanilla kind cluster tests), it is preferred not to introduce any additional tools / test frameworks for writing tests:&lt;/p>
&lt;h3 id="gomega">Gomega&lt;/h3>
&lt;p>We use gomega as our matcher or assertion library. Refer to Gomega&amp;rsquo;s &lt;a href="https://onsi.github.io/gomega/">official documentation&lt;/a> for details regarding its installation and application in tests.&lt;/p>
&lt;h3 id="testing-package-from-standard-library">&lt;code>Testing&lt;/code> Package from Standard Library&lt;/h3>
&lt;p>We use the &lt;code>Testing&lt;/code> package provided by the standard library in golang for writing all our tests. Refer to its &lt;a href="https://pkg.go.dev/testing">official documentation&lt;/a> to learn how to write tests using &lt;code>Testing&lt;/code> package. You can also refer to &lt;a href="https://go.dev/doc/tutorial/add-a-test">this&lt;/a> example.&lt;/p>
&lt;h2 id="writing-tests">Writing Tests&lt;/h2>
&lt;h3 id="common-for-all-kinds">Common for All Kinds&lt;/h3>
&lt;ul>
&lt;li>For naming the individual tests (&lt;code>TestXxx&lt;/code> and &lt;code>testXxx&lt;/code> methods) and helper methods, make sure that the name describes the implementation of the method. For eg: &lt;code>testScalingWhenMandatoryResourceNotFound&lt;/code> tests the behaviour of the &lt;code>scaler&lt;/code> when a mandatory resource (KCM deployment) is not present.&lt;/li>
&lt;li>Maintain proper logging in tests. Use &lt;code>t.log()&lt;/code> method to add appropriate messages wherever necessary to describe the flow of the test. See &lt;a href="https://github.com/gardener/dependency-watchdog/blob/master/controllers/endpoint/endpoints_controller_test.go">this&lt;/a> for examples.&lt;/li>
&lt;li>Make use of the &lt;code>testdata&lt;/code> directory for storing arbitrary sample data needed by tests (YAML manifests, etc.). See &lt;a href="https://github.com/gardener/dependency-watchdog/tree/master/controllers">this&lt;/a> package for examples.
&lt;ul>
&lt;li>From &lt;a href="https://pkg.go.dev/cmd/go/internal/test">https://pkg.go.dev/cmd/go/internal/test&lt;/a>:
&lt;blockquote>
&lt;p>The go tool will ignore a directory named &amp;ldquo;testdata&amp;rdquo;, making it available to hold ancillary data needed by the tests.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="table-driven-tests">Table-driven tests&lt;/h3>
&lt;p>We need a tabular structure in two cases:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>When we have multiple tests which require the same kind of setup&lt;/strong>:- In this case we have a &lt;code>TestXxxSuite&lt;/code> method which will do the setup and run all the tests. We have a slice of &lt;code>test&lt;/code> struct which holds all the tests (typically a &lt;code>title&lt;/code> and &lt;code>run&lt;/code> method). We use a &lt;code>for&lt;/code> loop to run all the tests one by one. See &lt;a href="https://github.com/gardener/dependency-watchdog/blob/master/controllers/cluster/cluster_controller_test.go">this&lt;/a> for examples.&lt;/li>
&lt;li>&lt;strong>When we have the same code path and multiple possible values to check&lt;/strong>:- In this case we have the arguments and expectations in a struct. We iterate through the slice of all such structs, passing the arguments to appropriate methods and checking if the expectation is met. See &lt;a href="https://github.com/gardener/dependency-watchdog/blob/master/internal/prober/scaler/scaler_test.go">this&lt;/a> for examples.&lt;/li>
&lt;/ul>
&lt;h3 id="env-tests">Env Tests&lt;/h3>
&lt;p>Env tests in Dependency Watchdog use the &lt;code>sigs.k8s.io/controller-runtime/pkg/envtest&lt;/code> package. It sets up a temporary control plane (etcd + kube-apiserver) and runs the test against it. The code to set up and teardown the environment can be checked out &lt;a href="https://github.com/gardener/dependency-watchdog/blob/master/internal/test/testenv.go">here&lt;/a>.&lt;/p>
&lt;p>These are the points to be followed while writing tests that use &lt;code>envtest&lt;/code> setup:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>All tests should be divided into two top level partitions:&lt;/p>
&lt;ol>
&lt;li>tests with common environment (&lt;code>testXxxCommonEnvTests&lt;/code>)&lt;/li>
&lt;li>tests which need a dedicated environment for each one. (&lt;code>testXxxDedicatedEnvTests&lt;/code>)&lt;/li>
&lt;/ol>
&lt;p>They should be contained within the &lt;code>TestXxxSuite&lt;/code> method. See &lt;a href="https://github.com/gardener/dependency-watchdog/blob/master/controllers/cluster/cluster_controller_test.go">this&lt;/a> for examples. If all tests are of one kind then this is not needed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a method named &lt;code>setUpXxxTest&lt;/code> for performing setup tasks before all/each test. It should either return a method or have a separate method to perform teardown tasks. See &lt;a href="https://github.com/gardener/dependency-watchdog/blob/master/controllers/cluster/cluster_controller_test.go">this&lt;/a> for examples.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The tests run by the suite can be table-driven as well.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use the &lt;code>envtest&lt;/code> setup when there is a need of an environment close to an actual setup. Eg: start controllers against a real Kubernetes control plane to catch bugs that can only happen when talking to a real API server.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>NOTE: It is currently not possible to bring up more than one envtest environments. See &lt;a href="https://github.com/kubernetes-sigs/controller-runtime/issues/1363">issue#1363&lt;/a>. We enforce running serial execution of test suites each of which uses a different envtest environments. See &lt;a href="https://github.com/gardener/dependency-watchdog/blob/master/hack/test.sh">hack/test.sh&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h3 id="vanilla-kind-cluster-tests">Vanilla Kind Cluster Tests&lt;/h3>
&lt;p>There are some tests where we need a vanilla kind cluster setup, for eg:- The &lt;code>scaler.go&lt;/code> code in the &lt;code>prober&lt;/code> package uses the &lt;code>scale&lt;/code> subresource to scale the deployments mentioned in the prober config. But the &lt;code>envtest&lt;/code> setup does not support the &lt;code>scale&lt;/code> subresource as of now. So we need this setup to test if the deployments are scaled as per the config or not.
You can check out the code for this setup &lt;a href="https://github.com/gardener/dependency-watchdog/blob/master/internal/test/kind.go">here&lt;/a>. You can add utility methods for different kubernetes and custom resources in there.&lt;/p>
&lt;p>These are the points to be followed while writing tests that use &lt;code>Vanilla Kind Cluster&lt;/code> setup:&lt;/p>
&lt;ul>
&lt;li>Use this setup only if there is a need of an actual Kubernetes cluster(api server + control plane + etcd) to write the tests. (Because this is slower than your normal &lt;code>envTest&lt;/code> setup)&lt;/li>
&lt;li>Create &lt;code>setUpXxxTest&lt;/code> similar to the one in &lt;code>envTest&lt;/code>. Follow the same structural pattern used in &lt;code>envTest&lt;/code> for writing these tests. See &lt;a href="https://github.com/gardener/dependency-watchdog/blob/master/internal/prober/scaler/scaler_test.go">this&lt;/a> for examples.&lt;/li>
&lt;/ul>
&lt;h2 id="run-tests">Run Tests&lt;/h2>
&lt;p>To run unit tests, use the following Makefile target&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>make test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To run KIND cluster based tests, use the following Makefile target&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>make kind-tests &lt;span style="color:#008000"># these tests will be slower as it brings up a vanilla KIND cluster&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To view coverage after running the tests, run :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>go tool cover -html=cover.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="flaky-tests">Flaky tests&lt;/h2>
&lt;p>If you see that a test is flaky then you can use &lt;code>make stress&lt;/code> target which internally uses &lt;a href="https://pkg.go.dev/golang.org/x/tools/cmd/stress">stress tool&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make stress test-package=&amp;lt;test-package&amp;gt; test-func=&amp;lt;test-func&amp;gt; tool-params=&lt;span style="color:#a31515">&amp;#34;&amp;lt;tool-params&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>An example invocation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make stress test-package=./internal/util test-func=TestRetryUntilPredicateWithBackgroundContext tool-params=&lt;span style="color:#a31515">&amp;#34;-p 10&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The make target will do the following:&lt;/p>
&lt;ol>
&lt;li>It will create a test binary for the package specified via &lt;code>test-package&lt;/code> at &lt;code>/tmp/pkg-stress.test&lt;/code> directory.&lt;/li>
&lt;li>It will run &lt;code>stress&lt;/code> tool passing the &lt;code>tool-params&lt;/code> and targets the function &lt;code>test-func&lt;/code>.&lt;/li>
&lt;/ol></description></item></channel></rss>