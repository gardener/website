<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener â€“ OpenID Connect services</title><link>https://gardener.cloud/docs/extensions/others/gardener-extension-shoot-oidc-service/</link><description>Recent content in OpenID Connect services on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/extensions/others/gardener-extension-shoot-oidc-service/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Installation</title><link>https://gardener.cloud/docs/extensions/others/gardener-extension-shoot-oidc-service/docs/installation/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/others/gardener-extension-shoot-oidc-service/docs/installation/installation/</guid><description>
&lt;h1 id="gardener-oidc-service-for-shoots">Gardener OIDC Service for Shoots&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Gardener allows Shoot clusters to dynamically register OpenID Connect providers. To support this the Gardener must be installed with the &lt;code>shoot-oidc-service&lt;/code> extension.&lt;/p>
&lt;h2 id="configuration">Configuration&lt;/h2>
&lt;p>To generally enable the OIDC service for shoot objects the &lt;code>shoot-oidc-service&lt;/code> extension must be registered by providing an appropriate &lt;a href="https://github.com/gardener/gardener-extension-shoot-oidc-service/blob/master/example/controller-registration.yaml">extension registration&lt;/a> in the garden cluster.&lt;/p>
&lt;p>Here it is possible to decide whether the extension should be always available for all shoots or whether the extension must be separately enabled per shoot.&lt;/p>
&lt;p>If the extension should be used for all shoots the &lt;code>globallyEnabled&lt;/code> flag should be set to &lt;code>true&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resources:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - kind: Extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: shoot-oidc-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> globallyEnabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="shoot-feature-gate">Shoot Feature Gate&lt;/h3>
&lt;p>If the shoot OIDC service is not globally enabled by default (depends on the extension registration on the garden cluster), it can be enabled per shoot. To enable the service for a shoot, the shoot manifest must explicitly add the &lt;code>shoot-oidc-service&lt;/code> extension.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: shoot-oidc-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the shoot OIDC service is globally enabled by default, it can be disabled per shoot. To disable the service for a shoot, the shoot manifest must explicitly state it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: shoot-oidc-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> disabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Openidconnects</title><link>https://gardener.cloud/docs/extensions/others/gardener-extension-shoot-oidc-service/docs/usage/openidconnects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/others/gardener-extension-shoot-oidc-service/docs/usage/openidconnects/</guid><description>
&lt;h1 id="register-openid-connect-provider-in-shoot-clusters">Register OpenID Connect provider in Shoot Clusters&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Within a shoot cluster, it is possible to dynamically register OpenID Connect providers. It is necessary that the Gardener installation your shoot cluster runs in is equipped with a &lt;code>shoot-oidc-service&lt;/code> extension. Please ask your Gardener operator if the extension is available in your environment.&lt;/p>
&lt;h2 id="shoot-feature-gate">Shoot Feature Gate&lt;/h2>
&lt;p>In most of the Gardener setups the &lt;code>shoot-oidc-service&lt;/code> extension is not enabled globally and thus must be configured per shoot cluster. Please adapt the shoot specification by the configuration shown below to activate the extension individually.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: shoot-oidc-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="openid-connect-provider">OpenID Connect provider&lt;/h2>
&lt;p>In order to register an OpenID Connect provider an &lt;code>openidconnect&lt;/code> resource should be deployed in the shoot cluster.&lt;/p>
&lt;p>It is &lt;strong>strongly&lt;/strong> recommended to &lt;strong>NOT&lt;/strong> disable prefixing since it may result in unwanted impersonations. The rule of thumb is to always use meaningful and unique prefixes for both &lt;code>username&lt;/code> and &lt;code>groups&lt;/code>. A good way to ensure this is to use the name of the &lt;code>openidconnect&lt;/code> resource as shown in the example below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: authentication.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: OpenIDConnect
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: abc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># issuerURL is the URL the provider signs ID Tokens as.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># This will be the &amp;#34;iss&amp;#34; field of all tokens produced by the provider and is used for configuration discovery.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> issuerURL: https://abc-oidc-provider.example
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># clientID is the audience for which the JWT must be issued for, the &amp;#34;aud&amp;#34; field.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientID: my-shoot-cluster
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># usernameClaim is the JWT field to use as the user&amp;#39;s username.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usernameClaim: sub
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># usernamePrefix, if specified, causes claims mapping to username to be prefix with the provided value.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># A value &amp;#34;oidc:&amp;#34; would result in usernames like &amp;#34;oidc:john&amp;#34;.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># If not provided, the prefix defaults to &amp;#34;( .metadata.name )/&amp;#34;. The value &amp;#34;-&amp;#34; can be used to disable all prefixing.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usernamePrefix: &lt;span style="color:#a31515">&amp;#34;abc:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># groupsClaim, if specified, causes the OIDCAuthenticator to try to populate the user&amp;#39;s groups with an ID Token field.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># If the groupsClaim field is present in an ID Token the value must be a string or list of strings.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># groupsClaim: groups&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># groupsPrefix, if specified, causes claims mapping to group names to be prefixed with the value.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># A value &amp;#34;oidc:&amp;#34; would result in groups like &amp;#34;oidc:engineering&amp;#34; and &amp;#34;oidc:marketing&amp;#34;.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># If not provided, the prefix defaults to &amp;#34;( .metadata.name )/&amp;#34;.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># The value &amp;#34;-&amp;#34; can be used to disable all prefixing.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># groupsPrefix: &amp;#34;abc:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># caBundle is a PEM encoded CA bundle which will be used to validate the OpenID server&amp;#39;s certificate. If unspecified, system&amp;#39;s trusted certificates are used.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># caBundle: &amp;lt;base64 encoded bundle&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># supportedSigningAlgs sets the accepted set of JOSE signing algorithms that can be used by the provider to sign tokens.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># The default value is RS256.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># supportedSigningAlgs:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># - RS256&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># jwks if specified, provides an option to specify JWKS keys offline.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># jwks:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># keys is a base64 encoded JSON webkey Set. If specified, the OIDCAuthenticator skips the request to the issuer&amp;#39;s jwks_uri endpoint to retrieve the keys.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># keys: &amp;lt;base64 encoded jwks&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>