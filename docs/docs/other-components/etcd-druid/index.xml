<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Etcd Druid</title><link>https://gardener.cloud/docs/other-components/etcd-druid/</link><description>Recent content in Etcd Druid on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/other-components/etcd-druid/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: API Reference</title><link>https://gardener.cloud/docs/other-components/etcd-druid/api-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/api-reference/</guid><description>
&lt;p>Packages:&lt;/p>
&lt;ul>
&lt;li>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1">druid.gardener.cloud/v1alpha1&lt;/a>
&lt;/li>
&lt;/ul>
&lt;h2 id="druid.gardener.cloud/v1alpha1">druid.gardener.cloud/v1alpha1&lt;/h2>
&lt;p>
&lt;p>Package v1alpha1 is the v1alpha1 version of the etcd-druid API.&lt;/p>
&lt;/p>
Resource Types:
&lt;ul>&lt;/ul>
&lt;h3 id="druid.gardener.cloud/v1alpha1.BackupSpec">BackupSpec
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdSpec">EtcdSpec&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>BackupSpec defines parameters associated with the full and delta snapshots of etcd.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>port&lt;/code>&lt;/br>
&lt;em>
int32
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Port define the port on which etcd-backup-restore server will be exposed.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>tls&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.TLSConfig">
TLSConfig
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>image&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Image defines the etcd container image and tag&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>store&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.StoreSpec">
StoreSpec
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Store defines the specification of object store provider for storing backups.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>resources&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#resourcerequirements-v1-core">
Kubernetes core/v1.ResourceRequirements
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Resources defines compute Resources required by backup-restore container.
More info: &lt;a href="https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/">https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/&lt;/a>&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>compactionResources&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#resourcerequirements-v1-core">
Kubernetes core/v1.ResourceRequirements
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>CompactionResources defines compute Resources required by compaction job.
More info: &lt;a href="https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/">https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/&lt;/a>&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>fullSnapshotSchedule&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>FullSnapshotSchedule defines the cron standard schedule for full snapshots.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>garbageCollectionPolicy&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.GarbageCollectionPolicy">
GarbageCollectionPolicy
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>GarbageCollectionPolicy defines the policy for garbage collecting old backups&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>garbageCollectionPeriod&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#duration-v1-meta">
Kubernetes meta/v1.Duration
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>GarbageCollectionPeriod defines the period for garbage collecting old backups&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>deltaSnapshotPeriod&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#duration-v1-meta">
Kubernetes meta/v1.Duration
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>DeltaSnapshotPeriod defines the period after which delta snapshots will be taken&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>deltaSnapshotMemoryLimit&lt;/code>&lt;/br>
&lt;em>
k8s.io/apimachinery/pkg/api/resource.Quantity
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>DeltaSnapshotMemoryLimit defines the memory limit after which delta snapshots will be taken&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>compression&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.CompressionSpec">
CompressionSpec
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>SnapshotCompression defines the specification for compression of Snapshots.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>enableProfiling&lt;/code>&lt;/br>
&lt;em>
bool
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>EnableProfiling defines if profiling should be enabled for the etcd-backup-restore-sidecar&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>etcdSnapshotTimeout&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#duration-v1-meta">
Kubernetes meta/v1.Duration
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>EtcdSnapshotTimeout defines the timeout duration for etcd FullSnapshot operation&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>leaderElection&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.LeaderElectionSpec">
LeaderElectionSpec
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>LeaderElection defines parameters related to the LeaderElection configuration.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.ClientService">ClientService
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdConfig">EtcdConfig&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>ClientService defines the parameters of the client service that a user can specify&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>annotations&lt;/code>&lt;/br>
&lt;em>
map[string]string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Annotations specify the annotations that should be added to the client service&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>labels&lt;/code>&lt;/br>
&lt;em>
map[string]string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Labels specify the labels that should be added to the client service&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.CompactionMode">CompactionMode
(&lt;code>string&lt;/code> alias)&lt;/p>&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.SharedConfig">SharedConfig&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>CompactionMode defines the auto-compaction-mode: ‘periodic’ or ‘revision’.
‘periodic’ for duration based retention and ‘revision’ for revision number based retention.&lt;/p>
&lt;/p>
&lt;h3 id="druid.gardener.cloud/v1alpha1.CompressionPolicy">CompressionPolicy
(&lt;code>string&lt;/code> alias)&lt;/p>&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.CompressionSpec">CompressionSpec&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>CompressionPolicy defines the type of policy for compression of snapshots.&lt;/p>
&lt;/p>
&lt;h3 id="druid.gardener.cloud/v1alpha1.CompressionSpec">CompressionSpec
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.BackupSpec">BackupSpec&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>CompressionSpec defines parameters related to compression of Snapshots(full as well as delta).&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>enabled&lt;/code>&lt;/br>
&lt;em>
bool
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>policy&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.CompressionPolicy">
CompressionPolicy
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.Condition">Condition
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdCopyBackupsTaskStatus">EtcdCopyBackupsTaskStatus&lt;/a>,
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdStatus">EtcdStatus&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>Condition holds the information about the state of a resource.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>type&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.ConditionType">
ConditionType
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>Type of the Etcd condition.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>status&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.ConditionStatus">
ConditionStatus
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>Status of the condition, one of True, False, Unknown.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>lastTransitionTime&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#time-v1-meta">
Kubernetes meta/v1.Time
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>Last time the condition transitioned from one status to another.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>lastUpdateTime&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#time-v1-meta">
Kubernetes meta/v1.Time
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>Last time the condition was updated.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>reason&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>The reason for the condition’s last transition.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>message&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>A human-readable message indicating details about the transition.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.ConditionStatus">ConditionStatus
(&lt;code>string&lt;/code> alias)&lt;/p>&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.Condition">Condition&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>ConditionStatus is the status of a condition.&lt;/p>
&lt;/p>
&lt;h3 id="druid.gardener.cloud/v1alpha1.ConditionType">ConditionType
(&lt;code>string&lt;/code> alias)&lt;/p>&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.Condition">Condition&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>ConditionType is the type of condition.&lt;/p>
&lt;/p>
&lt;h3 id="druid.gardener.cloud/v1alpha1.CrossVersionObjectReference">CrossVersionObjectReference
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdStatus">EtcdStatus&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>CrossVersionObjectReference contains enough information to let you identify the referred resource.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>kind&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>Kind of the referent&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>name&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>Name of the referent&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>apiVersion&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>API version of the referent&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.Etcd">Etcd
&lt;/h3>
&lt;p>
&lt;p>Etcd is the Schema for the etcds API&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>metadata&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#objectmeta-v1-meta">
Kubernetes meta/v1.ObjectMeta
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
Refer to the Kubernetes API documentation for the fields of the
&lt;code>metadata&lt;/code> field.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>spec&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdSpec">
EtcdSpec
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;br/>
&lt;br/>
&lt;table>
&lt;tr>
&lt;td>
&lt;code>selector&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#labelselector-v1-meta">
Kubernetes meta/v1.LabelSelector
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>selector is a label query over pods that should match the replica count.
It must match the pod template’s labels.
More info: &lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors">https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors&lt;/a>&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>labels&lt;/code>&lt;/br>
&lt;em>
map[string]string
&lt;/em>
&lt;/td>
&lt;td>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>annotations&lt;/code>&lt;/br>
&lt;em>
map[string]string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>etcd&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdConfig">
EtcdConfig
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>backup&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.BackupSpec">
BackupSpec
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>sharedConfig&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.SharedConfig">
SharedConfig
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>schedulingConstraints&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.SchedulingConstraints">
SchedulingConstraints
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>replicas&lt;/code>&lt;/br>
&lt;em>
int32
&lt;/em>
&lt;/td>
&lt;td>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>priorityClassName&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>PriorityClassName is the name of a priority class that shall be used for the etcd pods.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>storageClass&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>StorageClass defines the name of the StorageClass required by the claim.
More info: &lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1">https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1&lt;/a>&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>storageCapacity&lt;/code>&lt;/br>
&lt;em>
k8s.io/apimachinery/pkg/api/resource.Quantity
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>StorageCapacity defines the size of persistent volume.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>volumeClaimTemplate&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>VolumeClaimTemplate defines the volume claim template to be created&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>status&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdStatus">
EtcdStatus
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.EtcdConfig">EtcdConfig
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdSpec">EtcdSpec&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>EtcdConfig defines parameters associated etcd deployed&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>quota&lt;/code>&lt;/br>
&lt;em>
k8s.io/apimachinery/pkg/api/resource.Quantity
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Quota defines the etcd DB quota.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>defragmentationSchedule&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>DefragmentationSchedule defines the cron standard schedule for defragmentation of etcd.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>serverPort&lt;/code>&lt;/br>
&lt;em>
int32
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>clientPort&lt;/code>&lt;/br>
&lt;em>
int32
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>image&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Image defines the etcd container image and tag&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>authSecretRef&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretreference-v1-core">
Kubernetes core/v1.SecretReference
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>metrics&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.MetricsLevel">
MetricsLevel
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Metrics defines the level of detail for exported metrics of etcd, specify ‘extensive’ to include histogram metrics.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>resources&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#resourcerequirements-v1-core">
Kubernetes core/v1.ResourceRequirements
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Resources defines the compute Resources required by etcd container.
More info: &lt;a href="https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/">https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/&lt;/a>&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>clientUrlTls&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.TLSConfig">
TLSConfig
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>ClientUrlTLS contains the ca, server TLS and client TLS secrets for client communication to ETCD cluster&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>peerUrlTls&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.TLSConfig">
TLSConfig
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>PeerUrlTLS contains the ca and server TLS secrets for peer communication within ETCD cluster
Currently, PeerUrlTLS does not require client TLS secrets for gardener implementation of ETCD cluster.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>etcdDefragTimeout&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#duration-v1-meta">
Kubernetes meta/v1.Duration
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>EtcdDefragTimeout defines the timeout duration for etcd defrag call&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>heartbeatDuration&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#duration-v1-meta">
Kubernetes meta/v1.Duration
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>HeartbeatDuration defines the duration for members to send heartbeats. The default value is 10s.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>clientService&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.ClientService">
ClientService
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>ClientService defines the parameters of the client service that a user can specify&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.EtcdCopyBackupsTask">EtcdCopyBackupsTask
&lt;/h3>
&lt;p>
&lt;p>EtcdCopyBackupsTask is a task for copying etcd backups from a source to a target store.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>metadata&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#objectmeta-v1-meta">
Kubernetes meta/v1.ObjectMeta
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
Refer to the Kubernetes API documentation for the fields of the
&lt;code>metadata&lt;/code> field.
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>spec&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdCopyBackupsTaskSpec">
EtcdCopyBackupsTaskSpec
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;br/>
&lt;br/>
&lt;table>
&lt;tr>
&lt;td>
&lt;code>sourceStore&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.StoreSpec">
StoreSpec
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>SourceStore defines the specification of the source object store provider for storing backups.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>targetStore&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.StoreSpec">
StoreSpec
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>TargetStore defines the specification of the target object store provider for storing backups.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>maxBackupAge&lt;/code>&lt;/br>
&lt;em>
uint32
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>MaxBackupAge is the maximum age in days that a backup must have in order to be copied.
By default all backups will be copied.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>maxBackups&lt;/code>&lt;/br>
&lt;em>
uint32
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>MaxBackups is the maximum number of backups that will be copied starting with the most recent ones.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>waitForFinalSnapshot&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.WaitForFinalSnapshotSpec">
WaitForFinalSnapshotSpec
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>WaitForFinalSnapshot defines the parameters for waiting for a final full snapshot before copying backups.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>status&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdCopyBackupsTaskStatus">
EtcdCopyBackupsTaskStatus
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.EtcdCopyBackupsTaskSpec">EtcdCopyBackupsTaskSpec
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdCopyBackupsTask">EtcdCopyBackupsTask&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>EtcdCopyBackupsTaskSpec defines the parameters for the copy backups task.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>sourceStore&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.StoreSpec">
StoreSpec
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>SourceStore defines the specification of the source object store provider for storing backups.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>targetStore&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.StoreSpec">
StoreSpec
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>TargetStore defines the specification of the target object store provider for storing backups.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>maxBackupAge&lt;/code>&lt;/br>
&lt;em>
uint32
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>MaxBackupAge is the maximum age in days that a backup must have in order to be copied.
By default all backups will be copied.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>maxBackups&lt;/code>&lt;/br>
&lt;em>
uint32
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>MaxBackups is the maximum number of backups that will be copied starting with the most recent ones.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>waitForFinalSnapshot&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.WaitForFinalSnapshotSpec">
WaitForFinalSnapshotSpec
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>WaitForFinalSnapshot defines the parameters for waiting for a final full snapshot before copying backups.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.EtcdCopyBackupsTaskStatus">EtcdCopyBackupsTaskStatus
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdCopyBackupsTask">EtcdCopyBackupsTask&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>EtcdCopyBackupsTaskStatus defines the observed state of the copy backups task.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>conditions&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.Condition">
[]Condition
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Conditions represents the latest available observations of an object’s current state.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>observedGeneration&lt;/code>&lt;/br>
&lt;em>
int64
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>ObservedGeneration is the most recent generation observed for this resource.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>lastError&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>LastError represents the last occurred error.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.EtcdMemberConditionStatus">EtcdMemberConditionStatus
(&lt;code>string&lt;/code> alias)&lt;/p>&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdMemberStatus">EtcdMemberStatus&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>EtcdMemberConditionStatus is the status of an etcd cluster member.&lt;/p>
&lt;/p>
&lt;h3 id="druid.gardener.cloud/v1alpha1.EtcdMemberStatus">EtcdMemberStatus
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdStatus">EtcdStatus&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>EtcdMemberStatus holds information about a etcd cluster membership.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>name&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>Name is the name of the etcd member. It is the name of the backing &lt;code>Pod&lt;/code>.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>id&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>ID is the ID of the etcd member.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>role&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdRole">
EtcdRole
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Role is the role in the etcd cluster, either &lt;code>Leader&lt;/code> or &lt;code>Member&lt;/code>.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>status&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdMemberConditionStatus">
EtcdMemberConditionStatus
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>Status of the condition, one of True, False, Unknown.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>reason&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>The reason for the condition’s last transition.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>lastTransitionTime&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#time-v1-meta">
Kubernetes meta/v1.Time
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>LastTransitionTime is the last time the condition’s status changed.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.EtcdRole">EtcdRole
(&lt;code>string&lt;/code> alias)&lt;/p>&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdMemberStatus">EtcdMemberStatus&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>EtcdRole is the role of an etcd cluster member.&lt;/p>
&lt;/p>
&lt;h3 id="druid.gardener.cloud/v1alpha1.EtcdSpec">EtcdSpec
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.Etcd">Etcd&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>EtcdSpec defines the desired state of Etcd&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>selector&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#labelselector-v1-meta">
Kubernetes meta/v1.LabelSelector
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>selector is a label query over pods that should match the replica count.
It must match the pod template’s labels.
More info: &lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors">https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors&lt;/a>&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>labels&lt;/code>&lt;/br>
&lt;em>
map[string]string
&lt;/em>
&lt;/td>
&lt;td>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>annotations&lt;/code>&lt;/br>
&lt;em>
map[string]string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>etcd&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdConfig">
EtcdConfig
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>backup&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.BackupSpec">
BackupSpec
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>sharedConfig&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.SharedConfig">
SharedConfig
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>schedulingConstraints&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.SchedulingConstraints">
SchedulingConstraints
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>replicas&lt;/code>&lt;/br>
&lt;em>
int32
&lt;/em>
&lt;/td>
&lt;td>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>priorityClassName&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>PriorityClassName is the name of a priority class that shall be used for the etcd pods.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>storageClass&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>StorageClass defines the name of the StorageClass required by the claim.
More info: &lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1">https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1&lt;/a>&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>storageCapacity&lt;/code>&lt;/br>
&lt;em>
k8s.io/apimachinery/pkg/api/resource.Quantity
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>StorageCapacity defines the size of persistent volume.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>volumeClaimTemplate&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>VolumeClaimTemplate defines the volume claim template to be created&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.EtcdStatus">EtcdStatus
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.Etcd">Etcd&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>EtcdStatus defines the observed state of Etcd.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>observedGeneration&lt;/code>&lt;/br>
&lt;em>
int64
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>ObservedGeneration is the most recent generation observed for this resource.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>etcd&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.CrossVersionObjectReference">
CrossVersionObjectReference
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>conditions&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.Condition">
[]Condition
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Conditions represents the latest available observations of an etcd’s current state.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>serviceName&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>ServiceName is the name of the etcd service.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>lastError&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>LastError represents the last occurred error.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>clusterSize&lt;/code>&lt;/br>
&lt;em>
int32
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Cluster size is the size of the etcd cluster.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>currentReplicas&lt;/code>&lt;/br>
&lt;em>
int32
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>CurrentReplicas is the current replica count for the etcd cluster.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>replicas&lt;/code>&lt;/br>
&lt;em>
int32
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Replicas is the replica count of the etcd resource.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>readyReplicas&lt;/code>&lt;/br>
&lt;em>
int32
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>ReadyReplicas is the count of replicas being ready in the etcd cluster.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>ready&lt;/code>&lt;/br>
&lt;em>
bool
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Ready is &lt;code>true&lt;/code> if all etcd replicas are ready.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>updatedReplicas&lt;/code>&lt;/br>
&lt;em>
int32
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>UpdatedReplicas is the count of updated replicas in the etcd cluster.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>labelSelector&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#labelselector-v1-meta">
Kubernetes meta/v1.LabelSelector
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>LabelSelector is a label query over pods that should match the replica count.
It must match the pod template’s labels.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>members&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdMemberStatus">
[]EtcdMemberStatus
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Members represents the members of the etcd cluster&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>peerUrlTLSEnabled&lt;/code>&lt;/br>
&lt;em>
bool
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>PeerUrlTLSEnabled captures the state of peer url TLS being enabled for the etcd member(s)&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.GarbageCollectionPolicy">GarbageCollectionPolicy
(&lt;code>string&lt;/code> alias)&lt;/p>&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.BackupSpec">BackupSpec&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>GarbageCollectionPolicy defines the type of policy for snapshot garbage collection.&lt;/p>
&lt;/p>
&lt;h3 id="druid.gardener.cloud/v1alpha1.LeaderElectionSpec">LeaderElectionSpec
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.BackupSpec">BackupSpec&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>LeaderElectionSpec defines parameters related to the LeaderElection configuration.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>reelectionPeriod&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#duration-v1-meta">
Kubernetes meta/v1.Duration
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>ReelectionPeriod defines the Period after which leadership status of corresponding etcd is checked.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>etcdConnectionTimeout&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#duration-v1-meta">
Kubernetes meta/v1.Duration
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>EtcdConnectionTimeout defines the timeout duration for etcd client connection during leader election.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.MetricsLevel">MetricsLevel
(&lt;code>string&lt;/code> alias)&lt;/p>&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdConfig">EtcdConfig&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>MetricsLevel defines the level ‘basic’ or ‘extensive’.&lt;/p>
&lt;/p>
&lt;h3 id="druid.gardener.cloud/v1alpha1.SchedulingConstraints">SchedulingConstraints
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdSpec">EtcdSpec&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>SchedulingConstraints defines the different scheduling constraints that must be applied to the
pod spec in the etcd statefulset.
Currently supported constraints are Affinity and TopologySpreadConstraints.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>affinity&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#affinity-v1-core">
Kubernetes core/v1.Affinity
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Affinity defines the various affinity and anti-affinity rules for a pod
that are honoured by the kube-scheduler.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>topologySpreadConstraints&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#topologyspreadconstraint-v1-core">
[]Kubernetes core/v1.TopologySpreadConstraint
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>TopologySpreadConstraints describes how a group of pods ought to spread across topology domains,
that are honoured by the kube-scheduler.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.SecretReference">SecretReference
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.TLSConfig">TLSConfig&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>SecretReference defines a reference to a secret.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>SecretReference&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretreference-v1-core">
Kubernetes core/v1.SecretReference
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>
(Members of &lt;code>SecretReference&lt;/code> are embedded into this type.)
&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>dataKey&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>DataKey is the name of the key in the data map containing the credentials.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.SharedConfig">SharedConfig
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdSpec">EtcdSpec&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>SharedConfig defines parameters shared and used by Etcd as well as backup-restore sidecar.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>autoCompactionMode&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.CompactionMode">
CompactionMode
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>AutoCompactionMode defines the auto-compaction-mode:‘periodic’ mode or ‘revision’ mode for etcd and embedded-Etcd of backup-restore sidecar.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>autoCompactionRetention&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>AutoCompactionRetention defines the auto-compaction-retention length for etcd as well as for embedded-Etcd of backup-restore sidecar.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.StorageProvider">StorageProvider
(&lt;code>string&lt;/code> alias)&lt;/p>&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.StoreSpec">StoreSpec&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>StorageProvider defines the type of object store provider for storing backups.&lt;/p>
&lt;/p>
&lt;h3 id="druid.gardener.cloud/v1alpha1.StoreSpec">StoreSpec
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.BackupSpec">BackupSpec&lt;/a>,
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdCopyBackupsTaskSpec">EtcdCopyBackupsTaskSpec&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>StoreSpec defines parameters related to ObjectStore persisting backups&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>container&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Container is the name of the container the backup is stored at.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>prefix&lt;/code>&lt;/br>
&lt;em>
string
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>Prefix is the prefix used for the store.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>provider&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.StorageProvider">
StorageProvider
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Provider is the name of the backup provider.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>secretRef&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretreference-v1-core">
Kubernetes core/v1.SecretReference
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>SecretRef is the reference to the secret which used to connect to the backup store.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.TLSConfig">TLSConfig
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.BackupSpec">BackupSpec&lt;/a>,
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdConfig">EtcdConfig&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>TLSConfig hold the TLS configuration details.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>tlsCASecretRef&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.SecretReference">
SecretReference
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>serverTLSSecretRef&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretreference-v1-core">
Kubernetes core/v1.SecretReference
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>clientTLSSecretRef&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#secretreference-v1-core">
Kubernetes core/v1.SecretReference
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="druid.gardener.cloud/v1alpha1.WaitForFinalSnapshotSpec">WaitForFinalSnapshotSpec
&lt;/h3>
&lt;p>
(&lt;em>Appears on:&lt;/em>
&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/api-reference/#druid.gardener.cloud/v1alpha1.EtcdCopyBackupsTaskSpec">EtcdCopyBackupsTaskSpec&lt;/a>)
&lt;/p>
&lt;p>
&lt;p>WaitForFinalSnapshotSpec defines the parameters for waiting for a final full snapshot before copying backups.&lt;/p>
&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;code>enabled&lt;/code>&lt;/br>
&lt;em>
bool
&lt;/em>
&lt;/td>
&lt;td>
&lt;p>Enabled specifies whether to wait for a final full snapshot before copying backups.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>
&lt;code>timeout&lt;/code>&lt;/br>
&lt;em>
&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#duration-v1-meta">
Kubernetes meta/v1.Duration
&lt;/a>
&lt;/em>
&lt;/td>
&lt;td>
&lt;em>(Optional)&lt;/em>
&lt;p>Timeout is the timeout for waiting for a final full snapshot. When this timeout expires, the copying of backups
will be performed anyway. No timeout or 0 means wait forever.&lt;/p>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr/>
&lt;p>&lt;em>
Generated with &lt;a href="https://github.com/ahmetb/gen-crd-api-reference-docs">gen-crd-api-reference-docs&lt;/a>
&lt;/em>&lt;/p></description></item><item><title>Docs: 01 Multi Node Etcd Clusters</title><link>https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/</guid><description>
&lt;h1 id="multi-node-etcd-cluster-instances-via-etcd-druid">Multi-node etcd cluster instances via etcd-druid&lt;/h1>
&lt;p>This document proposes an approach (along with some alternatives) to support provisioning and management of multi-node etcd cluster instances via &lt;a href="https://github.com/gardener/etcd-druid">etcd-druid&lt;/a> and &lt;a href="https://github.com/gardener/etcd-backup-restore">etcd-backup-restore&lt;/a>.&lt;/p>
&lt;h2 id="content">Content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#multi-node-etcd-cluster-instances-via-etcd-druid">Multi-node etcd cluster instances via etcd-druid&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#content">Content&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#goal">Goal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#background-and-motivation">Background and Motivation&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#single-node-etcd-cluster">Single-node etcd cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#multi-node-etcd-cluster">Multi-node etcd-cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#dynamic-multi-node-etcd-cluster">Dynamic multi-node etcd cluster&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#prior-art">Prior Art&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#etcd-operator-from-coreos">ETCD Operator from CoreOS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#etcdadm-from-kubernetes-sigs">etcdadm from kubernetes-sigs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#etcd-cluster-operator-from-improbable-engineering">Etcd Cluster Operator from Improbable-Engineering&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#general-approach-to-etcd-cluster-management">General Approach to ETCD Cluster Management&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#bootstrapping">Bootstrapping&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#assumptions">Assumptions&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#adding-a-new-member-to-an-etcd-cluster">Adding a new member to an etcd cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#note">Note&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#alternative">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#managing-failures">Managing Failures&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#removing-an-existing-member-from-an-etcd-cluster">Removing an existing member from an etcd cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#restarting-an-existing-member-of-an-etcd-cluster">Restarting an existing member of an etcd cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recovering-an-etcd-cluster-from-failure-of-majority-of-members">Recovering an etcd cluster from failure of majority of members&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#kubernetes-context">Kubernetes Context&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#alternative-1">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#etcd-configuration">ETCD Configuration&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#alternative-2">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#data-persistence">Data Persistence&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#persistent">Persistent&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#ephemeral">Ephemeral&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#disk">Disk&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#in-memory">In-memory&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#how-to-detect-if-valid-metadata-exists-in-an-etcd-member">How to detect if valid metadata exists in an etcd member&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommendation">Recommendation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#how-to-detect-if-valid-data-exists-in-an-etcd-member">How to detect if valid data exists in an etcd member&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommendation-1">Recommendation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#separating-peer-and-client-traffic">Separating peer and client traffic&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#cutting-off-client-requests">Cutting off client requests&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#manipulating-client-service-podselector">Manipulating Client Service podSelector&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#health-check">Health Check&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#backup-failure">Backup Failure&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#alternative-3">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#status">Status&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#members">Members&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#note-1">Note&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#member-name-as-the-key">Member name as the key&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#member-leases">Member Leases&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#conditions">Conditions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#clustersize">ClusterSize&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#alternative-4">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#decision-table-for-etcd-druid-based-on-the-status">Decision table for etcd-druid based on the status&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#1-pink-of-health">1. Pink of health&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#2-member-status-is-out-of-sync-with-their-leases">2. Member status is out of sync with their leases&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-1">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-1">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#3-all-members-are-ready-but-allmembersready-condition-is-stale">3. All members are &lt;code>Ready&lt;/code> but &lt;code>AllMembersReady&lt;/code> condition is stale&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-2">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-2">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#4-not-all-members-are-ready-but-allmembersready-condition-is-stale">4. Not all members are &lt;code>Ready&lt;/code> but &lt;code>AllMembersReady&lt;/code> condition is stale&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-3">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-3">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#5-majority-members-are-ready-but-ready-condition-is-stale">5. Majority members are &lt;code>Ready&lt;/code> but &lt;code>Ready&lt;/code> condition is stale&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-4">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-4">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#6-majority-members-are-notready-but-ready-condition-is-stale">6. Majority members are &lt;code>NotReady&lt;/code> but &lt;code>Ready&lt;/code> condition is stale&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-5">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-5">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#7-some-members-have-been-in-unknown-status-for-a-while">7. Some members have been in &lt;code>Unknown&lt;/code> status for a while&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-6">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-6">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#8-some-member-pods-are-not-ready-but-have-not-had-the-chance-to-update-their-status">8. Some member pods are not &lt;code>Ready&lt;/code> but have not had the chance to update their status&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-7">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-7">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#9-quorate-cluster-with-a-minority-of-members-notready">9. Quorate cluster with a minority of members &lt;code>NotReady&lt;/code>&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-8">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-8">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#10-quorum-lost-with-a-majority-of-members-notready">10. Quorum lost with a majority of members &lt;code>NotReady&lt;/code>&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-9">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-9">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#11-scale-up-of-a-healthy-cluster">11. Scale up of a healthy cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-10">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-10">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#12-scale-down-of-a-healthy-cluster">12. Scale down of a healthy cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-11">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-11">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#13-superfluous-member-entries-in-etcd-status">13. Superfluous member entries in &lt;code>Etcd&lt;/code> status&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-12">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-12">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#decision-table-for-etcd-backup-restore-during-initialization">Decision table for etcd-backup-restore during initialization&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#1-first-member-during-bootstrap-of-a-fresh-etcd-cluster">1. First member during bootstrap of a fresh etcd cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-13">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-13">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#2-addition-of-a-new-following-member-during-bootstrap-of-a-fresh-etcd-cluster">2. Addition of a new following member during bootstrap of a fresh etcd cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-14">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-14">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#3-restart-of-an-existing-member-of-a-quorate-cluster-with-valid-metadata-and-data">3. Restart of an existing member of a quorate cluster with valid metadata and data&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-15">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-15">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#4-restart-of-an-existing-member-of-a-quorate-cluster-with-valid-metadata-but-without-valid-data">4. Restart of an existing member of a quorate cluster with valid metadata but without valid data&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-16">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-16">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#5-restart-of-an-existing-member-of-a-quorate-cluster-without-valid-metadata">5. Restart of an existing member of a quorate cluster without valid metadata&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-17">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-17">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#6-restart-of-an-existing-member-of-a-non-quorate-cluster-with-valid-metadata-and-data">6. Restart of an existing member of a non-quorate cluster with valid metadata and data&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-18">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-18">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#7-restart-of-the-first-member-of-a-non-quorate-cluster-without-valid-data">7. Restart of the first member of a non-quorate cluster without valid data&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-19">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-19">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#8-restart-of-a-following-member-of-a-non-quorate-cluster-without-valid-data">8. Restart of a following member of a non-quorate cluster without valid data&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#observed-state-20">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-20">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#backup">Backup&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#leading-etcd-main-containers-sidecar-is-the-backup-leader">Leading ETCD main container’s sidecar is the backup leader&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#independent-leader-election-between-backup-restore-sidecars">Independent leader election between backup-restore sidecars&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#history-compaction">History Compaction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#defragmentation">Defragmentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#work-flows-in-etcd-backup-restore">Work-flows in etcd-backup-restore&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#work-flows-independent-of-leader-election-in-all-members">Work-flows independent of leader election in all members&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#work-flows-only-on-the-leading-member">Work-flows only on the leading member&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#high-availability">High Availability&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#zonal-cluster---single-availability-zone">Zonal Cluster - Single Availability Zone&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#alternative-5">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#regional-cluster---multiple-availability-zones">Regional Cluster - Multiple Availability Zones&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#alternative-6">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#poddisruptionbudget">PodDisruptionBudget&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#rolling-updates-to-etcd-members">Rolling updates to etcd members&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#follow-up">Follow Up&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#ephemeral-volumes">Ephemeral Volumes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#shoot-control-plane-migration">Shoot Control-Plane Migration&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#performance-impact-of-multi-node-etcd-clusters">Performance impact of multi-node etcd clusters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#metrics-dashboards-and-alerts">Metrics, Dashboards and Alerts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#costs">Costs&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#future-work">Future Work&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#gardener-ring">Gardener Ring&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#autonomous-shoot-clusters">Autonomous Shoot Clusters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#optimization-of-recovery-from-non-quorate-cluster-with-some-member-containing-valid-data">Optimization of recovery from non-quorate cluster with some member containing valid data&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#optimization-of-rolling-updates-to-unhealthy-etcd-clusters">Optimization of rolling updates to unhealthy etcd clusters&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="goal">Goal&lt;/h2>
&lt;ul>
&lt;li>Enhance etcd-druid and etcd-backup-restore to support provisioning and management of multi-node etcd cluster instances within a single Kubernetes cluster.&lt;/li>
&lt;li>The etcd CRD interface should be simple to use. It should preferably work with just setting the &lt;code>spec.replicas&lt;/code> field to the desired value and should not require any more configuration in the CRD than currently required for the single-node etcd instances. The &lt;code>spec.replicas&lt;/code> field is part of the &lt;a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#scale-subresource">&lt;code>scale&lt;/code> sub-resource&lt;/a> &lt;a href="https://github.com/gardener/etcd-druid/blob/eaf04a2d0e6c7a4f2c8c220182b7a141aabfc70b/api/v1alpha1/etcd_types.go#L299">implementation&lt;/a> in &lt;code>Etcd&lt;/code> CRD.&lt;/li>
&lt;li>The single-node and multi-node scenarios must be automatically identified and managed by &lt;code>etcd-druid&lt;/code> and &lt;code>etcd-backup-restore&lt;/code>.&lt;/li>
&lt;li>The etcd clusters (single-node or multi-node) managed by &lt;code>etcd-druid&lt;/code> and &lt;code>etcd-backup-restore&lt;/code> must automatically recover from failures (even quorum loss) and disaster (e.g. etcd member persistence/data loss) as much as possible.&lt;/li>
&lt;li>It must be possible to dynamically scale an etcd cluster horizontally (even between single-node and multi-node scenarios) by simply scaling the &lt;code>Etcd&lt;/code> scale sub-resource.&lt;/li>
&lt;li>It must be possible to (optionally) schedule the individual members of an etcd clusters on different nodes or even infrastructure availability zones (within the hosting Kubernetes cluster).&lt;/li>
&lt;/ul>
&lt;p>Though this proposal tries to cover most aspects related to single-node and multi-node etcd clusters, there are some more points that are not goals for this document but are still in the scope of either etcd-druid/etcd-backup-restore and/or gardener.
In such cases, a high-level description of how they can be &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#future-work">addressed in the future&lt;/a> are mentioned at the end of the document.&lt;/p>
&lt;h2 id="background-and-motivation">Background and Motivation&lt;/h2>
&lt;h3 id="single-node-etcd-cluster">Single-node etcd cluster&lt;/h3>
&lt;p>At present, &lt;code>etcd-druid&lt;/code> supports only single-node etcd cluster instances.
The advantages of this approach are given below.&lt;/p>
&lt;ul>
&lt;li>The problem domain is smaller.
There are no leader election and quorum related issues to be handled.
It is simpler to setup and manage a single-node etcd cluster.&lt;/li>
&lt;li>Single-node etcd clusters instances have &lt;a href="https://etcd.io/docs/v2/admin_guide/#optimal-cluster-size">less request latency&lt;/a> than multi-node etcd clusters because there is no requirement to replicate the changes to the other members before committing the changes.&lt;/li>
&lt;li>&lt;code>etcd-druid&lt;/code> provisions etcd cluster instances as pods (actually as &lt;code>statefulsets&lt;/code>) in a Kubernetes cluster and Kubernetes is quick (&amp;lt;&lt;code>20s&lt;/code>) to restart container/pods if they go down.&lt;/li>
&lt;li>Also, &lt;code>etcd-druid&lt;/code> is currently only used by gardener to provision etcd clusters to act as back-ends for Kubernetes control-planes and Kubernetes control-plane components (&lt;code>kube-apiserver&lt;/code>, &lt;code>kubelet&lt;/code>, &lt;code>kube-controller-manager&lt;/code>, &lt;code>kube-scheduler&lt;/code> etc.) can tolerate etcd going down and recover when it comes back up.&lt;/li>
&lt;li>Single-node etcd clusters incur less cost (CPU, memory and storage)&lt;/li>
&lt;li>It is easy to cut-off client requests if backups fail by using &lt;a href="https://github.com/gardener/etcd-druid/blob/eaf04a2d0e6c7a4f2c8c220182b7a141aabfc70b/charts/etcd/templates/etcd-statefulset.yaml#L54-L62">&lt;code>readinessProbe&lt;/code> on the &lt;code>etcd-backup-restore&lt;/code> healthz endpoint&lt;/a> to minimize the gap between the latest revision and the backup revision.&lt;/li>
&lt;/ul>
&lt;p>The disadvantages of using single-node etcd clusters are given below.&lt;/p>
&lt;ul>
&lt;li>The &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/docs/proposals/design.md#workflow">database verification&lt;/a> step by &lt;code>etcd-backup-restore&lt;/code> can introduce additional delays whenever etcd container/pod restarts (in total ~&lt;code>20-25s&lt;/code>).
This can be much longer if a database restoration is required.
Especially, if there are incremental snapshots that need to be replayed (this can be mitigated by &lt;a href="https://github.com/gardener/etcd-druid/issues/88">compacting the incremental snapshots in the background&lt;/a>).&lt;/li>
&lt;li>Kubernetes control-plane components can go into &lt;code>CrashloopBackoff&lt;/code> if etcd is down for some time. This is mitigated by the &lt;a href="https://github.com/gardener/gardener/blob/9e4a809008fb122a6d02045adc08b9c98b5cd564/charts/seed-bootstrap/charts/dependency-watchdog/templates/endpoint-configmap.yaml#L29-L41">dependency-watchdog&lt;/a>.
But Kubernetes control-plane components require a lot of resources and create a lot of load on the etcd cluster and the apiserver when they come out of &lt;code>CrashloopBackoff&lt;/code>.
Especially, in medium or large sized clusters (&amp;gt; &lt;code>20&lt;/code> nodes).&lt;/li>
&lt;li>Maintenance operations such as updates to etcd (and updates to &lt;code>etcd-druid&lt;/code> of &lt;code>etcd-backup-restore&lt;/code>), rolling updates to the nodes of the underlying Kubernetes cluster and vertical scaling of etcd pods are disruptive because they cause etcd pods to be restarted.
The vertical scaling of etcd pods is somewhat mitigated during scale down by doing it only during the target clusters&amp;rsquo; &lt;a href="https://github.com/gardener/gardener/blob/86aa30dfd095f7960ae50a81d2cee27c0d18408b/charts/seed-controlplane/charts/etcd/templates/etcd-hvpa.yaml#L53">maintenance window&lt;/a>.
But scale up is still disruptive.&lt;/li>
&lt;li>We currently use some form of elastic storage (via &lt;code>persistentvolumeclaims&lt;/code>) for storing which have some upper-bounds on the I/O latency and throughput. This can be potentially be a problem for large clusters (&amp;gt; &lt;code>220&lt;/code> nodes).
Also, some cloud providers (e.g. Azure) take a long time to attach/detach volumes to and from machines which increases the down time to the Kubernetes components that depend on etcd.
It is difficult to use ephemeral/local storage (to achieve better latency/throughput as well as to circumvent volume attachment/detachment) for single-node etcd cluster instances.&lt;/li>
&lt;/ul>
&lt;h3 id="multi-node-etcd-cluster">Multi-node etcd-cluster&lt;/h3>
&lt;p>The advantages of introducing support for multi-node etcd clusters via &lt;code>etcd-druid&lt;/code> are below.&lt;/p>
&lt;ul>
&lt;li>Multi-node etcd cluster is highly-available. It can tolerate disruption to individual etcd pods as long as the quorum is not lost (i.e. more than half the etcd member pods are healthy and ready).&lt;/li>
&lt;li>Maintenance operations such as updates to etcd (and updates to &lt;code>etcd-druid&lt;/code> of &lt;code>etcd-backup-restore&lt;/code>), rolling updates to the nodes of the underlying Kubernetes cluster and vertical scaling of etcd pods can be done non-disruptively by &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/disruptions/">respecting &lt;code>poddisruptionbudgets&lt;/code>&lt;/a> for the various multi-node etcd cluster instances hosted on that cluster.&lt;/li>
&lt;li>Kubernetes control-plane components do not see any etcd cluster downtime unless quorum is lost (which is expected to be lot less frequent than current frequency of etcd container/pod restarts).&lt;/li>
&lt;li>We can consider using ephemeral/local storage for multi-node etcd cluster instances because individual member restarts can afford to take time to restore from backup before (re)joining the etcd cluster because the remaining members serve the requests in the meantime.&lt;/li>
&lt;li>High-availability across availability zones is also possible by specifying (anti)affinity for the etcd pods (possibly via &lt;a href="https://github.com/gardener/kupid">&lt;code>kupid&lt;/code>&lt;/a>).&lt;/li>
&lt;/ul>
&lt;p>Some disadvantages of using multi-node etcd clusters due to which it might still be desirable, in some cases, to continue to use single-node etcd cluster instances in the gardener context are given below.&lt;/p>
&lt;ul>
&lt;li>Multi-node etcd cluster instances are more complex to manage.
The problem domain is larger including the following.
&lt;ul>
&lt;li>Leader election&lt;/li>
&lt;li>Quorum loss&lt;/li>
&lt;li>Managing rolling changes&lt;/li>
&lt;li>Backups to be taken from only the leading member.&lt;/li>
&lt;li>More complex to cut-off client requests if backups fail to minimize the gap between the latest revision and the backup revision is under control.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Multi-node etcd cluster instances incur more cost (CPU, memory and storage).&lt;/li>
&lt;/ul>
&lt;h3 id="dynamic-multi-node-etcd-cluster">Dynamic multi-node etcd cluster&lt;/h3>
&lt;p>Though it is &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#non-goal">not part of this proposal&lt;/a>, it is conceivable to convert a single-node etcd cluster into a multi-node etcd cluster temporarily to perform some disruptive operation (etcd, &lt;code>etcd-backup-restore&lt;/code> or &lt;code>etcd-druid&lt;/code> updates, etcd cluster vertical scaling and perhaps even node rollout) and convert it back to a single-node etcd cluster once the disruptive operation has been completed. This will necessarily still involve a down-time because scaling from a single-node etcd cluster to a three-node etcd cluster will involve etcd pod restarts, it is still probable that it can be managed with a shorter down time than we see at present for single-node etcd clusters (on the other hand, converting a three-node etcd cluster to five node etcd cluster can be non-disruptive).&lt;/p>
&lt;p>This is &lt;em>definitely not&lt;/em> to argue in favour of such a dynamic approach in all cases (eventually, if/when dynamic multi-node etcd clusters are supported). On the contrary, it makes sense to make use of &lt;em>static&lt;/em> (fixed in size) multi-node etcd clusters for production scenarios because of the high-availability.&lt;/p>
&lt;h2 id="prior-art">Prior Art&lt;/h2>
&lt;h3 id="etcd-operator-from-coreos">ETCD Operator from CoreOS&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/coreos/etcd-operator#etcd-operator">etcd operator&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/coreos/etcd-operator#project-status-archived">Project status: archived&lt;/a>&lt;/p>
&lt;p>This project is no longer actively developed or maintained. The project exists here for historical reference. If you are interested in the future of the project and taking over stewardship, please contact &lt;a href="mailto:etcd-dev@googlegroups.com">etcd-dev@googlegroups.com&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h3 id="etcdadm-from-kubernetes-sigs">etcdadm from kubernetes-sigs&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/kubernetes-sigs/etcdadm#etcdadm">etcdadm&lt;/a> is a command-line tool for operating an etcd cluster. It makes it easy to create a new cluster, add a member to, or remove a member from an existing cluster. Its user experience is inspired by kubeadm.&lt;/p>
&lt;/blockquote>
&lt;p>It is a tool more tailored for manual command-line based management of etcd clusters with no API&amp;rsquo;s.
It also makes no assumptions about the underlying platform on which the etcd clusters are provisioned and hence, doesn&amp;rsquo;t leverage any capabilities of Kubernetes.&lt;/p>
&lt;h3 id="etcd-cluster-operator-from-improbable-engineering">Etcd Cluster Operator from Improbable-Engineering&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/improbable-eng/etcd-cluster-operator">Etcd Cluster Operator&lt;/a>&lt;/p>
&lt;p>Etcd Cluster Operator is an Operator for automating the creation and management of etcd inside of Kubernetes. It provides a custom resource definition (CRD) based API to define etcd clusters with Kubernetes resources, and enable management with native Kubernetes tooling._&lt;/p>
&lt;/blockquote>
&lt;p>Out of all the alternatives listed here, this one seems to be the only possible viable alternative.
Parts of its design/implementations are similar to some of the approaches mentioned in this proposal. However, we still don&amp;rsquo;t propose to use it as -&lt;/p>
&lt;ol>
&lt;li>The project is still in early phase and is not mature enough to be consumed as is in productive scenarios of ours.&lt;/li>
&lt;li>The resotration part is completely different which makes it difficult to adopt as-is and requries lot of re-work with the current restoration semantics with etcd-backup-restore making the usage counter-productive.&lt;/li>
&lt;/ol>
&lt;h2 id="general-approach-to-etcd-cluster-management">General Approach to ETCD Cluster Management&lt;/h2>
&lt;h3 id="bootstrapping">Bootstrapping&lt;/h3>
&lt;p>There are three ways to bootstrap an etcd cluster which are &lt;a href="https://etcd.io/docs/v3.4.0/op-guide/clustering/#static">static&lt;/a>, &lt;a href="https://etcd.io/docs/v3.4.0/op-guide/clustering/#etcd-discovery">etcd discovery&lt;/a> and &lt;a href="https://etcd.io/docs/v3.4.0/op-guide/clustering/#dns-discovery">DNS discovery&lt;/a>.
Out of these, the static way is the simplest (and probably faster to bootstrap the cluster) and has the least external dependencies.
Hence, it is preferred in this proposal.
But it requires that the initial (during bootstrapping) etcd cluster size (number of members) is already known before bootstrapping and that all of the members are already addressable (DNS,IP,TLS etc.).
Such information needs to be passed to the individual members during startup using the following static configuration.&lt;/p>
&lt;ul>
&lt;li>ETCD_INITIAL_CLUSTER
&lt;ul>
&lt;li>The list of peer URLs including all the members. This must be the same as the advertised peer URLs configuration. This can also be passed as &lt;code>initial-cluster&lt;/code> flag to etcd.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ETCD_INITIAL_CLUSTER_STATE
&lt;ul>
&lt;li>This should be set to &lt;code>new&lt;/code> while bootstrapping an etcd cluster.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ETCD_INITIAL_CLUSTER_TOKEN
&lt;ul>
&lt;li>This is a token to distinguish the etcd cluster from any other etcd cluster in the same network.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="assumptions">Assumptions&lt;/h4>
&lt;ul>
&lt;li>ETCD_INITIAL_CLUSTER can use DNS instead of IP addresses. We need to verify this by deleting a pod (as against scaling down the statefulset) to ensure that the pod IP changes and see if the recreated pod (by the statefulset controller) re-joins the cluster automatically.&lt;/li>
&lt;li>DNS for the individual members is known or computable. This is true in the case of etcd-druid setting up an etcd cluster using a single statefulset. But it may not necessarily be true in other cases (multiple statefulset per etcd cluster or deployments instead of statefulsets or in the case of etcd cluster with members distributed across more than one Kubernetes cluster.&lt;/li>
&lt;/ul>
&lt;h3 id="adding-a-new-member-to-an-etcd-cluster">Adding a new member to an etcd cluster&lt;/h3>
&lt;p>A &lt;a href="https://etcd.io/docs/v3.4.0/op-guide/runtime-configuration/#add-a-new-member">new member can be added&lt;/a> to an existing etcd cluster instance using the following steps.&lt;/p>
&lt;ol>
&lt;li>If the latest backup snapshot exists, restore the member&amp;rsquo;s etcd data to the latest backup snapshot. This can reduce the load on the leader to bring the new member up to date when it joins the cluster.
&lt;ol>
&lt;li>If the latest backup snapshot doesn&amp;rsquo;t exist or if the latest backup snapshot is not accessible (please see &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#backup-failure">backup failure&lt;/a>) and if the cluster itself is quorate, then the new member can be started with an empty data. But this will will be suboptimal because the new member will fetch all the data from the leading member to get up-to-date.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>The cluster is informed that a new member is being added using the &lt;a href="https://github.com/etcd-io/etcd/blob/6e800b9b0161ef874784fc6c679325acd67e2452/client/v3/cluster.go#L40">&lt;code>MemberAdd&lt;/code> API&lt;/a> including information like the member name and its advertised peer URLs.&lt;/li>
&lt;li>The new etcd member is then started with &lt;code>ETCD_INITIAL_CLUSTER_STATE=existing&lt;/code> apart from other required configuration.&lt;/li>
&lt;/ol>
&lt;p>This proposal recommends this approach.&lt;/p>
&lt;h4 id="note">Note&lt;/h4>
&lt;ul>
&lt;li>If there are incremental snapshots (taken by &lt;code>etcd-backup-restore&lt;/code>), they cannot be applied because that requires the member to be started in isolation without joining the cluster which is not possible.
This is acceptable if the amount of incremental snapshots are managed to be relatively small.
This adds one more reason to increase the priority of the issue of &lt;a href="https://github.com/gardener/etcd-druid/issues/88">incremental snapshot compaction&lt;/a>.&lt;/li>
&lt;li>There is a time window, between the &lt;code>MemberAdd&lt;/code> call and the new member joining the cluster and getting up to date, where the cluster is &lt;a href="https://etcd.io/docs/v3.3.12/learning/learner/#background">vulnerable to leader elections which could be disruptive&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h4 id="alternative">Alternative&lt;/h4>
&lt;p>With &lt;code>v3.4&lt;/code>, the new &lt;a href="https://etcd.io/docs/v3.3.12/learning/learner/#raft-learner">raft learner approach&lt;/a> can be used to mitigate some of the possible disruptions mentioned &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#note">above&lt;/a>.
Then the steps will be as follows.&lt;/p>
&lt;ol>
&lt;li>If the latest backup snapshot exists, restore the member&amp;rsquo;s etcd data to the latest backup snapshot. This can reduce the load on the leader to bring the new member up to date when it joins the cluster.&lt;/li>
&lt;li>The cluster is informed that a new member is being added using the &lt;a href="https://github.com/etcd-io/etcd/blob/6e800b9b0161ef874784fc6c679325acd67e2452/client/v3/cluster.go#L43">&lt;code>MemberAddAsLearner&lt;/code> API&lt;/a> including information like the member name and its advertised peer URLs.&lt;/li>
&lt;li>The new etcd member is then started with &lt;code>ETCD_INITIAL_CLUSTER_STATE=existing&lt;/code> apart from other required configuration.&lt;/li>
&lt;li>Once the new member (learner) is up to date, it can be promoted to a full voting member by using the &lt;a href="https://github.com/etcd-io/etcd/blob/6e800b9b0161ef874784fc6c679325acd67e2452/client/v3/cluster.go#L52">&lt;code>MemberPromote&lt;/code> API&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>This approach is new and involves more steps and is not recommended in this proposal.
It can be considered in future enhancements.&lt;/p>
&lt;h3 id="managing-failures">Managing Failures&lt;/h3>
&lt;p>A multi-node etcd cluster may face failures of &lt;a href="https://etcd.io/docs/v3.1.12/op-guide/failures/">diffent kinds&lt;/a> during its life-cycle.
The actions that need to be taken to manage these failures depend on the failure mode.&lt;/p>
&lt;h4 id="removing-an-existing-member-from-an-etcd-cluster">Removing an existing member from an etcd cluster&lt;/h4>
&lt;p>If a member of an etcd cluster becomes unhealthy, it must be explicitly removed from the etcd cluster, as soon as possible.
This can be done by using the &lt;a href="https://github.com/etcd-io/etcd/blob/6e800b9b0161ef874784fc6c679325acd67e2452/client/v3/cluster.go#L46">&lt;code>MemberRemove&lt;/code> API&lt;/a>.
This ensures that only healthy members participate as voting members.&lt;/p>
&lt;p>A member of an etcd cluster may be removed not just for managing failures but also for other reasons such as -&lt;/p>
&lt;ul>
&lt;li>The etcd cluster is being scaled down. I.e. the cluster size is being reduced&lt;/li>
&lt;li>An existing member is being replaced by a new one for some reason (e.g. upgrades)&lt;/li>
&lt;/ul>
&lt;p>If the majority of the members of the etcd cluster are healthy and the member that is unhealthy/being removed happens to be the &lt;a href="https://etcd.io/docs/v3.1.12/op-guide/failures/#leader-failure">leader&lt;/a> at that moment then the etcd cluster will automatically elect a new leader.
But if only a minority of etcd clusters are healthy after removing the member then the the cluster will no longer be &lt;a href="https://etcd.io/docs/v3.1.12/op-guide/failures/#majority-failure">quorate&lt;/a> and will stop accepting write requests.
Such an etcd cluster needs to be recovered via some kind of &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recovering-an-etcd-cluster-from-failure-of-majority-of-members">disaster-recovery&lt;/a>.&lt;/p>
&lt;h4 id="restarting-an-existing-member-of-an-etcd-cluster">Restarting an existing member of an etcd cluster&lt;/h4>
&lt;p>If the existing member of an etcd cluster restarts and retains an uncorrupted data directory after the restart, then it can simply re-join the cluster as an existing member without any API calls or configuration changes.
This is because the relevant metadata (including member ID and cluster ID) are &lt;a href="https://etcd.io/docs/v2/admin_guide/#lifecycle">maintained in the write ahead logs&lt;/a>.
However, if it doesn&amp;rsquo;t retain an uncorrupted data directory after the restart, then it must first be &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#removing-an-existing-member-from-an-etcd-cluster">removed&lt;/a> and &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#adding-a-new-member-to-an-etcd-cluster">added&lt;/a> as a new member.&lt;/p>
&lt;h4 id="recovering-an-etcd-cluster-from-failure-of-majority-of-members">Recovering an etcd cluster from failure of majority of members&lt;/h4>
&lt;p>If a majority of members of an etcd cluster fail but if they retain their uncorrupted data directory then they can be simply restarted and they will re-form the existing etcd cluster when they come up.
However, if they do not retain their uncorrupted data directory, then the etcd cluster must be &lt;a href="https://etcd.io/docs/v3.4.0/op-guide/recovery/#restoring-a-cluster">recovered from latest snapshot in the backup&lt;/a>.
This is very similar to &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#bootstrapping">bootstrapping&lt;/a> with the additional initial step of restoring the latest snapshot in each of the members.
However, the same &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#note">limitation&lt;/a> about incremental snapshots, as in the case of adding a new member, applies here.
But unlike in the case of &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#adding-a-new-member-to-an-etcd-cluster">adding a new member&lt;/a>, not applying incremental snapshots is not acceptable in the case of etcd cluster recovery.
Hence, if incremental snapshots are required to be applied, the etcd cluster must be &lt;a href="https://etcd.io/docs/v3.4.0/op-guide/runtime-configuration/#restart-cluster-from-majority-failure">recovered&lt;/a> in the following steps.&lt;/p>
&lt;ol>
&lt;li>Restore a new single-member cluster using the latest snapshot.&lt;/li>
&lt;li>Apply incremental snapshots on the single-member cluster.&lt;/li>
&lt;li>Take a full snapshot which can now be used while adding the remaining members.&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#adding-a-new-member-to-an-etcd-cluster">Add&lt;/a> new members using the latest snapshot created in the step above.&lt;/li>
&lt;/ol>
&lt;h2 id="kubernetes-context">Kubernetes Context&lt;/h2>
&lt;ul>
&lt;li>Users will provision an etcd cluster in a Kubernetes cluster by creating an etcd CRD resource instance.&lt;/li>
&lt;li>A multi-node etcd cluster is indicated if the &lt;code>spec.replicas&lt;/code> field is set to any value greater than 1. The etcd-druid will add validation to ensure that the &lt;code>spec.replicas&lt;/code> value is an odd number according to the requirements of etcd.&lt;/li>
&lt;li>The etcd-druid controller will provision a statefulset with the etcd main container and the etcd-backup-restore sidecar container. It will pass on the &lt;code>spec.replicas&lt;/code> field from the etcd resource to the statefulset. It will also supply the right pre-computed configuration to both the containers.&lt;/li>
&lt;li>The statefulset controller will create the pods based on the pod template in the statefulset spec and these individual pods will be the members that form the etcd cluster.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gardener.cloud/__resources/01-multi-node-etcd_1afcbd.png" alt="Component diagram">&lt;/p>
&lt;p>This approach makes it possible to satisfy the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#assumption">assumption&lt;/a> that the DNS for the individual members of the etcd cluster must be known/computable.
This can be achieved by using a &lt;code>headless&lt;/code> service (along with the statefulset) for each etcd cluster instance.
Then we can address individual pods/etcd members via the predictable DNS name of &lt;code>&amp;lt;statefulset_name&amp;gt;-{0|1|2|3|…|n}.&amp;lt;headless_service_name&amp;gt;&lt;/code> from within the Kubernetes namespace (or from outside the Kubernetes namespace by appending &lt;code>.&amp;lt;namespace&amp;gt;.svc.&amp;lt;cluster_domain&amp;gt; suffix)&lt;/code>.
The etcd-druid controller can compute the above configurations automatically based on the &lt;code>spec.replicas&lt;/code> in the etcd resource.&lt;/p>
&lt;p>This proposal recommends this approach.&lt;/p>
&lt;h4 id="alternative-1">Alternative&lt;/h4>
&lt;p>One statefulset is used for each member (instead of one statefulset for all members).
While this approach gives a flexibility to have different pod specifications for the individual members, it makes managing the individual members (e.g. rolling updates) more complicated.
Hence, this approach is not recommended.&lt;/p>
&lt;h2 id="etcd-configuration">ETCD Configuration&lt;/h2>
&lt;p>As mentioned in the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#general-approach-to-etcd-cluster-management">general approach section&lt;/a>, there are differences in the configuration that needs to be passed to individual members of an etcd cluster in different scenarios such as &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#bootstrapping">bootstrapping&lt;/a>, &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#adding-a-new-member-to-an-etcd-cluster">adding&lt;/a> a new member, &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#removing-an-existing-member-from-an-etcd-cluster">removing&lt;/a> a member, &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#restarting-an-existing-member-of-an-etcd-cluster">restarting&lt;/a> an existing member etc.
Managing such differences in configuration for individual pods of a statefulset is tricky in the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#kubernetes-context">recommended approach&lt;/a> of using a single statefulset to manage all the member pods of an etcd cluster.
This is because statefulset uses the same pod template for all its pods.&lt;/p>
&lt;p>The recommendation is for &lt;code>etcd-druid&lt;/code> to provision the base configuration template in a &lt;code>ConfigMap&lt;/code> which is passed to all the pods via the pod template in the &lt;code>StatefulSet&lt;/code>.
The &lt;code>initialization&lt;/code> flow of &lt;code>etcd-backup-restore&lt;/code> (which is invoked every time the etcd container is (re)started) is then enhanced to generate the customized etcd configuration for the corresponding member pod (in a shared &lt;em>volume&lt;/em> between etcd and the backup-restore containers) based on the supplied template configuration.
This will require that &lt;code>etcd-backup-restore&lt;/code> will have to have a mechanism to detect which scenario listed &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#etcd-configuration">above&lt;/a> applies during any given member container/pod restart.&lt;/p>
&lt;h3 id="alternative-2">Alternative&lt;/h3>
&lt;p>As mentioned &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#alternative-1">above&lt;/a>, one statefulset is used for each member of the etcd cluster.
Then different configuration (generated directly by &lt;code>etcd-druid&lt;/code>) can be passed in the pod templates of the different statefulsets.
Though this approach is advantageous in the context of managing the different configuration, it is not recommended in this proposal because it makes the rest of the management (e.g. rolling updates) more complicated.&lt;/p>
&lt;h2 id="data-persistence">Data Persistence&lt;/h2>
&lt;p>The type of persistence used to store etcd data (including the member ID and cluster ID) has an impact on the steps that are needed to be taken when the member pods or containers (&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#removing-an-existing-member-from-an-etcd-cluster">minority&lt;/a> of them or &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#restarting-an-existing-member-of-an-etcd-cluster">majority&lt;/a>) need to be recovered.&lt;/p>
&lt;h3 id="persistent">Persistent&lt;/h3>
&lt;p>Like the single-node case, &lt;code>persistentvolumes&lt;/code> can be used to persist ETCD data for all the member pods. The individual member pods then get their own &lt;code>persistentvolumes&lt;/code>.
The advantage is that individual members retain their member ID across pod restarts and even pod deletion/recreation across Kubernetes nodes.
This means that member pods that crash (or are unhealthy) can be &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#restarting-an-existing-member-of-an-etcd-cluster">restarted&lt;/a> automatically (by configuring &lt;code>livenessProbe&lt;/code>) and they will re-join the etcd cluster using their existing member ID without any need for explicit etcd cluster management).&lt;/p>
&lt;p>The disadvantages of this approach are as follows.&lt;/p>
&lt;ul>
&lt;li>The number of persistentvolumes increases linearly with the cluster size which is a cost-related concern.&lt;/li>
&lt;li>Network-mounted persistentvolumes might eventually become a performance bottleneck under heavy load for a latency-sensitive component like ETCD.&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#single-node-etcd-cluster">Volume attach/detach issues&lt;/a> when associated with etcd cluster instances cause downtimes to the target shoot clusters that are backed by those etcd cluster instances.&lt;/li>
&lt;/ul>
&lt;h3 id="ephemeral">Ephemeral&lt;/h3>
&lt;p>The ephemeral volumes use-case is considered as an optimization and may be planned as a follow-up action.&lt;/p>
&lt;h4 id="disk">Disk&lt;/h4>
&lt;p>Ephemeral persistence can be achieved in Kubernetes by using either &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir">&lt;code>emptyDir&lt;/code>&lt;/a> volumes or &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#local">&lt;code>local&lt;/code> persistentvolumes&lt;/a> to persist ETCD data.
The advantages of this approach are as follows.&lt;/p>
&lt;ul>
&lt;li>Potentially faster disk I/O.&lt;/li>
&lt;li>The number of persistent volumes does not increase linearly with the cluster size (at least not technically).&lt;/li>
&lt;li>Issues related volume attachment/detachment can be avoided.&lt;/li>
&lt;/ul>
&lt;p>The main disadvantage of using ephemeral persistence is that the individual members may retain their identity and data across container restarts but not across pod deletion/recreation across Kubernetes nodes. If the data is lost then on restart of the member pod, the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#restarting-an-existing-member-of-an-etcd-cluster">older member (represented by the container) has to be removed and a new member has to be added&lt;/a>.&lt;/p>
&lt;p>Using &lt;code>emptyDir&lt;/code> ephemeral persistence has the disadvantage that the volume doesn&amp;rsquo;t have its own identity.
So, if the member pod is recreated but scheduled on the same node as before then it will not retain the identity as the persistence is lost.
But it has the advantage that scheduling of pods is unencumbered especially during pod recreation as they are free to be scheduled anywhere.&lt;/p>
&lt;p>Using &lt;code>local&lt;/code> persistentvolumes has the advantage that the volume has its own indentity and hence, a recreated member pod will retain its identity if scheduled on the same node.
But it has the disadvantage of tying down the member pod to a node which is a problem if the node becomes unhealthy requiring etcd druid to take additional actions (such as deleting the local persistent volume).&lt;/p>
&lt;p>Based on these constraints, if ephemeral persistence is opted for, it is recommended to use &lt;code>emptyDir&lt;/code> ephemeral persistence.&lt;/p>
&lt;h4 id="in-memory">In-memory&lt;/h4>
&lt;p>In-memory ephemeral persistence can be achieved in Kubernetes by using &lt;code>emptyDir&lt;/code> with &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir">&lt;code>medium: Memory&lt;/code>&lt;/a>.
In this case, a &lt;code>tmpfs&lt;/code> (RAM-backed file-system) volume will be used.
In addition to the advantages of &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#ephemeral">ephemeral persistence&lt;/a>, this approach can achieve the fastest possible &lt;em>disk I/O&lt;/em>.
Similarly, in addition to the disadvantages of &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#ephemeral">ephemeral persistence&lt;/a>, in-memory persistence has the following additional disadvantages.&lt;/p>
&lt;ul>
&lt;li>More memory required for the individual member pods.&lt;/li>
&lt;li>Individual members may not at all retain their data and identity across container restarts let alone across pod restarts/deletion/recreation across Kubernetes nodes.
I.e. every time an etcd container restarts, &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#restarting-an-existing-member-of-an-etcd-cluster">the old member (represented by the container) will have to be removed and a new member has to be added&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="how-to-detect-if-valid-metadata-exists-in-an-etcd-member">How to detect if valid metadata exists in an etcd member&lt;/h3>
&lt;p>Since the likelyhood of a member not having valid metadata in the WAL files is much more likely in the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#ephemeral">ephemeral&lt;/a> persistence scenario, one option is to pass the information that ephemeral persistence is being used to the &lt;code>etcd-backup-restore&lt;/code> sidecar (say, via command-line flags or environment variables).&lt;/p>
&lt;p>But in principle, it might be better to determine this from the WAL files directly so that the possibility of corrupted WAL files also gets handled correctly.
To do this, the &lt;a href="https://github.com/etcd-io/etcd/tree/main/server/storage/wal">wal&lt;/a> package has &lt;a href="https://github.com/etcd-io/etcd/blob/57a092b45d0eae6c9e600e62513ffcd2f1f25a92/server/wal/wal.go#L324-L326">some&lt;/a> &lt;a href="https://github.com/etcd-io/etcd/blob/57a092b45d0eae6c9e600e62513ffcd2f1f25a92/server/wal/wal.go#L429-L548">functions&lt;/a> that might be useful.&lt;/p>
&lt;h4 id="recommendation">Recommendation&lt;/h4>
&lt;p>It might be possible that using the &lt;a href="https://github.com/etcd-io/etcd/tree/main/server/storage/wal">wal&lt;/a> package for verifying if valid metadata exists might be performance intensive.
So, the performance impact needs to be measured.
If the performance impact is acceptable (both in terms of resource usage and time), it is recommended to use this way to verify if the member contains valid metadata.
Otherwise, alternatives such as a simple check that WAL folder exists coupled with the static information about use of &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#persistent">persistent&lt;/a> or &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#ephemeral">ephemeral&lt;/a> storage might be considered.&lt;/p>
&lt;h3 id="how-to-detect-if-valid-data-exists-in-an-etcd-member">How to detect if valid data exists in an etcd member&lt;/h3>
&lt;p>The &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#decision-table-for-etcd-backup-restore-during-initialization">initialization sequence&lt;/a> in &lt;code>etcd-backup-restore&lt;/code> already includes &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/c98f76c7c55f7d1039687cc293536d7caf893ba5/pkg/initializer/validator/datavalidator.go#L78-L94">database verification&lt;/a>.
This would suffice to determine if the member has valid data.&lt;/p>
&lt;h3 id="recommendation-1">Recommendation&lt;/h3>
&lt;p>Though &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#ephemeral">ephemeral&lt;/a> persistence has performance and logistics advantages,
it is recommended to start with &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#persistent">persistent&lt;/a> data for the member pods.
In addition to the reasons and concerns listed above, there is also the additional concern that in case of &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#backup-failure">backup failure&lt;/a>, the risk of additional data loss is a bit higher if ephemeral persistence is used (simultaneous quoram loss is sufficient) when compared to persistent storage (simultaenous quorum loss with majority persistence loss is needed).
The risk might still be acceptable but the idea is to gain experience about how frequently member containers/pods get restarted/recreated, how frequently leader election happens among members of an etcd cluster and how frequently etcd clusters lose quorum.
Based on this experience, we can move towards using &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#ephemeral">ephemeral&lt;/a> (perhaps even &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#in-memory">in-memory&lt;/a>) persistence for the member pods.&lt;/p>
&lt;h2 id="separating-peer-and-client-traffic">Separating peer and client traffic&lt;/h2>
&lt;p>The current single-node ETCD cluster implementation in &lt;code>etcd-druid&lt;/code> and &lt;code>etcd-backup-restore&lt;/code> uses a single &lt;code>service&lt;/code> object to act as the entry point for the client traffic.
There is no separation or distinction between the client and peer traffic because there is not much benefit to be had by making that distinction.&lt;/p>
&lt;p>In the multi-node ETCD cluster scenario, it makes sense to distinguish between and separate the peer and client traffic.
This can be done by using two &lt;code>services&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>peer
&lt;ul>
&lt;li>To be used for peer communication. This could be a &lt;code>headless&lt;/code> service.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>client
&lt;ul>
&lt;li>To be used for client communication. This could be a normal &lt;code>ClusterIP&lt;/code> service like it is in the single-node case.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The main advantage of this approach is that it makes it possible (if needed) to allow only peer to peer communication while blocking client communication. Such a thing might be required during some phases of some maintenance tasks (manual or automated).&lt;/p>
&lt;h3 id="cutting-off-client-requests">Cutting off client requests&lt;/h3>
&lt;p>At present, in the single-node ETCD instances, etcd-druid configures the readinessProbe of the etcd main container to probe the healthz endpoint of the etcd-backup-restore sidecar which considers the status of the latest backup upload in addition to the regular checks about etcd and the side car being up and healthy. This has the effect of setting the etcd main container (and hence the etcd pod) as not ready if the latest backup upload failed. This results in the endpoints controller removing the pod IP address from the endpoints list for the service which eventually cuts off ingress traffic coming into the etcd pod via the etcd client service. The rationale for this is to fail early when the backup upload fails rather than continuing to serve requests while the gap between the last backup and the current data increases which might lead to unacceptably large amount of data loss if disaster strikes.&lt;/p>
&lt;p>This approach will not work in the multi-node scenario because we need the individual member pods to be able to talk to each other to maintain the cluster quorum when backup upload fails but need to cut off only client ingress traffic.&lt;/p>
&lt;p>It is recommended to separate the backup health condition tracking taking appropriate remedial actions.
With that, the backup health condition tracking is now separated to the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#conditions">&lt;code>BackupReady&lt;/code> condition&lt;/a> in the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#status">&lt;code>Etcd&lt;/code> resource &lt;code>status&lt;/code>&lt;/a> and the cutting off of client traffic (which could now be done for more reasons than failed backups) can be achieved in a different way described &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#manipulating-client-service-podselector">below&lt;/a>.&lt;/p>
&lt;h4 id="manipulating-client-service-podselector">Manipulating Client Service podSelector&lt;/h4>
&lt;p>The client traffic can be cut off by updating (manually or automatically by some component) the &lt;code>podSelector&lt;/code> of the client service to add an additional label (say, unhealthy or disabled) such that the &lt;code>podSelector&lt;/code> no longer matches the member pods created by the statefulset.
This will result in the client ingress traffic being cut off.
The peer service is left unmodified so that peer communication is always possible.&lt;/p>
&lt;h2 id="health-check">Health Check&lt;/h2>
&lt;p>The etcd main container and the etcd-backup-restore sidecar containers will be configured with livenessProbe and readinessProbe which will indicate the health of the containers and effectively the corresponding ETCD cluster member pod.&lt;/p>
&lt;h3 id="backup-failure">Backup Failure&lt;/h3>
&lt;p>As described &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#cutting-off-client-requests">above&lt;/a> using &lt;code>readinessProbe&lt;/code> failures based on latest backup failure is not viable in the multi-node ETCD scenario.&lt;/p>
&lt;p>Though cutting off traffic by &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#manipulating-client-service-podselector">manipulating client &lt;code>service&lt;/code> &lt;code>podSelector&lt;/code>&lt;/a> is workable, it may not be desirable.&lt;/p>
&lt;p>It is recommended that on backup failure, the leading &lt;code>etcd-backup-restore&lt;/code> sidecar (the one that is responsible for taking backups at that point in time, as explained in the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#backup">backup section below&lt;/a>, updates the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#conditions">&lt;code>BackupReady&lt;/code> condition&lt;/a> in the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#status">&lt;code>Etcd&lt;/code> status&lt;/a> and raises a high priority alert to the landscape operators but &lt;em>&lt;em>does not&lt;/em>&lt;/em> cut off the client traffic.&lt;/p>
&lt;p>The reasoning behind this decision to not cut off the client traffic on backup failure is to allow the Kubernetes cluster&amp;rsquo;s control plane (which relies on the ETCD cluster) to keep functioning as long as possible and to avoid bringing down the control-plane due to a missed backup.&lt;/p>
&lt;p>The risk of this approach is that with a cascaded sequence of failures (on top of the backup failure), there is a chance of more data loss than the frequency of backup would otherwise indicate.&lt;/p>
&lt;p>To be precise, the risk of such an additional data loss manifests only when backup failure as well as a special case of quorum loss (majority of the members are not ready) happen in such a way that the ETCD cluster needs to be re-bootstrapped from the backup.
As described &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recovering-an-etcd-cluster-from-failure-of-majority-of-members">here&lt;/a>, re-bootstrapping the ETCD cluster requires restoration from the latest backup only when a majority of members no longer have uncorrupted data persistence.&lt;/p>
&lt;p>If &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#persistent">persistent storage&lt;/a> is used, this will happen only when backup failure as well as a majority of the disks/volumes backing the ETCD cluster members fail simultaneously.
This would indeed be rare and might be an acceptable risk.&lt;/p>
&lt;p>If &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#ephemeral">ephemeral storage&lt;/a> is used (especially, &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#in-memory">in-memory&lt;/a>), the data loss will happen if a majority of the ETCD cluster members become &lt;code>NotReady&lt;/code> (requiring a pod restart) at the same time as the backup failure.
This may not be as rare as majority members&amp;rsquo; disk/volume failure.
The risk can be somewhat mitigated at least for planned maintenance operations by postponing potentially disruptive maintenance operations when &lt;code>BackupReady&lt;/code> condition is &lt;code>false&lt;/code> (vertical scaling, rolling updates, evictions due to node roll-outs).&lt;/p>
&lt;p>But in practice (when &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#ephemeral">ephemeral storage&lt;/a> is used), the current proposal suggests restoring from the latest full backup even when a minority of ETCD members (even a single pod) &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#restarting-an-existing-member-of-an-etcd-cluster">restart&lt;/a> both to speed up the process of the new member catching up to the latest revision but also to avoid load on the leading member which needs to supply the data to bring the new member up-to-date.
But as described &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#adding-a-new-member-to-an-etcd-cluster">here&lt;/a>, in case of a minority member failure while using ephemeral storage, it is possible to restart the new member with empty data and let it fetch all the data from the leading member (only if backup is not accessible).
Though this is suboptimal, it is workable given the constraints and conditions.
With this, the risk of additional data loss in the case of ephemeral storage is only if backup failure as well as quorum loss happens.
While this is still less rare than the risk of additional data loss in case of persistent storage, the risk might be tolerable. Provided the risk of quorum loss is not too high. This needs to be monitored/evaluated before opting for ephemeral storage.&lt;/p>
&lt;p>Given these constraints, it is better to dynamically avoid/postpone some potentially disruptive operations when &lt;code>BackupReady&lt;/code> condition is &lt;code>false&lt;/code>.
This has the effect of allowing &lt;code>n/2&lt;/code> members to be evicted when the backups are healthy and completely disabling evictions when backups are not healthy.&lt;/p>
&lt;ol>
&lt;li>Skip/postpone potentially disruptive maintenance operations (listed below) when the &lt;code>BackupReady&lt;/code> condition is &lt;code>false&lt;/code>.&lt;/li>
&lt;li>Vertical scaling.&lt;/li>
&lt;li>Rolling updates, Basically, any updates to the &lt;code>StatefulSet&lt;/code> spec which includes vertical scaling.&lt;/li>
&lt;li>Dynamically toggle the &lt;code>minAvailable&lt;/code> field of the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#poddisruptionbudget">&lt;code>PodDisruptionBudget&lt;/code>&lt;/a> between &lt;code>n/2 + 1&lt;/code> and &lt;code>n&lt;/code> (where &lt;code>n&lt;/code> is the ETCD desired cluster size) whenever the &lt;code>BackupReady&lt;/code> condition toggles between &lt;code>true&lt;/code> and &lt;code>false&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>This will mean that &lt;code>etcd-backup-restore&lt;/code> becomes Kubernetes-aware. But there might be reasons for making &lt;code>etcd-backup-restore&lt;/code> Kubernetes-aware anyway (e.g. to update the &lt;code>etcd&lt;/code> resource &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#status">status&lt;/a> with latest full snapshot details).
This enhancement should keep &lt;code>etcd-backup-restore&lt;/code> backward compatible.
I.e. it should be possible to use &lt;code>etcd-backup-restore&lt;/code> Kubernetes-unaware as before this proposal.
This is possible either by auto-detecting the existence of kubeconfig or by an explicit command-line flag (such as &lt;code>--enable-client-service-updates&lt;/code> which can be defaulted to &lt;code>false&lt;/code> for backward compatibility).&lt;/p>
&lt;h5 id="alternative-3">Alternative&lt;/h5>
&lt;p>The alternative is for &lt;code>etcd-druid&lt;/code> to implement the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#manipulating-client-service-podselector">above functionality&lt;/a>.&lt;/p>
&lt;p>But &lt;code>etcd-druid&lt;/code> is centrally deployed in the host Kubernetes cluster and cannot scale well horizontally.
So, it can potentially be a bottleneck if it is involved in regular health check mechanism for all the etcd clusters it manages.
Also, the recommended approach above is more robust because it can work even if &lt;code>etcd-druid&lt;/code> is down when the backup upload of a particular etcd cluster fails.&lt;/p>
&lt;h2 id="status">Status&lt;/h2>
&lt;p>It is desirable (for the &lt;code>etcd-druid&lt;/code> and landscape administrators/operators) to maintain/expose status of the etcd cluster instances in the &lt;code>status&lt;/code> sub-resource of the &lt;code>Etcd&lt;/code> CRD.
The proposed structure for maintaining the status is as shown in the example below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: druid.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Etcd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: etcd-main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> replicas: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conditions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: Ready &lt;span style="color:#008000"># Condition type for the readiness of the ETCD cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;True&amp;#34;&lt;/span> &lt;span style="color:#008000"># Indicates of the ETCD Cluster is ready or not&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastHeartbeatTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: Quorate &lt;span style="color:#008000"># Quorate|QuorumLost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: AllMembersReady &lt;span style="color:#008000"># Condition type for the readiness of all the member of the ETCD cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;True&amp;#34;&lt;/span> &lt;span style="color:#008000"># Indicates if all the members of the ETCD Cluster are ready&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastHeartbeatTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: AllMembersReady &lt;span style="color:#008000"># AllMembersReady|NotAllMembersReady&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: BackupReady &lt;span style="color:#008000"># Condition type for the readiness of the backup of the ETCD cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;True&amp;#34;&lt;/span> &lt;span style="color:#008000"># Indicates if the backup of the ETCD cluster is ready&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastHeartbeatTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: FullBackupSucceeded &lt;span style="color:#008000"># FullBackupSucceeded|IncrementalBackupSucceeded|FullBackupFailed|IncrementalBackupFailed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clusterSize: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> replicas: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> members:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: etcd-main-0 &lt;span style="color:#008000"># member pod name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: 272e204152 &lt;span style="color:#008000"># member Id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> role: Leader &lt;span style="color:#008000"># Member|Leader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: Ready &lt;span style="color:#008000"># Ready|NotReady|Unknown&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: LeaseSucceeded &lt;span style="color:#008000"># LeaseSucceeded|LeaseExpired|UnknownGracePeriodExceeded|PodNotRead&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: etcd-main-1 &lt;span style="color:#008000"># member pod name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: 272e204153 &lt;span style="color:#008000"># member Id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> role: Member &lt;span style="color:#008000"># Member|Leader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: Ready &lt;span style="color:#008000"># Ready|NotReady|Unknown&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: LeaseSucceeded &lt;span style="color:#008000"># LeaseSucceeded|LeaseExpired|UnknownGracePeriodExceeded|PodNotRead&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This proposal recommends that &lt;code>etcd-druid&lt;/code> (preferrably, the &lt;code>custodian&lt;/code> controller in &lt;code>etcd-druid&lt;/code>) maintains most of the information in the &lt;code>status&lt;/code> of the &lt;code>Etcd&lt;/code> resources described above.&lt;/p>
&lt;p>One exception to this is the &lt;code>BackupReady&lt;/code> condition which is recommended to be maintained by the &lt;em>leading&lt;/em> &lt;code>etcd-backup-restore&lt;/code> sidecar container.
This will mean that &lt;code>etcd-backup-restore&lt;/code> becomes Kubernetes-aware. But there are other reasons for making &lt;code>etcd-backup-restore&lt;/code> Kubernetes-aware anyway (e.g. to &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#health-check">maintain health conditions&lt;/a>).
This enhancement should keep &lt;code>etcd-backup-restore&lt;/code> backward compatible.
But it should be possible to use &lt;code>etcd-backup-restore&lt;/code> Kubernetes-unaware as before this proposal. This is possible either by auto-detecting the existence of kubeconfig or by an explicit command-line flag (such as &lt;code>--enable-etcd-status-updates&lt;/code> which can be defaulted to &lt;code>false&lt;/code> for backward compatibility).&lt;/p>
&lt;h3 id="members">Members&lt;/h3>
&lt;p>The &lt;code>members&lt;/code> section of the status is intended to be maintained by &lt;code>etcd-druid&lt;/code> (preferraby, the &lt;code>custodian&lt;/code> controller of &lt;code>etcd-druid&lt;/code>) based on the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#member-leases">&lt;code>leases&lt;/code> of the individual members&lt;/a>.&lt;/p>
&lt;h4 id="note-1">Note&lt;/h4>
&lt;p>An earlier design in this proposal was for the individual &lt;code>etcd-backup-restore&lt;/code> sidecars to update the corresponding &lt;code>status.members&lt;/code> entries themselves. But this was redesigned to use &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#member-leases">member &lt;code>leases&lt;/code>&lt;/a> to avoid conflicts rising from frequent updates and the limitations in the support for &lt;a href="https://kubernetes.io/docs/reference/using-api/server-side-apply/">Server-Side Apply&lt;/a> in some versions of Kubernetes.&lt;/p>
&lt;p>The &lt;code>spec.holderIdentity&lt;/code> field in the &lt;code>leases&lt;/code> is used to communicate the ETCD member &lt;code>id&lt;/code> and &lt;code>role&lt;/code> between the &lt;code>etcd-backup-restore&lt;/code> sidecars and &lt;code>etcd-druid&lt;/code>.&lt;/p>
&lt;h4 id="member-name-as-the-key">Member name as the key&lt;/h4>
&lt;p>In an ETCD cluster, the member &lt;code>id&lt;/code> is the &lt;a href="https://etcd.io/docs/v3.4/dev-guide/api_reference_v3/#message-member-etcdserveretcdserverpbrpcproto">unique identifier for a member&lt;/a>.
However, this proposal recommends using a &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#kubernetes-context">single &lt;code>StatefulSet&lt;/code>&lt;/a> whose pods form the members of the ETCD cluster and &lt;code>Pods&lt;/code> of a &lt;code>StatefulSet&lt;/code> have &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#ordinal-index">uniquely indexed names&lt;/a> as well as &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#stable-network-id">uniquely addressible DNS&lt;/a>.&lt;/p>
&lt;p>This proposal recommends that the &lt;code>name&lt;/code> of the member (which is the same as the name of the member &lt;code>Pod&lt;/code>) be used as the unique key to identify a member in the &lt;code>members&lt;/code> array.
This can minimise the need to cleanup superfluous entries in the &lt;code>members&lt;/code> array after the member pods are gone to some extent because the replacement pods for any member will share the same &lt;code>name&lt;/code> and will overwrite the entry with a &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#restarting-an-existing-member-of-an-etcd-cluster">possibly new&lt;/a> member &lt;code>id&lt;/code>.&lt;/p>
&lt;p>There is still the possibility of not only &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#13-superfluous-member-entries-in-etcd-status">superfluous entries in the &lt;code>members&lt;/code> array&lt;/a> but also &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#work-flows-only-on-the-leading-member">superfluous &lt;code>members&lt;/code> in the ETCD cluster&lt;/a> for which there is no corresponding pod in the &lt;code>StatefulSet&lt;/code> anymore.&lt;/p>
&lt;p>For example, if an ETCD cluster is scaled up from &lt;code>3&lt;/code> to &lt;code>5&lt;/code> and the new members were failing constantly due to insufficient resources and then if the ETCD client is scaled back down to &lt;code>3&lt;/code> and failing member pods may not have the chance to clean up their &lt;code>member&lt;/code> entries (from the &lt;code>members&lt;/code> array as well as from the ETCD cluster) leading to superfluous members in the cluster that may have adverse effect on quorum of the cluster.&lt;/p>
&lt;p>Hence, the superfluous entries in both &lt;code>members&lt;/code> array as well as the ETCD cluster need to be &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-12">cleaned up&lt;/a> &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#work-flows-only-on-the-leading-member">as appropriate&lt;/a>.&lt;/p>
&lt;h4 id="member-leases">Member Leases&lt;/h4>
&lt;p>One &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/lease-v1/">Kubernetes &lt;code>lease&lt;/code> object&lt;/a> per desired ETCD member is maintained by &lt;code>etcd-druid&lt;/code> (preferrably, the &lt;code>custodian&lt;/code> controller in &lt;code>etcd-druid&lt;/code>).
The &lt;code>lease&lt;/code> objects will be created in the same &lt;code>namespace&lt;/code> as their owning &lt;code>Etcd&lt;/code> object and will have the same &lt;code>name&lt;/code> as the member to which they correspond (which, in turn would be the same as &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#member-name-as-the-key">the &lt;code>pod&lt;/code> name in which the member ETCD process runs&lt;/a>).&lt;/p>
&lt;p>The &lt;code>lease&lt;/code> objects are created and deleted only by &lt;code>etcd-druid&lt;/code> but are continually renewed within the &lt;code>leaseDurationSeconds&lt;/code> by the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#work-flows-independent-of-leader-election-in-all-members">individual &lt;code>etcd-backup-restore&lt;/code> sidecars&lt;/a> (corresponding to their members) if the the corresponding ETCD member is ready and is part of the ETCD cluster.&lt;/p>
&lt;p>This will mean that &lt;code>etcd-backup-restore&lt;/code> becomes Kubernetes-aware. But there are other reasons for making &lt;code>etcd-backup-restore&lt;/code> Kubernetes-aware anyway (e.g. to &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#health-check">maintain health conditions&lt;/a>).
This enhancement should keep &lt;code>etcd-backup-restore&lt;/code> backward compatible.
But it should be possible to use &lt;code>etcd-backup-restore&lt;/code> Kubernetes-unaware as before this proposal. This is possible either by auto-detecting the existence of kubeconfig or by an explicit command-line flag (such as &lt;code>--enable-etcd-lease-renewal&lt;/code> which can be defaulted to &lt;code>false&lt;/code> for backward compatibility).&lt;/p>
&lt;p>A &lt;code>member&lt;/code> entry in the &lt;code>Etcd&lt;/code> resource &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#status">&lt;code>status&lt;/code>&lt;/a> would be marked as &lt;code>Ready&lt;/code> (with &lt;code>reason: LeaseSucceeded&lt;/code>) if the corresponding &lt;code>pod&lt;/code> is ready and the corresponding &lt;code>lease&lt;/code> has not yet expired.
The &lt;code>member&lt;/code> entry would be marked as &lt;code>NotReady&lt;/code> if the corresponding &lt;code>pod&lt;/code> is not ready (with reason &lt;code>PodNotReady&lt;/code>) or as &lt;code>Unknown&lt;/code> if the corresponding &lt;code>lease&lt;/code> has expired (with &lt;code>reason: LeaseExpired&lt;/code>).&lt;/p>
&lt;p>While renewing the lease, the &lt;code>etcd-backup-restore&lt;/code> sidecars also maintain the ETCD member &lt;code>id&lt;/code> and their &lt;code>role&lt;/code> (&lt;code>Leader&lt;/code> or &lt;code>Member&lt;/code>) separated by &lt;code>:&lt;/code> in the &lt;code>spec.holderIdentity&lt;/code> field of the corresponding &lt;code>lease&lt;/code> object since this information is only available to the &lt;code>ETCD&lt;/code> member processes and the &lt;code>etcd-backup-restore&lt;/code> sidecars (e.g. &lt;code>272e204152:Leader&lt;/code> or &lt;code>272e204153:Member&lt;/code>).
When the &lt;code>lease&lt;/code> objects are created by &lt;code>etcd-druid&lt;/code>, the &lt;code>spec.holderIdentity&lt;/code> field would be empty.&lt;/p>
&lt;p>The value in &lt;code>spec.holderIdentity&lt;/code> in the &lt;code>leases&lt;/code> is parsed and copied onto the &lt;code>id&lt;/code> and &lt;code>role&lt;/code> fields of the corresponding &lt;code>status.members&lt;/code> by &lt;code>etcd-druid&lt;/code>.&lt;/p>
&lt;h3 id="conditions">Conditions&lt;/h3>
&lt;p>The &lt;code>conditions&lt;/code> section in the status describe the overall condition of the ETCD cluster.
The condition type &lt;code>Ready&lt;/code> indicates if the ETCD cluster as a whole is ready to serve requests (i.e. the cluster is quorate) even though some minority of the members are not ready.
The condition type &lt;code>AllMembersReady&lt;/code> indicates of all the members of the ETCD cluster are ready.
The distinction between these conditions could be significant for both external consumers of the status as well as &lt;code>etcd-druid&lt;/code> itself.
Some maintenance operations might be safe to do (e.g. rolling updates) only when all members of the cluster are ready.
The condition type &lt;code>BackupReady&lt;/code> indicates of the most recent backup upload (full or incremental) succeeded.
This information also might be significant because some maintenance operations might be safe to do (e.g. anything that involves re-bootstrapping the ETCD cluster) only when backup is ready.&lt;/p>
&lt;p>The &lt;code>Ready&lt;/code> and &lt;code>AllMembersReady&lt;/code> conditions can be maintained by &lt;code>etcd-druid&lt;/code> based on the status in the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#members">&lt;code>members&lt;/code> section&lt;/a>.
The &lt;code>BackupReady&lt;/code> condition will be maintained by the leading &lt;code>etcd-backup-restore&lt;/code> sidecar that is in charge of taking backups.&lt;/p>
&lt;p>More condition types could be introduced in the future if specific purposes arise.&lt;/p>
&lt;h3 id="clustersize">ClusterSize&lt;/h3>
&lt;p>The &lt;code>clusterSize&lt;/code> field contains the current size of the ETCD cluster. It will be actively kept up-to-date by &lt;code>etcd-druid&lt;/code> in all scenarios.&lt;/p>
&lt;ul>
&lt;li>Before &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#bootstrapping">bootstrapping&lt;/a> the ETCD cluster (during cluster creation or later bootstrapping because of &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-9">quorum failure&lt;/a>), &lt;code>etcd-druid&lt;/code> will clear the &lt;code>status.members&lt;/code> array and set &lt;code>status.clusterSize&lt;/code> to be equal to &lt;code>spec.replicas&lt;/code>.&lt;/li>
&lt;li>While the ETCD cluster is quorate, &lt;code>etcd-druid&lt;/code> will actively set &lt;code>status.clusterSize&lt;/code> to be equal to length of the &lt;code>status.members&lt;/code> whenever the length of the array changes (say, due to scaling of the ETCD cluster).&lt;/li>
&lt;/ul>
&lt;p>Given that &lt;code>clusterSize&lt;/code> reliably represents the size of the ETCD cluster, it can be used to calculate the &lt;code>Ready&lt;/code> &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#conditions">condition&lt;/a>.&lt;/p>
&lt;h3 id="alternative-4">Alternative&lt;/h3>
&lt;p>The alternative is for &lt;code>etcd-druid&lt;/code> to maintain the status in the &lt;code>Etcd&lt;/code> status sub-resource.
But &lt;code>etcd-druid&lt;/code> is centrally deployed in the host Kubernetes cluster and cannot scale well horizontally.
So, it can potentially be a bottleneck if it is involved in regular health check mechanism for all the etcd clusters it manages.
Also, the recommended approach above is more robust because it can work even if &lt;code>etcd-druid&lt;/code> is down when the backup upload of a particular etcd cluster fails.&lt;/p>
&lt;h2 id="decision-table-for-etcd-druid-based-on-the-status">Decision table for etcd-druid based on the status&lt;/h2>
&lt;p>The following decision table describes the various criteria &lt;code>etcd-druid&lt;/code> takes into consideration to determine the different etcd cluster management scenarios and the corresponding reconciliation actions it must take.
The general principle is to detect the scenario and take the minimum action to move the cluster along the path to good health.
The path from any one scenario to a state of good health will typically involve going through multiple reconciliation actions which probably take the cluster through many other cluster management scenarios.
Especially, it is proposed that individual members auto-heal where possible, even in the case of the failure of a majority of members of the etcd cluster and that &lt;code>etcd-druid&lt;/code> takes action only if the auto-healing doesn&amp;rsquo;t happen for a configured period of time.&lt;/p>
&lt;h3 id="1-pink-of-health">1. Pink of health&lt;/h3>
&lt;h4 id="observed-state">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: &lt;code>true&lt;/code>&lt;/li>
&lt;li>AllMembersReady: &lt;code>true&lt;/code>&lt;/li>
&lt;li>BackupReady: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action">Recommended Action&lt;/h4>
&lt;p>Nothing to do&lt;/p>
&lt;h3 id="2-member-status-is-out-of-sync-with-their-leases">2. Member status is out of sync with their leases&lt;/h3>
&lt;h4 id="observed-state-1">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: &lt;code>l&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: &lt;code>true&lt;/code>&lt;/li>
&lt;li>AllMembersReady: &lt;code>true&lt;/code>&lt;/li>
&lt;li>BackupReady: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-1">Recommended Action&lt;/h4>
&lt;p>Mark the &lt;code>l&lt;/code> members corresponding to the expired &lt;code>leases&lt;/code> as &lt;code>Unknown&lt;/code> with reason &lt;code>LeaseExpired&lt;/code> and with &lt;code>id&lt;/code> populated from &lt;code>spec.holderIdentity&lt;/code> of the &lt;code>lease&lt;/code> if they are not already updated so.&lt;/p>
&lt;p>Mark the &lt;code>n - l&lt;/code> members corresponding to the active &lt;code>leases&lt;/code> as &lt;code>Ready&lt;/code> with reason &lt;code>LeaseSucceeded&lt;/code> and with &lt;code>id&lt;/code> populated from &lt;code>spec.holderIdentity&lt;/code> of the &lt;code>lease&lt;/code> if they are not already updated so.&lt;/p>
&lt;p>Please refer &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#member-leases">here&lt;/a> for more details.&lt;/p>
&lt;h3 id="3-all-members-are-ready-but-allmembersready-condition-is-stale">3. All members are &lt;code>Ready&lt;/code> but &lt;code>AllMembersReady&lt;/code> condition is stale&lt;/h3>
&lt;h4 id="observed-state-2">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: N/A&lt;/li>
&lt;li>AllMembersReady: false&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-2">Recommended Action&lt;/h4>
&lt;p>Mark the status condition type &lt;code>AllMembersReady&lt;/code> to &lt;code>true&lt;/code>.&lt;/p>
&lt;h3 id="4-not-all-members-are-ready-but-allmembersready-condition-is-stale">4. Not all members are &lt;code>Ready&lt;/code> but &lt;code>AllMembersReady&lt;/code> condition is stale&lt;/h3>
&lt;h4 id="observed-state-3">Observed state&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Cluster Size&lt;/p>
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>StatefulSet&lt;/code> replicas&lt;/p>
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Etcd&lt;/code> status&lt;/p>
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: N/A&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>0 &amp;lt;= r &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>nr&lt;/code> where &lt;code>0 &amp;lt; nr &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>u&lt;/code> where &lt;code>0 &amp;lt; u &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: &lt;code>h&lt;/code> where &lt;code>0 &amp;lt; h &amp;lt; n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: N/A&lt;/li>
&lt;li>AllMembersReady: true&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>where &lt;code>(nr + u + h) &amp;gt; 0&lt;/code> or &lt;code>r &amp;lt; n&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-3">Recommended Action&lt;/h4>
&lt;p>Mark the status condition type &lt;code>AllMembersReady&lt;/code> to &lt;code>false&lt;/code>.&lt;/p>
&lt;h3 id="5-majority-members-are-ready-but-ready-condition-is-stale">5. Majority members are &lt;code>Ready&lt;/code> but &lt;code>Ready&lt;/code> condition is stale&lt;/h3>
&lt;h4 id="observed-state-4">Observed state&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Cluster Size&lt;/p>
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>StatefulSet&lt;/code> replicas&lt;/p>
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Etcd&lt;/code> status&lt;/p>
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>r &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>nr&lt;/code> where &lt;code>0 &amp;lt; nr &amp;lt; n/2&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>u&lt;/code> where &lt;code>0 &amp;lt; u &amp;lt; n/2&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: &lt;code>false&lt;/code>&lt;/li>
&lt;li>AllMembersReady: N/A&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>where &lt;code>0 &amp;lt; (nr + u + h) &amp;lt; n/2&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-4">Recommended Action&lt;/h4>
&lt;p>Mark the status condition type &lt;code>Ready&lt;/code> to &lt;code>true&lt;/code>.&lt;/p>
&lt;h3 id="6-majority-members-are-notready-but-ready-condition-is-stale">6. Majority members are &lt;code>NotReady&lt;/code> but &lt;code>Ready&lt;/code> condition is stale&lt;/h3>
&lt;h4 id="observed-state-5">Observed state&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Cluster Size&lt;/p>
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>StatefulSet&lt;/code> replicas&lt;/p>
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Etcd&lt;/code> status&lt;/p>
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>0 &amp;lt; r &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>nr&lt;/code> where &lt;code>0 &amp;lt; nr &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>u&lt;/code> where &lt;code>0 &amp;lt; u &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: &lt;code>true&lt;/code>&lt;/li>
&lt;li>AllMembersReady: N/A&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>where &lt;code>(nr + u + h) &amp;gt; n/2&lt;/code> or &lt;code>r &amp;lt; n/2&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-5">Recommended Action&lt;/h4>
&lt;p>Mark the status condition type &lt;code>Ready&lt;/code> to &lt;code>false&lt;/code>.&lt;/p>
&lt;h3 id="7-some-members-have-been-in-unknown-status-for-a-while">7. Some members have been in &lt;code>Unknown&lt;/code> status for a while&lt;/h3>
&lt;h4 id="observed-state-6">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: N/A&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: N/A&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>u&lt;/code> where &lt;code>u &amp;lt;= n&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: N/A&lt;/li>
&lt;li>AllMembersReady: N/A&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-6">Recommended Action&lt;/h4>
&lt;p>Mark the &lt;code>u&lt;/code> members as &lt;code>NotReady&lt;/code> in &lt;code>Etcd&lt;/code> status with &lt;code>reason: UnknownGracePeriodExceeded&lt;/code>.&lt;/p>
&lt;h3 id="8-some-member-pods-are-not-ready-but-have-not-had-the-chance-to-update-their-status">8. Some member pods are not &lt;code>Ready&lt;/code> but have not had the chance to update their status&lt;/h3>
&lt;h4 id="observed-state-7">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>s&lt;/code> where &lt;code>s &amp;lt; n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: N/A&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: N/A&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: N/A&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: N/A&lt;/li>
&lt;li>AllMembersReady: N/A&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-7">Recommended Action&lt;/h4>
&lt;p>Mark the &lt;code>n - s&lt;/code> members (corresponding to the pods that are not &lt;code>Ready&lt;/code>) as &lt;code>NotReady&lt;/code> in &lt;code>Etcd&lt;/code> status with &lt;code>reason: PodNotReady&lt;/code>&lt;/p>
&lt;h3 id="9-quorate-cluster-with-a-minority-of-members-notready">9. Quorate cluster with a minority of members &lt;code>NotReady&lt;/code>&lt;/h3>
&lt;h4 id="observed-state-8">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n - f&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>f&lt;/code> where &lt;code>f &amp;lt; n/2&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: true&lt;/li>
&lt;li>AllMembersReady: false&lt;/li>
&lt;li>BackupReady: true&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-8">Recommended Action&lt;/h4>
&lt;p>Delete the &lt;code>f&lt;/code> &lt;code>NotReady&lt;/code> member pods to force restart of the pods if they do not automatically restart via failed &lt;code>livenessProbe&lt;/code>. The expectation is that they will either re-join the cluster as an existing member or remove themselves and join as new members on restart of the container or pod and &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#member-leases">renew their &lt;code>leases&lt;/code>&lt;/a>.&lt;/p>
&lt;h3 id="10-quorum-lost-with-a-majority-of-members-notready">10. Quorum lost with a majority of members &lt;code>NotReady&lt;/code>&lt;/h3>
&lt;h4 id="observed-state-9">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n - f&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>f&lt;/code> where &lt;code>f &amp;gt;= n/2&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: N/A&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: false&lt;/li>
&lt;li>AllMembersReady: false&lt;/li>
&lt;li>BackupReady: true&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-9">Recommended Action&lt;/h4>
&lt;p>Scale down the &lt;code>StatefulSet&lt;/code> to &lt;code>replicas: 0&lt;/code>. Ensure that all member pods are deleted. Ensure that all the members are removed from &lt;code>Etcd&lt;/code> status. Delete and recreate all the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#member-leases">member &lt;code>leases&lt;/code>&lt;/a>. Recover the cluster from loss of quorum as discussed &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recovering-an-etcd-cluster-from-failure-of-majority-of-members">here&lt;/a>.&lt;/p>
&lt;h3 id="11-scale-up-of-a-healthy-cluster">11. Scale up of a healthy cluster&lt;/h3>
&lt;h4 id="observed-state-10">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: &lt;code>d&lt;/code>&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code> where &lt;code>d &amp;gt; n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: 0&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: 0&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: true&lt;/li>
&lt;li>AllMembersReady: true&lt;/li>
&lt;li>BackupReady: true&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-10">Recommended Action&lt;/h4>
&lt;p>Add &lt;code>d - n&lt;/code> new members by scaling the &lt;code>StatefulSet&lt;/code> to &lt;code>replicas: d&lt;/code>. The rest of the &lt;code>StatefulSet&lt;/code> spec need not be updated until the next cluster bootstrapping (alternatively, the rest of the &lt;code>StatefulSet&lt;/code> spec can be updated pro-actively once the new members join the cluster. This will trigger a rolling update).&lt;/p>
&lt;p>Also, create the additional &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#member-leases">member &lt;code>leases&lt;/code>&lt;/a> for the &lt;code>d - n&lt;/code> new members.&lt;/p>
&lt;h3 id="12-scale-down-of-a-healthy-cluster">12. Scale down of a healthy cluster&lt;/h3>
&lt;h4 id="observed-state-11">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: &lt;code>d&lt;/code>&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code> where &lt;code>d &amp;lt; n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: 0&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: 0&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: true&lt;/li>
&lt;li>AllMembersReady: true&lt;/li>
&lt;li>BackupReady: true&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-11">Recommended Action&lt;/h4>
&lt;p>Remove &lt;code>d - n&lt;/code> existing members (numbered &lt;code>d&lt;/code>, &lt;code>d + 1&lt;/code> &amp;hellip; &lt;code>n&lt;/code>) by scaling the &lt;code>StatefulSet&lt;/code> to &lt;code>replicas: d&lt;/code>. The &lt;code>StatefulSet&lt;/code> spec need not be updated until the next cluster bootstrapping (alternatively, the &lt;code>StatefulSet&lt;/code> spec can be updated pro-actively once the superfluous members exit the cluster. This will trigger a rolling update).&lt;/p>
&lt;p>Also, delete the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#member-leases">member &lt;code>leases&lt;/code>&lt;/a> for the &lt;code>d - n&lt;/code> members being removed.&lt;/p>
&lt;p>The &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#13-superfluous-member-entries-in-etcd-status">superfluous entries in the &lt;code>members&lt;/code> array&lt;/a> will be cleaned up as explained &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-12">here&lt;/a>.
The superfluous members in the ETCD cluster will be cleaned up by the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#work-flows-only-on-the-leading-member">leading &lt;code>etcd-backup-restore&lt;/code> sidecar&lt;/a>.&lt;/p>
&lt;h3 id="13-superfluous-member-entries-in-etcd-status">13. Superfluous member entries in &lt;code>Etcd&lt;/code> status&lt;/h3>
&lt;h4 id="observed-state-12">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: n&lt;/li>
&lt;li>Ready: n&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>m &amp;gt; n&lt;/code>&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: N/A&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: N/A&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: N/A&lt;/li>
&lt;li>AllMembersReady: N/A&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-12">Recommended Action&lt;/h4>
&lt;p>Remove the superfluous &lt;code>m - n&lt;/code> member entries from &lt;code>Etcd&lt;/code> status (numbered &lt;code>n&lt;/code>, &lt;code>n+1&lt;/code> &amp;hellip; &lt;code>m&lt;/code>).
Remove the superfluous &lt;code>m - n&lt;/code> &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#member-leases">member &lt;code>leases&lt;/code>&lt;/a> if they exist.
The superfluous members in the ETCD cluster will be cleaned up by the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#work-flows-only-on-the-leading-member">leading &lt;code>etcd-backup-restore&lt;/code> sidecar&lt;/a>.&lt;/p>
&lt;h2 id="decision-table-for-etcd-backup-restore-during-initialization">Decision table for etcd-backup-restore during initialization&lt;/h2>
&lt;p>As discussed above, the initialization sequence of &lt;code>etcd-backup-restore&lt;/code> in a member pod needs to &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#etcd-configuration">generate suitable etcd configuration&lt;/a> for its etcd container.
It also might have to handle the etcd database verification and restoration functionality differently in &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#restarting-an-existing-member-of-an-etcd-cluster">different&lt;/a> &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recovering-an-etcd-cluster-from-failure-of-majority-of-members">scenarios&lt;/a>.&lt;/p>
&lt;p>The initialization sequence itself is proposed to be as follows.
It is an enhancement of the &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/docs/proposals/design.md#workflow">existing&lt;/a> initialization sequence.
&lt;img src="https://gardener.cloud/__resources/01-etcd-member-initialization-sequence_364f5e.png" alt="etcd member initialization sequence">&lt;/p>
&lt;p>The details of the decisions to be taken during the initialization are given below.&lt;/p>
&lt;h3 id="1-first-member-during-bootstrap-of-a-fresh-etcd-cluster">1. First member during bootstrap of a fresh etcd cluster&lt;/h3>
&lt;h4 id="observed-state-13">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: &lt;code>false&lt;/code>&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: &lt;code>false&lt;/code>&lt;/li>
&lt;li>Backup has incremental snapshots: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-13">Recommended Action&lt;/h4>
&lt;p>Generate etcd configuration with &lt;code>n&lt;/code> initial cluster peer URLs and initial cluster state new and return success.&lt;/p>
&lt;h3 id="2-addition-of-a-new-following-member-during-bootstrap-of-a-fresh-etcd-cluster">2. Addition of a new following member during bootstrap of a fresh etcd cluster&lt;/h3>
&lt;h4 id="observed-state-14">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>0 &amp;lt; m &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>m&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: &lt;code>false&lt;/code>&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: &lt;code>false&lt;/code>&lt;/li>
&lt;li>Backup has incremental snapshots: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-14">Recommended Action&lt;/h4>
&lt;p>Generate etcd configuration with &lt;code>n&lt;/code> initial cluster peer URLs and initial cluster state new and return success.&lt;/p>
&lt;h3 id="3-restart-of-an-existing-member-of-a-quorate-cluster-with-valid-metadata-and-data">3. Restart of an existing member of a quorate cluster with valid metadata and data&lt;/h3>
&lt;h4 id="observed-state-15">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>m &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>r &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: &lt;code>true&lt;/code>&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: N/A&lt;/li>
&lt;li>Backup has incremental snapshots: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-15">Recommended Action&lt;/h4>
&lt;p>Re-use previously generated etcd configuration and return success.&lt;/p>
&lt;h3 id="4-restart-of-an-existing-member-of-a-quorate-cluster-with-valid-metadata-but-without-valid-data">4. Restart of an existing member of a quorate cluster with valid metadata but without valid data&lt;/h3>
&lt;h4 id="observed-state-16">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>m &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>r &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: &lt;code>true&lt;/code>&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: N/A&lt;/li>
&lt;li>Backup has incremental snapshots: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-16">Recommended Action&lt;/h4>
&lt;p>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#removing-an-existing-member-from-an-etcd-cluster">Remove&lt;/a> self as a member (old member ID) from the etcd cluster as well as &lt;code>Etcd&lt;/code> status. &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#adding-a-new-member-to-an-etcd-cluster">Add&lt;/a> self as a new member of the etcd cluster as well as in the &lt;code>Etcd&lt;/code> status. If backups do not exist, create an empty data and WAL directory. If backups exist, restore only the latest full snapshot (please see &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recovering-an-etcd-cluster-from-failure-of-majority-of-members">here&lt;/a> for the reason for not restoring incremental snapshots). Generate etcd configuration with &lt;code>n&lt;/code> initial cluster peer URLs and initial cluster state &lt;code>existing&lt;/code> and return success.&lt;/p>
&lt;h3 id="5-restart-of-an-existing-member-of-a-quorate-cluster-without-valid-metadata">5. Restart of an existing member of a quorate cluster without valid metadata&lt;/h3>
&lt;h4 id="observed-state-17">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>m &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>r &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: &lt;code>false&lt;/code>&lt;/li>
&lt;li>Data directory is valid and up-to-date: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: N/A&lt;/li>
&lt;li>Backup has incremental snapshots: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-17">Recommended Action&lt;/h4>
&lt;p>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#removing-an-existing-member-from-an-etcd-cluster">Remove&lt;/a> self as a member (old member ID) from the etcd cluster as well as &lt;code>Etcd&lt;/code> status. &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#adding-a-new-member-to-an-etcd-cluster">Add&lt;/a> self as a new member of the etcd cluster as well as in the &lt;code>Etcd&lt;/code> status. If backups do not exist, create an empty data and WAL directory. If backups exist, restore only the latest full snapshot (please see &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recovering-an-etcd-cluster-from-failure-of-majority-of-members">here&lt;/a> for the reason for not restoring incremental snapshots). Generate etcd configuration with &lt;code>n&lt;/code> initial cluster peer URLs and initial cluster state &lt;code>existing&lt;/code> and return success.&lt;/p>
&lt;h3 id="6-restart-of-an-existing-member-of-a-non-quorate-cluster-with-valid-metadata-and-data">6. Restart of an existing member of a non-quorate cluster with valid metadata and data&lt;/h3>
&lt;h4 id="observed-state-18">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>m &amp;lt; n/2&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>r &amp;lt; n/2&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: &lt;code>true&lt;/code>&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: N/A&lt;/li>
&lt;li>Backup has incremental snapshots: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-18">Recommended Action&lt;/h4>
&lt;p>Re-use previously generated etcd configuration and return success.&lt;/p>
&lt;h3 id="7-restart-of-the-first-member-of-a-non-quorate-cluster-without-valid-data">7. Restart of the first member of a non-quorate cluster without valid data&lt;/h3>
&lt;h4 id="observed-state-19">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: N/A&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: N/A&lt;/li>
&lt;li>Backup has incremental snapshots: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-19">Recommended Action&lt;/h4>
&lt;p>If backups do not exist, create an empty data and WAL directory. If backups exist, restore the latest full snapshot. Start a single-node embedded etcd with initial cluster peer URLs containing only own peer URL and initial cluster state &lt;code>new&lt;/code>. If incremental snapshots exist, apply them serially (honouring source transactions). Take and upload a full snapshot after incremental snapshots are applied successfully (please see &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recovering-an-etcd-cluster-from-failure-of-majority-of-members">here&lt;/a> for more reasons why). Generate etcd configuration with &lt;code>n&lt;/code> initial cluster peer URLs and initial cluster state &lt;code>new&lt;/code> and return success.&lt;/p>
&lt;h3 id="8-restart-of-a-following-member-of-a-non-quorate-cluster-without-valid-data">8. Restart of a following member of a non-quorate cluster without valid data&lt;/h3>
&lt;h4 id="observed-state-20">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>1 &amp;lt; m &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>1 &amp;lt; r &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: N/A&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: N/A&lt;/li>
&lt;li>Backup has incremental snapshots: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-20">Recommended Action&lt;/h4>
&lt;p>If backups do not exist, create an empty data and WAL directory. If backups exist, restore only the latest full snapshot (please see &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recovering-an-etcd-cluster-from-failure-of-majority-of-members">here&lt;/a> for the reason for not restoring incremental snapshots). Generate etcd configuration with &lt;code>n&lt;/code> initial cluster peer URLs and initial cluster state &lt;code>existing&lt;/code> and return success.&lt;/p>
&lt;h2 id="backup">Backup&lt;/h2>
&lt;p>Only one of the etcd-backup-restore sidecars among the members are required to take the backup for a given ETCD cluster. This can be called a &lt;code>backup leader&lt;/code>. There are two possibilities to ensure this.&lt;/p>
&lt;h3 id="leading-etcd-main-containers-sidecar-is-the-backup-leader">Leading ETCD main container’s sidecar is the backup leader&lt;/h3>
&lt;p>The backup-restore sidecar could poll the etcd cluster and/or its own etcd main container to see if it is the leading member in the etcd cluster.
This information can be used by the backup-restore sidecars to decide that sidecar of the leading etcd main container is the backup leader (i.e. responsible to for taking/uploading backups regularly).&lt;/p>
&lt;p>The advantages of this approach are as follows.&lt;/p>
&lt;ul>
&lt;li>The approach is operationally and conceptually simple. The leading etcd container and backup-restore sidecar are always located in the same pod.&lt;/li>
&lt;li>Network traffic between the backup container and the etcd cluster will always be local.&lt;/li>
&lt;/ul>
&lt;p>The disadvantage is that this approach may not age well in the future if we think about moving the backup-restore container as a separate pod rather than a sidecar container.&lt;/p>
&lt;h3 id="independent-leader-election-between-backup-restore-sidecars">Independent leader election between backup-restore sidecars&lt;/h3>
&lt;p>We could use the etcd &lt;code>lease&lt;/code> mechanism to perform leader election among the backup-restore sidecars. For example, using something like &lt;a href="https://pkg.go.dev/go.etcd.io/etcd/clientv3/concurrency#Election.Campaign">&lt;code>go.etcd.io/etcd/clientv3/concurrency&lt;/code>&lt;/a>.&lt;/p>
&lt;p>The advantage and disadvantages are pretty much the opposite of the approach &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#leading-etcd-main-containers-sidecar-is-the-backup-leader">above&lt;/a>.
The advantage being that this approach may age well in the future if we think about moving the backup-restore container as a separate pod rather than a sidecar container.&lt;/p>
&lt;p>The disadvantages are as follows.&lt;/p>
&lt;ul>
&lt;li>The approach is operationally and conceptually a bit complex. The leading etcd container and backup-restore sidecar might potentially belong to different pods.&lt;/li>
&lt;li>Network traffic between the backup container and the etcd cluster might potentially be across nodes.&lt;/li>
&lt;/ul>
&lt;h2 id="history-compaction">History Compaction&lt;/h2>
&lt;p>This proposal recommends to configure &lt;a href="https://etcd.io/docs/v3.2.17/op-guide/maintenance/#history-compaction">automatic history compaction&lt;/a> on the individual members.&lt;/p>
&lt;h2 id="defragmentation">Defragmentation&lt;/h2>
&lt;p>Defragmentation is already &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/0dfdd50fbfc5ebc88238be3bc79c3ac3fc242c08/cmd/options.go#L209">triggered periodically&lt;/a> by &lt;code>etcd-backup-restore&lt;/code>.
This proposal recommends to enhance this functionality to be performed only by the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#backup">leading&lt;/a> backup-restore container.
The defragmentation must be performed only when etcd cluster is in full health and must be done in a rolling manner for each members to &lt;a href="https://etcd.io/docs/v3.2.17/op-guide/maintenance/#defragmentation">avoid disruption&lt;/a>.
The leading member should be defragmented last after all the rest of the members have been defragmented to minimise potential leadership changes caused by defragmentation.
If the etcd cluster is unhealthy when it is time to trigger scheduled defragmentation, the defragmentation must be postponed until the cluster becomes healthy. This check must be done before triggering defragmentation for each member.&lt;/p>
&lt;h2 id="work-flows-in-etcd-backup-restore">Work-flows in etcd-backup-restore&lt;/h2>
&lt;p>There are different work-flows in etcd-backup-restore.
Some existing flows like initialization, scheduled backups and defragmentation have been enhanced or modified.
Some new work-flows like status updates have been introduced.
Some of these work-flows are sensitive to which &lt;code>etcd-backup-restore&lt;/code> container is &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#backup">leading&lt;/a> and some are not.&lt;/p>
&lt;p>The life-cycle of these work-flows is shown below.
&lt;img src="https://gardener.cloud/__resources/01-etcd-backup-restore-work-flows-life-cycle_eec586.png" alt="etcd-backup-restore work-flows life-cycle">&lt;/p>
&lt;h3 id="work-flows-independent-of-leader-election-in-all-members">Work-flows independent of leader election in all members&lt;/h3>
&lt;ul>
&lt;li>Serve the &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/pkg/server/httpAPI.go#L101-L107">HTTP API&lt;/a> that all members are expected to support currently but some HTTP API call which are used to take &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/5dfcc1f848a9f325d41a24eae4defb70d997c215/pkg/server/httpAPI.go#L103-L105">out-of-sync delta or full snapshot&lt;/a> should delegate the incoming HTTP requests to the &lt;code>leading-sidecar&lt;/code> and one of the possible approach to achieve this is via an &lt;a href="https://pkg.go.dev/net/http/httputil#ReverseProxy.ServeHTTP">HTTP reverse proxy&lt;/a>.&lt;/li>
&lt;li>Check the health of the respective etcd member and renew the corresponding &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#member-leases">member &lt;code>lease&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="work-flows-only-on-the-leading-member">Work-flows only on the leading member&lt;/h3>
&lt;ul>
&lt;li>Take &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#backup">backups&lt;/a> (full and incremental) at configured regular intervals&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#defragmentation">Defragment&lt;/a> all the members sequentially at configured regular intervals&lt;/li>
&lt;li>Cleanup superflous members from the ETCD cluster for which there is no corresponding pod (the &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#ordinal-index">ordinal&lt;/a> in the pod name is greater than the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#clustersize">cluster size&lt;/a>) at regular intervals (or whenever the &lt;code>Etcd&lt;/code> resource &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#status">status&lt;/a> changes by watching it)
&lt;ul>
&lt;li>The cleanup of &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#13-superfluous-member-entries-in-etcd-status">superfluous entries in &lt;code>status.members&lt;/code> array&lt;/a> is already covered &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recommended-action-12">here&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="high-availability">High Availability&lt;/h2>
&lt;p>Considering that high-availability is the primary reason for using a multi-node etcd cluster, it makes sense to distribute the individual member pods of the etcd cluster across different physical nodes.
If the underlying Kubernetes cluster has nodes from multiple availability zones, it makes sense to also distribute the member pods across nodes from different availability zones.&lt;/p>
&lt;p>One possibility to do this is via &lt;a href="https://kubernetes.io/docs/reference/scheduling/policies/#priorities">&lt;code>SelectorSpreadPriority&lt;/code>&lt;/a> of &lt;code>kube-scheduler&lt;/code> but this is only &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/#topologykubernetesiozone">best-effort&lt;/a> and may not always be enforced strictly.&lt;/p>
&lt;p>It is better to use &lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity">pod anti-affinity&lt;/a> to enforce such distribution of member pods.&lt;/p>
&lt;h3 id="zonal-cluster---single-availability-zone">Zonal Cluster - Single Availability Zone&lt;/h3>
&lt;p>A zonal cluster is configured to consist of nodes belonging to only a single availability zone in a region of the cloud provider.
In such a case, we can at best distribute the member pods of a multi-node etcd cluster instance only across different nodes in the configured availability zone.&lt;/p>
&lt;p>This can be done by specifying &lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity">pod anti-affinity&lt;/a> in the specification of the member pods using &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/#kubernetes-io-hostname">&lt;code>kubernetes.io/hostname&lt;/code>&lt;/a> as the topology key.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: apps/v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: StatefulSet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> affinity:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> podAntiAffinity:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requiredDuringSchedulingIgnoredDuringExecution:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - labelSelector: {} &lt;span style="color:#008000"># podSelector that matches the member pods of the given etcd cluster instance&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> topologyKey: &lt;span style="color:#a31515">&amp;#34;kubernetes.io/hostname&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The recommendation is to keep &lt;code>etcd-druid&lt;/code> agnostic of such topics related scheduling and cluster-topology and to use &lt;a href="https://github.com/gardener/kupid">kupid&lt;/a> to &lt;a href="https://github.com/gardener/kupid#mutating-higher-order-controllers">orthogonally inject&lt;/a> the desired &lt;a href="https://github.com/gardener/kupid/blob/master/config/samples/cpsp-pod-affinity-anti-affinity.yaml">pod anti-affinity&lt;/a>.&lt;/p>
&lt;h4 id="alternative-5">Alternative&lt;/h4>
&lt;p>Another option is to build the functionality into &lt;code>etcd-druid&lt;/code> to include the required pod anti-affinity when it provisions the &lt;code>StatefulSet&lt;/code> that manages the member pods.
While this has the advantage of avoiding a dependency on an external component like &lt;a href="https://github.com/gardener/kupid">kupid&lt;/a>, the disadvantage is that we might need to address development or testing use-cases where it might be desirable to avoid distributing member pods and schedule them on as less number of nodes as possible.
Also, as mentioned &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#regional-cluster---multiple-availability-zones">below&lt;/a>, &lt;a href="https://github.com/gardener/kupid">kupid&lt;/a> can be used to distribute member pods of an etcd cluster instance across nodes in a single availability zone as well as across nodes in multiple availability zones with very minor variation.
This keeps the solution uniform regardless of the topology of the underlying Kubernetes cluster.&lt;/p>
&lt;h3 id="regional-cluster---multiple-availability-zones">Regional Cluster - Multiple Availability Zones&lt;/h3>
&lt;p>A regional cluster is configured to consist of nodes belonging to multiple availability zones (typically, three) in a region of the cloud provider.
In such a case, we can distribute the member pods of a multi-node etcd cluster instance across nodes belonging to different availability zones.&lt;/p>
&lt;p>This can be done by specifying &lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity">pod anti-affinity&lt;/a> in the specification of the member pods using &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/#topologykubernetesiozone">&lt;code>topology.kubernetes.io/zone&lt;/code>&lt;/a> as the topology key.
In Kubernetes clusters using Kubernetes release older than &lt;code>1.17&lt;/code>, the older (and now deprecated) &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/#failure-domainbetakubernetesiozone">&lt;code>failure-domain.beta.kubernetes.io/zone&lt;/code>&lt;/a> might have to be used as the topology key.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: apps/v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: StatefulSet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> affinity:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> podAntiAffinity:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requiredDuringSchedulingIgnoredDuringExecution:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - labelSelector: {} &lt;span style="color:#008000"># podSelector that matches the member pods of the given etcd cluster instance&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> topologyKey: &amp;#34;topology.kubernetes.io/zone
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The recommendation is to keep &lt;code>etcd-druid&lt;/code> agnostic of such topics related scheduling and cluster-topology and to use &lt;a href="https://github.com/gardener/kupid">kupid&lt;/a> to &lt;a href="https://github.com/gardener/kupid#mutating-higher-order-controllers">orthogonally inject&lt;/a> the desired &lt;a href="https://github.com/gardener/kupid/blob/master/config/samples/cpsp-pod-affinity-anti-affinity.yaml">pod anti-affinity&lt;/a>.&lt;/p>
&lt;h4 id="alternative-6">Alternative&lt;/h4>
&lt;p>Another option is to build the functionality into &lt;code>etcd-druid&lt;/code> to include the required pod anti-affinity when it provisions the &lt;code>StatefulSet&lt;/code> that manages the member pods.
While this has the advantage of avoiding a dependency on an external component like &lt;a href="https://github.com/gardener/kupid">kupid&lt;/a>, the disadvantage is that such built-in support necessarily limits what kind of topologies of the underlying cluster will be supported.
Hence, it is better to keep &lt;code>etcd-druid&lt;/code> altogether agnostic of issues related to scheduling and cluster-topology.&lt;/p>
&lt;h3 id="poddisruptionbudget">PodDisruptionBudget&lt;/h3>
&lt;p>This proposal recommends that &lt;code>etcd-druid&lt;/code> should deploy &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/disruptions/#pod-disruption-budgets">&lt;code>PodDisruptionBudget&lt;/code>&lt;/a> (&lt;code>minAvailable&lt;/code> set to &lt;code>floor(&amp;lt;cluster size&amp;gt;/2) + 1&lt;/code>) for multi-node etcd clusters (if &lt;code>AllMembersReady&lt;/code> &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#conditions">condition&lt;/a> is &lt;code>true&lt;/code>) to ensure that any planned disruptive operation can try and honour the disruption budget to ensure high availability of the etcd cluster while making potentially disrupting maintenance operations.&lt;/p>
&lt;p>Also, it is recommended to toggle the &lt;code>minAvailable&lt;/code> field between &lt;code>floor(&amp;lt;cluster size&amp;gt;/2)&lt;/code> and &lt;code>&amp;lt;number of members with status Ready true&amp;gt;&lt;/code> whenever the &lt;code>AllMembersReady&lt;/code> condition toggles between &lt;code>true&lt;/code> and &lt;code>false&lt;/code>.
This is to disable eviction of any member pods when not all members are &lt;code>Ready&lt;/code>.&lt;/p>
&lt;p>In case of a conflict, the recommendation is to use the highest of the applicable values for &lt;code>minAvailable&lt;/code>.&lt;/p>
&lt;h2 id="rolling-updates-to-etcd-members">Rolling updates to etcd members&lt;/h2>
&lt;p>Any changes to the &lt;code>Etcd&lt;/code> resource spec that might result in a change to &lt;code>StatefulSet&lt;/code> spec or otherwise result in a rolling update of member pods should be applied/propagated by &lt;code>etcd-druid&lt;/code> only when the etcd cluster is fully healthy to reduce the risk of quorum loss during the updates.
This would include vertical autoscaling changes (via, &lt;a href="https://github.com/gardener/hvpa-controller">HVPA&lt;/a>).
If the cluster &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#status">status&lt;/a> unhealthy (i.e. if either &lt;code>AllMembersReady&lt;/code> or &lt;code>BackupReady&lt;/code> &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#conditions">conditions&lt;/a> are &lt;code>false&lt;/code>), &lt;code>etcd-druid&lt;/code> must restore it to full health &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#backup-failure">before proceeding&lt;/a> with such operations that lead to rolling updates.
This can be further optimized in the future to handle the cases where rolling updates can still be performed on an etcd cluster that is not fully healthy.&lt;/p>
&lt;h2 id="follow-up">Follow Up&lt;/h2>
&lt;h3 id="ephemeral-volumes">Ephemeral Volumes&lt;/h3>
&lt;p>See section &lt;em>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#Ephemeral_Volumes">Ephemeral Volumes&lt;/a>&lt;/em>.&lt;/p>
&lt;h3 id="shoot-control-plane-migration">Shoot Control-Plane Migration&lt;/h3>
&lt;p>This proposal adds support for multi-node etcd clusters but it should not have significant impact on &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/07-shoot-control-plane-migration.md">shoot control-plane migration&lt;/a> any more than what already present in the single-node etcd cluster scenario.
But to be sure, this needs to be discussed further.&lt;/p>
&lt;h3 id="performance-impact-of-multi-node-etcd-clusters">Performance impact of multi-node etcd clusters&lt;/h3>
&lt;p>Multi-node etcd clusters incur a cost on &lt;a href="https://etcd.io/docs/v2/admin_guide/#optimal-cluster-size">write performance&lt;/a> as compared to single-node etcd clusters.
This performance impact needs to be measured and documented.
Here, we should compare different persistence option for the multi-nodeetcd clusters so that we have all the information necessary to take the decision balancing the high-availability, performance and costs.&lt;/p>
&lt;h3 id="metrics-dashboards-and-alerts">Metrics, Dashboards and Alerts&lt;/h3>
&lt;p>There are already metrics exported by etcd and &lt;code>etcd-backup-restore&lt;/code> which are visualized in monitoring dashboards and also used in triggering alerts.
These might have hidden assumptions about single-node etcd clusters.
These might need to be enhanced and potentially new metrics, dashboards and alerts configured to cover the multi-node etcd cluster scenario.&lt;/p>
&lt;p>Especially, a high priority alert must be raised if &lt;code>BackupReady&lt;/code> &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#condition">condition&lt;/a> becomes &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#backup-failure">&lt;code>false&lt;/code>&lt;/a>.&lt;/p>
&lt;h3 id="costs">Costs&lt;/h3>
&lt;p>Multi-node etcd clusters will clearly involve higher cost (when compared with single-node etcd clusters) just going by the CPU and memory usage for the additional members.
Also, the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#data-persistence">different options&lt;/a> for persistence for etcd data for the members will have different cost implications.
Such cost impact needs to be assessed and documented to help navigate the trade offs between high availability, performance and costs.&lt;/p>
&lt;h2 id="future-work">Future Work&lt;/h2>
&lt;h3 id="gardener-ring">Gardener Ring&lt;/h3>
&lt;p>&lt;a href="https://github.com/gardener/gardener/issues/233">Gardener Ring&lt;/a>, requires provisioning and management of an etcd cluster with the members distributed across more than one Kubernetes cluster.
This cannot be achieved by etcd-druid alone which has only the view of a single Kubernetes cluster.
An additional component that has the view of all the Kubernetes clusters involved in setting up the gardener ring will be required to achieve this.
However, etcd-druid can be used by such a higher-level component/controller (for example, by supplying the initial cluster configuration) such that individual etcd-druid instances in the individual Kubernetes clusters can manage the corresponding etcd cluster members.&lt;/p>
&lt;h3 id="autonomous-shoot-clusters">Autonomous Shoot Clusters&lt;/h3>
&lt;p>&lt;a href="https://github.com/gardener/gardener/issues/2906">Autonomous Shoot Clusters&lt;/a> also will require a highly availble etcd cluster to back its control-plane and the multi-node support proposed here can be leveraged in that context.
However, the current proposal will not meet all the needs of a autonomous shoot cluster.
Some additional components will be required that have the overall view of the autonomous shoot cluster and they can use etcd-druid to manage the multi-node etcd cluster. But this scenario may be different from that of &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#gardener-ring">Gardener Ring&lt;/a> in that the individual etcd members of the cluster may not be hosted on different Kubernetes clusters.&lt;/p>
&lt;h3 id="optimization-of-recovery-from-non-quorate-cluster-with-some-member-containing-valid-data">Optimization of recovery from non-quorate cluster with some member containing valid data&lt;/h3>
&lt;p>It might be possible to optimize the actions during the recovery of a non-quorate cluster where some of the members contain valid data and some other don&amp;rsquo;t.
The optimization involves verifying the data of the valid members to determine the data of which member is the most recent (even considering the latest backup) so that the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#recovering-an-etcd-cluster-from-failure-of-majority-of-members">full snapshot&lt;/a> can be taken from it before recovering the etcd cluster.
Such an optimization can be attempted in the future.&lt;/p>
&lt;h3 id="optimization-of-rolling-updates-to-unhealthy-etcd-clusters">Optimization of rolling updates to unhealthy etcd clusters&lt;/h3>
&lt;p>As mentioned &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/#rolling-updates-to-etcd-members">above&lt;/a>, optimizations to proceed with rolling updates to unhealthy etcd clusters (without first restoring the cluster to full health) can be pursued in future work.&lt;/p></description></item><item><title>Docs: 02 Snapshot Compaction</title><link>https://gardener.cloud/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/</guid><description>
&lt;h1 id="snapshot-compaction-for-etcd">Snapshot Compaction for Etcd&lt;/h1>
&lt;h2 id="current-problem">Current Problem&lt;/h2>
&lt;p>To ensure recoverability of Etcd, backups of the database are taken at regular interval.
Backups are of two types: Full Snapshots and Incremental Snapshots.&lt;/p>
&lt;h3 id="full-snapshots">Full Snapshots&lt;/h3>
&lt;p>Full snapshot is a snapshot of the complete database at given point in time.The size of the database keeps changing with time and typically the size is relatively large (measured in 100s of megabytes or even in gigabytes. For this reason, full snapshots are taken after some large intervals.&lt;/p>
&lt;h3 id="incremental-snapshots">Incremental Snapshots&lt;/h3>
&lt;p>Incremental Snapshots are collection of events on Etcd database, obtained through running WATCH API Call on Etcd. After some short intervals, all the events that are accumulated through WATCH API Call are saved in a file and named as Incremental Snapshots at relatively short time intervals.&lt;/p>
&lt;h3 id="recovery-from-the-snapshots">Recovery from the Snapshots&lt;/h3>
&lt;h4 id="recovery-from-full-snapshots">Recovery from Full Snapshots&lt;/h4>
&lt;p>As the full snapshots are snapshots of the complete database, the whole database can be recovered from a full snapshot in one go. Etcd provides API Call to restore the database from a full snapshot file.&lt;/p>
&lt;h4 id="recovery-from-incremental-snapshots">Recovery from Incremental Snapshots&lt;/h4>
&lt;p>Delta snapshots are collection of retrospective Etcd events. So, to restore from Incremental snapshot file, the events from the file are needed to be applied sequentially on Etcd database through Etcd Put/Delete API calls. As it is heavily dependent on Etcd calls sequentially, restoring from Incremental Snapshot files can take long if there are numerous commands captured in Incremental Snapshot files.&lt;/p>
&lt;p>Delta snapshots are applied on top of running Etcd database. So, if there is inconsistency between the state of database at the point of applying and the state of the database when the delta snapshot commands were captured, restoration will fail.&lt;/p>
&lt;p>Currently, in Gardener setup, Etcd is restored from the last full snapshot and then the delta snapshots, which were captured after the last full snapshot.&lt;/p>
&lt;p>The main problem with this is that the complete restoration time can be unacceptably large if the rate of change coming into the etcd database is quite high because there are large number of events in the delta snapshots to be applied sequentially.
A secondary problem is that, though auto-compaction is enabled for etcd, it is not quick enough to compact all the changes from the incremental snapshots being re-applied during the relatively short period of time of restoration (as compared to the actual period of time when the incremental snapshots were accumulated). This may lead to the etcd pod (the backup-restore sidecar container, to be precise) to run out of memory and/or storage space even if it is sufficient for normal operations.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;h3 id="compaction-command">Compaction command&lt;/h3>
&lt;p>To help with the problem mentioned earlier, our proposal is to introduce &lt;code>compact&lt;/code> subcommand with &lt;code>etcdbrctl&lt;/code>. On execution of &lt;code>compact&lt;/code> command, A separate embedded Etcd process will be started where the Etcd data will be restored from the snapstore (exactly as in the restoration scenario today). Then the new Etcd database will be compacted and defragmented using Etcd API calls. The compaction will strip off the Etcd database of old revisions as per the Etcd auto-compaction configuration. The defragmentation will free up the unused fragment memory space released after compaction. Then a full snapshot of the compacted database will be saved in snapstore which then can be used as the base snapshot during any subsequent restoration (or backup compaction).&lt;/p>
&lt;h3 id="how-the-solution-works">How the solution works&lt;/h3>
&lt;p>The newly introduced compact command does not disturb the running Etcd while compacting the backup snapshots. The command is designed to run potentially separately (from the main Etcd process/container/pod). Etcd Druid can be configured to run the newly introduced compact command as a separate job (scheduled periodically) based on total number of Etcd events accumulated after the most recent full snapshot.&lt;/p>
&lt;h3 id="etcd-druid-flags">Etcd-druid flags:&lt;/h3>
&lt;p>Etcd-druid introduces the following flags to configure the compaction job:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--enable-backup-compaction&lt;/code> (default &lt;code>false&lt;/code>): Set this flag to &lt;code>true&lt;/code> to enable the automatic compaction of etcd backups when the threshold value denoted by CLI flag &lt;code>--etcd-events-threshold&lt;/code> is exceeded.&lt;/li>
&lt;li>&lt;code>--compaction-workers&lt;/code> (default &lt;code>3&lt;/code>): Number of worker threads of the CompactionJob controller. The controller creates a backup compaction job if a certain etcd event threshold is reached. If compaction is enabled, the value for this flag must be greater than zero.&lt;/li>
&lt;li>&lt;code>--etcd-events-threshold&lt;/code> (default &lt;code>1000000&lt;/code>): Total number of etcd events that can be allowed before a backup compaction job is triggered.&lt;/li>
&lt;li>&lt;code>--active-deadline-duration&lt;/code> (default &lt;code>3h&lt;/code>): Duration after which a running backup compaction job will be terminated.&lt;/li>
&lt;li>&lt;code>--metrics-scrape-wait-duration&lt;/code> (default &lt;code>0s&lt;/code>): Duration to wait for after compaction job is completed, to allow Prometheus metrics to be scraped.&lt;/li>
&lt;/ul>
&lt;h3 id="points-to-take-care-while-saving-the-compacted-snapshot">&lt;strong>Points to take care while saving the compacted snapshot:&lt;/strong>&lt;/h3>
&lt;p>As compacted snapshot and the existing periodic full snapshots are taken by different processes running in different pods but accessing same store to save the snapshots, some problems may arise:&lt;/p>
&lt;ol>
&lt;li>When uploading the compacted snapshot to the snapstore, there is the problem of how does the restorer know when to start using the newly compacted snapshot. This communication needs to be atomic.&lt;/li>
&lt;li>With a regular schedule for compaction that happens potentially separately from the main etcd pod, is there a need for regular scheduled full snapshots anymore?&lt;/li>
&lt;li>We are planning to introduce new directory structure, under v2 prefix, for saving the snapshots (compacted and full), as mentioned in details below. But for backward compatibility, we also need to consider the older directory, which is currently under v1 prefix, during accessing snapshots.&lt;/li>
&lt;/ol>
&lt;h4 id="how-to-swap-full-snapshot-with-compacted-snapshot-atomically">&lt;strong>How to swap full snapshot with compacted snapshot atomically&lt;/strong>&lt;/h4>
&lt;p>Currently, full snapshots and the subsequent delta snapshots are grouped under same prefix path in the snapstore. When a full snapshot is created, it is placed under a prefix/directory with the name comprising of timestamp. Then subsequent delta snapshots are also pushed into the same directory. Thus each prefix/directory contains a single full snapshot and the subsequent delta snapshots. So far, it is the job of ETCDBR to start main Etcd process and snapshotter process which takes full snapshot and delta snapshot periodically. But as per our proposal, compaction will be running as parallel process to main Etcd process and snapshotter process. So we can&amp;rsquo;t reliably co-ordinate between the processes to achieve switching to the compacted snapshot as the base snapshot atomically.&lt;/p>
&lt;h5 id="current-directory-structure">&lt;strong>Current Directory Structure&lt;/strong>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- Backup-192345
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-0-1-192345
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-1-100-192355
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-100-200-192365
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-200-300-192375
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Backup-192789
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-0-300-192789
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-300-400-192799
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-400-500-192809
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-500-600-192819
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To solve the problem, proposal is:&lt;/p>
&lt;ol>
&lt;li>ETCDBR will take the first full snapshot after it starts main Etcd Process and snapshotter process. After taking the first full snapshot, snapshotter will continue taking full snapshots. On the other hand, ETCDBR compactor command will be run as periodic job in a separate pod and use the existing full or compacted snapshots to produce further compacted snapshots. Full snapshots and compacted snapshots will be named after same fashion. So, there is no need of any mechanism to choose which snapshots(among full and compacted snapshot) to consider as base snapshots.&lt;/li>
&lt;li>Flatten the directory structure of backup folder. Save all the full snapshots, delta snapshots and compacted snapshots under same directory/prefix. Restorer will restore from full/compacted snapshots and delta snapshots sorted based on the revision numbers in name (or timestamp if the revision numbers are equal).&lt;/li>
&lt;/ol>
&lt;h5 id="proposed-directory-structure">&lt;strong>Proposed Directory Structure&lt;/strong>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>Backup :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-0-1-192355 (Taken by snapshotter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-1-100-192365
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-100-200-192375
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-revision-0-200-192379 (Taken by snapshotter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-200-300-192385
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-revision-0-300-192386 (Taken by compaction job)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-300-400-192396
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-400-500-192406
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-500-600-192416
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-revision-0-600-192419 (Taken by snapshotter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-revision-0-600-192420 (Taken by compaction job)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="what-happens-to-the-delta-snapshots-that-were-compacted">What happens to the delta snapshots that were compacted?&lt;/h5>
&lt;p>The proposed &lt;code>compaction&lt;/code> sub-command in &lt;code>etcdbrctl&lt;/code> (and hence, the &lt;code>CronJob&lt;/code> provisioned by &lt;code>etcd-druid&lt;/code> that will schedule it at a regular interval) would only upload the compacted full snapshot.
It will not delete the snapshots (delta or full snapshots) that were compacted.
These snapshots which were superseded by a freshly uploaded compacted snapshot would follow the same life-cycle as other older snapshots.
I.e. they will be garbage collected according to the configured backup snapshot retention policy.
For example, if an &lt;code>exponential&lt;/code> retention policy is configured and if compaction is done every &lt;code>30m&lt;/code> then there might be at most &lt;code>48&lt;/code> additional (compacted) full snapshots (&lt;code>24h * 2&lt;/code>) in the backup for the latest day. As time rolls forward to the next day, these additional compacted snapshots (along with the delta snapshots that were compacted into them) will get garbage collected retaining only one full snapshot for the day before according to the retention policy.&lt;/p>
&lt;h5 id="future-work">&lt;strong>Future work&lt;/strong>&lt;/h5>
&lt;p>In the future, we have plan to stop the snapshotter just after taking the first full snapshot. Then, the compaction job will be solely responsible for taking subsequent full snapshots. The directory structure would be looking like following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>Backup :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-0-1-192355 (Taken by snapshotter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-1-100-192365
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-100-200-192375
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-200-300-192385
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-revision-0-300-192386 (Taken by compaction job)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-300-400-192396
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-400-500-192406
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-500-600-192416
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-revision-0-600-192420 (Taken by compaction job)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="backward-compatibility">Backward Compatibility&lt;/h4>
&lt;ol>
&lt;li>&lt;strong>Restoration&lt;/strong> : The changes to handle the newly proposed backup directory structure must be backward compatible with older structures at least for restoration because we need have to restore from backups in the older structure. This includes the support for restoring from a backup without a metadata file if that is used in the actual implementation.&lt;/li>
&lt;li>&lt;strong>Backup&lt;/strong> : For new snapshots (even on a backup containing the older structure), the new structure may be used. The new structure must be setup automatically including creating the base full snapshot.&lt;/li>
&lt;li>&lt;strong>Garbage collection&lt;/strong> : The existing functionality of garbage collection of snapshots (full and incremental) according to the backup retention policy must be compatible with both old and new backup folder structure. I.e. the snapshots in the older backup structure must be retained in their own structure and the snapshots in the proposed backup structure should be retained in the proposed structure. Once all the snapshots in the older backup structure go out of the retention policy and are garbage collected, we can think of removing the support for older backup folder structure.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Note:&lt;/strong> Compactor will run parallel to current snapshotter process and work only if there is any full snapshot already present in the store. By current design, a full snapshot will be taken if there is already no full snapshot or the existing full snapshot is older than 24 hours. It is not limitation but a design choice. As per proposed design, the backup storage will contain both periodic full snapshots as well as periodic compacted snapshot. Restorer will pickup the base snapshot whichever is latest one.&lt;/p></description></item><item><title>Docs: 03 Scaling Up An Etcd Cluster</title><link>https://gardener.cloud/docs/other-components/etcd-druid/proposals/03-scaling-up-an-etcd-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/proposals/03-scaling-up-an-etcd-cluster/</guid><description>
&lt;h1 id="scaling-up-a-single-node-to-multi-node-etcd-cluster-deployed-by-etcd-druid">Scaling-up a single-node to multi-node etcd cluster deployed by etcd-druid&lt;/h1>
&lt;p>To mark a cluster for scale-up from single node to multi-node etcd, just patch the etcd custom resource&amp;rsquo;s &lt;code>.spec.replicas&lt;/code> from &lt;code>1&lt;/code> to &lt;code>3&lt;/code> (for example).&lt;/p>
&lt;h2 id="challenges-for-scale-up">Challenges for scale-up&lt;/h2>
&lt;ol>
&lt;li>Etcd cluster with single replica don&amp;rsquo;t have any peers, so no peer communication is required hence peer URL may or may not be TLS enabled. However, while scaling up from single node etcd to multi-node etcd, there will be a requirement to have peer communication between members of the etcd cluster. Peer communication is required for various reasons, for instance for members to sync up cluster state, data, and to perform leader election or any cluster wide operation like removal or addition of a member etc. Hence in a multi-node etcd cluster we need to have TLS enable peer URL for peer communication.&lt;/li>
&lt;li>Providing the correct configuration to start new etcd members as it is different from boostrapping a cluster since these new etcd members will join an existing cluster.&lt;/li>
&lt;/ol>
&lt;h2 id="approach">Approach&lt;/h2>
&lt;p>We first went through the etcd doc of &lt;a href="https://etcd.io/docs/v3.4/op-guide/runtime-configuration/#update-advertise-peer-urls">update-advertise-peer-urls&lt;/a> to find out information regarding peer URL updation. Interestingly, etcd doc has mentioned the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>To update the advertise peer URLs of a member, first update it explicitly via member command and then restart the member.
&lt;/code>&lt;/pre>&lt;p>But we can&amp;rsquo;t assume peer URL is not TLS enabled for single-node cluster as it depends on end-user. A user may or may not enable the TLS for peer URL for a single node etcd cluster. So, How do we detect whether peer URL was enabled or not when cluster is marked for scale-up?&lt;/p>
&lt;h2 id="detecting-if-peerurl-tls-is-enabled-or-not">Detecting if peerURL TLS is enabled or not&lt;/h2>
&lt;p>For this we use an annotation in member lease object &lt;code>member.etcd.gardener.cloud/tls-enabled&lt;/code> set by backup-restore sidecar of etcd. As etcd configuration is provided by backup-restore, so it can find out whether TLS is enabled or not and accordingly set this annotation &lt;code>member.etcd.gardener.cloud/tls-enabled&lt;/code> to either &lt;code>true&lt;/code> or &lt;code>false&lt;/code> in member lease object.
And with the help of this annotation and config-map values etcd-druid is able to detect whether there is a change in a peer URL or not.&lt;/p>
&lt;h2 id="etcd-druid-helps-in-scaling-up-etcd-cluster">Etcd-Druid helps in scaling up etcd cluster&lt;/h2>
&lt;p>Now, it is detected whether peer URL was TLS enabled or not for single node etcd cluster. Etcd-druid can now use this information to take action:&lt;/p>
&lt;ul>
&lt;li>If peer URL was already TLS enabled then no action is required from etcd-druid side. Etcd-druid can proceed with scaling up the cluster.&lt;/li>
&lt;li>If peer URL was not TLS enabled then etcd-druid has to intervene and make sure peer URL should be TLS enabled first for the single node before marking the cluster for scale-up.&lt;/li>
&lt;/ul>
&lt;h2 id="action-taken-by-etcd-druid-to-enable-the-peerurl-tls">Action taken by etcd-druid to enable the peerURL TLS&lt;/h2>
&lt;ol>
&lt;li>Etcd-druid will update the &lt;code>etcd-bootstrap&lt;/code> config-map with new config like initial-cluster,initial-advertise-peer-urls etc. Backup-restore will detect this change and update the member lease annotation to &lt;code>member.etcd.gardener.cloud/tls-enabled: &amp;quot;true&amp;quot;&lt;/code>.&lt;/li>
&lt;li>In case the peer URL TLS has been changed to &lt;code>enabled&lt;/code>: Etcd-druid will add tasks to the deployment flow:
&lt;ul>
&lt;li>Check if peer TLS has been enabled for existing StatefulSet pods, by checking the member leases for the annotation &lt;code>member.etcd.gardener.cloud/tls-enabled&lt;/code>.&lt;/li>
&lt;li>If peer TLS enablement is pending for any of the members, then check and patch the StatefulSet with the peer TLS volume mounts, if not already patched. This will cause a rolling update of the existing StatefulSet pods, which allows etcd-backup-restore to update the member peer URL in the etcd cluster.&lt;/li>
&lt;li>Requeue this reconciliation flow until peer TLS has been enabled for all the existing etcd members.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="after-peerurl-is-tls-enabled">After PeerURL is TLS enabled&lt;/h2>
&lt;p>After peer URL TLS enablement for single node etcd cluster, now etcd-druid adds a scale-up annotation: &lt;code>gardener.cloud/scaled-to-multi-node&lt;/code> to the etcd statefulset and etcd-druid will patch the statefulsets &lt;code>.spec.replicas&lt;/code> to &lt;code>3&lt;/code>(for example). The statefulset controller will then bring up new pods(etcd with backup-restore as a sidecar). Now etcd&amp;rsquo;s sidecar i.e backup-restore will check whether this member is already a part of a cluster or not and incase it is unable to check (may be due to some network issues) then backup-restore checks presence of this annotation: &lt;code>gardener.cloud/scaled-to-multi-node&lt;/code> in etcd statefulset to detect scale-up. If it finds out it is the scale-up case then backup-restore adds new etcd member as a &lt;a href="https://etcd.io/docs/v3.3/learning/learner/">learner&lt;/a> first and then starts the etcd learner by providing the correct configuration. Once learner gets in sync with the etcd cluster leader, it will get promoted to a voting member.&lt;/p>
&lt;h2 id="providing-the-correct-etcd-config">Providing the correct etcd config&lt;/h2>
&lt;p>As backup-restore detects that it&amp;rsquo;s a scale-up scenario, backup-restore sets &lt;code>initial-cluster-state&lt;/code> to &lt;code>existing&lt;/code> as this member will join an existing cluster and it calculates the rest of the config from the updated config-map provided by etcd-druid.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/03-scale-up-sequenceDiagram_76558b.png" alt="Sequence diagram">&lt;/p>
&lt;h2 id="future-improvements">Future improvements:&lt;/h2>
&lt;p>The need of restarting etcd pods twice will change in the future. please refer: &lt;a href="https://github.com/gardener/etcd-backup-restore/issues/538">https://github.com/gardener/etcd-backup-restore/issues/538&lt;/a>&lt;/p></description></item><item><title>Docs: Cli Flags</title><link>https://gardener.cloud/docs/other-components/etcd-druid/deployment/cli-flags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/deployment/cli-flags/</guid><description>
&lt;h1 id="cli-flags">CLI Flags&lt;/h1>
&lt;p>Etcd-druid exposes the following CLI flags that allow for configuring its behavior.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CLI FLag&lt;/th>
&lt;th>Component&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>feature-gates&lt;/code>&lt;/td>
&lt;td>&lt;code>etcd-druid&lt;/code>&lt;/td>
&lt;td>A set of key=value pairs that describe feature gates for alpha/experimental features. Please check &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/deployment/feature-gates/">feature-gates&lt;/a> for more information.&lt;/td>
&lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>metrics-bind-address&lt;/code>&lt;/td>
&lt;td>&lt;code>controller-manager&lt;/code>&lt;/td>
&lt;td>The IP address that the metrics endpoint binds to.&lt;/td>
&lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>metrics-port&lt;/code>&lt;/td>
&lt;td>&lt;code>controller-manager&lt;/code>&lt;/td>
&lt;td>The port used for the metrics endpoint.&lt;/td>
&lt;td>&lt;code>8080&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>metrics-addr&lt;/code>&lt;/td>
&lt;td>&lt;code>controller-manager&lt;/code>&lt;/td>
&lt;td>The fully qualified address:port that the metrics endpoint binds to.&lt;br />Deprecated: this field will be eventually removed. Please use &lt;code>--metrics-bind-address&lt;/code> and &amp;ndash;&lt;code>metrics-port&lt;/code> instead.&lt;/td>
&lt;td>&lt;code>&amp;quot;:8080&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>webhook-server-bind-address&lt;/code>&lt;/td>
&lt;td>&lt;code>controller-manager&lt;/code>&lt;/td>
&lt;td>The IP address on which to listen for the HTTPS webhook server.&lt;/td>
&lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>webhook-server-port&lt;/code>&lt;/td>
&lt;td>&lt;code>controller-manager&lt;/code>&lt;/td>
&lt;td>The port on which to listen for the HTTPS webhook server.&lt;/td>
&lt;td>&lt;code>9443&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>webhook-server-tls-server-cert-dir&lt;/code>&lt;/td>
&lt;td>&lt;code>controller-manager&lt;/code>&lt;/td>
&lt;td>The path to a directory containing the server&amp;rsquo;s TLS certificate and key (the files must be named tls.crt and tls.key respectively).&lt;/td>
&lt;td>&lt;code>&amp;quot;/etc/webhook-server-tls&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>enable-leader-election&lt;/code>&lt;/td>
&lt;td>&lt;code>controller-manager&lt;/code>&lt;/td>
&lt;td>Enable leader election for controller manager. Enabling this will ensure there is only one active controller manager.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>leader-election-id&lt;/code>&lt;/td>
&lt;td>&lt;code>controller-manager&lt;/code>&lt;/td>
&lt;td>Name of the resource that leader election will use for holding the leader lock.&lt;/td>
&lt;td>&lt;code>&amp;quot;druid-leader-election&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>leader-election-resource-lock&lt;/code>&lt;/td>
&lt;td>&lt;code>controller-manager&lt;/code>&lt;/td>
&lt;td>Specifies which resource type to use for leader election. Supported options are &amp;rsquo;endpoints&amp;rsquo;, &amp;lsquo;configmaps&amp;rsquo;, &amp;rsquo;leases&amp;rsquo;, &amp;rsquo;endpointsleases&amp;rsquo; and &amp;lsquo;configmapsleases&amp;rsquo;.&lt;br />Deprecated. Will be removed in the future in favour of using only &lt;code>leases&lt;/code> as the leader election resource lock for the controller manager.&lt;/td>
&lt;td>&lt;code>&amp;quot;leases&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>disable-lease-cache&lt;/code>&lt;/td>
&lt;td>&lt;code>controller-manager&lt;/code>&lt;/td>
&lt;td>Disable cache for lease.coordination.k8s.io resources.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>etcd-workers&lt;/code>&lt;/td>
&lt;td>&lt;code>etcd-controller&lt;/code>&lt;/td>
&lt;td>Number of workers spawned for concurrent reconciles of etcd spec and status changes. If not specified then default of 3 is assumed.&lt;/td>
&lt;td>&lt;code>3&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ignore-operation-annotation&lt;/code>&lt;/td>
&lt;td>&lt;code>etcd-controller&lt;/code>&lt;/td>
&lt;td>Specifies whether to ignore or honour the annotation &lt;code>gardener.cloud/operation: reconcile&lt;/code> on resources to be reconciled.&lt;br />Deprecated: please use &lt;code>--enable-etcd-spec-auto-reconcile&lt;/code> instead.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>enable-etcd-spec-auto-reconcile&lt;/code>&lt;/td>
&lt;td>&lt;code>etcd-controller&lt;/code>&lt;/td>
&lt;td>If true then automatically reconciles Etcd Spec. If false, waits for explicit annotation &lt;code>gardener.cloud/operation: reconcile&lt;/code> to be placed on the Etcd resource to trigger reconcile.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>disable-etcd-serviceaccount-automount&lt;/code>&lt;/td>
&lt;td>&lt;code>etcd-controller&lt;/code>&lt;/td>
&lt;td>If true then .automountServiceAccountToken will be set to false for the ServiceAccount created for etcd StatefulSets.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>etcd-status-sync-period&lt;/code>&lt;/td>
&lt;td>&lt;code>etcd-controller&lt;/code>&lt;/td>
&lt;td>Period after which an etcd status sync will be attempted.&lt;/td>
&lt;td>&lt;code>15s&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>etcd-member-notready-threshold&lt;/code>&lt;/td>
&lt;td>&lt;code>etcd-controller&lt;/code>&lt;/td>
&lt;td>Threshold after which an etcd member is considered not ready if the status was unknown before.&lt;/td>
&lt;td>&lt;code>5m&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>etcd-member-unknown-threshold&lt;/code>&lt;/td>
&lt;td>&lt;code>etcd-controller&lt;/code>&lt;/td>
&lt;td>Threshold after which an etcd member is considered unknown.&lt;/td>
&lt;td>&lt;code>1m&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>enable-backup-compaction&lt;/code>&lt;/td>
&lt;td>&lt;code>compaction-controller&lt;/code>&lt;/td>
&lt;td>Enable automatic compaction of etcd backups.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>compaction-workers&lt;/code>&lt;/td>
&lt;td>&lt;code>compaction-controller&lt;/code>&lt;/td>
&lt;td>Number of worker threads of the CompactionJob controller. The controller creates a backup compaction job if a certain etcd event threshold is reached. If compaction is enabled, the value for this flag must be greater than zero.&lt;/td>
&lt;td>&lt;code>3&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>etcd-events-threshold&lt;/code>&lt;/td>
&lt;td>&lt;code>compaction-controller&lt;/code>&lt;/td>
&lt;td>Total number of etcd events that can be allowed before a backup compaction job is triggered.&lt;/td>
&lt;td>&lt;code>1000000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>active-deadline-duration&lt;/code>&lt;/td>
&lt;td>&lt;code>compaction-controller&lt;/code>&lt;/td>
&lt;td>Duration after which a running backup compaction job will be terminated.&lt;/td>
&lt;td>&lt;code>3h&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>metrics-scrape-wait-duration&lt;/code>&lt;/td>
&lt;td>&lt;code>compaction-controller&lt;/code>&lt;/td>
&lt;td>Duration to wait for after compaction job is completed, to allow Prometheus metrics to be scraped.&lt;/td>
&lt;td>&lt;code>0s&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>etcd-copy-backups-task-workers&lt;/code>&lt;/td>
&lt;td>&lt;code>etcdcopybackupstask-controller&lt;/code>&lt;/td>
&lt;td>Number of worker threads for the etcdcopybackupstask controller.&lt;/td>
&lt;td>&lt;code>3&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>secret-workers&lt;/code>&lt;/td>
&lt;td>&lt;code>secret-controller&lt;/code>&lt;/td>
&lt;td>Number of worker threads for the secrets controller.&lt;/td>
&lt;td>&lt;code>10&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>enable-etcd-components-webhook&lt;/code>&lt;/td>
&lt;td>&lt;code>etcdcomponents-webhook&lt;/code>&lt;/td>
&lt;td>Enable EtcdComponents Webhook to prevent unintended changes to resources managed by etcd-druid.&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>reconciler-service-account&lt;/code>&lt;/td>
&lt;td>&lt;code>etcdcomponents-webhook&lt;/code>&lt;/td>
&lt;td>The fully qualified name of the service account used by etcd-druid for reconciling etcd resources. If unspecified, the default service account mounted for etcd-druid will be used.&lt;/td>
&lt;td>&lt;code>&amp;lt;etcd-druid-service-account&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>etcd-components-exempt-service-accounts&lt;/code>&lt;/td>
&lt;td>&lt;code>etcdcomponents-webhook&lt;/code>&lt;/td>
&lt;td>The comma-separated list of fully qualified names of service accounts that are exempt from EtcdComponents Webhook checks.&lt;/td>
&lt;td>&lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Controllers</title><link>https://gardener.cloud/docs/other-components/etcd-druid/concepts/controllers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/concepts/controllers/</guid><description>
&lt;h1 id="controllers">Controllers&lt;/h1>
&lt;p>etcd-druid is an operator to manage etcd clusters, and follows the &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/">&lt;code>Operator&lt;/code>&lt;/a> pattern for Kubernetes.
It makes use of the &lt;a href="https://github.com/kubernetes-sigs/kubebuilder">Kubebuilder&lt;/a> framework which makes it quite easy to define Custom Resources (CRs) such as &lt;code>Etcd&lt;/code>s and &lt;code>EtcdCopyBackupTask&lt;/code>s through &lt;a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/">&lt;em>Custom Resource Definitions&lt;/em>&lt;/a> (CRDs), and define controllers for these CRDs.
etcd-druid uses Kubebuilder to define the &lt;code>Etcd&lt;/code> CR and its corresponding controllers.&lt;/p>
&lt;p>All controllers that are a part of etcd-druid reside in package &lt;code>internal/controller&lt;/code>, as sub-packages.&lt;/p>
&lt;p>Etcd-druid currently consists of the following controllers, each having its own responsibility:&lt;/p>
&lt;ul>
&lt;li>&lt;em>etcd&lt;/em> : responsible for the reconciliation of the &lt;code>Etcd&lt;/code> CR spec, which allows users to run etcd clusters within the specified Kubernetes cluster, and also responsible for periodically updating the &lt;code>Etcd&lt;/code> CR status with the up-to-date state of the managed etcd cluster.&lt;/li>
&lt;li>&lt;em>compaction&lt;/em> : responsible for &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/">snapshot compaction&lt;/a>.&lt;/li>
&lt;li>&lt;em>etcdcopybackupstask&lt;/em> : responsible for the reconciliation of the &lt;code>EtcdCopyBackupsTask&lt;/code> CR, which helps perform the job of copying snapshot backups from one object store to another.&lt;/li>
&lt;li>&lt;em>secret&lt;/em> : responsible in making sure &lt;code>Secret&lt;/code>s being referenced by &lt;code>Etcd&lt;/code> resources are not deleted while in use.&lt;/li>
&lt;/ul>
&lt;h2 id="package-structure">Package Structure&lt;/h2>
&lt;p>The typical package structure for the controllers that are part of etcd-druid is shown with the &lt;em>compaction controller&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>internal/controller/compaction
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── config.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── reconciler.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── register.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>config.go&lt;/code>: contains all the logic for the configuration of the controller, including feature gate activations, CLI flag parsing and validations.&lt;/li>
&lt;li>&lt;code>register.go&lt;/code>: contains the logic for registering the controller with the etcd-druid controller manager.&lt;/li>
&lt;li>&lt;code>reconciler.go&lt;/code>: contains the controller reconciliation logic.&lt;/li>
&lt;/ul>
&lt;p>Each controller package also contains auxiliary files which are relevant to that specific controller.&lt;/p>
&lt;h2 id="controller-manager">Controller Manager&lt;/h2>
&lt;p>A &lt;em>manager&lt;/em> is first created for all controllers that are a part of etcd-druid.
The &lt;em>controller manager&lt;/em> is responsible for all the controllers that are associated with CRDs.
Once the manager is &lt;code>Start()&lt;/code>ed, all the controllers that are &lt;em>registered&lt;/em> with it are started.&lt;/p>
&lt;p>Each controller is built using a controller builder, configured with details such as the type of object being reconciled, owned objects whose owner object is reconciled, event filters (predicates), etc. &lt;code>Predicates&lt;/code> are filters which allow controllers to filter which type of events the controller should respond to and which ones to ignore.&lt;/p>
&lt;p>The logic relevant to the controller manager like the creation of the controller manager and registering each of the controllers with the manager, is contained in &lt;a href="https://github.com/gardener/etcd-druid/blob/master/internal/manager/manager.go">&lt;code>internal/manager/manager.go&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="etcd-controller">Etcd Controller&lt;/h2>
&lt;p>The &lt;em>etcd controller&lt;/em> is responsible for the reconciliation of the &lt;code>Etcd&lt;/code> resource spec and status. It handles the provisioning and management of the etcd cluster. Different components that are required for the functioning of the cluster like &lt;code>Leases&lt;/code>, &lt;code>ConfigMap&lt;/code>s, and the &lt;code>Statefulset&lt;/code> for the etcd cluster are all deployed and managed by the &lt;em>etcd controller&lt;/em>.&lt;/p>
&lt;p>Additionally, &lt;em>etcd controller&lt;/em> also periodically updates the &lt;code>Etcd&lt;/code> resource status with the latest available information from the etcd cluster, as well as results and errors from the recent-most reconciliation of the &lt;code>Etcd&lt;/code> resource spec.&lt;/p>
&lt;p>The &lt;em>etcd controller&lt;/em> is essential to the functioning of the etcd cluster and etcd-druid, thus the minimum number of worker threads is 1 (default being 3), controlled by the CLI flag &lt;code>--etcd-workers&lt;/code>.&lt;/p>
&lt;h3 id="etcd-spec-reconciliation">&lt;code>Etcd&lt;/code> Spec Reconciliation&lt;/h3>
&lt;p>While building the controller, an event filter is set such that the behavior of the controller, specifically for &lt;code>Etcd&lt;/code> update operations, depends on the &lt;code>gardener.cloud/operation: reconcile&lt;/code> &lt;em>annotation&lt;/em>. This is controlled by the &lt;code>--enable-etcd-spec-auto-reconcile&lt;/code> CLI flag, which, if set to &lt;code>false&lt;/code>, tells the controller to perform reconciliation only when this annotation is present. If the flag is set to &lt;code>true&lt;/code>, the controller will reconcile the etcd cluster anytime the &lt;code>Etcd&lt;/code> spec, and thus &lt;code>generation&lt;/code>, changes, and the next queued event for it is triggered.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> Creation and deletion of &lt;code>Etcd&lt;/code> resources are not affected by the above flag or annotation.&lt;/p>
&lt;/blockquote>
&lt;p>The reason this filter is present is that any disruption in the &lt;code>Etcd&lt;/code> resource due to reconciliation (due to changes in the &lt;code>Etcd&lt;/code> spec, for example) while workloads are being run would cause unwanted downtimes to the etcd cluster. Hence, any user who wishes to avoid such disruptions, can choose to set the &lt;code>--enable-etcd-spec-auto-reconcile&lt;/code> CLI flag to &lt;code>false&lt;/code>. An example of this is Gardener&amp;rsquo;s &lt;a href="https://gardener.cloud/docs/gardener/concepts/gardenlet/">gardenlet&lt;/a>, which reconciles the &lt;code>Etcd&lt;/code> resource only during a shoot cluster&amp;rsquo;s &lt;a href="https://gardener.cloud/docs/gardener/shoot_maintenance/">&lt;em>maintenance window&lt;/em>&lt;/a>.&lt;/p>
&lt;p>The controller adds a finalizer to the &lt;code>Etcd&lt;/code> resource in order to ensure that it does not get deleted until all dependent resources managed by etcd-druid, aka managed components, are properly cleaned up. Only the &lt;em>etcd controller&lt;/em> can delete a resource once it adds finalizers to it. This ensures that the proper deletion flow steps are followed while deleting the resource. During deletion flow, managed components are deleted in parallel.&lt;/p>
&lt;h3 id="etcd-status-updates">&lt;code>Etcd&lt;/code> Status Updates&lt;/h3>
&lt;p>The &lt;code>Etcd&lt;/code> resource status is updated periodically by &lt;code>etcd controller&lt;/code>, the interval for which is determined by the CLI flag &lt;code>--etcd-status-sync-period&lt;/code>.&lt;/p>
&lt;p>Status fields of the &lt;code>Etcd&lt;/code> resource such as &lt;code>LastOperation&lt;/code>, &lt;code>LastErrors&lt;/code> and &lt;code>ObservedGeneration&lt;/code>, are updated to reflect the result of the recent reconciliation of the &lt;code>Etcd&lt;/code> resource spec.&lt;/p>
&lt;ul>
&lt;li>&lt;code>LastOperation&lt;/code> holds information about the last operation performed on the etcd cluster, indicated by fields &lt;code>Type&lt;/code>, &lt;code>State&lt;/code>, &lt;code>Description&lt;/code> and &lt;code>LastUpdateTime&lt;/code>. Additionally, a field &lt;code>RunID&lt;/code> indicates the unique ID assigned to the specific reconciliation run, to allow for better debugging of issues.&lt;/li>
&lt;li>&lt;code>LastErrors&lt;/code> is a slice of errors encountered by the last reconciliation run. Each error consists of fields &lt;code>Code&lt;/code> to indicate the custom etcd-druid error code for the error, a human-readable &lt;code>Description&lt;/code>, and the &lt;code>ObservedAt&lt;/code> time when the error was seen.&lt;/li>
&lt;li>&lt;code>ObservedGeneration&lt;/code> indicates the latest &lt;code>generation&lt;/code> of the &lt;code>Etcd&lt;/code> resource that etcd-druid has &amp;ldquo;observed&amp;rdquo; and consequently reconciled. It helps identify whether a change in the &lt;code>Etcd&lt;/code> resource spec was acted upon by druid or not.&lt;/li>
&lt;/ul>
&lt;p>Status fields of the &lt;code>Etcd&lt;/code> resource which correspond to the &lt;code>StatefulSet&lt;/code> like &lt;code>CurrentReplicas&lt;/code>, &lt;code>ReadyReplicas&lt;/code> and &lt;code>Replicas&lt;/code> are updated to reflect those of the &lt;code>StatefulSet&lt;/code> by the controller.&lt;/p>
&lt;p>Status fields related to the etcd cluster itself, such as &lt;code>Members&lt;/code>, &lt;code>PeerUrlTLSEnabled&lt;/code> and &lt;code>Ready&lt;/code> are updated as follows:&lt;/p>
&lt;ul>
&lt;li>Cluster Membership: The controller updates the information about etcd cluster membership like &lt;code>Role&lt;/code>, &lt;code>Status&lt;/code>, &lt;code>Reason&lt;/code>, &lt;code>LastTransitionTime&lt;/code> and identifying information like the &lt;code>Name&lt;/code> and &lt;code>ID&lt;/code>. For the &lt;code>Status&lt;/code> field, the member is checked for the &lt;em>Ready&lt;/em> condition, where the member can be in &lt;code>Ready&lt;/code>, &lt;code>NotReady&lt;/code> and &lt;code>Unknown&lt;/code> statuses.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Etcd&lt;/code> resource conditions are indicated by status field &lt;code>Conditions&lt;/code>. The condition checks that are currently performed are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>AllMembersReady&lt;/code>: indicates readiness of all members of the etcd cluster.&lt;/li>
&lt;li>&lt;code>Ready&lt;/code>: indicates overall readiness of the etcd cluster in serving traffic.&lt;/li>
&lt;li>&lt;code>BackupReady&lt;/code>: indicates health of the etcd backups, i.e., whether etcd backups are being taken regularly as per schedule. This condition is applicable only when backups are enabled for the etcd cluster.&lt;/li>
&lt;li>&lt;code>DataVolumesReady&lt;/code>: indicates health of the persistent volumes containing the etcd data.&lt;/li>
&lt;/ul>
&lt;h2 id="compaction-controller">Compaction Controller&lt;/h2>
&lt;p>The &lt;em>compaction controller&lt;/em> deploys the snapshot compaction job whenever required. To understand the rationale behind this controller, please read &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/">snapshot-compaction.md&lt;/a>.
The controller watches the number of events accumulated as part of delta snapshots in the etcd cluster&amp;rsquo;s backups, and triggers a snapshot compaction when the number of delta events crosses the set threshold, which is configurable through the &lt;code>--etcd-events-threshold&lt;/code> CLI flag (1M events by default).&lt;/p>
&lt;p>The controller watches for changes in &lt;em>snapshot&lt;/em> &lt;code>Leases&lt;/code> associated with &lt;code>Etcd&lt;/code> resources.
It checks the full and delta snapshot &lt;code>Leases&lt;/code> and calculates the difference in events between the latest delta snapshot and the previous full snapshot, and initiates the compaction job if the event threshold is crossed.&lt;/p>
&lt;p>The number of worker threads for the &lt;em>compaction controller&lt;/em> needs to be greater than or equal to 0 (default 3), controlled by the CLI flag &lt;code>--compaction-workers&lt;/code>.
This is unlike other controllers which need at least one worker thread for the proper functioning of etcd-druid as snapshot compaction is not a core functionality for the etcd clusters to be deployed.
The compaction controller should be explicitly enabled by the user, through the &lt;code>--enable-backup-compaction&lt;/code> CLI flag.&lt;/p>
&lt;h2 id="etcdcopybackupstask-controller">EtcdCopyBackupsTask Controller&lt;/h2>
&lt;p>The &lt;em>etcdcopybackupstask controller&lt;/em> is responsible for deploying the &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/cmd/copy.go">&lt;code>etcdbrctl copy&lt;/code>&lt;/a> command as a job.
This controller reacts to create/update events arising from EtcdCopyBackupsTask resources, and deploys the &lt;code>EtcdCopyBackupsTask&lt;/code> job with source and target backup storage providers as arguments, which are derived from source and target bucket secrets referenced by the &lt;code>EtcdCopyBackupsTask&lt;/code> resource.&lt;/p>
&lt;p>The number of worker threads for the &lt;em>etcdcopybackupstask controller&lt;/em> needs to be greater than or equal to 0 (default being 3), controlled by the CLI flag &lt;code>--etcd-copy-backups-task-workers&lt;/code>.
This is unlike other controllers who need at least one worker thread for the proper functioning of etcd-druid as &lt;code>EtcdCopyBackupsTask&lt;/code> is not a core functionality for the etcd clusters to be deployed.&lt;/p>
&lt;h2 id="secret-controller">Secret Controller&lt;/h2>
&lt;p>The &lt;em>secret controller&lt;/em>&amp;rsquo;s primary responsibility is to add a finalizer on &lt;code>Secret&lt;/code>s referenced by the &lt;code>Etcd&lt;/code> resource.
The &lt;em>secret controller&lt;/em> is registered for &lt;code>Secret&lt;/code>s, and the controller keeps a watch on the &lt;code>Etcd&lt;/code> CR.
This finalizer is added to ensure that &lt;code>Secret&lt;/code>s which are referenced by the &lt;code>Etcd&lt;/code> CR aren&amp;rsquo;t deleted while still being used by the &lt;code>Etcd&lt;/code> resource.&lt;/p>
&lt;p>Events arising from the &lt;code>Etcd&lt;/code> resource are mapped to a list of &lt;code>Secret&lt;/code>s such as backup and TLS secrets that are referenced by the &lt;code>Etcd&lt;/code> resource, and are enqueued into the request queue, which the reconciler then acts on.&lt;/p>
&lt;p>The number of worker threads for the secret controller must be at least 1 (default being 10) for this core controller, controlled by the CLI flag &lt;code>--secret-workers&lt;/code>, since the referenced TLS and infrastructure access secrets are essential to the proper functioning of the etcd cluster.&lt;/p></description></item><item><title>Docs: DEP Title</title><link>https://gardener.cloud/docs/other-components/etcd-druid/proposals/00-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/proposals/00-template/</guid><description>
&lt;h1 id="dep-nn-your-short-descriptive-title">DEP-NN: Your short, descriptive title&lt;/h1>
&lt;h2 id="table-of-contents">Table of Contents&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/00-template/#summary">Summary&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/00-template/#motivation">Motivation&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/00-template/#goals">Goals&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/00-template/#non-goals">Non-Goals&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/00-template/#proposal">Proposal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/00-template/#alternatives">Alternatives&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;h3 id="goals">Goals&lt;/h3>
&lt;h3 id="non-goals">Non-Goals&lt;/h3>
&lt;h2 id="proposal">Proposal&lt;/h2>
&lt;h2 id="alternatives">Alternatives&lt;/h2></description></item><item><title>Docs: Etcd Druid</title><link>https://gardener.cloud/docs/other-components/etcd-druid/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/readme/</guid><description>
&lt;h1 id="documentation-index">Documentation Index&lt;/h1>
&lt;h2 id="concepts">Concepts&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/concepts/controllers/">Controllers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/concepts/webhooks/">Webhooks&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="development">Development&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/etcd-network-latency/">etcd Network Latency&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/getting-started-locally-azurite/">Getting started locally using azurite emulator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/getting-started-locally-localstack/">Getting started locally using localstack emulator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/getting-started-locally/">Getting started locally&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/local-e2e-tests/">Local End-To-End Tests&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="deployment">Deployment&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/deployment/cli-flags/">etcd-druid CLI Flags&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/deployment/feature-gates/">Feature Gates&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="operations">Operations&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/metrics/">Metrics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/recovery-from-permanent-quorum-loss-in-etcd-cluster/">Recovery from Permanent Quorum Loss in etcd cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/restoring-single-member-in-multi-node-etcd-cluster/">Restoring single member in a Multi-Node etcd cluster&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="proposals">Proposals&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/00-template/">DEP: Template&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/">DEP-1: Multi-Node etcd clusters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/">DEP-2: Snapshot compaction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/03-scaling-up-an-etcd-cluster/">DEP-3: Scaling up an Etcd cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/">DEP-4: Etcd Member custom resource&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/">DEP-5: Etcd Operator Tasks&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/supported_k8s_versions/">Supported K8S versions&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: etcd Network Latency</title><link>https://gardener.cloud/docs/other-components/etcd-druid/etcd-network-latency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/etcd-network-latency/</guid><description>
&lt;h1 id="network-latency-analysis-sn-etcd-sz-vs--mn-etcd-sz-vs-mn-etcd-mz">Network Latency analysis: &lt;code>sn-etcd-sz&lt;/code> vs &lt;code>mn-etcd-sz&lt;/code> vs &lt;code>mn-etcd-mz&lt;/code>&lt;/h1>
&lt;p>This page captures the etcd cluster latency analysis for below scenarios using the benchmark tool (build from &lt;a href="https://github.com/seshachalam-yv/etcd">etcd benchmark tool&lt;/a>).&lt;/p>
&lt;p>&lt;code>sn-etcd-sz&lt;/code> -&amp;gt; single-node etcd single zone (Only single replica of etcd will be running)&lt;/p>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> -&amp;gt; multi-node etcd single zone (Multiple replicas of etcd pods will be running across nodes in a single zone)&lt;/p>
&lt;p>&lt;code>mn-etcd-mz&lt;/code> -&amp;gt; multi-node etcd multi zone (Multiple replicas of etcd pods will be running across nodes in multiple zones)&lt;/p>
&lt;h2 id="put-analysis">PUT Analysis&lt;/h2>
&lt;h3 id="summary">Summary&lt;/h3>
&lt;ul>
&lt;li>&lt;code>sn-etcd-sz&lt;/code> latency is &lt;strong>~20% less than&lt;/strong> &lt;code>mn-etcd-sz&lt;/code> when benchmark tool with single client.&lt;/li>
&lt;li>&lt;code>mn-etcd-sz&lt;/code> latency is less than &lt;code>mn-etcd-mz&lt;/code> but the difference is &lt;code>~+/-5%&lt;/code>.&lt;/li>
&lt;li>Compared to &lt;code>mn-etcd-sz&lt;/code>, &lt;code>sn-etcd-sz&lt;/code> latency is higher and gradually grows with more clients and larger value size.&lt;/li>
&lt;li>Compared to &lt;code>mn-etcd-mz&lt;/code>, &lt;code>mn-etcd-sz&lt;/code> latency is higher and gradually grows with more clients and larger value size.&lt;/li>
&lt;li>&lt;em>Compared to &lt;code>follower&lt;/code>, &lt;code>leader&lt;/code> latency is less&lt;/em>, when benchmark tool with single client for all cases.&lt;/li>
&lt;li>&lt;em>Compared to &lt;code>follower&lt;/code>, &lt;code>leader&lt;/code> latency is high&lt;/em>, when benchmark tool with multiple clients for all cases.&lt;/li>
&lt;/ul>
&lt;p>Sample commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># write to leader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>benchmark put --target-leader --conns=1 --clients=1 --precise &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --sequential-keys --key-starts 0 --val-size=256 --total=10000 &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --endpoints=$ETCD_HOST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># write to follower&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>benchmark put --conns=1 --clients=1 --precise &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --sequential-keys --key-starts 0 --val-size=256 --total=10000 &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --endpoints=$ETCD_FOLLOWER_HOST
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="latency-analysis-during-put-requests-to-etcd">Latency analysis during PUT requests to etcd&lt;/h3>
&lt;ul>
&lt;li>
&lt;details>
&lt;summary>In this case benchmark tool tries to put key with random 256 bytes value.&lt;/summary>
&lt;ul>
&lt;li>
&lt;p>Benchmark tool loads key/value to &lt;code>leader&lt;/code> with single client .&lt;/p>
&lt;ul>
&lt;li>&lt;code>sn-etcd-sz&lt;/code> latency (~0.815ms) is &lt;strong>~50% lesser than&lt;/strong> &lt;code>mn-etcd-sz&lt;/code> (~1.74ms ).&lt;/li>
&lt;li>
&lt;ul>
&lt;li>&lt;code>mn-etcd-sz&lt;/code> latency (~1.74ms ) is slightly lesser than &lt;code>mn-etcd-mz&lt;/code> (~1.8ms) but the difference is negligible (within same ms).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of keys&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">1220.0520&lt;/td>
&lt;td style="text-align:center">0.815ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">586.545&lt;/td>
&lt;td style="text-align:center">1.74ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">554.0155654442634&lt;/td>
&lt;td style="text-align:center">1.8ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool loads key/value to &lt;code>follower&lt;/code> with single client.&lt;/p>
&lt;ul>
&lt;li>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~2.2ms&lt;/code>) is &lt;strong>20% to 30% lesser than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~2.7ms&lt;/code>).&lt;/li>
&lt;li>&lt;em>Compare to &lt;code>follower&lt;/code>, &lt;code>leader&lt;/code> has lower latency.&lt;/em>&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of keys&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">445.743&lt;/td>
&lt;td style="text-align:center">2.23ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">378.9366747610789&lt;/td>
&lt;td style="text-align:center">2.63ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of keys&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">457.967&lt;/td>
&lt;td style="text-align:center">2.17ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-2&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">345.6586129825796&lt;/td>
&lt;td style="text-align:center">2.89ms&lt;/td>
&lt;td style="text-align:center">eu-west-1b&lt;/td>
&lt;td style="text-align:center">etcd-main-2&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool loads key/value to &lt;code>leader&lt;/code> with multiple clients.&lt;/p>
&lt;ul>
&lt;li>&lt;code>sn-etcd-sz&lt;/code> latency(&lt;code>~78.3ms&lt;/code>) is &lt;strong>~10% greater than&lt;/strong> &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~71.81ms&lt;/code>).&lt;/li>
&lt;li>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~71.81ms&lt;/code>) is less than &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~72.5ms&lt;/code>) but the difference is negligible.&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of keys&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">12638.905&lt;/td>
&lt;td style="text-align:center">78.32ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">13789.248&lt;/td>
&lt;td style="text-align:center">71.81ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">13728.446436395223&lt;/td>
&lt;td style="text-align:center">72.5ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool loads key/value to &lt;code>follower&lt;/code> with multiple clients.&lt;/p>
&lt;ul>
&lt;li>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~69.8ms&lt;/code>) is &lt;strong>~5% greater than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~72.6ms&lt;/code>).&lt;/li>
&lt;li>&lt;em>Compare to &lt;code>leader&lt;/code>, &lt;code>follower&lt;/code> has lower latency&lt;/em>.&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of keys&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">14271.983&lt;/td>
&lt;td style="text-align:center">69.80ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">13695.98&lt;/td>
&lt;td style="text-align:center">72.62ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of keys&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">14325.436&lt;/td>
&lt;td style="text-align:center">69.47ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-2&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">15750.409490407475&lt;/td>
&lt;td style="text-align:center">63.3ms&lt;/td>
&lt;td style="text-align:center">eu-west-1b&lt;/td>
&lt;td style="text-align:center">etcd-main-2&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/details>
&lt;/li>
&lt;li>
&lt;details>
&lt;summary>In this case benchmark tool tries to put key with random 1 MB value.&lt;/summary>
&lt;ul>
&lt;li>
&lt;p>Benchmark tool loads key/value to &lt;code>leader&lt;/code> with single client.&lt;/p>
&lt;ul>
&lt;li>&lt;code>sn-etcd-sz&lt;/code> latency(&lt;code>~16.35ms&lt;/code>) is &lt;strong>~20% lesser than&lt;/strong> &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~20.64ms&lt;/code>).&lt;/li>
&lt;li>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~20.64ms&lt;/code>) is less than &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~21.08ms&lt;/code>) but the difference is negligible..&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of keys&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">61.117&lt;/td>
&lt;td style="text-align:center">16.35ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">48.416&lt;/td>
&lt;td style="text-align:center">20.64ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">45.7517341664802&lt;/td>
&lt;td style="text-align:center">21.08ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool loads key/value withto &lt;code>follower&lt;/code> single client.&lt;/p>
&lt;ul>
&lt;li>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~23.10ms&lt;/code>) is &lt;strong>~10% greater than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~21.8ms&lt;/code>).&lt;/li>
&lt;li>&lt;em>Compare to &lt;code>follower&lt;/code>, &lt;code>leader&lt;/code> has lower latency&lt;/em>.&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of keys&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">43.261&lt;/td>
&lt;td style="text-align:center">23.10ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">45.7517341664802&lt;/td>
&lt;td style="text-align:center">21.8ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">45.33&lt;/td>
&lt;td style="text-align:center">22.05ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of keys&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">40.0518&lt;/td>
&lt;td style="text-align:center">24.95ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-2&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">43.28573155709838&lt;/td>
&lt;td style="text-align:center">23.09ms&lt;/td>
&lt;td style="text-align:center">eu-west-1b&lt;/td>
&lt;td style="text-align:center">etcd-main-2&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">45.92&lt;/td>
&lt;td style="text-align:center">21.76ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">35.5705&lt;/td>
&lt;td style="text-align:center">28.1ms&lt;/td>
&lt;td style="text-align:center">eu-west-1b&lt;/td>
&lt;td style="text-align:center">etcd-main-2&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool loads key/value to &lt;code>leader&lt;/code> with multiple clients.&lt;/p>
&lt;ul>
&lt;li>&lt;code>sn-etcd-sz&lt;/code> latency(&lt;code>~6.0375secs&lt;/code>) is &lt;strong>~30% greater than&lt;/strong> &lt;code>mn-etcd-sz``~4.000secs&lt;/code>).&lt;/li>
&lt;li>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~4.000secs&lt;/code>) is less than &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~ 4.09secs&lt;/code>) but the difference is negligible.&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of keys&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">300&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">55.373&lt;/td>
&lt;td style="text-align:center">6.0375secs&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">300&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">67.319&lt;/td>
&lt;td style="text-align:center">4.000secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">300&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">65.91914167957594&lt;/td>
&lt;td style="text-align:center">4.09secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool loads key/value to &lt;code>follower&lt;/code> with multiple clients.&lt;/p>
&lt;ul>
&lt;li>&lt;em>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~4.04secs&lt;/code>) is &lt;strong>~5% greater than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~ 3.90secs&lt;/code>).&lt;/em>&lt;/li>
&lt;li>&lt;em>Compare to &lt;code>leader&lt;/code>, &lt;code>follower&lt;/code> has lower latency&lt;/em>.&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of keys&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">300&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">66.528&lt;/td>
&lt;td style="text-align:center">4.0417secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">300&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">70.6493461856332&lt;/td>
&lt;td style="text-align:center">3.90secs&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">300&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">71.95&lt;/td>
&lt;td style="text-align:center">3.84secs&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of keys&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">300&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">66.447&lt;/td>
&lt;td style="text-align:center">4.0164secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-2&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">300&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">67.53038086369484&lt;/td>
&lt;td style="text-align:center">3.87secs&lt;/td>
&lt;td style="text-align:center">eu-west-1b&lt;/td>
&lt;td style="text-align:center">etcd-main-2&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">300&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">68.46&lt;/td>
&lt;td style="text-align:center">3.92secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;br>
&lt;h2 id="range-analysis">Range Analysis&lt;/h2>
&lt;p>Sample commands are:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Single connection read request with sequential keys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>benchmark range 0 --target-leader --conns=1 --clients=1 --precise &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --sequential-keys --key-starts 0 --total=10000 &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --consistency=l &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --endpoints=$ETCD_HOST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># --consistency=s [Serializable]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>benchmark range 0 --target-leader --conns=1 --clients=1 --precise &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --sequential-keys --key-starts 0 --total=10000 &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --consistency=s &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --endpoints=$ETCD_HOST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Each read request with range query matches key 0 9999 and repeats for total number of requests. &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>benchmark range 0 9999 --target-leader --conns=1 --clients=1 --precise &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --total=10 &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --consistency=s &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --endpoints=https://etcd-main-client:2379
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Read requests with multiple connections&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>benchmark range 0 --target-leader --conns=100 --clients=1000 --precise &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --sequential-keys --key-starts 0 --total=100000 &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --consistency=l &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --endpoints=$ETCD_HOST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>benchmark range 0 --target-leader --conns=100 --clients=1000 --precise &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --sequential-keys --key-starts 0 --total=100000 &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --consistency=s &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --endpoints=$ETCD_HOST
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="latency-analysis-during-range-requests-to-etcd">Latency analysis during Range requests to etcd&lt;/h3>
&lt;ul>
&lt;li>
&lt;details>
&lt;summary>In this case benchmark tool tries to get specific key with random 256 bytes value.&lt;/summary>
&lt;ul>
&lt;li>
&lt;p>Benchmark tool range requests to &lt;code>leader&lt;/code> with single client.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>sn-etcd-sz&lt;/code> latency(&lt;code>~1.24ms&lt;/code>) is &lt;strong>~40% greater than&lt;/strong> &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~0.67ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~0.67ms&lt;/code>) is &lt;strong>~20% lesser than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~0.85ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">800.272&lt;/td>
&lt;td style="text-align:center">1.24ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">1173.9081&lt;/td>
&lt;td style="text-align:center">0.67ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">999.3020189178693&lt;/td>
&lt;td style="text-align:center">0.85ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Compare to consistency &lt;code>Linearizable&lt;/code>, &lt;code>Serializable&lt;/code> is &lt;strong>~40% less&lt;/strong> for all cases&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">1411.229&lt;/td>
&lt;td style="text-align:center">0.70ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">2033.131&lt;/td>
&lt;td style="text-align:center">0.35ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">2100.2426362012025&lt;/td>
&lt;td style="text-align:center">0.47ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool range requests to &lt;code>follower&lt;/code> with single client .&lt;/p>
&lt;ul>
&lt;li>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~1.3ms&lt;/code>) is &lt;strong>~20% lesser than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~1.6ms&lt;/code>).&lt;/li>
&lt;li>&lt;em>Compare to &lt;code>follower&lt;/code>, &lt;code>leader&lt;/code> read request latency is &lt;strong>~50% less&lt;/strong> for both &lt;code>mn-etcd-sz&lt;/code>, &lt;code>mn-etcd-mz&lt;/code>&lt;/em>&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">765.325&lt;/td>
&lt;td style="text-align:center">1.3ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">596.1&lt;/td>
&lt;td style="text-align:center">1.6ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>Compare to consistency &lt;code>Linearizable&lt;/code>, &lt;code>Serializable&lt;/code> is &lt;strong>~50% less&lt;/strong> for all cases&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">1823.631&lt;/td>
&lt;td style="text-align:center">0.54ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">1442.6&lt;/td>
&lt;td style="text-align:center">0.69ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">1416.39&lt;/td>
&lt;td style="text-align:center">0.70ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">10000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">2077.449&lt;/td>
&lt;td style="text-align:center">0.47ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool range requests to &lt;code>leader&lt;/code> with multiple client.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>sn-etcd-sz&lt;/code> latency(&lt;code>~84.66ms&lt;/code>) is &lt;strong>~20% greater than&lt;/strong> &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~73.95ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~73.95ms&lt;/code>) is &lt;strong>more or less equal to&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~ 73.8ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">11775.721&lt;/td>
&lt;td style="text-align:center">84.66ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">13446.9598&lt;/td>
&lt;td style="text-align:center">73.95ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">13527.19810605353&lt;/td>
&lt;td style="text-align:center">73.8ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Compare to consistency &lt;code>Linearizable&lt;/code>, &lt;code>Serializable&lt;/code> is &lt;strong>~20% lesser&lt;/strong> for all cases&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>sn-etcd-sz&lt;/code> latency(&lt;code>~69.37ms&lt;/code>) is &lt;strong>more or less equal to&lt;/strong> &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~69.89ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~69.89ms&lt;/code>) is &lt;strong>slightly higher than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~67.63ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">14334.9027&lt;/td>
&lt;td style="text-align:center">69.37ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">14270.008&lt;/td>
&lt;td style="text-align:center">69.89ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">14715.287354023869&lt;/td>
&lt;td style="text-align:center">67.63ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool range requests to &lt;code>follower&lt;/code> with multiple client.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~60.69ms&lt;/code>) is &lt;strong>~20% lesser than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~70.76ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Compare to &lt;code>leader&lt;/code>, &lt;code>follower&lt;/code> has lower read request latency.&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">11586.032&lt;/td>
&lt;td style="text-align:center">60.69ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">14050.5&lt;/td>
&lt;td style="text-align:center">70.76ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~86.09ms&lt;/code>) is &lt;strong>~20 higher than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~64.6ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>Compare to &lt;code>mn-etcd-sz&lt;/code> consistency &lt;code>Linearizable&lt;/code>, &lt;code>Serializable&lt;/code> is &lt;strong>~20% higher&lt;/strong>.*&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Compare to &lt;code>mn-etcd-mz&lt;/code> consistency &lt;code>Linearizable&lt;/code>, &lt;code>Serializable&lt;/code> is &lt;strong>~slightly less&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">11582.438&lt;/td>
&lt;td style="text-align:center">86.09ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">100000&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">15422.2&lt;/td>
&lt;td style="text-align:center">64.6ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool range requests to &lt;code>leader&lt;/code> all keys.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>sn-etcd-sz&lt;/code> latency(&lt;code>~678.77ms&lt;/code>) is &lt;strong>~5% slightly lesser than&lt;/strong> &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~697.29ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~697.29ms&lt;/code>) is less than &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~701ms&lt;/code>) but the difference is negligible.&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">6.8875&lt;/td>
&lt;td style="text-align:center">678.77ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">6.720&lt;/td>
&lt;td style="text-align:center">697.29ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">6.7&lt;/td>
&lt;td style="text-align:center">701ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>Compare to consistency &lt;code>Linearizable&lt;/code>, &lt;code>Serializable&lt;/code> is &lt;strong>~5% slightly higher&lt;/strong> for all cases&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>sn-etcd-sz&lt;/code> latency(&lt;code>~687.36ms&lt;/code>) is less than &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~692.68ms&lt;/code>) but the difference is negligible.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~692.68ms&lt;/code>) is &lt;strong>~5% slightly lesser than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~735.7ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">6.76&lt;/td>
&lt;td style="text-align:center">687.36ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">6.635&lt;/td>
&lt;td style="text-align:center">692.68ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">6.3&lt;/td>
&lt;td style="text-align:center">735.7ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool range requests to &lt;code>follower&lt;/code> all keys&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code>(&lt;code>~737.68ms&lt;/code>) latency is &lt;strong>~5% slightly higher than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~713.7ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Compare to &lt;code>leader&lt;/code> consistency &lt;code>Linearizable&lt;/code>read request, &lt;code>follower&lt;/code> is &lt;em>~5% slightly higher&lt;/em>.&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">6.163&lt;/td>
&lt;td style="text-align:center">737.68ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">6.52&lt;/td>
&lt;td style="text-align:center">713.7ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~757.73ms&lt;/code>) is &lt;strong>~10% higher than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~690.4ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Compare to &lt;code>follower&lt;/code> consistency &lt;code>Linearizable&lt;/code>read request, &lt;code>follower&lt;/code> consistency &lt;code>Serializable&lt;/code> is &lt;em>~3% slightly higher&lt;/em> for &lt;code>mn-etcd-sz&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Compare to &lt;code>follower&lt;/code> consistency &lt;code>Linearizable&lt;/code>read request, &lt;code>follower&lt;/code> consistency &lt;code>Serializable&lt;/code> is &lt;em>~5% less&lt;/em> for &lt;code>mn-etcd-mz&lt;/code>.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>*Compare to &lt;code>leader&lt;/code> consistency &lt;code>Serializable&lt;/code>read request, &lt;code>follower&lt;/code> consistency &lt;code>Serializable&lt;/code> is &lt;em>~5% less&lt;/em> for &lt;code>mn-etcd-mz&lt;/code>. *&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">6.0295&lt;/td>
&lt;td style="text-align:center">757.73ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">256&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">6.87&lt;/td>
&lt;td style="text-align:center">690.4ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;br>
&lt;/details>
&lt;/li>
&lt;li>
&lt;details>
&lt;summary>In this case benchmark tool tries to get specific key with random `1MB` value.&lt;/summary>
&lt;ul>
&lt;li>
&lt;p>Benchmark tool range requests to &lt;code>leader&lt;/code> with single client.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>sn-etcd-sz&lt;/code> latency(&lt;code>~5.96ms&lt;/code>) is &lt;strong>~5% lesser than&lt;/strong> &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~6.28ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~6.28ms&lt;/code>) is &lt;strong>~10% higher than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~5.3ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">167.381&lt;/td>
&lt;td style="text-align:center">5.96ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">158.822&lt;/td>
&lt;td style="text-align:center">6.28ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">187.94&lt;/td>
&lt;td style="text-align:center">5.3ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Compare to consistency &lt;code>Linearizable&lt;/code>, &lt;code>Serializable&lt;/code> is &lt;strong>~15% less&lt;/strong> for &lt;code>sn-etcd-sz&lt;/code>, &lt;code>mn-etcd-sz&lt;/code>, &lt;code>mn-etcd-mz&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">184.95&lt;/td>
&lt;td style="text-align:center">5.398ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">176.901&lt;/td>
&lt;td style="text-align:center">5.64ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">209.99&lt;/td>
&lt;td style="text-align:center">4.7ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool range requests to &lt;code>follower&lt;/code> with single client.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~6.66ms&lt;/code>) is &lt;strong>~10% higher than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~6.16ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Compare to &lt;code>leader&lt;/code>, &lt;code>follower&lt;/code> read request latency is &lt;strong>~10% high&lt;/strong> for &lt;code>mn-etcd-sz&lt;/code>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Compare to &lt;code>leader&lt;/code>, &lt;code>follower&lt;/code> read request latency is &lt;strong>~20% high&lt;/strong> for &lt;code>mn-etcd-mz&lt;/code>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">150.680&lt;/td>
&lt;td style="text-align:center">6.66ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">162.072&lt;/td>
&lt;td style="text-align:center">6.16ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Compare to consistency &lt;code>Linearizable&lt;/code>, &lt;code>Serializable&lt;/code> is &lt;strong>~15% less&lt;/strong> for &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~5.84ms&lt;/code>), &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~5.01ms&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Compare to &lt;code>leader&lt;/code>, &lt;code>follower&lt;/code> read request latency is &lt;strong>~5% slightly high&lt;/strong> for &lt;code>mn-etcd-sz&lt;/code>, &lt;code>mn-etcd-mz&lt;/code>&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">170.918&lt;/td>
&lt;td style="text-align:center">5.84ms&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">199.01&lt;/td>
&lt;td style="text-align:center">5.01ms&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool range requests to &lt;code>leader&lt;/code> with multiple clients.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>sn-etcd-sz&lt;/code> latency(&lt;code>~1.593secs&lt;/code>) is &lt;strong>~20% lesser than&lt;/strong> &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~1.974secs&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~1.974secs&lt;/code>) is &lt;strong>~5% greater than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~1.81secs&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">252.149&lt;/td>
&lt;td style="text-align:center">1.593secs&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">205.589&lt;/td>
&lt;td style="text-align:center">1.974secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">230.42&lt;/td>
&lt;td style="text-align:center">1.81secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Compare to consistency &lt;code>Linearizable&lt;/code>, &lt;code>Serializable&lt;/code> is &lt;strong>more or less same&lt;/strong> for &lt;code>sn-etcd-sz&lt;/code>(&lt;code>~1.57961secs&lt;/code>), &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~1.8secs&lt;/code>) not a big difference&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Compare to consistency &lt;code>Linearizable&lt;/code>, &lt;code>Serializable&lt;/code> is &lt;strong>~10% high&lt;/strong> for &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~ 2.277secs&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">252.406&lt;/td>
&lt;td style="text-align:center">1.57961secs&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">181.905&lt;/td>
&lt;td style="text-align:center">2.277secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">227.64&lt;/td>
&lt;td style="text-align:center">1.8secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool range requests to &lt;code>follower&lt;/code> with multiple client.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency is &lt;strong>~20% less than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Compare to &lt;code>leader&lt;/code> consistency &lt;code>Linearizable&lt;/code>, &lt;code>follower&lt;/code> read request latency is ~15 less for &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~1.694secs&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Compare to &lt;code>leader&lt;/code> consistency &lt;code>Linearizable&lt;/code>, &lt;code>follower&lt;/code> read request latency is ~10% higher for &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~1.977secs&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">248.489&lt;/td>
&lt;td style="text-align:center">1.694secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">210.22&lt;/td>
&lt;td style="text-align:center">1.977secs&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">205.765&lt;/td>
&lt;td style="text-align:center">1.967secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-2&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">195.2&lt;/td>
&lt;td style="text-align:center">2.159secs&lt;/td>
&lt;td style="text-align:center">eu-west-1b&lt;/td>
&lt;td style="text-align:center">etcd-main-2&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">231.458&lt;/td>
&lt;td style="text-align:center">1.7413secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">214.80&lt;/td>
&lt;td style="text-align:center">1.907secs&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">183.320&lt;/td>
&lt;td style="text-align:center">2.2810secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-2&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1000&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">100&lt;/td>
&lt;td style="text-align:center">500&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-2&lt;/td>
&lt;td style="text-align:center">195.40&lt;/td>
&lt;td style="text-align:center">2.164secs&lt;/td>
&lt;td style="text-align:center">eu-west-1b&lt;/td>
&lt;td style="text-align:center">etcd-main-2&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool range requests to &lt;code>leader&lt;/code> all keys.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>sn-etcd-sz&lt;/code> latency(&lt;code>~8.993secs&lt;/code>) is &lt;strong>~3% slightly lower than&lt;/strong> &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~9.236secs&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~9.236secs&lt;/code>) is &lt;strong>~2% slightly lower than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~9.100secs&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">0.5139&lt;/td>
&lt;td style="text-align:center">8.993secs&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">0.506&lt;/td>
&lt;td style="text-align:center">9.236secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">0.508&lt;/td>
&lt;td style="text-align:center">9.100secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Compare to consistency &lt;code>Linearizable&lt;/code>read request, &lt;code>follower&lt;/code> for &lt;code>sn-etcd-sz&lt;/code>(&lt;code>~9.secs&lt;/code>) is &lt;strong>a slight difference &lt;code>10ms&lt;/code>&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Compare to consistency &lt;code>Linearizable&lt;/code>read request, &lt;code>follower&lt;/code> for &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~9.113secs&lt;/code>) is &lt;strong>~1% less&lt;/strong>, not a big difference.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Compare to consistency &lt;code>Linearizable&lt;/code>read request, &lt;code>follower&lt;/code> for &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~8.799secs&lt;/code>) is &lt;strong>~3% less&lt;/strong>, not a big difference.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>sn-etcd-sz&lt;/code> latency(&lt;code>~9.secs&lt;/code>) is &lt;strong>~1% slightly less than&lt;/strong> &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~9.113secs&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~9.113secs&lt;/code>) is &lt;strong>~3% slightly higher than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~8.799secs&lt;/code>)&lt;/em>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">0.51125&lt;/td>
&lt;td style="text-align:center">9.0003secs&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">sn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">0.4993&lt;/td>
&lt;td style="text-align:center">9.113secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">leader&lt;/td>
&lt;td style="text-align:center">0.522&lt;/td>
&lt;td style="text-align:center">8.799secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-1&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Benchmark tool range requests to &lt;code>follower&lt;/code> all keys&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>mn-etcd-sz&lt;/code> latency(&lt;code>~9.065secs&lt;/code>) is &lt;strong>~1% slightly higher than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~9.007secs&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Compare to &lt;code>leader&lt;/code> consistency &lt;code>Linearizable&lt;/code>read request, &lt;code>follower&lt;/code> is &lt;em>~1% slightly higher&lt;/em> for both cases &lt;code>mn-etcd-sz&lt;/code>, &lt;code>mn-etcd-mz&lt;/code> .&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">0.512&lt;/td>
&lt;td style="text-align:center">9.065secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">l&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">0.533&lt;/td>
&lt;td style="text-align:center">9.007secs&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Compare to consistency &lt;code>Linearizable&lt;/code>read request, &lt;code>follower&lt;/code> for &lt;code>mn-etcd-sz&lt;/code>(&lt;code>~9.553secs&lt;/code>) is &lt;strong>~5% high&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Compare to consistency &lt;code>Linearizable&lt;/code>read request, &lt;code>follower&lt;/code> for &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~7.7433secs&lt;/code>) is &lt;strong>~15% less&lt;/strong>&lt;/em>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>&lt;code>mn-etcd-sz&lt;/code>(&lt;code>~9.553secs&lt;/code>) latency is &lt;strong>~20% higher than&lt;/strong> &lt;code>mn-etcd-mz&lt;/code>(&lt;code>~7.7433secs&lt;/code>)&lt;/em>.&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Number of requests&lt;/th>
&lt;th style="text-align:center">Value size&lt;/th>
&lt;th style="text-align:center">Number of connections&lt;/th>
&lt;th style="text-align:center">Number of clients&lt;/th>
&lt;th style="text-align:center">sequential-keys&lt;/th>
&lt;th style="text-align:center">Consistency&lt;/th>
&lt;th style="text-align:center">Target etcd server&lt;/th>
&lt;th style="text-align:center">Average write QPS&lt;/th>
&lt;th style="text-align:center">Average latency per request&lt;/th>
&lt;th style="text-align:center">zone&lt;/th>
&lt;th style="text-align:center">server name&lt;/th>
&lt;th style="text-align:center">Test name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">0.4743&lt;/td>
&lt;td style="text-align:center">9.553secs&lt;/td>
&lt;td style="text-align:center">eu-west-1a&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-sz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">20&lt;/td>
&lt;td style="text-align:center">1000000&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:center">false&lt;/td>
&lt;td style="text-align:center">s&lt;/td>
&lt;td style="text-align:center">follower-1&lt;/td>
&lt;td style="text-align:center">0.5500&lt;/td>
&lt;td style="text-align:center">7.7433secs&lt;/td>
&lt;td style="text-align:center">eu-west-1c&lt;/td>
&lt;td style="text-align:center">etcd-main-0&lt;/td>
&lt;td style="text-align:center">mn-etcd-mz&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;br>
&lt;/details>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;br>
&lt;br>
&lt;blockquote>
&lt;p>NOTE: This Network latency analysis is inspired by &lt;a href="https://etcd.io/docs/v3.5/op-guide/performance/">etcd performance&lt;/a>.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: EtcdMember Custom Resource</title><link>https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/</guid><description>
&lt;h1 id="dep-04-etcdmember-custom-resource">DEP-04: EtcdMember Custom Resource&lt;/h1>
&lt;h2 id="table-of-contents">Table of Contents&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#dep-04-etcdmember-custom-resource">DEP-04: EtcdMember Custom Resource&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#table-of-contents">Table of Contents&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#summary">Summary&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#terminology">Terminology&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#motivation">Motivation&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#goals">Goals&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#non-goals">Non-Goals&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#proposal">Proposal&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#etcd-member-metadata">Etcd Member Metadata&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#etcd-member-state-transitions">Etcd Member State Transitions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#states-and-sub-states">States and Sub-States&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#top-level-state-transitions">Top Level State Transitions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#starting-an-etcd-member-in-a-single-node-etcd-cluster">Starting an Etcd-Member in a Single-Node Etcd Cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#addition-of-a-new-etcd-member-in-a-multi-node-etcd-cluster">Addition of a New Etcd-Member in a Multi-Node Etcd Cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#restart-of-a-voting-etcd-member-in-a-multi-node-etcd-cluster">Restart of a Voting Etcd-Member in a Multi-Node Etcd Cluster&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#deterministic-etcd-member-creationrestart-during-scale-up">Deterministic Etcd Member Creation/Restart During Scale-Up&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#tls-enablement-for-peer-communication">TLS Enablement for Peer Communication&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#monitoring-backup-health">Monitoring Backup Health&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#enhanced-snapshot-compaction">Enhanced Snapshot Compaction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#enhanced-defragmentation">Enhanced Defragmentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#monitoring-defragmentations">Monitoring Defragmentations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#monitoring-restorations">Monitoring Restorations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#monitoring-volume-mismatches">Monitoring Volume Mismatches&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#custom-resource-api">Custom Resource API&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#spec-vs-status">Spec vs Status&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#representing-state-transitions">Representing State Transitions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#reason-codes">Reason Codes&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#api">API&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#etcdmember">EtcdMember&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#etcd">Etcd&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#lifecycle-of-an-etcdmember">Lifecycle of an EtcdMember&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#creation">Creation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#updation">Updation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#deletion">Deletion&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#reconciliation">Reconciliation&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#stale-etcdmember-status-handling">Stale EtcdMember Status Handling&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#reference">Reference&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>Today, &lt;a href="https://github.com/gardener/etcd-druid">etcd-druid&lt;/a> mainly acts as an etcd cluster provisioner, and seldom takes remediatory actions if the &lt;a href="https://etcd.io/">etcd&lt;/a> cluster goes into an undesired state that needs to be resolved by a human operator. In other words, etcd-druid cannot perform day-2 operations on etcd clusters in its current form, and hence cannot carry out its full set of responsibilities as a true &amp;ldquo;operator&amp;rdquo; of etcd clusters. For etcd-druid to be fully capable of its responsibilities, it must know the latest state of the etcd clusters and their individual members at all times.&lt;/p>
&lt;p>This proposal aims to bridge that gap by introducing &lt;code>EtcdMember&lt;/code> custom resource allowing individual etcd cluster members to publish information/state (previously unknown to etcd-druid). This provides etcd-druid a handle to potentially take cluster-scoped remediatory actions.&lt;/p>
&lt;h2 id="terminology">Terminology&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>druid:&lt;/strong> &lt;a href="https://github.com/gardener/etcd-druid">etcd-druid&lt;/a> - an operator for etcd clusters.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>etcd-member:&lt;/strong> A single etcd pod in an etcd cluster that is realised as a &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/">StatefulSet&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>backup-sidecar:&lt;/strong> It is the etcd-backup-restore sidecar container in each etcd-member pod.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>NOTE:&lt;/strong> Term sidecar can now be confused with the latest definition in &lt;a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/753-sidecar-containers/README.md">KEP-73&lt;/a>. etcd-backup-restore container is currently not set as an &lt;code>init-container&lt;/code> as proposed in the KEP but as a regular container in a multi-container [Pod](&lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/">Pods | Kubernetes&lt;/a>).&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>leading-backup-sidecar:&lt;/strong> A backup-sidecar that is associated to an etcd leader.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>restoration:&lt;/strong> It refers to an individual etcd-member restoring etcd data from an existing backup (comprising of full and delta snapshots). The authors have deliberately chosen to distinguish between restoration and learning. Learning refers to a process where a &lt;a href="https://etcd.io/docs/v3.3/learning/learner/#raft-learner">learner&lt;/a> &amp;ldquo;learns&amp;rdquo; from an etcd-cluster leader.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>Sharing state of an individual etcd-member with druid is essential for diagnostics, monitoring, cluster-wide-operations and potential remediation. At present, only a subset of etcd-member state is shared with druid using &lt;a href="https://kubernetes.io/docs/concepts/architecture/leases/">leases&lt;/a>. It was always meant as a stopgap arrangement as mentioned in the &lt;a href="https://github.com/gardener/etcd-druid/pull/207">corresponding issue&lt;/a> and is not the best use of leases.&lt;/p>
&lt;p>There is a need to have a clear distinction between an etcd-member state and etcd cluster state since most of an etcd cluster state is often derived by looking at individual etcd-member states. In addition, actors which update each of these states should be clearly identified so as to prevent multiple actors updating a single resource holding the state of either an etcd cluster or an etcd-member. As a consequence, etcd-members should not directly update the &lt;code>Etcd&lt;/code> resource status and would therefore need a new custom resource allowing each member to publish detailed information about its latest state.&lt;/p>
&lt;h3 id="goals">Goals&lt;/h3>
&lt;ul>
&lt;li>Introduce &lt;code>EtcdMember&lt;/code> custom resource via which each etcd-member can publish information about its state. This enables druid to deterministically orchestrate out-of-turn operations like compaction, defragmentation, volume management etc.&lt;/li>
&lt;li>Define and capture states, sub-states and deterministic transitions amongst states of an etcd-member.&lt;/li>
&lt;li>Today &lt;a href="https://kubernetes.io/docs/concepts/architecture/leases/">leases&lt;/a> are &lt;em>misused&lt;/em> to share member-specific information with druid. Their usage to share member state [leader, follower, learner], member-id, snapshot revisions etc should be removed.&lt;/li>
&lt;/ul>
&lt;h3 id="non-goals">Non-Goals&lt;/h3>
&lt;ul>
&lt;li>Auto-recovery from quorum loss or cluster-split due to network partitioning.&lt;/li>
&lt;li>Auto-recovery of an etcd-member due to volume mismatch.&lt;/li>
&lt;li>Relooking at segregating responsiblities between &lt;code>etcd&lt;/code> and &lt;code>backup-sidecar &lt;/code> containers.&lt;/li>
&lt;/ul>
&lt;h2 id="proposal">Proposal&lt;/h2>
&lt;p>This proposal introduces a new custom resource &lt;code>EtcdMember&lt;/code>, and in the following sections describes different sets of information that should be captured as part of the new resource.&lt;/p>
&lt;h3 id="etcd-member-metadata">Etcd Member Metadata&lt;/h3>
&lt;p>Every etcd-member has a unique &lt;code>memberID&lt;/code> and it is part of an etcd cluster which has a unique &lt;code>clusterID&lt;/code>. In a well-formed etcd cluster every member must have the same &lt;code>clusterID&lt;/code>. Publishing this information to druid helps in identifying issues when one or more etcd-members form their own individual clusters, thus resulting in multiple clusters where only one was expected. Issues &lt;a href="https://github.com/gardener/etcd-druid/issues/419">Issue#419&lt;/a>, Canary#4027, Canary#3973 are some such occurrences.&lt;/p>
&lt;p>Today, this information is published by using a member &lt;a href="https://kubernetes.io/docs/concepts/architecture/leases/">lease&lt;/a>. Both these fields are populated in the leases&amp;rsquo; &lt;code>Spec.HolderIdentity&lt;/code> by the backup-sidecar container.&lt;/p>
&lt;p>The authors propose to publish member metadata information in &lt;code>EtcdMember&lt;/code> resource.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>id: &amp;lt;etcd-member id&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusterID: &amp;lt;etcd cluster id&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>NOTE:&lt;/strong> Druid would not do any auto-recovery when it finds out that there are more than one clusters being formed. Instead this information today will be used for diagnostic and alerting.&lt;/p>
&lt;/blockquote>
&lt;h3 id="etcd-member-state-transitions">Etcd Member State Transitions&lt;/h3>
&lt;p>Each etcd-member goes through different &lt;code>States&lt;/code> during its lifetime. &lt;code>State&lt;/code> is a derived high-level summary of where an etcd-member is in its lifecycle. A &lt;code>SubState&lt;/code> gives additional information about the state. This proposal extends the concept of states with the notion of a &lt;code>SubState&lt;/code>, since &lt;code>State&lt;/code> indicates a top-level state of an &lt;code>EtcdMember&lt;/code> resource, which can have one or more &lt;code>SubState&lt;/code>s.&lt;/p>
&lt;p>While &lt;code>State&lt;/code> is sufficient for many human operators, the notion of a &lt;code>SubState&lt;/code> provides operators with an insight about the discrete stage of an etcd-member in its lifecycle. For example, consider a top-level &lt;code>State: Starting&lt;/code>, which indicates that an etcd-member is starting. &lt;code>Starting&lt;/code> is meant to be a transient state for an etcd-member. If an etcd-member remains in this &lt;code>State&lt;/code> longer than expected, then an operator would require additional insight, which the authors propose to provide via &lt;code>SubState&lt;/code> (in this case, the possible &lt;code>SubStates&lt;/code> could be &lt;code>PendingLearner&lt;/code> and &lt;code>Learner&lt;/code>, which are detailed in the following sections).&lt;/p>
&lt;p>At present, these states are not captured and only the final state is known - i.e the etcd-member either fails to come up (all re-attempts to bring up the pod via the StatefulSet controller has exhausted) or it comes up. Getting an insight into all its state transitions would help in diagnostics.&lt;/p>
&lt;p>The status of an etcd-member at any given point in time can be best categorized as a combination of a top-level &lt;code>State&lt;/code> and a &lt;code>SubState&lt;/code>. The authors propose to introduce the following states and sub-states:&lt;/p>
&lt;h4 id="states-and-sub-states">States and Sub-States&lt;/h4>
&lt;blockquote>
&lt;p>&lt;strong>NOTE&lt;/strong>: Abbreviations have been used wherever possible, only to represent sub-states. These representations are chosen only for brevity and will have proper longer names.&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>States&lt;/th>
&lt;th>Sub-States&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>New&lt;/td>
&lt;td>-&lt;/td>
&lt;td>Every newly created etcd-member will start in this state and is termed as the initial state or the start state.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Initializing&lt;/td>
&lt;td>DBV-S (DBValidationSanity)&lt;/td>
&lt;td>This state denotes that backup-restore container in etcd-member pod has started initialization. Sub-State &lt;code>DBV-S&lt;/code> which is an abbreviation for &lt;code>DBValidationSanity&lt;/code> denotes that currently sanity etcd DB validation is in progress.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Initializing&lt;/td>
&lt;td>DBV-F (DBValidationFull)&lt;/td>
&lt;td>This state denotes that backup-restore container in etcd-member pod has started initialization. Sub-State &lt;code>DBV-F&lt;/code> which is an abbreviation for &lt;code>DBValidationFull&lt;/code> denotes that currently full etcd DB validation is in progress.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Initializing&lt;/td>
&lt;td>R (Restoration)&lt;/td>
&lt;td>This state denotes that backup-restore container in etcd-member pod has started initialization. Sub-State &lt;code>R&lt;/code> which is an abbreviation for &lt;code>Restoration&lt;/code> denotes that DB validation failed and now backup-restore has commenced restoration of etcd DB from the backup (comprising of full snapshot and delta-snapshots). An etcd-member will transition to this sub-state only when it is part of a single-node etcd-cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Starting (SI)&lt;/td>
&lt;td>PL (PendingLearner)&lt;/td>
&lt;td>An etcd-member can transition from &lt;code>Initializing&lt;/code> state to &lt;code>PendingLearner&lt;/code> state. In this state backup-restore container will optionally delete any existing etcd data directory and then attempts to add its peer etcd-member process as a learner. Since there can be only one learner at a time in an etcd cluster, an etcd-member could be in this state for some time till its request to get added as a learner is accepted.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Starting (SI)&lt;/td>
&lt;td>Learner&lt;/td>
&lt;td>When backup-restore is successfully able to add its peer etcd-member process as a &lt;code>Learner&lt;/code>. In this state the etcd-member process will start its DB sync from an etcd leader.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Started (Sd)&lt;/td>
&lt;td>Follower&lt;/td>
&lt;td>A follower is a voting raft member. A &lt;code>Learner&lt;/code> etcd-member will get promoted to a &lt;code>Follower&lt;/code> once its DB is in sync with the leader. It could also become a follower if during a re-election it loses leadership and transitions from being a &lt;code>Leader&lt;/code> to &lt;code>Follower&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Started (Sd)&lt;/td>
&lt;td>Leader&lt;/td>
&lt;td>A leader is an etcd-member which will handle all client write requests and linearizable read requests. A member could transition to being a &lt;code>Leader&lt;/code> from an existing &lt;code>Follower&lt;/code> role due to winning a leader election or for a single node etcd cluster it directly transitions from &lt;code>Initializing&lt;/code> state to &lt;code>Leader&lt;/code> state as there is no other member.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>In the following sub-sections, the state transitions are categorized into several flows making it easier to grasp the different transitions.&lt;/p>
&lt;h4 id="top-level-state-transitions">Top Level State Transitions&lt;/h4>
&lt;p>Following DFA represents top level state transitions (without any representation of sub-states). As described in the table above there are 4 top level states:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>New&lt;/code>- this is a start state for all newly created etcd-members&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Initializing&lt;/code> - In this state backup-restore will perform pre-requisite actions before it triggers the start of an etcd process. DB validation and optionally restoration is done in this state. Possible sub-states are: &lt;code>DBValidationSanity&lt;/code>, &lt;code>DBValidationFull&lt;/code> and &lt;code>Restoration&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Starting&lt;/code> - Once the optional initialization is done backup-restore will trigger the start of an etcd process. It can either directly go to &lt;code>Learner&lt;/code> sub-state or wait for getting added as a learner and therefore be in &lt;code>PendingLearner&lt;/code> sub-state.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Started&lt;/code> - In this state the etcd-member is a full voting member. It can either be in &lt;code>Leader&lt;/code> or &lt;code>Follower&lt;/code> sub-states.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;img title="" src="https://gardener.cloud/__resources/04-top-level-state-transitions.excalidraw_0af3b5.png" alt="" data-align="center">
&lt;h4 id="starting-an-etcd-member-in-a-single-node-etcd-cluster">Starting an Etcd-Member in a Single-Node Etcd Cluster&lt;/h4>
&lt;p>Following DFA represents the states, sub-states and transitions of a single etcd-member for a cluster that is bootstrapped from cluster size of 0 -&amp;gt; 1.&lt;/p>
&lt;img title="" src="https://gardener.cloud/__resources/04-state-transitions-bootstrap-0-1.excalidraw_5a2726.png" alt="" data-align="center">
&lt;h4 id="addition-of-a-new-etcd-member-in-a-multi-node-etcd-cluster">Addition of a New Etcd-Member in a Multi-Node Etcd Cluster&lt;/h4>
&lt;p>Following DFA represents the states, sub-states and transitions of an etcd cluster which starts with having a single member (Leader) and then one or more new members are added which represents a scale-up of an etcd cluster from 1 -&amp;gt; n, where n is &lt;a href="https://etcd.io/docs/v3.5/faq/#why-an-odd-number-of-cluster-members">odd&lt;/a>.&lt;/p>
&lt;img title="" src="https://gardener.cloud/__resources/04-state-transitions-scaleup-1-n.excalidraw_cfa4bf.png" alt="" data-align="center">
&lt;h4 id="restart-of-a-voting-etcd-member-in-a-multi-node-etcd-cluster">Restart of a Voting Etcd-Member in a Multi-Node Etcd Cluster&lt;/h4>
&lt;p>Following DFA represents the states, sub-states and transitions when a voting etcd-member in a multi-node etcd cluster restarts.&lt;/p>
&lt;img title="" src="https://gardener.cloud/__resources/04-state-transitions-restart-member.excalidraw_d23a8d.png" alt="" data-align="center">
&lt;blockquote>
&lt;p>NOTE: If the DB validation fails then data directory of the etcd-member is removed and etcd-member is removed from cluster membership, thus transitioning it to &lt;code>New&lt;/code> state. The state transitions from &lt;code>New&lt;/code> state are depicted by &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#addition-of-a-new-etcd-member-in-a-multi-node-etcd-cluster">this section&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h3 id="deterministic-etcd-member-creationrestart-during-scale-up">Deterministic Etcd Member Creation/Restart During Scale-Up&lt;/h3>
&lt;p>&lt;strong>Bootstrap information:&lt;/strong>&lt;/p>
&lt;p>When an etcd-member starts, then it needs to find out:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>If it should join an existing cluster or start a new cluster.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If it should add itself as a &lt;code>Learner&lt;/code> or directly start as a voting member.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Issue with the current approach&lt;/strong>:&lt;/p>
&lt;p>&lt;em>At present&lt;/em>, this is facilitated by three things:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>During scale-up, druid adds an annotation &lt;code>gardener.cloud/scaled-to-multi-node&lt;/code> to the &lt;code>StatefulSet&lt;/code>. Each etcd-members looks up this annotation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>backup-sidecar attempts to fetch etcd cluster member-list and checks if this etcd-member is already part of the cluster.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Size of the cluster by checking &lt;code>initial-cluster&lt;/code> in the etcd config.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Druid adds an annotation &lt;code>gardener.cloud/scaled-to-multi-node&lt;/code> on the &lt;code>StatefulSet&lt;/code> which is then shared by all etcd-members irrespective of the starting state of an etcd-member (as &lt;code>Learner&lt;/code> or &lt;code>Voting-Member&lt;/code>). This especially creates an issue for the current leader (often pod with index 0) during the scale-up of an etcd cluster as described in &lt;a href="https://github.com/gardener/etcd-backup-restore/issues/646">this&lt;/a> issue.&lt;/p>
&lt;p>It has been agreed that the current solution to &lt;a href="https://github.com/gardener/etcd-backup-restore/issues/646">this issue&lt;/a> is a quick and dirty fix and needs to be revisited to be uniformly applied to all etcd-members. The authors propose to provide a more deterministic approach to scale-up using the &lt;code>EtcdMember&lt;/code> resource.&lt;/p>
&lt;p>&lt;strong>New approach&lt;/strong>&lt;/p>
&lt;p>Instead of adding an annotation &lt;code>gardener.cloud/scaled-to-multi-node&lt;/code> on the &lt;code>StatefulSet&lt;/code>, a new annotation &lt;code>druid.gardener.cloud/create-as-learner&lt;/code> should be added by druid on an &lt;code>EtcdMember&lt;/code> resource. This annotation will only be added to newly created members during scale-up.&lt;/p>
&lt;p>Each etcd-member should look at the following to deterministically compute the &lt;code>bootstrap information&lt;/code> specified above:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>druid.gardener.cloud/create-as-learner&lt;/code> annotation on its respective &lt;code>EtcdMember&lt;/code> resource. This new annotation will be honored in the following cases:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>When an etcd-member is created for the very first time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An etcd-member is restarted while it is in &lt;code>Starting&lt;/code> state (&lt;code>PendingLearner&lt;/code> and &lt;code>Learner&lt;/code> sub-states).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Etcd-cluster member list. to check if it is already part of the cluster.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Existing etcd data directory and its validity.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>NOTE:&lt;/strong> When the etcd-member gets promoted to a voting-member, then it should remove the annotation on its respective &lt;code>EtcdMember&lt;/code> resource.&lt;/p>
&lt;/blockquote>
&lt;h3 id="tls-enablement-for-peer-communication">TLS Enablement for Peer Communication&lt;/h3>
&lt;p>Etcd-members in a cluster use &lt;a href="https://etcd.io/docs/v3.4/op-guide/configuration/#--initial-advertise-peer-urls">peer URL(s)&lt;/a> to communicate amongst each other. If the advertised peer URL(s) for an etcd-member are updated then &lt;a href="https://etcd.io/docs/v3.4/op-guide/runtime-configuration/#update-advertise-peer-urls">etcd mandates a restart&lt;/a> of the etcd-member.&lt;/p>
&lt;p>Druid only supports toggling the transport level security for the advertised peer URL(s). To indicate that the etcd process within the etcd-member has the updated advertised peer URL(s), an annotation &lt;code>member.etcd.gardener.cloud/tls-enabled&lt;/code> is added by backup-sidecar container to the member lease object.&lt;/p>
&lt;p>During the reconciliation run for an &lt;code>Etcd&lt;/code> resource in druid, if reconciler detects a change in advertised peer URL(s) TLS configuration then it will watch for the above mentioned annotation on the member lease. If the annotation has a value of &lt;code>false&lt;/code> then it will trigger a restart of the etcd-member pod.&lt;/p>
&lt;p>The authors propose to publish member metadata information in &lt;code>EtcdMember&lt;/code> resource and not misuse member &lt;a href="https://kubernetes.io/docs/concepts/architecture/leases/">lease&lt;/a>s.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>peerTLSEnabled: &amp;lt;bool&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="monitoring-backup-health">Monitoring Backup Health&lt;/h3>
&lt;p>Backup-sidecar takes delta and full snapshot both periodically and threshold based. These backed-up snapshots are essential for restoration operations for bootstrapping an etcd cluster from 0 -&amp;gt; 1 replicas. It is essential that leading-backup-sidecar container which is responsible for taking delta/full snapshots and uploading these snapshots to the configured backup store, publishes this information for druid to consume.&lt;/p>
&lt;p>At present, information about backed-up snapshot (&lt;em>only&lt;/em> &lt;code>latest-revision-number&lt;/code>) is published by leading-backup-sidecar container by updating &lt;code>Spec.HolderIdentity&lt;/code> of the delta-snapshot and full-snapshot &lt;a href="https://kubernetes.io/docs/concepts/architecture/leases/">lease&lt;/a>s.&lt;/p>
&lt;p>Druid maintains &lt;code>conditions&lt;/code> in the &lt;code>Etcd&lt;/code> resource status, which include but are not limited to maintaining information on whether backups being taken for an etcd cluster are healthy (up-to-date) or stale (outdated in context to a configured schedule). Druid computes these conditions using information from full/delta snapshot leases.&lt;/p>
&lt;p>In order to provide a holistic view of the health of backups to human operators, druid requires additional information about the snapshots that are being backed-up. The authors propose to not misuse &lt;a href="https://kubernetes.io/docs/concepts/architecture/leases/">lease&lt;/a>s and instead publish the following snapshot information as part &lt;code>EtcdMember&lt;/code> custom resource:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>snapshots:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastFull:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timestamp: &amp;lt;time of full snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &amp;lt;name of the file that is uploaded&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size: &amp;lt;size of the un-compressed snapshot file uploaded&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startRevision: &amp;lt;start revision of etcd db captured in the snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endRevision: &amp;lt;end revision of etcd db captured in the snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastDelta:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timestamp: &amp;lt;time of delta snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &amp;lt;name of the file that is uploaded&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size: &amp;lt;size of the un-compressed snapshot file uploaded&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startRevision: &amp;lt;start revision of etcd db captured in the snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endRevision: &amp;lt;end revision of etcd db captured in the snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>While this information will primarily help druid compute accurate conditions regarding backup health from snapshot information and publish this to human operators, it could be further utilised by human operators to take remediatory actions (e.g. manually triggering a full or delta snapshot or further restarting the leader if the issue is still not resolved) if backup is unhealthy.&lt;/p>
&lt;h3 id="enhanced-snapshot-compaction">Enhanced Snapshot Compaction&lt;/h3>
&lt;p>Druid can be configured to perform regular snapshot compactions for etcd clusters, to reduce the total number of delta snapshots to be restored if and when a DB restoration for an etcd cluster is required. Druid triggers a snapshot compaction job when the accumulated etcd events in the latest set of delta snapshots (taken after the last full snapshot) crosses a specified threshold.&lt;/p>
&lt;p>As described in &lt;a href="https://github.com/gardener/etcd-druid/issues/591">Issue#591&lt;/a> scheduling compaction only based on number of accumulated etcd events is not sufficient to ensure a successful compaction. This is specifically targeted for kubernetes clusters where each etcd event is larger in size owing to large spec or status fields or respective resources.&lt;/p>
&lt;p>Druid will now need information regarding snapshot sizes, and more importantly the total size of accumulated delta snapshots since the last full snapshot.&lt;/p>
&lt;p>The authors propose to enhance the proposed &lt;code>snapshots&lt;/code> field described in &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/04-etcd-member-custom-resource/#use-case-3-monitoring-backup-health">Use Case #3&lt;/a> with the following additional field:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>snapshots:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> accumulatedDeltaSize: &amp;lt;total size of delta snapshots since last full snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Druid can then use this information in addition to the existing revision information to decide to trigger an early snapshot compaction job. This effectively allows druid to be proactive in performing regular compactions for etcds receiving large events, reducing the probability of a failed snapshot compaction or restoration.&lt;/p>
&lt;h3 id="enhanced-defragmentation">Enhanced Defragmentation&lt;/h3>
&lt;p>Reader is recommended to read &lt;a href="https://etcd.io/docs/v3.4/op-guide/maintenance/">Etcd Compaction &amp;amp; Defragmentation&lt;/a> in order to understand the following terminology:&lt;/p>
&lt;p>&lt;a href="https://github.com/etcd-io/etcd/blob/a603c0798948941d453b158af794edab1a8230be/mvcc/backend/backend.go#L60-L64">&lt;code>dbSize&lt;/code>&lt;/a> - total storage space used by the etcd database&lt;/p>
&lt;p>&lt;a href="https://github.com/etcd-io/etcd/blob/a603c0798948941d453b158af794edab1a8230be/mvcc/backend/backend.go#L65-L68">&lt;code>dbSizeInUse&lt;/code>&lt;/a> - logical storage space used by the etcd database, not accounting for free pages in the DB due to etcd history compaction&lt;/p>
&lt;p>The leading-backup-sidecar performs periodic defragmentations of the DBs of all the etcd-members in the cluster, controlled via a defragmentation cron schedule provided to each backup-sidecar. Defragmentation is a costly maintenance operation and causes a brief downtime to the etcd-member being defragmented, due to which the leading-backup-sidecar defragments each etcd-member sequentially. This ensures that only one etcd-member would be unavailable at any given time, thus avoiding an accidental quorum loss in the etcd cluster.&lt;/p>
&lt;p>The authors propose to move the responsibility of orchestrating these individual defragmentations to druid due to the following reasons:&lt;/p>
&lt;ul>
&lt;li>Since each backup-sidecar only has knowledge of the health of its own etcd, it can only determine whether its own etcd can be defragmented or not, based on etcd-member health. Trying to defragment a different healthy etcd-member while another etcd-member is unhealthy would lead to a transient quorum loss.&lt;/li>
&lt;li>Each backup-sidecar is only a &lt;code>sidecar&lt;/code> to its own etcd-member, and by good design principles, it must not be performing any cluster-wide maintenance operations, and this responsibility should remain with the etcd cluster operator.&lt;/li>
&lt;/ul>
&lt;p>Additionally, defragmentation of an etcd DB becomes inevitable if the DB size exceeds the specified DB space quota, since the etcd DB then becomes read-only, ie no write operations on the etcd would be possible unless the etcd DB is defragmented and storage space is freed up. In order to automate this, druid will now need information about the etcd DB size from each member, specifically the leading etcd-member, so that a cluster-wide defragmentation can be triggered if the DB size reaches a certain threshold, as already described by &lt;a href="https://github.com/gardener/etcd-backup-restore/issues/556">this issue&lt;/a>.&lt;/p>
&lt;p>The authors propose to enhance each etcd-member to regularly publish information about the &lt;code>dbSize&lt;/code> and &lt;code> dbSizeInUse&lt;/code> so that druid may trigger defragmentation for the etcd cluster.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>dbSize: &amp;lt;db-size&amp;gt; &lt;span style="color:#008000"># e.g 6Gi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dbSizeInUse: &amp;lt;db-size-in-use&amp;gt; &lt;span style="color:#008000"># e.g 3.5Gi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Difference between &lt;code>dbSize&lt;/code> and &lt;code>dbSizeInUse&lt;/code> gives a clear indication of how much storage space would be freed up if a defragmentation is performed. If the difference is not significant (based on a configurable threshold provided to druid), then no defragmentation should be performed. This will ensure that druid does not perform frequent defragmentations that do not yield much benefit. Effectively it is to maximise the benefit of defragmentation since this operations involves transient downtime for each etcd-member.&lt;/p>
&lt;h3 id="monitoring-defragmentations">Monitoring Defragmentations&lt;/h3>
&lt;p>As discussed in the previous section, every etcd-member is defragmented periodically, and can also be defragmented based on the DB size reaching a certain threshold. It is beneficial for druid to have knowledge of this data from each etcd-member for the following reasons:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>[&lt;strong>Diagnostics&lt;/strong>] It is expected that &lt;code>backup-sidecar&lt;/code> will push releveant metrics and configure alerts on these metrics.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[&lt;strong>Operational&lt;/strong>] Derive status of defragmentation at etcd cluster level. In case of partial failures for a subset of etcd-members druid can potentially re-trigger defragmentation only for those etcd-members.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The authors propose to capture this information as part of &lt;code>lastDefragmentation&lt;/code> section in the &lt;code>EtcdMember&lt;/code> resource.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>lastDefragmentation:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startTime: &amp;lt;start time of defragmentation&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endTime: &amp;lt;end time of defragmentation&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &amp;lt;Succeeded | Failed&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &amp;lt;success or failure message&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initialDBSize: &amp;lt;size of etcd DB prior to defragmentation&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> finalDBSize: &amp;lt;size of etcd DB post defragmentation&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>NOTE&lt;/strong>: Defragmentation is a cluster-wide operation, and insights derived from aggregating defragmentation data from individual etcd-members would be captured in the &lt;code>Etcd&lt;/code> resource status&lt;/p>
&lt;/blockquote>
&lt;h3 id="monitoring-restorations">Monitoring Restorations&lt;/h3>
&lt;p>Each etcd-member may perform restoration of data multiple times throughout its lifecycle, possibly owing to data corruptions. It would be useful to capture this information as part of an &lt;code>EtcdMember&lt;/code> resource, for the following use cases:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>[&lt;strong>Diagnostics&lt;/strong>] It is expected that &lt;code>backup-sidecar&lt;/code> will push a metric indicating failure to restore.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[&lt;strong>Operational&lt;/strong>] Restoration from backup-bucket only happens for a single node etcd cluster. If restoration is failing then druid cannot take any remediatory actions since there is no etcd quorum.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The authors propose to capture this information under &lt;code>lastRestoration&lt;/code> section in the &lt;code>EtcdMember&lt;/code> resource.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>lastRestoration:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &amp;lt;Failed | Success | In-Progress&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: &amp;lt;reason-code for status&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &amp;lt;human readable message for status&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startTime: &amp;lt;start time of restoration&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endTime: &amp;lt;end time of restoration&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Authors have considered the following cases to better understand how errors during restoration will be handled:&lt;/p>
&lt;p>&lt;strong>Case #1&lt;/strong> - &lt;em>Failure to connect to Provider Object Store&lt;/em>&lt;/p>
&lt;p>At present full and delta snapshots are downloaded during restoration. If there is a failure then initialization status transitions to &lt;code>Failed&lt;/code> followed by &lt;code>New&lt;/code> which forces &lt;code>etcd-wrapper&lt;/code> to trigger the initialization again. This in a way forces a retry and currently there is no limit on the number of attempts.&lt;/p>
&lt;p>Authors propose to improve the retry logic but keep the overall behavior of not forcing a container restart the same.&lt;/p>
&lt;p>&lt;strong>Case #2&lt;/strong> - &lt;em>Read-Only Mounted volume&lt;/em>&lt;/p>
&lt;p>If a mounted volume which is used to create the etcd data directory turns &lt;code>read-only&lt;/code> then authors propose to capture this state via &lt;code>EtcdMember&lt;/code>.&lt;/p>
&lt;p>Authors propose that &lt;code>druid&lt;/code> should initiate recovery by deleting the PVC for this etcd-member and letting &lt;code>StatefulSet&lt;/code> controller re-create the Pod and the PVC. Removing PVC and deleting the pod is considered safe because:&lt;/p>
&lt;ul>
&lt;li>Data directory is present and is the DB is corrupt resulting in an un-usasble etcd.&lt;/li>
&lt;li>Data directory is not present but any attempt to create a directory structure fails due to &lt;code>read-only&lt;/code> FS.&lt;/li>
&lt;/ul>
&lt;p>In both these cases there is no side-effect of deleting the PVC and the Pod.&lt;/p>
&lt;p>&lt;strong>Case #3&lt;/strong> - &lt;em>Revision mismatch&lt;/em>&lt;/p>
&lt;p>There is currently an issue in &lt;code>backup-sidecar&lt;/code> which results in a revision mismatch in the snapshots (full/delta) taken by leading the &lt;code>backup-sidecar&lt;/code> container. This results in a restoration failure. One occurance of such issue has been captured in &lt;a href="https://github.com/gardener/etcd-backup-restore/issues/583">Issue#583&lt;/a>. This occurence points to a bug which should be fixed however there is a rare possibility that these snapshots (full/delta) get corrupted. In this rare situation, &lt;code>backup-sidecar&lt;/code> should only raise an alert.&lt;/p>
&lt;p>Authors propose that &lt;code>druid&lt;/code> should not take any remediatory actions as this involves:&lt;/p>
&lt;ul>
&lt;li>Inspecting snapshots&lt;/li>
&lt;li>If the full snapshot is corrupt then a decision needs to be taken to recover from the last full snapshot as the base snapshot. This can result in data loss and therefore needs manual intervention.&lt;/li>
&lt;li>If a delta snapshot is corrupt, then recovery can be done till the corrupt revision in the delta snapshot. Since this will also result in a loss of data therefore this decision needs to be take by an operator.&lt;/li>
&lt;/ul>
&lt;h3 id="monitoring-volume-mismatches">Monitoring Volume Mismatches&lt;/h3>
&lt;p>Each etcd-member checks for possible etcd data volume mismatches, based on which it decides whether to start the etcd process or not, but this information is not captured anywhere today. It would be beneficial to capture this information as part of the &lt;code>EtcdMember&lt;/code> resource so that a human operator may check this and manually fix the underlying problem with the wrong volume being attached or mounted to an etcd-member pod.&lt;/p>
&lt;p>The authors propose to capture this information under &lt;code>volumeMismatches&lt;/code> section in the &lt;code>EtcdMember&lt;/code> resource.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>volumeMismatches:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- identifiedAt: &amp;lt;time at which wrong volume mount was identified&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fixedAt: &amp;lt;time at which correct volume was mounted&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumeID: &amp;lt;volume ID of wrong volume that got mounted&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> numRestarts: &amp;lt;num of etcd-member restarts that were attempted&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each entry under &lt;code>volumeMismatches&lt;/code> will be for a unique &lt;code>volumeID&lt;/code>. If there is a pod restart and it results in yet another unexpected &lt;code>volumeID&lt;/code> (different from the already captured volumeIDs) then a new entry will get created. &lt;code>numRestarts&lt;/code> denotes the number of restarts seen by the etcd-member for a specific &lt;code>volumeID&lt;/code>.&lt;/p>
&lt;p>Based on information from the &lt;code>volumeMismatches&lt;/code> section, druid &lt;em>may&lt;/em> choose to perform rudimentary remediatory actions as simple as restarting the member pod to force a possible rescheduling of the pod to a different node which could potentially force the correct volume to be mounted to the member.&lt;/p>
&lt;h3 id="custom-resource-api">Custom Resource API&lt;/h3>
&lt;h4 id="spec-vs-status">Spec vs Status&lt;/h4>
&lt;p>Information that is captured in the etcd-member custom resource could be represented either as &lt;code>EtcdMember.Status&lt;/code> or &lt;code>EtcdMemberState.Spec&lt;/code>.&lt;/p>
&lt;p>Gardener has a similar need to capture a shoot state and they have taken the decision to represent it via &lt;a href="https://github.com/gardener/gardener/blob/9e1a20aa9cc32fc806123003ba6079b284948767/pkg/apis/core/types_shootstate.go#L27-L33">ShootState&lt;/a> resource where the state or status of a shoot is captured as part of the &lt;code>Spec&lt;/code> field in the &lt;code>ShootState&lt;/code> custom resource.&lt;/p>
&lt;p>The authors wish to instead align themselves with the &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status">K8S API conventions&lt;/a> and choose to use &lt;code>EtcdMember&lt;/code> custom resource and capture the status of each member in &lt;code>Status&lt;/code> field of this resource. This has the following advantages:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Spec&lt;/code> represents a desired state of a resource and what is intended to be captured is the &lt;code>As-Is&lt;/code> state of a resource which &lt;code>Status&lt;/code> is meant to capture. Therefore, semantically using &lt;code>Status&lt;/code> is the correct choice.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Not mis-using &lt;code>Spec&lt;/code> now to represent &lt;code>As-Is&lt;/code> state provides us with a choice to extend the custom resource with any future need for a &lt;code>Spec&lt;/code> a.k.a desired state.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="representing-state-transitions">Representing State Transitions&lt;/h4>
&lt;p>The authors propose to use a custom representation for states, sub-states and transitions.&lt;/p>
&lt;p>Consider the following representation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>transitions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- state: &amp;lt;name of the state that the etcd-member has transitioned to&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subState: &amp;lt;name of the sub-state if any&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: &amp;lt;reason code for the transition&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transitionTime: &amp;lt;time of transition to this state&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &amp;lt;detailed message if any&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As an example, consider the following transitions which represent addition of an etcd-member during scale-up of an etcd cluster, followed by a restart of the etcd-member which detects a corrupt DB:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transitions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - state: New
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subState: New
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: ClusterScaledUp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transitionTime: &lt;span style="color:#a31515">&amp;#34;2023-07-17T05:00:00Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &lt;span style="color:#a31515">&amp;#34;New member added due to etcd cluster scale-up&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - state: Starting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subState: PendingLearner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: WaitingToJoinAsLearner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transitionTime: &lt;span style="color:#a31515">&amp;#34;2023-07-17T05:00:30Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &lt;span style="color:#a31515">&amp;#34;Waiting to join the cluster as a learner&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - state: Starting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subState: Learner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: JoinedAsLearner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transitionTime: &lt;span style="color:#a31515">&amp;#34;2023-07-17T05:01:20Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &lt;span style="color:#a31515">&amp;#34;Joined the cluster as a learner&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - state: Started
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subState: Follower
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: PromotedAsVotingMember
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transitionTime: &lt;span style="color:#a31515">&amp;#34;2023-07-17T05:02:00Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &lt;span style="color:#a31515">&amp;#34;Now in sync with leader, promoted as voting member&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - state: Initializing
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subState: DBValidationFull
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: DetectedPreviousUncleanExit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transitionTime: &lt;span style="color:#a31515">&amp;#34;2023-07-17T08:00:00Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &lt;span style="color:#a31515">&amp;#34;Detected previous unclean exit, requires full DB validation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - state: New
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subState: New
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: DBCorruptionDetected
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transitionTime: &lt;span style="color:#a31515">&amp;#34;2023-07-17T08:01:30Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &lt;span style="color:#a31515">&amp;#34;Detected DB corruption during initialization, removing member from cluster&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - state: Starting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subState: PendingLearner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: WaitingToJoinAsLearner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transitionTime: &lt;span style="color:#a31515">&amp;#34;2023-07-17T08:02:10Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &lt;span style="color:#a31515">&amp;#34;Waiting to join the cluster as a learner&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - state: Starting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subState: Learner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: JoinedAsLearner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transitionTime: &lt;span style="color:#a31515">&amp;#34;2023-07-17T08:02:20Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &lt;span style="color:#a31515">&amp;#34;Joined the cluster as a learner&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - state: Started
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subState: Follower
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: PromotedAsVotingMember
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transitionTime: &lt;span style="color:#a31515">&amp;#34;2023-07-17T08:04:00Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &lt;span style="color:#a31515">&amp;#34;Now in sync with leader, promoted as voting member&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="reason-codes">Reason Codes&lt;/h5>
&lt;p>The authors propose the following list of possible reason codes for transitions. This list is not exhaustive, and can be further enhanced to capture any new transitions in the future.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Reason&lt;/th>
&lt;th>Transition From State (SubState)&lt;/th>
&lt;th>Transition To State (SubState)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>ClusterScaledUp&lt;/code> | &lt;code>NewSingleNodeClusterCreated&lt;/code>&lt;/td>
&lt;td>nil&lt;/td>
&lt;td>New&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DetectedPreviousCleanExit&lt;/code>&lt;/td>
&lt;td>New | Started (Leader) | Started (Follower)&lt;/td>
&lt;td>Initializing (DBValidationSanity)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DetectedPreviousUncleanExit&lt;/code>&lt;/td>
&lt;td>New | Started (Leader) | Started (Follower)&lt;/td>
&lt;td>Initializing (DBValidationFull)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DBValidationFailed&lt;/code>&lt;/td>
&lt;td>Initializing (DBValidationSanity) | Initializing (DBValidationFull)&lt;/td>
&lt;td>Initializing (Restoration) | New&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DBValidationSucceeded&lt;/code>&lt;/td>
&lt;td>Initializing (DBValidationSanity) | Initializing (DBValidationFull)&lt;/td>
&lt;td>Started (Leader) | Started (Follower)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Initializing (Restoration)Succeeded&lt;/code>&lt;/td>
&lt;td>Initializing (Restoration)&lt;/td>
&lt;td>Started (Leader)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>WaitingToJoinAsLearner&lt;/code>&lt;/td>
&lt;td>New&lt;/td>
&lt;td>Starting (PendingLearner)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>JoinedAsLearner&lt;/code>&lt;/td>
&lt;td>Starting (PendingLearner)&lt;/td>
&lt;td>Starting (Learner)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>PromotedAsVotingMember&lt;/code>&lt;/td>
&lt;td>Starting (Learner)&lt;/td>
&lt;td>Started (Follower)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>GainedClusterLeadership&lt;/code>&lt;/td>
&lt;td>Started (Follower)&lt;/td>
&lt;td>Started (Leader)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>LostClusterLeadership&lt;/code>&lt;/td>
&lt;td>Started (Leader)&lt;/td>
&lt;td>Started (Follower)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="api">API&lt;/h4>
&lt;h5 id="etcdmember">EtcdMember&lt;/h5>
&lt;p>The authors propose to add the &lt;code>EtcdMember&lt;/code> custom resource API to etcd-druid APIs and initially introduce it with &lt;code>v1alpha1&lt;/code> version.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: druid.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: EtcdMember
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gardener.cloud/owned-by: &amp;lt;name of parent Etcd resource&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &amp;lt;name of the etcd-member&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: &amp;lt;namespace | will be the same as that of parent Etcd resource&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ownerReferences:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - apiVersion: druid.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> blockOwnerDeletion: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> controller: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: Etcd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &amp;lt;name of the parent Etcd resource&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uid: &amp;lt;UID of the parent Etcd resource&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: &amp;lt;etcd-member id&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clusterID: &amp;lt;etcd cluster id&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> peerTLSEnabled: &amp;lt;bool&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbSize: &amp;lt;db-size&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dbSizeInUse: &amp;lt;db-size-in-use&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> snapshots:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastFull:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timestamp: &amp;lt;time of full snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &amp;lt;name of the file that is uploaded&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size: &amp;lt;size of the un-compressed snapshot file uploaded&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startRevision: &amp;lt;start revision of etcd db captured in the snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endRevision: &amp;lt;end revision of etcd db captured in the snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastDelta:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timestamp: &amp;lt;time of delta snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &amp;lt;name of the file that is uploaded&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size: &amp;lt;size of the un-compressed snapshot file uploaded&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startRevision: &amp;lt;start revision of etcd db captured in the snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endRevision: &amp;lt;end revision of etcd db captured in the snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> accumulatedDeltaSize: &amp;lt;total size of delta snapshots since last full snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastRestoration:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: &amp;lt;FromSnapshot | FromLeader&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &amp;lt;Failed | Success | In-Progress&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startTime: &amp;lt;start time of restoration&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endTime: &amp;lt;end time of restoration&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastDefragmentation:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> startTime: &amp;lt;start time of defragmentation&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> endTime: &amp;lt;end time of defragmentation&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initialDBSize: &amp;lt;size of etcd DB prior to defragmentation&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> finalDBSize: &amp;lt;size of etcd DB post defragmentation&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumeMismatches:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - identifiedAt: &amp;lt;time at which wrong volume mount was identified&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fixedAt: &amp;lt;time at which correct volume was mounted&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volumeID: &amp;lt;volume ID of wrong volume that got mounted&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> numRestarts: &amp;lt;num of pod restarts that were attempted&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transitions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - state: &amp;lt;name of the state that the etcd-member has transitioned to&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subState: &amp;lt;name of the sub-state if any&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: &amp;lt;reason code for the transition&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> transitionTime: &amp;lt;time of transition to this state&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message: &amp;lt;detailed message if any&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="etcd">Etcd&lt;/h5>
&lt;p>Authors propose the following changes to the &lt;code>Etcd&lt;/code> API:&lt;/p>
&lt;ol>
&lt;li>In the &lt;code>Etcd.Status&lt;/code> resource API, &lt;a href="https://github.com/gardener/etcd-druid/blob/9a598d05e639099ddf404803f87376852261a052/api/v1alpha1/types_etcd.go#L419">member status&lt;/a> is computed and stored. This field will be marked as deprecated and in a later version of druid it will be removed. In its place, the authors propose to introduce the following:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">type&lt;/span> EtcdStatus &lt;span style="color:#00f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// MemberRefs contains references to all existing EtcdMember resources
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> MemberRefs []CrossVersionObjectReference
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>In &lt;code>Etcd.Status&lt;/code> resource API, &lt;a href="https://github.com/gardener/etcd-druid/blob/9a598d05e639099ddf404803f87376852261a052/api/v1alpha1/types_etcd.go#L422">PeerUrlTLSEnabled&lt;/a> reflects the status of enabling TLS for peer communication across all etcd-members. Currentlty this field is not been used anywhere. In this proposal, the authors have also proposed that each &lt;code>EtcdMember&lt;/code> resource should capture the status of TLS enablement of peer URL. The authors propose to relook at the need to have this field under &lt;code>EtcdStatus&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h3 id="lifecycle-of-an-etcdmember">Lifecycle of an EtcdMember&lt;/h3>
&lt;h4 id="creation">Creation&lt;/h4>
&lt;p>Druid creates an &lt;code>EtcdMember&lt;/code> resource for every replica in &lt;code>etcd.Spec.Replicas&lt;/code> during reconciliation of an etcd resource. For a fresh etcd cluster this is done prior to creation of the StatefulSet resource and for an existing cluster which has now been scaled-up, it is done prior to updating the StatefulSet resource.&lt;/p>
&lt;h4 id="updation">Updation&lt;/h4>
&lt;p>All fields in &lt;code>EtcdMember.Status&lt;/code> are &lt;em>only&lt;/em> updated by the corresponding etcd-member. Druid only consumes the information published via &lt;code>EtcdMember&lt;/code> resources.&lt;/p>
&lt;h4 id="deletion">Deletion&lt;/h4>
&lt;p>Druid is responsible for deletion of all existing &lt;code>EtcdMember&lt;/code> resources for an etcd cluster. There are three scenarios where an &lt;code>EtcdMember&lt;/code> resource will be deleted:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Deletion of etcd resource.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Scale down of an etcd cluster to 0 replicas due to hibernation of the k8s control plane.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Transient scale down of an etcd cluster to 0 replicas to recover from a quorum loss.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Authors found no reason to retain EtcdMember resources when the etcd cluster is scale down to 0 replicas since the information contained in each EtcdMember resource would no longer represent the current state of each member and would thus be stale. Any controller in druid which acts upon the &lt;code>EtcdMember.Status&lt;/code> could potentially take incorrect actions.&lt;/p>
&lt;h4 id="reconciliation">Reconciliation&lt;/h4>
&lt;p>Authors propose to introduce a new controller (let&amp;rsquo;s call it &lt;code>etcd-member-controller&lt;/code>) which watches for changes to the &lt;code>EtcdMember&lt;/code> resource(s). If a reconciliation of an &lt;code>Etcd&lt;/code> resource is required as a result of change in &lt;code>EtcdMember&lt;/code> status then this controller should enqueue an event and force a reconciliation via existing &lt;code>etcd-controller&lt;/code>, thus preserving the single-actor-principal constraint which ensures deterministic changes to etcd cluster resources.&lt;/p>
&lt;blockquote>
&lt;p>NOTE: Further decisions w.r.t responsibility segregation will be taken during implementation and will not be documented in this proposal.&lt;/p>
&lt;/blockquote>
&lt;h5 id="stale-etcdmember-status-handling">Stale EtcdMember Status Handling&lt;/h5>
&lt;p>It is possible that an etcd-member is unable to update its respective &lt;code>EtcdMember&lt;/code> resource. Following can be some of the implications which should be kept in mind while reconciling &lt;code>EtcdMember&lt;/code> resource in druid:&lt;/p>
&lt;ul>
&lt;li>Druid sees stale state transitions (this assumes that the backup-sidecar attempts to update the state/sub-state in &lt;code>etcdMember.status.transitions&lt;/code> with best attempt). There is currently no implication other than an operator seeing a stale state.&lt;/li>
&lt;li>&lt;code>dbSize&lt;/code> and &lt;code>dbSizeInUse&lt;/code> could not be updated. A consequence could be that druid continues to see high value for &lt;code>dbSize - dbSizeInUse&lt;/code> for a extended amount of time. Druid should ensure that it does not trigger repeated defragmentations.&lt;/li>
&lt;li>If &lt;code>VolumeMismatches&lt;/code> is stale, then druid should no longer attempt to recover by repeatedly restarting the pod.&lt;/li>
&lt;li>Failed &lt;code>restoration&lt;/code> was recorded last and further updates to this array failed. Druid should not repeatedly take full-snapshots.&lt;/li>
&lt;li>If &lt;code>snapshots.accumulatedDeltaSize&lt;/code> could not be updated, then druid should not schedule repeated compaction Jobs.&lt;/li>
&lt;/ul>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://etcd.io/docs/v3.3/op-guide/recovery/#snapshotting-the-keyspace">Disaster recovery | etcd&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://etcd.io/docs/v3.3/dev-guide/api_reference_v3/#message-statusresponse-etcdserveretcdserverpbrpcproto">etcd API Reference | etcd&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://raft.github.io/raft.pdf">Raft Consensus Algorithm&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Feature Gates in Etcd-Druid</title><link>https://gardener.cloud/docs/other-components/etcd-druid/deployment/feature-gates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/deployment/feature-gates/</guid><description>
&lt;h1 id="feature-gates-in-etcd-druid">Feature Gates in Etcd-Druid&lt;/h1>
&lt;p>This page contains an overview of the various feature gates an administrator can specify on etcd-druid.&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Feature gates are a set of key=value pairs that describe etcd-druid features. You can turn these features on or off by passing them to the &lt;code>--feature-gates&lt;/code> CLI flag in the etcd-druid command.&lt;/p>
&lt;p>The following tables are a summary of the feature gates that you can set on etcd-druid.&lt;/p>
&lt;ul>
&lt;li>The “Since” column contains the etcd-druid release when a feature is introduced or its release stage is changed.&lt;/li>
&lt;li>The “Until” column, if not empty, contains the last etcd-druid release in which you can still use a feature gate.&lt;/li>
&lt;li>If a feature is in the &lt;em>Alpha&lt;/em> or &lt;em>Beta&lt;/em> state, you can find the feature listed in the Alpha/Beta feature gate table.&lt;/li>
&lt;li>If a feature is stable you can find all stages for that feature listed in the Graduated/Deprecated feature gate table.&lt;/li>
&lt;li>The Graduated/Deprecated feature gate table also lists deprecated and withdrawn features.&lt;/li>
&lt;/ul>
&lt;h2 id="feature-gates-for-alpha-or-beta-features">Feature Gates for Alpha or Beta Features&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Feature&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Stage&lt;/th>
&lt;th>Since&lt;/th>
&lt;th>Until&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>UseEtcdWrapper&lt;/code>&lt;/td>
&lt;td>&lt;code>false&lt;/code>&lt;/td>
&lt;td>&lt;code>Alpha&lt;/code>&lt;/td>
&lt;td>&lt;code>0.19&lt;/code>&lt;/td>
&lt;td>&lt;code>0.21&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>UseEtcdWrapper&lt;/code>&lt;/td>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;td>&lt;code>Beta&lt;/code>&lt;/td>
&lt;td>&lt;code>0.22&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="feature-gates-for-graduated-or-deprecated-features">Feature Gates for Graduated or Deprecated Features&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Feature&lt;/th>
&lt;th>Default&lt;/th>
&lt;th>Stage&lt;/th>
&lt;th>Since&lt;/th>
&lt;th>Until&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;/table>
&lt;h2 id="using-a-feature">Using a Feature&lt;/h2>
&lt;p>A feature can be in &lt;em>Alpha&lt;/em>, &lt;em>Beta&lt;/em> or &lt;em>GA&lt;/em> stage.
An &lt;em>Alpha&lt;/em> feature means:&lt;/p>
&lt;ul>
&lt;li>Disabled by default.&lt;/li>
&lt;li>Might be buggy. Enabling the feature may expose bugs.&lt;/li>
&lt;li>Support for feature may be dropped at any time without notice.&lt;/li>
&lt;li>The API may change in incompatible ways in a later software release without notice.&lt;/li>
&lt;li>Recommended for use only in short-lived testing clusters, due to increased
risk of bugs and lack of long-term support.&lt;/li>
&lt;/ul>
&lt;p>A &lt;em>Beta&lt;/em> feature means:&lt;/p>
&lt;ul>
&lt;li>Enabled by default.&lt;/li>
&lt;li>The feature is well tested. Enabling the feature is considered safe.&lt;/li>
&lt;li>Support for the overall feature will not be dropped, though details may change.&lt;/li>
&lt;li>The schema and/or semantics of objects may change in incompatible ways in a
subsequent beta or stable release. When this happens, we will provide instructions
for migrating to the next version. This may require deleting, editing, and
re-creating API objects. The editing process may require some thought.
This may require downtime for applications that rely on the feature.&lt;/li>
&lt;li>Recommended for only non-critical uses because of potential for
incompatible changes in subsequent releases.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Please do try &lt;em>Beta&lt;/em> features and give feedback on them!
After they exit beta, it may not be practical for us to make more changes.&lt;/p>
&lt;/blockquote>
&lt;p>A &lt;em>General Availability&lt;/em> (GA) feature is also referred to as a &lt;em>stable&lt;/em> feature. It means:&lt;/p>
&lt;ul>
&lt;li>The feature is always enabled; you cannot disable it.&lt;/li>
&lt;li>The corresponding feature gate is no longer needed.&lt;/li>
&lt;li>Stable versions of features will appear in released software for many subsequent versions.&lt;/li>
&lt;/ul>
&lt;h2 id="list-of-feature-gates">List of Feature Gates&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Feature&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>UseEtcdWrapper&lt;/code>&lt;/td>
&lt;td>Enables the use of etcd-wrapper image and a compatible version of etcd-backup-restore, along with component-specific configuration changes necessary for the usage of the etcd-wrapper image.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Getting Started Locally</title><link>https://gardener.cloud/docs/other-components/etcd-druid/getting-started-locally/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/getting-started-locally/</guid><description>
&lt;h1 id="etcd-druid-local-setup">Etcd-Druid Local Setup&lt;/h1>
&lt;p>This page aims to provide steps on how to setup Etcd-Druid locally with and without storage providers.&lt;/p>
&lt;h2 id="clone-the-etcd-druid-github-repo">Clone the etcd-druid github repo&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># clone the repo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://github.com/gardener/etcd-druid.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># cd into etcd-druid folder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd etcd-druid
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Etcd-druid uses &lt;a href="https://kind.sigs.k8s.io/">kind&lt;/a> as it&amp;rsquo;s local Kubernetes engine. The local setup is configured for kind due to its convenience but any other kubernetes setup would also work.&lt;/li>
&lt;li>To set up etcd-druid with backups enabled on a &lt;a href="https://github.com/localstack/localstack">LocalStack&lt;/a> provider, refer &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/getting-started-locally-localstack/">this document&lt;/a>&lt;/li>
&lt;li>In the section &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/getting-started-locally/#annotate-etcd-cr-with-the-reconcile-annotation">Annotate Etcd CR with the reconcile annotation&lt;/a>, the flag &lt;code>--enable-etcd-spec-auto-reconcile&lt;/code> is set to &lt;code>false&lt;/code>, which means a special annotation is required on the Etcd CR, for etcd-druid to reconcile it. To disable this behavior and allow auto-reconciliation of the Etcd CR for any change in the Etcd spec, set the &lt;code>controllers.etcd.enableEtcdSpecAutoReconcile&lt;/code> value to &lt;code>true&lt;/code> in the &lt;code>values.yaml&lt;/code> located at &lt;a href="https://github.com/gardener/etcd-druid/blob/master/charts/druid/values.yaml">&lt;code>charts/druid/values.yaml&lt;/code>&lt;/a>. Or if etcd-druid is being run as a process, then while starting the process, set the CLI flag &lt;code>--enable-etcd-spec-auto-reconcile=true&lt;/code> for it.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="setting-up-the-kind-cluster">Setting up the kind cluster&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Create a kind cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make kind-up
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This creates a new kind cluster and stores the kubeconfig in the &lt;code>./hack/e2e-test/infrastructure/kind/kubeconfig&lt;/code> file.&lt;/p>
&lt;p>To target this newly created cluster, set the &lt;code>KUBECONFIG&lt;/code> environment variable to the kubeconfig file located at &lt;code>./hack/e2e-test/infrastructure/kind/kubeconfig&lt;/code> by using the following&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>export KUBECONFIG=$PWD/hack/e2e-test/infrastructure/kind/kubeconfig
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setting-up-etcd-druid">Setting up etcd-druid&lt;/h2>
&lt;p>Either one of these commands may be used to deploy etcd-druid to the configured k8s cluster.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The following command deploys etcd-druid to the configured k8s cluster:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>make deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>The following command deploys etcd-druid to the configured k8s cluster using Skaffold &lt;code>dev&lt;/code> mode, such that changes in the etcd-druid code are automatically picked up and applied to the deployment. This helps with local development and quick iterative changes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>make deploy-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>The following command deploys etcd-druid to the configured k8s cluster using Skaffold &lt;code>debug&lt;/code> mode, so that a debugger can be attached to the running etcd-druid deployment. Please refer to &lt;a href="https://skaffold.dev/docs/workflows/debug/">this guide&lt;/a> for more information on Skaffold-based debugging:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>make deploy-debug
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>This generates the &lt;code>Etcd&lt;/code> and &lt;code>EtcdCopyBackupsTask&lt;/code> CRDs and deploys an etcd-druid pod into the cluster.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> Before calling any of the &lt;code>make deploy*&lt;/code> commands, certain environment variables may be set in order to enable/disable certain functionalities of etcd-druid. These are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>DRUID_ENABLE_ETCD_COMPONENTS_WEBHOOK=true&lt;/code> : enables the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/concepts/webhooks/#etcd-components-webhook">etcdcomponents webhook&lt;/a>&lt;/li>
&lt;li>&lt;code>DRUID_E2E_TEST=true&lt;/code> : sets specific configuration for etcd-druid for optimal e2e test runs, like a lower sync period for the etcd controller.&lt;/li>
&lt;li>&lt;code>USE_ETCD_DRUID_FEATURE_GATES=false&lt;/code> : enables etcd-druid feature gates.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="prepare-the-etcd-cr">Prepare the Etcd CR&lt;/h3>
&lt;p>Etcd CR can be configured in 2 ways. Either to take backups to the store or disable them. Follow the appropriate section below based on the requirement.&lt;/p>
&lt;p>The Etcd CR can be found at this location &lt;code>$PWD/config/samples/druid_v1alpha1_etcd.yaml&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Without Backups enabled&lt;/strong>&lt;/p>
&lt;p>To set up etcd-druid without backups enabled, make sure the &lt;code>spec.backup.store&lt;/code> section of the Etcd CR is commented out.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>With Backups enabled (On Cloud Provider Object Stores)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Prepare the secret&lt;/strong>&lt;/p>
&lt;p>Create a secret for cloud provider access. Find the secret yaml templates for different cloud providers &lt;a href="https://github.com/gardener/etcd-backup-restore/tree/master/example/storage-provider-secrets">here&lt;/a>.&lt;/p>
&lt;p>Replace the dummy values with the actual configurations and make sure to add a name and a namespace to the secret as intended.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note 1:&lt;/strong> The secret should be applied in the same namespace as druid.&lt;/p>
&lt;p>&lt;strong>Note 2:&lt;/strong> All the values in the data field of secret yaml should be in base64 encoded format.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Apply the secret&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl apply -f path/to/secret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Adapt &lt;code>Etcd&lt;/code> resource&lt;/strong>&lt;/p>
&lt;p>Uncomment the &lt;code>spec.backup.store&lt;/code> section of the druid yaml and set the keys to allow backuprestore to take backups by connecting to an object store.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Configuration for storage provider&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>store:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: etcd-backup-secret-name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> container: object-storage-container-name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> provider: aws # options: aws,azure,gcp,openstack,alicloud,dell,openshift,local
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prefix: etcd-test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Brief explanation of keys:&lt;/p>
&lt;ul>
&lt;li>&lt;code>secretRef.name&lt;/code> is the name of the secret that was applied as mentioned above&lt;/li>
&lt;li>&lt;code>store.container&lt;/code> is the object storage bucket name&lt;/li>
&lt;li>&lt;code>store.provider&lt;/code> is the bucket provider. Pick from the options mentioned in comment&lt;/li>
&lt;li>&lt;code>store.prefix&lt;/code> is the folder name that you want to use for your snapshots inside the bucket.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="applying-the-etcd-cr">Applying the Etcd CR&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> With backups enabled, make sure the bucket is created in corresponding cloud provider before applying the Etcd yaml&lt;/p>
&lt;/blockquote>
&lt;p>Create the Etcd CR (Custom Resource) by applying the Etcd yaml to the cluster&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Apply the prepared etcd CR yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl apply -f config/samples/druid_v1alpha1_etcd.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="verify-the-etcd-cluster">Verify the Etcd cluster&lt;/h3>
&lt;p>To obtain information regarding the newly instantiated etcd cluster, perform the following step, which gives details such as the cluster size, readiness status of its members, and various other attributes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl get etcd -o=wide
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="verify-etcd-member-pods">Verify Etcd Member Pods&lt;/h4>
&lt;p>To check the etcd member pods, do the following and look out for pods starting with the name &lt;code>etcd-&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl get pods
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="verify-etcd-pods-functionality">Verify Etcd Pods&amp;rsquo; Functionality&lt;/h4>
&lt;p>Verify the working conditions of the etcd pods by putting data through a etcd container and access the db from same/another container depending on single/multi node etcd cluster.&lt;/p>
&lt;p>Ideally, you can exec into the etcd container using &lt;code>kubectl exec -it &amp;lt;etcd_pod&amp;gt; -c etcd -- bash&lt;/code> if it utilizes a base image containing a shell. However, note that the &lt;code>etcd-wrapper&lt;/code> Docker image employs a &lt;a href="https://github.com/GoogleContainerTools/distroless">distroless image&lt;/a>, which lacks a shell. To interact with etcd, use an &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/ephemeral-containers/">Ephemeral container&lt;/a> as a debug container. Refer to this &lt;a href="https://github.com/gardener/etcd-wrapper/blob/main/docs/deployment/ops.md#build-image">documentation&lt;/a> for building and using an ephemeral container by attaching it to the etcd container.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Put a key-value pair into the etcd &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>etcdctl put key1 value1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Retrieve all key-value pairs from the etcd db&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>etcdctl get --prefix &lt;span style="color:#a31515">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For a multi-node etcd cluster, insert the key-value pair from the &lt;code>etcd&lt;/code> container of one etcd member and retrieve it from the &lt;code>etcd&lt;/code> container of another member to verify consensus among the multiple etcd members.&lt;/p>
&lt;h4 id="view-etcd-database-file">View Etcd Database File&lt;/h4>
&lt;p>The Etcd database file is located at &lt;code>var/etcd/data/new.etcd/snap/db&lt;/code> inside the &lt;code>backup-restore&lt;/code> container. In versions with an &lt;code>alpine&lt;/code> base image, you can exec directly into the container. However, in recent versions where the &lt;code>backup-restore&lt;/code> docker image started using a distroless image, a debug container is required to communicate with it, as mentioned in the previous section.&lt;/p>
&lt;h3 id="updating-the-etcd-cr">Updating the Etcd CR&lt;/h3>
&lt;p>The &lt;code>Etcd&lt;/code> spec can be updated with new changes, such as etcd cluster configuration or backup-restore configuration, and etcd-druid will reconcile these changes as expected, under certain conditions:&lt;/p>
&lt;ol>
&lt;li>If the &lt;code>--enable-etcd-spec-auto-reconcile&lt;/code> flag is set to &lt;code>true&lt;/code>, the spec change is automatically picked up and reconciled by etcd-druid.&lt;/li>
&lt;li>If the &lt;code>--enable-etcd-spec-auto-reconcile&lt;/code> flag is unset, or set to &lt;code>false&lt;/code>, then etcd-druid will expect an additional annotation &lt;code>gardener.cloud/operation: reconcile&lt;/code> on the &lt;code>Etcd&lt;/code> resource in order to pick it up for reconciliation. Upon successful reconciliation, this annotation is removed by etcd-druid. The annotation can be added as follows:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Annotate etcd-test CR to reconcile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl annotate etcd etcd-test gardener.cloud/operation=&lt;span style="color:#a31515">&amp;#34;reconcile&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="cleaning-the-setup">Cleaning the setup&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Delete the cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make kind-down
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This cleans up the entire setup as the kind cluster gets deleted. It deletes the created Etcd, all pods that got created along the way and also other resources such as statefulsets, services, PV&amp;rsquo;s, PVC&amp;rsquo;s, etc.&lt;/p></description></item><item><title>Docs: Getting Started Locally Azurite</title><link>https://gardener.cloud/docs/other-components/etcd-druid/getting-started-locally-azurite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/getting-started-locally-azurite/</guid><description>
&lt;h1 id="getting-started-with-etcd-druid-using-azurite-and-kind">Getting started with &lt;code>etcd-druid&lt;/code> using &lt;code>Azurite&lt;/code>, and &lt;code>kind&lt;/code>&lt;/h1>
&lt;p>This document is a step-by-step guide to run &lt;code>etcd-druid&lt;/code> with &lt;a href="https://github.com/Azure/Azurite#introduction">&lt;code>Azurite&lt;/code>&lt;/a>, the &lt;code>Azure Blob Storage&lt;/code> emulator, within a &lt;a href="https://kind.sigs.k8s.io/">&lt;code>kind&lt;/code>&lt;/a> cluster. This setup is ideal for local development and testing.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.docker.com/products/docker-desktop/">&lt;code>Docker&lt;/code>&lt;/a> with the daemon running, or Docker Desktop running.&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/en-us/cli/azure/install-azure-cli">&lt;code>Azure CLI&lt;/code>&lt;/a> (&lt;code>&amp;gt;=2.55.0&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h2 id="environment-setup">Environment setup&lt;/h2>
&lt;h3 id="step-1-provisioning-the-kind-cluster">Step 1: Provisioning the &lt;code>kind&lt;/code> cluster&lt;/h3>
&lt;p>Execute the command below to provision a &lt;code>kind&lt;/code> cluster. This command also forwards port &lt;code>10000&lt;/code> from the &lt;a href="https://github.com/gardener/etcd-druid/blob/master/hack/e2e-test/infrastructure/kind/cluster.yaml">&lt;code>kind&lt;/code>&lt;/a> cluster to your local machine, enabling &lt;code>Azurite&lt;/code> access:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make kind-up
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Export the &lt;code>KUBECONFIG&lt;/code> file after running the above command.&lt;/p>
&lt;h3 id="step-2-deploy-azurite">Step 2: Deploy &lt;code>Azurite&lt;/code>&lt;/h3>
&lt;p>To start up the &lt;code>Azurite&lt;/code> emulator in a pod in the &lt;code>kind&lt;/code> cluster, run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make deploy-azurite
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step-3-set-up-a-abs-container">Step 3: Set up a &lt;code>ABS Container&lt;/code>&lt;/h3>
&lt;ol>
&lt;li>To use the &lt;code>Azure CLI&lt;/code> with the &lt;code>Azurite&lt;/code> emulator running as a pod in the &lt;code>kind&lt;/code> cluster, export the connection string for the &lt;code>Azure CLI&lt;/code>.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export AZURE_STORAGE_CONNECTION_STRING=&lt;span style="color:#a31515">&amp;#34;DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>Create a &lt;code>Azure Blob Storage Container&lt;/code> in &lt;code>Azurite&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>az storage container create -n etcd-bucket
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step-4-deploy-etcd-druid">Step 4: Deploy &lt;code>etcd-druid&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step-5-configure-the-secret-and-the-etcd-manifests">Step 5: Configure the &lt;code>Secret&lt;/code> and the &lt;code>Etcd&lt;/code> manifests&lt;/h3>
&lt;ol>
&lt;li>Apply the Kubernetes &lt;code>Secret&lt;/code> manifest through:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f config/samples/etcd-secret-azurite.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>Apply the &lt;code>Etcd&lt;/code> manifest through:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f config/samples/druid_v1alpha1_etcd_azurite.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step-6--make-use-of-the-azurite-emulator-however-you-wish">Step 6 : Make use of the Azurite emulator however you wish&lt;/h3>
&lt;p>&lt;code>etcd-backup-restore&lt;/code> will now use &lt;code>Azurite&lt;/code> running in &lt;code>kind&lt;/code> as the remote store to store snapshots if all the previous steps were followed correctly.&lt;/p>
&lt;h3 id="cleanup">Cleanup&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make kind-down
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unset AZURE_STORAGE_CONNECTION_STRING KUBECONFIG
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Getting Started Locally Localstack</title><link>https://gardener.cloud/docs/other-components/etcd-druid/getting-started-locally-localstack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/getting-started-locally-localstack/</guid><description>
&lt;h1 id="getting-started-with-etcd-druid-localstack-and-kind">Getting Started with etcd-druid, LocalStack, and Kind&lt;/h1>
&lt;p>This guide provides step-by-step instructions on how to set up etcd-druid with &lt;a href="https://localstack.cloud/">LocalStack&lt;/a> and Kind on your local machine. LocalStack emulates AWS services locally, which allows the etcd cluster to interact with AWS S3 without the need for an actual AWS connection. This setup is ideal for local development and testing.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Docker (installed and running)&lt;/li>
&lt;li>AWS CLI (version &lt;code>&amp;gt;=1.29.0&lt;/code> or &lt;code>&amp;gt;=2.13.0&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h2 id="environment-setup">Environment Setup&lt;/h2>
&lt;h3 id="step-1-provision-the-kind-cluster">Step 1: Provision the Kind Cluster&lt;/h3>
&lt;p>Execute the command below to provision a &lt;code>kind&lt;/code> cluster. This command also forwards port &lt;code>4566&lt;/code> from the &lt;a href="https://github.com/gardener/etcd-druid/blob/master/hack/e2e-test/infrastructure/kind/cluster.yaml">kind cluster&lt;/a> to your local machine, enabling LocalStack access:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make kind-up
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step-2-deploy-localstack">Step 2: Deploy LocalStack&lt;/h3>
&lt;p>Deploy LocalStack onto the Kubernetes cluster using the command below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make deploy-localstack
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step-3-set-up-an-s3-bucket">Step 3: Set up an S3 Bucket&lt;/h3>
&lt;ol>
&lt;li>Set up the AWS CLI to interact with LocalStack by setting the necessary environment variables. This configuration redirects S3 commands to the LocalStack endpoint and provides the required credentials for authentication:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export AWS_ENDPOINT_URL_S3=&lt;span style="color:#a31515">&amp;#34;http://localhost:4566&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export AWS_ACCESS_KEY_ID=ACCESSKEYAWSUSER
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export AWS_SECRET_ACCESS_KEY=sEcreTKey
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export AWS_DEFAULT_REGION=us-east-2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Create an S3 bucket for etcd-druid backup purposes:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>aws s3api create-bucket --bucket etcd-bucket --region us-east-2 --create-bucket-configuration LocationConstraint=us-east-2 --acl private
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step-4-deploy-etcd-druid">Step 4: Deploy etcd-druid&lt;/h3>
&lt;p>Deploy etcd-druid onto the Kind cluster using the command below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make deploy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step-5-configure-etcd-with-localstack-store">Step 5: Configure etcd with LocalStack Store&lt;/h3>
&lt;p>Apply the required Kubernetes manifests to create an etcd custom resource (CR) and a secret for AWS credentials, facilitating LocalStack access:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export KUBECONFIG=hack/e2e-test/infrastructure/kind/kubeconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl apply -f config/samples/druid_v1alpha1_etcd_localstack.yaml -f config/samples/etcd-secret-localstack.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="step-6-reconcile-the-etcd">Step 6: Reconcile the etcd&lt;/h3>
&lt;p>Initiate etcd reconciliation by annotating the etcd resource with the &lt;code>gardener.cloud/operation=reconcile&lt;/code> annotation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl annotate etcd etcd-test gardener.cloud/operation=reconcile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Congratulations! You have successfully configured &lt;code>etcd-druid&lt;/code>, &lt;code>LocalStack&lt;/code>, and &lt;code>kind&lt;/code> on your local machine. Inspect the etcd-druid logs and LocalStack to ensure the setup operates as anticipated.&lt;/p>
&lt;p>To validate the buckets, execute the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>aws s3 ls etcd-bucket/etcd-test/v2/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cleanup">Cleanup&lt;/h3>
&lt;p>To dismantle the setup, execute the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make kind-down
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unset AWS_ENDPOINT_URL_S3 AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_DEFAULT_REGION KUBECONFIG
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Local e2e Tests</title><link>https://gardener.cloud/docs/other-components/etcd-druid/local-e2e-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/local-e2e-tests/</guid><description>
&lt;h1 id="e2e-test-suite">e2e Test Suite&lt;/h1>
&lt;p>Developers can run extended e2e tests, in addition to unit tests, for Etcd-Druid in or from
their local environments. This is recommended to verify the desired behavior of several features
and to avoid regressions in future releases.&lt;/p>
&lt;p>The very same tests typically run as part of the component&amp;rsquo;s release job as well as on demand, e.g.,
when triggered by Etcd-Druid maintainers for open pull requests.&lt;/p>
&lt;p>Testing Etcd-Druid automatically involves a certain test coverage for &lt;a href="https://github.com/gardener/etcd-backup-restore/">gardener/etcd-backup-restore&lt;/a>
which is deployed as a side-car to the actual &lt;code>etcd&lt;/code> container.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>The e2e test lifecycle is managed with the help of &lt;a href="https://skaffold.dev/">skaffold&lt;/a>. Every involved step like &lt;code>setup&lt;/code>,
&lt;code>deploy&lt;/code>, &lt;code>undeploy&lt;/code> or &lt;code>cleanup&lt;/code> is executed against a &lt;strong>Kubernetes&lt;/strong> cluster which makes it a mandatory prerequisite at the same time.
Only &lt;a href="https://skaffold.dev/">skaffold&lt;/a> itself with involved &lt;code>docker&lt;/code>, &lt;code>helm&lt;/code> and &lt;code>kubectl&lt;/code> executions as well as
the e2e-tests are executed locally. Required binaries are automatically downloaded if you use the corresponding &lt;code>make&lt;/code> target,
as described in this document.&lt;/p>
&lt;p>It&amp;rsquo;s expected that especially the &lt;code>deploy&lt;/code> step is run against a Kubernetes cluster which doesn&amp;rsquo;t contain an Druid deployment or any left-overs like &lt;code>druid.gardener.cloud&lt;/code> CRDs.
The &lt;code>deploy&lt;/code> step will likely fail in such scenarios.&lt;/p>
&lt;blockquote>
&lt;p>Tip: Create a fresh &lt;a href="https://kind.sigs.k8s.io/">KinD&lt;/a> cluster or a similar one with a small footprint before executing the tests.&lt;/p>
&lt;/blockquote>
&lt;h2 id="providers">Providers&lt;/h2>
&lt;p>The following providers are supported for e2e tests:&lt;/p>
&lt;ul>
&lt;li>AWS&lt;/li>
&lt;li>Azure&lt;/li>
&lt;li>GCP&lt;/li>
&lt;li>Local&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Valid credentials need to be provided when tests are executed with mentioned cloud providers.&lt;/p>
&lt;/blockquote>
&lt;h2 id="flow">Flow&lt;/h2>
&lt;p>An e2e test execution involves the following steps:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Step&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>setup&lt;/code>&lt;/td>
&lt;td>Create a storage bucket which is used for etcd backups (only with cloud providers).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>deploy&lt;/code>&lt;/td>
&lt;td>Build Docker image, upload it to registry (if remote cluster - see &lt;a href="https://skaffold.dev/docs/pipeline-stages/builders/docker/">Docker build&lt;/a>), deploy Helm chart (&lt;code>charts/druid&lt;/code>) to Kubernetes cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>test&lt;/code>&lt;/td>
&lt;td>Execute e2e tests as defined in &lt;code>test/e2e&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>undeploy&lt;/code>&lt;/td>
&lt;td>Remove the deployed artifacts from Kubernetes cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>cleanup&lt;/code>&lt;/td>
&lt;td>Delete storage bucket and Druid deployment from test cluster.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="make-target">Make target&lt;/h3>
&lt;p>Executing e2e-tests is as easy as executing the following command &lt;strong>with defined Env-Vars as desribed in the following
section and as needed for your test scenario&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>make test-e2e
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="common-env-variables">Common Env Variables&lt;/h3>
&lt;p>The following environment variables influence how the flow described above is executed:&lt;/p>
&lt;ul>
&lt;li>&lt;code>PROVIDERS&lt;/code>: Providers used for testing (&lt;code>all&lt;/code>, &lt;code>aws&lt;/code>, &lt;code>azure&lt;/code>, &lt;code>gcp&lt;/code>, &lt;code>local&lt;/code>). Multiple entries must be comma separated.
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: Some tests will use very first entry from env &lt;code>PROVIDERS&lt;/code> for e2e testing (ex: multi-node tests). So for multi-node tests to use specific provider, specify that provider as first entry in env &lt;code>PROVIDERS&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;code>KUBECONFIG&lt;/code>: Kubeconfig pointing to cluster where Etcd-Druid will be deployed (preferably &lt;a href="https://kind.sigs.k8s.io">KinD&lt;/a>).&lt;/li>
&lt;li>&lt;code>TEST_ID&lt;/code>: Some ID which is used to create assets for and during testing.&lt;/li>
&lt;li>&lt;code>STEPS&lt;/code>: Steps executed by &lt;code>make&lt;/code> target (&lt;code>setup&lt;/code>, &lt;code>deploy&lt;/code>, &lt;code>test&lt;/code>, &lt;code>undeploy&lt;/code>, &lt;code>cleanup&lt;/code> - default: all steps).&lt;/li>
&lt;/ul>
&lt;h3 id="aws-env-variables">AWS Env Variables&lt;/h3>
&lt;ul>
&lt;li>&lt;code>AWS_ACCESS_KEY_ID&lt;/code>: Key ID of the user.&lt;/li>
&lt;li>&lt;code>AWS_SECRET_ACCESS_KEY&lt;/code>: Access key of the user.&lt;/li>
&lt;li>&lt;code>AWS_REGION&lt;/code>: Region in which the test bucket is created.&lt;/li>
&lt;/ul>
&lt;p>Example:&lt;/p>
&lt;pre tabindex="0">&lt;code>make \
AWS_ACCESS_KEY_ID=&amp;#34;abc&amp;#34; \
AWS_SECRET_ACCESS_KEY=&amp;#34;xyz&amp;#34; \
AWS_REGION=&amp;#34;eu-central-1&amp;#34; \
KUBECONFIG=&amp;#34;$HOME/.kube/config&amp;#34; \
PROVIDERS=&amp;#34;aws&amp;#34; \
TEST_ID=&amp;#34;some-test-id&amp;#34; \
STEPS=&amp;#34;setup,deploy,test,undeploy,cleanup&amp;#34; \
test-e2e
&lt;/code>&lt;/pre>&lt;h3 id="azure-env-variables">Azure Env Variables&lt;/h3>
&lt;ul>
&lt;li>&lt;code>STORAGE_ACCOUNT&lt;/code>: Storage account used for managing the storage container.&lt;/li>
&lt;li>&lt;code>STORAGE_KEY&lt;/code>: Key of storage account.&lt;/li>
&lt;/ul>
&lt;p>Example:&lt;/p>
&lt;pre tabindex="0">&lt;code>make \
STORAGE_ACCOUNT=&amp;#34;abc&amp;#34; \
STORAGE_KEY=&amp;#34;eHl6Cg==&amp;#34; \
KUBECONFIG=&amp;#34;$HOME/.kube/config&amp;#34; \
PROVIDERS=&amp;#34;azure&amp;#34; \
TEST_ID=&amp;#34;some-test-id&amp;#34; \
STEPS=&amp;#34;setup,deploy,test,undeploy,cleanup&amp;#34; \
test-e2e
&lt;/code>&lt;/pre>&lt;h3 id="gcp-env-variables">GCP Env Variables&lt;/h3>
&lt;ul>
&lt;li>&lt;code>GCP_SERVICEACCOUNT_JSON_PATH&lt;/code>: Path to the service account json file used for this test.&lt;/li>
&lt;li>&lt;code>GCP_PROJECT_ID&lt;/code>: ID of the GCP project.&lt;/li>
&lt;/ul>
&lt;p>Example:&lt;/p>
&lt;pre tabindex="0">&lt;code>make \
GCP_SERVICEACCOUNT_JSON_PATH=&amp;#34;/var/lib/secrets/serviceaccount.json&amp;#34; \
GCP_PROJECT_ID=&amp;#34;xyz-project&amp;#34; \
KUBECONFIG=&amp;#34;$HOME/.kube/config&amp;#34; \
PROVIDERS=&amp;#34;gcp&amp;#34; \
TEST_ID=&amp;#34;some-test-id&amp;#34; \
STEPS=&amp;#34;setup,deploy,test,undeploy,cleanup&amp;#34; \
test-e2e
&lt;/code>&lt;/pre>&lt;h3 id="local-env-variables">Local Env Variables&lt;/h3>
&lt;p>No special environment variables are required for running e2e tests with &lt;code>Local&lt;/code> provider.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;pre tabindex="0">&lt;code>make \
KUBECONFIG=&amp;#34;$HOME/.kube/config&amp;#34; \
PROVIDERS=&amp;#34;local&amp;#34; \
TEST_ID=&amp;#34;some-test-id&amp;#34; \
STEPS=&amp;#34;setup,deploy,test,undeploy,cleanup&amp;#34; \
test-e2e
&lt;/code>&lt;/pre>&lt;h2 id="e2e-test-with-localstack">e2e test with localstack&lt;/h2>
&lt;p>The above-mentioned e2e tests need storage from real cloud providers to be setup. But there is a tool named &lt;a href="https://docs.localstack.cloud/user-guide/aws/s3/">localstack&lt;/a> that enables to run e2e test with mock AWS storage. We can also provision KIND cluster for e2e tests. So, together with localstack and KIND cluster, we don&amp;rsquo;t need to depend on any actual cloud provider infrastructure to be setup to run e2e tests.&lt;/p>
&lt;h3 id="how-are-the-kind-cluster-and-localstack-set-up">How are the KIND cluster and localstack set up&lt;/h3>
&lt;p>KIND or Kubernetes-In-Docker is a kubernetes cluster that is set up inside a docker container. This cluster is with limited capability as it does not have much compute power. But this cluster can easily be setup inside a container and can be tear down easily just by removing a container. That&amp;rsquo;s why KIND cluster is very easy to use for e2e tests. &lt;code>Makefile&lt;/code> command helps to spin up a KIND cluster and use the cluster to run e2e tests.&lt;/p>
&lt;p>There is a docker image for localstack. The image is deployed as pod inside the KIND cluster through &lt;code>hack/e2e-test/infrastructure/localstack/localstack.yaml&lt;/code>. &lt;code>Makefile&lt;/code> takes care of deploying the yaml file in a KIND cluster.&lt;/p>
&lt;p>The developer needs to run &lt;code>make ci-e2e-kind&lt;/code> command. This command in turn runs &lt;code>hack/ci-e2e-kind.sh&lt;/code> which spin up the KIND cluster and deploy localstack in it and then run the e2e tests using localstack as mock AWS storage provider. e2e tests are actually run on host machine but deploy the druid controller inside KIND cluster. Druid controller spawns multinode etcd clusters inside KIND cluster. e2e tests verify whether the druid controller performs its jobs correctly or not. Mock localstack storage is cleaned up after every e2e tests. That&amp;rsquo;s why the e2e tests need to access the localstack pod running inside KIND cluster. The network traffic between host machine and localstack pod is resolved via mapping localstack pod port to host port while setting up the KIND cluster via &lt;code>hack/e2e-test/infrastructure/kind/cluster.yaml&lt;/code>&lt;/p>
&lt;h3 id="how-to-execute-e2e-tests-with-localstack-and-kind-cluster">How to execute e2e tests with localstack and KIND cluster&lt;/h3>
&lt;p>Run the following &lt;code>make&lt;/code> command to spin up a KinD cluster, deploy localstack and run the e2e tests with provider &lt;code>aws&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>make ci-e2e-kind
&lt;/code>&lt;/pre></description></item><item><title>Docs: Metrics</title><link>https://gardener.cloud/docs/other-components/etcd-druid/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/metrics/</guid><description>
&lt;h1 id="monitoring">Monitoring&lt;/h1>
&lt;p>etcd-druid uses &lt;a href="http://prometheus.io/">Prometheus&lt;/a> for metrics reporting. The metrics can be used for real-time monitoring and debugging of compaction jobs.&lt;/p>
&lt;p>The simplest way to see the available metrics is to cURL the metrics endpoint &lt;code>/metrics&lt;/code>. The format is described &lt;a href="http://prometheus.io/docs/instrumenting/exposition_formats/">here&lt;/a>.&lt;/p>
&lt;p>Follow the &lt;a href="http://prometheus.io/docs/introduction/getting_started/">Prometheus getting started doc&lt;/a> to spin up a Prometheus server to collect etcd metrics.&lt;/p>
&lt;p>The naming of metrics follows the suggested &lt;a href="http://prometheus.io/docs/practices/naming/">Prometheus best practices&lt;/a>. All compaction related metrics are put under namespace &lt;code>etcddruid&lt;/code> and the respective subsystems.&lt;/p>
&lt;h2 id="snapshot-compaction">Snapshot Compaction&lt;/h2>
&lt;p>These metrics provide information about the compaction jobs that run after some interval in shoot control planes. Studying the metrics, we can deduce how many compaction job ran successfully, how many failed, how many delta events compacted etc.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>etcddruid_compaction_jobs_total&lt;/td>
&lt;td>Total number of compaction jobs initiated by compaction controller.&lt;/td>
&lt;td>Counter&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>etcddruid_compaction_jobs_current&lt;/td>
&lt;td>Number of currently running compaction job.&lt;/td>
&lt;td>Gauge&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>etcddruid_compaction_job_duration_seconds&lt;/td>
&lt;td>Total time taken in seconds to finish a running compaction job.&lt;/td>
&lt;td>Histogram&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>etcddruid_compaction_num_delta_events&lt;/td>
&lt;td>Total number of etcd events to be compacted by a compaction job.&lt;/td>
&lt;td>Gauge&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>There are two labels for &lt;code>etcddruid_compaction_jobs_total&lt;/code> metrics. The label &lt;code>succeeded&lt;/code> shows how many of the compaction jobs are succeeded and label &lt;code>failed&lt;/code> shows how many of compaction jobs are failed.&lt;/p>
&lt;p>There are two labels for &lt;code>etcddruid_compaction_job_duration_seconds&lt;/code> metrics. The label &lt;code>succeeded&lt;/code> shows how much time taken by a successful job to complete and label &lt;code>failed&lt;/code> shows how much time taken by a failed compaction job.&lt;/p>
&lt;p>&lt;code>etcddruid_compaction_jobs_current&lt;/code> metric comes with label &lt;code>etcd_namespace&lt;/code> that indicates the namespace of the Etcd running in the control plane of a shoot cluster..&lt;/p>
&lt;h2 id="etcd">Etcd&lt;/h2>
&lt;p>These metrics are exposed by the &lt;a href="https://etcd.io/">etcd&lt;/a> process that runs in each etcd pod.&lt;/p>
&lt;p>The following list metrics is applicable to clustering of a multi-node etcd cluster. The full list of metrics exposed by &lt;code>etcd&lt;/code> is available &lt;a href="https://etcd.io/docs/v3.4/metrics">here&lt;/a>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>No.&lt;/th>
&lt;th>Metrics Name&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Comments&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>etcd_disk_wal_fsync_duration_seconds&lt;/td>
&lt;td>latency distributions of fsync called by WAL.&lt;/td>
&lt;td>High disk operation latencies indicate disk issues.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>etcd_disk_backend_commit_duration_seconds&lt;/td>
&lt;td>latency distributions of commit called by backend.&lt;/td>
&lt;td>High disk operation latencies indicate disk issues.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>etcd_server_has_leader&lt;/td>
&lt;td>whether or not a leader exists. 1: leader exists, 0: leader not exists.&lt;/td>
&lt;td>To capture quorum loss or to check the availability of etcd cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>etcd_server_is_leader&lt;/td>
&lt;td>whether or not this member is a leader. 1 if it is, 0 otherwise.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>etcd_server_leader_changes_seen_total&lt;/td>
&lt;td>number of leader changes seen.&lt;/td>
&lt;td>Helpful in fine tuning the zonal cluster like etcd-heartbeat time etc, it can also indicates the etcd load and network issues.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>etcd_server_is_learner&lt;/td>
&lt;td>whether or not this member is a learner. 1 if it is, 0 otherwise.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>etcd_server_learner_promote_successes&lt;/td>
&lt;td>total number of successful learner promotions while this member is leader.&lt;/td>
&lt;td>Might be helpful in checking the success of API calls called by backup-restore.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>etcd_network_client_grpc_received_bytes_total&lt;/td>
&lt;td>total number of bytes received from grpc clients.&lt;/td>
&lt;td>Client Traffic In.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>etcd_network_client_grpc_sent_bytes_total&lt;/td>
&lt;td>total number of bytes sent to grpc clients.&lt;/td>
&lt;td>Client Traffic Out.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10&lt;/td>
&lt;td>etcd_network_peer_sent_bytes_total&lt;/td>
&lt;td>total number of bytes sent to peers.&lt;/td>
&lt;td>Useful for network usage.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>11&lt;/td>
&lt;td>etcd_network_peer_received_bytes_total&lt;/td>
&lt;td>total number of bytes received from peers.&lt;/td>
&lt;td>Useful for network usage.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12&lt;/td>
&lt;td>etcd_network_active_peers&lt;/td>
&lt;td>current number of active peer connections.&lt;/td>
&lt;td>Might be useful in detecting issues like network partition.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>13&lt;/td>
&lt;td>etcd_server_proposals_committed_total&lt;/td>
&lt;td>total number of consensus proposals committed.&lt;/td>
&lt;td>A consistently large lag between a single member and its leader indicates that member is slow or unhealthy.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>14&lt;/td>
&lt;td>etcd_server_proposals_pending&lt;/td>
&lt;td>current number of pending proposals to commit.&lt;/td>
&lt;td>Pending proposals suggests there is a high client load or the member cannot commit proposals.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>15&lt;/td>
&lt;td>etcd_server_proposals_failed_total&lt;/td>
&lt;td>total number of failed proposals seen.&lt;/td>
&lt;td>Might indicates downtime caused by a loss of quorum.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16&lt;/td>
&lt;td>etcd_server_proposals_applied_total&lt;/td>
&lt;td>total number of consensus proposals applied.&lt;/td>
&lt;td>Difference between etcd_server_proposals_committed_total and etcd_server_proposals_applied_total should usually be small.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>17&lt;/td>
&lt;td>etcd_mvcc_db_total_size_in_bytes&lt;/td>
&lt;td>total size of the underlying database physically allocated in bytes.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>18&lt;/td>
&lt;td>etcd_server_heartbeat_send_failures_total&lt;/td>
&lt;td>total number of leader heartbeat send failures.&lt;/td>
&lt;td>Might be helpful in fine-tuning the cluster or detecting slow disk or any network issues.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>19&lt;/td>
&lt;td>etcd_network_peer_round_trip_time_seconds&lt;/td>
&lt;td>round-trip-time histogram between peers.&lt;/td>
&lt;td>Might be helpful in fine-tuning network usage specially for zonal etcd cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>20&lt;/td>
&lt;td>etcd_server_slow_apply_total&lt;/td>
&lt;td>total number of slow apply requests.&lt;/td>
&lt;td>Might indicate overloaded from slow disk.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>21&lt;/td>
&lt;td>etcd_server_slow_read_indexes_total&lt;/td>
&lt;td>total number of pending read indexes not in sync with leader&amp;rsquo;s or timed out read index requests.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The full list of metrics is available &lt;a href="https://etcd.io/docs/v3.4/metrics/">here&lt;/a>.&lt;/p>
&lt;h2 id="etcd-backup-restore">Etcd-Backup-Restore&lt;/h2>
&lt;p>These metrics are exposed by the &lt;a href="https://github.com/gardener/etcd-backup-restore">etcd-backup-restore&lt;/a> container in each etcd pod.&lt;/p>
&lt;p>The following list metrics is applicable to clustering of a multi-node etcd cluster. The full list of metrics exposed by &lt;code>etcd-backup-restore&lt;/code> is available &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/docs/operations/metrics.md">here&lt;/a>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>No.&lt;/th>
&lt;th>Metrics Name&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1.&lt;/td>
&lt;td>etcdbr_cluster_size&lt;/td>
&lt;td>to capture the scale-up/scale-down scenarios.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2.&lt;/td>
&lt;td>etcdbr_is_learner&lt;/td>
&lt;td>whether or not this member is a learner. 1 if it is, 0 otherwise.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.&lt;/td>
&lt;td>etcdbr_is_learner_count_total&lt;/td>
&lt;td>total number times member added as the learner.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4.&lt;/td>
&lt;td>etcdbr_restoration_duration_seconds&lt;/td>
&lt;td>total latency distribution required to restore the etcd member.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5.&lt;/td>
&lt;td>etcdbr_add_learner_duration_seconds&lt;/td>
&lt;td>total latency distribution of adding the etcd member as a learner to the cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6.&lt;/td>
&lt;td>etcdbr_member_remove_duration_seconds&lt;/td>
&lt;td>total latency distribution removing the etcd member from the cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7.&lt;/td>
&lt;td>etcdbr_member_promote_duration_seconds&lt;/td>
&lt;td>total latency distribution of promoting the learner to the voting member.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8.&lt;/td>
&lt;td>etcdbr_defragmentation_duration_seconds&lt;/td>
&lt;td>total latency distribution of defragmentation of each etcd cluster member.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="prometheus-supplied-metrics">Prometheus supplied metrics&lt;/h2>
&lt;p>The Prometheus client library provides a number of metrics under the &lt;code>go&lt;/code> and &lt;code>process&lt;/code> namespaces.&lt;/p></description></item><item><title>Docs: operator out-of-band tasks</title><link>https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/</guid><description>
&lt;h1 id="dep-05-operator-out-of-band-tasks">DEP-05: Operator Out-of-band Tasks&lt;/h1>
&lt;h2 id="table-of-contents">Table of Contents&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#dep-05-operator-out-of-band-tasks">DEP-05: Operator Out-of-band Tasks&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#table-of-contents">Table of Contents&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#summary">Summary&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#terminology">Terminology&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#motivation">Motivation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#goals">Goals&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#non-goals">Non-Goals&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#proposal">Proposal&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#custom-resource-golang-api">Custom Resource Golang API&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#spec">Spec&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#status">Status&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#custom-resource-yaml-api">Custom Resource YAML API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#lifecycle">Lifecycle&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#creation">Creation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#execution">Execution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#deletion">Deletion&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#use-cases">Use Cases&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#recovery-from-permanent-quorum-loss">Recovery from permanent quorum loss&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#task-config">Task Config&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#pre-conditions">Pre-Conditions&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#trigger-on-demand-snapshot-compaction">Trigger on-demand snapshot compaction&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#possible-scenarios">Possible scenarios&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#task-config-1">Task Config&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#pre-conditions-1">Pre-Conditions&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#trigger-on-demand-fulldelta-snapshot">Trigger on-demand full/delta snapshot&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#possible-scenarios-1">Possible scenarios&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#task-config-2">Task Config&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#pre-conditions-2">Pre-Conditions&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#trigger-on-demand-maintenance-of-etcd-cluster">Trigger on-demand maintenance of etcd cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#possible-scenarios-2">Possible Scenarios&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#task-config-3">Task Config&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#pre-conditions-3">Pre-Conditions&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#copy-backups-task">Copy Backups Task&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#possible-scenarios-3">Possible Scenarios&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#task-config-4">Task Config&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#pre-conditions-4">Pre-Conditions&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#metrics">Metrics&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>This DEP proposes an enhancement to &lt;code>etcd-druid&lt;/code>&amp;rsquo;s capabilities to handle &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#terminology">out-of-band&lt;/a> tasks, which are presently performed manually or invoked programmatically via suboptimal APIs. The document proposes the establishment of a unified interface by defining a well-structured API to harmonize the initiation of any &lt;code>out-of-band&lt;/code> task, monitor its status, and simplify the process of adding new tasks and managing their lifecycles.&lt;/p>
&lt;h2 id="terminology">Terminology&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>etcd-druid:&lt;/strong> &lt;a href="https://github.com/gardener/etcd-druid">etcd-druid&lt;/a> is an operator to manage the etcd clusters.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>backup-sidecar:&lt;/strong> It is the etcd-backup-restore sidecar container running in each etcd-member pod of etcd cluster.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>leading-backup-sidecar:&lt;/strong> A backup-sidecar that is associated to an etcd leader of an etcd cluster.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>out-of-band task:&lt;/strong> Any on-demand tasks/operations that can be executed on an etcd cluster without modifying the &lt;a href="https://github.com/gardener/etcd-druid/blob/9c5f8254e3aeb24c1e3e88d17d8d1de336ce981b/api/v1alpha1/types_etcd.go#L272-L273">Etcd custom resource spec&lt;/a> (desired state).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>Today, &lt;a href="https://github.com/gardener/etcd-druid">etcd-druid&lt;/a> mainly acts as an etcd cluster provisioner (creation, maintenance and deletion). In future, capabilities of etcd-druid will be enhanced via &lt;a href="https://github.com/gardener/etcd-druid/blob/8ac70d512969c2e12e666d923d7d35fdab1e0f8e/docs/proposals/04-etcd-member-custom-resource.md">etcd-member&lt;/a> proposal by providing it access to much more detailed information about each etcd cluster member. While we enhance the reconciliation and monitoring capabilities of etcd-druid, it still lacks the ability to allow users to invoke &lt;code>out-of-band&lt;/code> tasks on an existing etcd cluster.&lt;/p>
&lt;p>There are new learnings while operating etcd clusters at scale. It has been observed that we regularly need capabilities to trigger &lt;code>out-of-band&lt;/code> tasks which are outside of the purview of a regular etcd reconciliation run. Many of these tasks are multi-step processes, and performing them manually is error-prone, even if an operator follows a well-written step-by-step guide. Thus, there is a need to automate these tasks.
Some examples of an &lt;code>on-demand/out-of-band&lt;/code> tasks:&lt;/p>
&lt;ul>
&lt;li>Recover from a permanent quorum loss of etcd cluster.&lt;/li>
&lt;li>Trigger an on-demand full/delta snapshot.&lt;/li>
&lt;li>Trigger an on-demand snapshot compaction.&lt;/li>
&lt;li>Trigger an on-demand maintenance of etcd cluster.&lt;/li>
&lt;li>Copy the backups from one object store to another object store.&lt;/li>
&lt;/ul>
&lt;h2 id="goals">Goals&lt;/h2>
&lt;ul>
&lt;li>Establish a unified interface for operator tasks by defining a single dedicated custom resource for &lt;code>out-of-band&lt;/code> tasks.&lt;/li>
&lt;li>Define a contract (in terms of prerequisites) which needs to be adhered to by any task implementation.&lt;/li>
&lt;li>Facilitate the easy addition of new &lt;code>out-of-band&lt;/code> task(s) through this custom resource.&lt;/li>
&lt;li>Provide CLI capabilities to operators, making it easy to invoke supported &lt;code>out-of-band&lt;/code> tasks.&lt;/li>
&lt;/ul>
&lt;h2 id="non-goals">Non-Goals&lt;/h2>
&lt;ul>
&lt;li>In the current scope, capability to abort/suspend an &lt;code>out-of-band&lt;/code> task is not going to be provided. This could be considered as an enhancement based on pull.&lt;/li>
&lt;li>Ordering (by establishing dependency) of &lt;code>out-of-band&lt;/code> tasks submitted for the same etcd cluster has not been considered in the first increment. In a future version based on how operator tasks are used, we will enhance this proposal and the implementation.&lt;/li>
&lt;/ul>
&lt;h2 id="proposal">Proposal&lt;/h2>
&lt;p>Authors propose creation of a new single dedicated custom resource to represent an &lt;code>out-of-band&lt;/code> task. Etcd-druid will be enhanced to process the task requests and update its status which can then be tracked/observed.&lt;/p>
&lt;h3 id="custom-resource-golang-api">Custom Resource Golang API&lt;/h3>
&lt;p>&lt;code>EtcdOperatorTask&lt;/code> is the new custom resource that will be introduced. This API will be in &lt;code>v1alpha1&lt;/code> version and will be subject to change. We will be respecting &lt;a href="https://kubernetes.io/docs/reference/using-api/deprecation-policy/">Kubernetes Deprecation Policy&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// EtcdOperatorTask represents an out-of-band operator task resource.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">type&lt;/span> EtcdOperatorTask &lt;span style="color:#00f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metav1.TypeMeta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metav1.ObjectMeta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Spec is the specification of the EtcdOperatorTask resource.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Spec EtcdOperatorTaskSpec &lt;span style="color:#a31515">`json:&amp;#34;spec&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Status is most recently observed status of the EtcdOperatorTask resource.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Status EtcdOperatorTaskStatus &lt;span style="color:#a31515">`json:&amp;#34;status,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="spec">Spec&lt;/h4>
&lt;p>The authors propose that the following fields should be specified in the spec (desired state) of the &lt;code>EtcdOperatorTask&lt;/code> custom resource.&lt;/p>
&lt;ul>
&lt;li>To capture the type of &lt;code>out-of-band&lt;/code> operator task to be performed, &lt;code>.spec.type&lt;/code> field should be defined. It can have values from all supported &lt;code>out-of-band&lt;/code> tasks eg. &amp;ldquo;OnDemandSnaphotTask&amp;rdquo;, &amp;ldquo;QuorumLossRecoveryTask&amp;rdquo; etc.&lt;/li>
&lt;li>To capture the configuration specific to each task, a &lt;code>.spec.config&lt;/code> field should be defined of type &lt;code>string&lt;/code> as each task can have different input configuration.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// EtcdOperatorTaskSpec is the spec for a EtcdOperatorTask resource.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">type&lt;/span> EtcdOperatorTaskSpec &lt;span style="color:#00f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Type specifies the type of out-of-band operator task to be performed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Type &lt;span style="color:#2b91af">string&lt;/span> &lt;span style="color:#a31515">`json:&amp;#34;type&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Config is a task specific configuration.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Config &lt;span style="color:#2b91af">string&lt;/span> &lt;span style="color:#a31515">`json:&amp;#34;config,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// TTLSecondsAfterFinished is the time-to-live to garbage collect the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// related resource(s) of task once it has been completed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// +optional
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> TTLSecondsAfterFinished *&lt;span style="color:#2b91af">int32&lt;/span> &lt;span style="color:#a31515">`json:&amp;#34;ttlSecondsAfterFinished,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// OwnerEtcdReference refers to the name and namespace of the corresponding
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// Etcd owner for which the task has been invoked.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> OwnerEtcdRefrence types.NamespacedName &lt;span style="color:#a31515">`json:&amp;#34;ownerEtcdRefrence&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="status">Status&lt;/h4>
&lt;p>The authors propose the following fields for the Status (current state) of the &lt;code>EtcdOperatorTask&lt;/code> custom resource to monitor the progress of the task.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// EtcdOperatorTaskStatus is the status for a EtcdOperatorTask resource.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">type&lt;/span> EtcdOperatorTaskStatus &lt;span style="color:#00f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// ObservedGeneration is the most recent generation observed for the resource.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> ObservedGeneration *&lt;span style="color:#2b91af">int64&lt;/span> &lt;span style="color:#a31515">`json:&amp;#34;observedGeneration,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// State is the last known state of the task.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> State TaskState &lt;span style="color:#a31515">`json:&amp;#34;state&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Time at which the task has moved from &amp;#34;pending&amp;#34; state to any other state.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> InitiatedAt metav1.Time &lt;span style="color:#a31515">`json:&amp;#34;initiatedAt&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// LastError represents the errors when processing the task.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// +optional
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> LastErrors []LastError &lt;span style="color:#a31515">`json:&amp;#34;lastErrors,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Captures the last operation status if task involves many stages.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// +optional
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> LastOperation *LastOperation &lt;span style="color:#a31515">`json:&amp;#34;lastOperation,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">type&lt;/span> LastOperation &lt;span style="color:#00f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Name of the LastOperation.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Name opsName &lt;span style="color:#a31515">`json:&amp;#34;name&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Status of the last operation, one of pending, progress, completed, failed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> State OperationState &lt;span style="color:#a31515">`json:&amp;#34;state&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// LastTransitionTime is the time at which the operation state last transitioned from one state to another.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> LastTransitionTime metav1.Time &lt;span style="color:#a31515">`json:&amp;#34;lastTransitionTime&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// A human readable message indicating details about the last operation.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Reason &lt;span style="color:#2b91af">string&lt;/span> &lt;span style="color:#a31515">`json:&amp;#34;reason&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// LastError stores details of the most recent error encountered for the task.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">type&lt;/span> LastError &lt;span style="color:#00f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Code is an error code that uniquely identifies an error.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Code ErrorCode &lt;span style="color:#a31515">`json:&amp;#34;code&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Description is a human-readable message indicating details of the error.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Description &lt;span style="color:#2b91af">string&lt;/span> &lt;span style="color:#a31515">`json:&amp;#34;description&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// ObservedAt is the time at which the error was observed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> ObservedAt metav1.Time &lt;span style="color:#a31515">`json:&amp;#34;observedAt&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// TaskState represents the state of the task.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">type&lt;/span> TaskState &lt;span style="color:#2b91af">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TaskStateFailed TaskState = &lt;span style="color:#a31515">&amp;#34;Failed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TaskStatePending TaskState = &lt;span style="color:#a31515">&amp;#34;Pending&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TaskStateRejected TaskState = &lt;span style="color:#a31515">&amp;#34;Rejected&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TaskStateSucceeded TaskState = &lt;span style="color:#a31515">&amp;#34;Succeeded&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TaskStateInProgress TaskState = &lt;span style="color:#a31515">&amp;#34;InProgress&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// OperationState represents the state of last operation.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">type&lt;/span> OperationState &lt;span style="color:#2b91af">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OperationStateFailed OperationState = &lt;span style="color:#a31515">&amp;#34;Failed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OperationStatePending OperationState = &lt;span style="color:#a31515">&amp;#34;Pending&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OperationStateCompleted OperationState = &lt;span style="color:#a31515">&amp;#34;Completed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OperationStateInProgress OperationState = &lt;span style="color:#a31515">&amp;#34;InProgress&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="custom-resource-yaml-api">Custom Resource YAML API&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: druid.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: EtcdOperatorTask
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &amp;lt;name of operator task resource&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: &amp;lt;cluster namespace&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generation: &amp;lt;specific generation of the desired state&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: &amp;lt;type/category of supported out-of-band task&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ttlSecondsAfterFinished: &amp;lt;time-to-live to garbage collect the custom resource after it has been completed&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config: &amp;lt;task specific configuration&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ownerEtcdRefrence: &amp;lt;refer to corresponding etcd owner name and namespace for which task has been invoked&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> observedGeneration: &amp;lt;specific observedGeneration of the resource&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: &amp;lt;last known current state of the out-of-band task&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> initiatedAt: &amp;lt;time at which task move to any other state from &amp;#34;pending&amp;#34; state&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastErrors:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - code: &amp;lt;error-code&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description: &amp;lt;description of the error&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> observedAt: &amp;lt;time the error was observed&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastOperation:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: &amp;lt;operation-name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: &amp;lt;task state as seen at the completion of last operation&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastTransitionTime: &amp;lt;time of transition to this state&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: &amp;lt;reason/message if any&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="lifecycle">Lifecycle&lt;/h3>
&lt;h4 id="creation">Creation&lt;/h4>
&lt;p>Task(s) can be created by creating an instance of the &lt;code>EtcdOperatorTask&lt;/code> custom resource specific to a task.&lt;/p>
&lt;blockquote>
&lt;p>Note: In future, either a &lt;code>kubectl&lt;/code> extension plugin or a &lt;code>druidctl&lt;/code> tool will be introduced. Dedicated sub-commands will be created for each &lt;code>out-of-band&lt;/code> task. This will drastically increase the usability for an operator for performing such tasks, as the CLI extension will automatically create relevant instance(s) of &lt;code>EtcdOperatorTask&lt;/code> with the provided configuration.&lt;/p>
&lt;/blockquote>
&lt;h4 id="execution">Execution&lt;/h4>
&lt;ul>
&lt;li>Authors propose to introduce a new controller which watches for &lt;code>EtcdOperatorTask&lt;/code> custom resource.&lt;/li>
&lt;li>Each &lt;code>out-of-band&lt;/code> task may have some task specific configuration defined in &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#spec">.spec.config&lt;/a>.&lt;/li>
&lt;li>The controller needs to parse this task specific config, which comes as a &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#spec">string&lt;/a>, according to the schema defined for each task.&lt;/li>
&lt;li>For every &lt;code>out-of-band&lt;/code> task, a set of &lt;code>pre-conditions&lt;/code> can be defined. These pre-conditions are evaluated against the current state of the target etcd cluster. Based on the evaluation result (boolean), the task is permitted or denied execution.&lt;/li>
&lt;li>If multiple tasks are invoked simultaneously or in &lt;code>pending&lt;/code> state, then they will be executed in a First-In-First-Out (FIFO) manner.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note: Dependent ordering among tasks will be addressed later which will enable concurrent execution of tasks when possible.&lt;/p>
&lt;/blockquote>
&lt;h4 id="deletion">Deletion&lt;/h4>
&lt;p>Upon completion of the task, irrespective of its final state, &lt;code>Etcd-druid&lt;/code> will ensure the garbage collection of the task custom resource and any other Kubernetes resources created to execute the task. This will be done according to the &lt;code>.spec.ttlSecondsAfterFinished&lt;/code> if defined in the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/05-etcd-operator-tasks/#spec">spec&lt;/a>, or a default expiry time will be assumed.&lt;/p>
&lt;h3 id="use-cases">Use Cases&lt;/h3>
&lt;h4 id="recovery-from-permanent-quorum-loss">Recovery from permanent quorum loss&lt;/h4>
&lt;p>Recovery from permanent quorum loss involves two phases - identification and recovery - both of which are done manually today. This proposal intends to automate the latter. Recovery today is a &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/recovery-from-permanent-quorum-loss-in-etcd-cluster/">multi-step process&lt;/a> and needs to be performed carefully by a human operator. Automating these steps would be prudent, to make it quicker and error-free. The identification of the permanent quorum loss would remain a manual process, requiring a human operator to investigate and confirm that there is indeed a permanent quorum loss with no possibility of auto-healing.&lt;/p>
&lt;h5 id="task-config">Task Config&lt;/h5>
&lt;p>We do not need any config for this task. When creating an instance of &lt;code>EtcdOperatorTask&lt;/code> for this scenario, &lt;code>.spec.config&lt;/code> will be set to nil (unset).&lt;/p>
&lt;h5 id="pre-conditions">Pre-Conditions&lt;/h5>
&lt;ul>
&lt;li>There should be a quorum loss in a multi-member etcd cluster. For a single-member etcd cluster, invoking this task is unnecessary as the restoration of the single member is automatically handled by the backup-restore process.&lt;/li>
&lt;li>There should not already be a permanent-quorum-loss-recovery-task running for the same etcd cluster.&lt;/li>
&lt;/ul>
&lt;h4 id="trigger-on-demand-snapshot-compaction">Trigger on-demand snapshot compaction&lt;/h4>
&lt;p>&lt;code>Etcd-druid&lt;/code> provides a configurable &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/#druid-flags">etcd-events-threshold&lt;/a> flag. When this threshold is breached, then a &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/">snapshot compaction&lt;/a> is triggered for the etcd cluster. However, there are scenarios where an ad-hoc snapshot compaction may be required.&lt;/p>
&lt;h5 id="possible-scenarios">Possible scenarios&lt;/h5>
&lt;ul>
&lt;li>If an operator anticipates a scenario of permanent quorum loss, they can trigger an &lt;code>on-demand snapshot compaction&lt;/code> to create a compacted full-snapshot. This can potentially reduce the recovery time from a permanent quorum loss.&lt;/li>
&lt;li>As an additional benefit, a human operator can leverage the current implementation of &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/">snapshot compaction&lt;/a>, which internally triggers &lt;code>restoration&lt;/code>. Hence, by initiating an &lt;code>on-demand snapshot compaction&lt;/code> task, the operator can verify the integrity of etcd cluster backups, particularly in cases of potential backup corruption or re-encryption. The success or failure of this snapshot compaction can offer valuable insights into these scenarios.&lt;/li>
&lt;/ul>
&lt;h5 id="task-config-1">Task Config&lt;/h5>
&lt;p>We do not need any config for this task. When creating an instance of &lt;code>EtcdOperatorTask&lt;/code> for this scenario, &lt;code>.spec.config&lt;/code> will be set to nil (unset).&lt;/p>
&lt;h5 id="pre-conditions-1">Pre-Conditions&lt;/h5>
&lt;ul>
&lt;li>There should not be a &lt;code>on-demand snapshot compaction&lt;/code> task already running for the same etcd cluster.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note: &lt;code>on-demand snapshot compaction&lt;/code> runs as a separate job in a separate pod, which interacts with the backup bucket and not the etcd cluster itself, hence it doesn&amp;rsquo;t depend on the health of etcd cluster members.&lt;/p>
&lt;/blockquote>
&lt;h4 id="trigger-on-demand-fulldelta-snapshot">Trigger on-demand full/delta snapshot&lt;/h4>
&lt;p>&lt;code>Etcd&lt;/code> custom resource provides an ability to set &lt;a href="https://github.com/gardener/etcd-druid/blob/master/api/v1alpha1/etcd.go#L158">FullSnapshotSchedule&lt;/a> which currently defaults to run once in 24 hrs. &lt;a href="https://github.com/gardener/etcd-druid/blob/master/api/v1alpha1/etcd.go#L167">DeltaSnapshotPeriod&lt;/a> is also made configurable which defines the duration after which a delta snapshot will be taken.
If a human operator does not wish to wait for the scheduled full/delta snapshot, they can trigger an on-demand (out-of-schedule) full/delta snapshot on the etcd cluster, which will be taken by the &lt;code>leading-backup-restore&lt;/code>.&lt;/p>
&lt;h5 id="possible-scenarios-1">Possible scenarios&lt;/h5>
&lt;ul>
&lt;li>An on-demand full snapshot can be triggered if scheduled snapshot fails due to any reason.&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/shoot_hibernate/">Gardener Shoot Hibernation&lt;/a>: Every etcd cluster incurs an inherent cost of preserving the volumes even when a gardener shoot control plane is scaled down, i.e the shoot is in a hibernated state. However, it is possible to save on hyperscaler costs by invoking this task to take a full snapshot before scaling down the etcd cluster, and deleting the etcd data volumes afterwards.&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/07-shoot-control-plane-migration.md">Gardener Control Plane Migration&lt;/a>: In &lt;a href="https://github.com/gardener/gardener">gardener&lt;/a>, a cluster control plane can be moved from one seed cluster to another. This process currently requires the etcd data to be replicated on the target cluster, so a full snapshot of the etcd cluster in the source seed before the migration would allow for faster restoration of the etcd cluster in the target seed.&lt;/li>
&lt;/ul>
&lt;h5 id="task-config-2">Task Config&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// SnapshotType can be full or delta snapshot.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">type&lt;/span> SnapshotType &lt;span style="color:#2b91af">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SnapshotTypeFull SnapshotType = &lt;span style="color:#a31515">&amp;#34;full&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SnapshotTypeDelta SnapshotType = &lt;span style="color:#a31515">&amp;#34;delta&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">type&lt;/span> OnDemandSnapshotTaskConfig &lt;span style="color:#00f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Type of on-demand snapshot.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> Type SnapshotType &lt;span style="color:#a31515">`json:&amp;#34;type&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> &lt;/span> type: &amp;lt;type of on-demand snapshot&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="pre-conditions-2">Pre-Conditions&lt;/h5>
&lt;ul>
&lt;li>Etcd cluster should have a quorum.&lt;/li>
&lt;li>There should not already be a &lt;code>on-demand snapshot&lt;/code> task running with the same &lt;code>SnapshotType&lt;/code> for the same etcd cluster.&lt;/li>
&lt;/ul>
&lt;h4 id="trigger-on-demand-maintenance-of-etcd-cluster">Trigger on-demand maintenance of etcd cluster&lt;/h4>
&lt;p>Operator can trigger on-demand &lt;a href="https://etcd.io/docs/v3.5/op-guide/maintenance">maintenance of etcd cluster&lt;/a> which includes operations like &lt;a href="https://etcd.io/docs/v3.5/op-guide/maintenance/#history-compaction-v3-api-key-value-database">etcd compaction&lt;/a>, &lt;a href="https://etcd.io/docs/v3.5/op-guide/maintenance/#defragmentation">etcd defragmentation&lt;/a> etc.&lt;/p>
&lt;h5 id="possible-scenarios-2">Possible Scenarios&lt;/h5>
&lt;ul>
&lt;li>If an etcd cluster is heavily loaded, which is causing performance degradation of an etcd cluster, and the operator does not want to wait for the scheduled maintenance window then an &lt;code>on-demand maintenance&lt;/code> task can be triggered which will invoke etcd-compaction, etcd-defragmentation etc. on the target etcd cluster. This will make the etcd cluster lean and clean, thus improving cluster performance.&lt;/li>
&lt;/ul>
&lt;h5 id="task-config-3">Task Config&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">type&lt;/span> OnDemandMaintenanceTaskConfig &lt;span style="color:#00f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// MaintenanceType defines the maintenance operations need to be performed on etcd cluster.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> MaintenanceType maintenanceOps &lt;span style="color:#a31515">`json:&amp;#34;maintenanceType`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">type&lt;/span> maintenanceOps &lt;span style="color:#00f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// EtcdCompaction if set to true will trigger an etcd compaction on the target etcd.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// +optional
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> EtcdCompaction &lt;span style="color:#2b91af">bool&lt;/span> &lt;span style="color:#a31515">`json:&amp;#34;etcdCompaction,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// EtcdDefragmentation if set to true will trigger a etcd defragmentation on the target etcd.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// +optional
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> EtcdDefragmentation &lt;span style="color:#2b91af">bool&lt;/span> &lt;span style="color:#a31515">`json:&amp;#34;etcdDefragmentation,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> maintenanceType:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> etcdCompaction: &amp;lt;true/false&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> etcdDefragmentation: &amp;lt;true/false&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="pre-conditions-3">Pre-Conditions&lt;/h5>
&lt;ul>
&lt;li>Etcd cluster should have a quorum.&lt;/li>
&lt;li>There should not already be a duplicate task running with same &lt;code>maintenanceType&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h4 id="copy-backups-task">Copy Backups Task&lt;/h4>
&lt;p>Copy the backups(full and delta snapshots) of etcd cluster from one object store(source) to another object store(target).&lt;/p>
&lt;h5 id="possible-scenarios-3">Possible Scenarios&lt;/h5>
&lt;ul>
&lt;li>In &lt;a href="https://github.com/gardener/gardener">Gardener&lt;/a>, the &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/07-shoot-control-plane-migration.md">Control Plane Migration&lt;/a> process utilizes the copy-backups task. This task is responsible for copying backups from one object store to another, typically located in different regions.&lt;/li>
&lt;/ul>
&lt;h5 id="task-config-4">Task Config&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// EtcdCopyBackupsTaskConfig defines the parameters for the copy backups task.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">type&lt;/span> EtcdCopyBackupsTaskConfig &lt;span style="color:#00f">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// SourceStore defines the specification of the source object store provider.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> SourceStore StoreSpec &lt;span style="color:#a31515">`json:&amp;#34;sourceStore&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// TargetStore defines the specification of the target object store provider for storing backups.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> TargetStore StoreSpec &lt;span style="color:#a31515">`json:&amp;#34;targetStore&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// MaxBackupAge is the maximum age in days that a backup must have in order to be copied.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// By default all backups will be copied.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// +optional
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> MaxBackupAge *&lt;span style="color:#2b91af">uint32&lt;/span> &lt;span style="color:#a31515">`json:&amp;#34;maxBackupAge,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// MaxBackups is the maximum number of backups that will be copied starting with the most recent ones.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#008000">// +optional
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">&lt;/span> MaxBackups *&lt;span style="color:#2b91af">uint32&lt;/span> &lt;span style="color:#a31515">`json:&amp;#34;maxBackups,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config: |&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> sourceStore: &amp;lt;source object store specification&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> targetStore: &amp;lt;target object store specification&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> maxBackupAge: &amp;lt;maximum age in days that a backup must have in order to be copied&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> maxBackups: &amp;lt;maximum no. of backups that will be copied&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Note: For detailed object store specification please refer &lt;a href="https://github.com/gardener/etcd-druid/blob/9c5f8254e3aeb24c1e3e88d17d8d1de336ce981b/api/v1alpha1/types_common.go#L15-L29">here&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h5 id="pre-conditions-4">Pre-Conditions&lt;/h5>
&lt;ul>
&lt;li>There should not already be a &lt;code>copy-backups&lt;/code> task running.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note: &lt;code>copy-backups-task&lt;/code> runs as a separate job, and it operates only on the backup bucket, hence it doesn&amp;rsquo;t depend on health of etcd cluster members.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Note: &lt;code>copy-backups-task&lt;/code> has already been implemented and it&amp;rsquo;s currently being used in &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/07-shoot-control-plane-migration.md">Control Plane Migration&lt;/a> but &lt;code>copy-backups-task&lt;/code> will be harmonized with &lt;code>EtcdOperatorTask&lt;/code> custom resource.&lt;/p>
&lt;/blockquote>
&lt;h2 id="metrics">Metrics&lt;/h2>
&lt;p>Authors proposed to introduce the following metrics:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>etcddruid_operator_task_duration_seconds&lt;/code> : Histogram which captures the runtime for each etcd operator task.
Labels:&lt;/p>
&lt;ul>
&lt;li>Key: &lt;code>type&lt;/code>, Value: all supported tasks&lt;/li>
&lt;li>Key: &lt;code>state&lt;/code>, Value: One-Of {failed, succeeded, rejected}&lt;/li>
&lt;li>Key: &lt;code>etcd&lt;/code>, Value: name of the target etcd resource&lt;/li>
&lt;li>Key: &lt;code>etcd_namespace&lt;/code>, Value: namespace of the target etcd resource&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>etcddruid_operator_tasks_total&lt;/code>: Counter which counts the number of etcd operator tasks.
Labels:&lt;/p>
&lt;ul>
&lt;li>Key: &lt;code>type&lt;/code>, Value: all supported tasks&lt;/li>
&lt;li>Key: &lt;code>state&lt;/code>, Value: One-Of {failed, succeeded, rejected}&lt;/li>
&lt;li>Key: &lt;code>etcd&lt;/code>, Value: name of the target etcd resource&lt;/li>
&lt;li>Key: &lt;code>etcd_namespace&lt;/code>, Value: namespace of the target etcd resource&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Recovery From Permanent Quorum Loss In Etcd Cluster</title><link>https://gardener.cloud/docs/other-components/etcd-druid/recovery-from-permanent-quorum-loss-in-etcd-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/recovery-from-permanent-quorum-loss-in-etcd-cluster/</guid><description>
&lt;h1 id="recovery-from-permanent-quorum-loss-in-an-etcd-cluster">Recovery from Permanent Quorum Loss in an Etcd Cluster&lt;/h1>
&lt;h2 id="quorum-loss-in-etcd-cluster">Quorum loss in Etcd Cluster&lt;/h2>
&lt;p>&lt;a href="https://etcd.io/docs/v3.4/op-guide/recovery/">Quorum loss&lt;/a> means when the majority of Etcd pods (greater than or equal to n/2 + 1) are down simultaneously for some reason.&lt;/p>
&lt;p>There are two types of quorum loss that can happen to an &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/">Etcd multinode cluster&lt;/a>:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Transient quorum loss&lt;/strong> - A quorum loss is called transient when the majority of Etcd pods are down simultaneously for some time. The pods may be down due to network unavailability, high resource usages, etc. When the pods come back after some time, they can re-join the cluster and quorum is recovered automatically without any manual intervention. There should not be a permanent failure for the majority of etcd pods due to hardware failure or disk corruption.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Permanent quorum loss&lt;/strong> - A quorum loss is called permanent when the majority of Etcd cluster members experience permanent failure, whether due to hardware failure or disk corruption, etc. In that case, the etcd cluster is not going to recover automatically from the quorum loss. A human operator will now need to intervene and execute the following steps to recover the multi-node Etcd cluster.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>If permanent quorum loss occurs to a multinode Etcd cluster, the operator needs to note down the PVCs, configmaps, statefulsets, CRs, etc. related to that Etcd cluster and work on those resources only. The following steps guide a human operator to recover from permanent quorum loss of an etcd cluster. We assume the name of the Etcd CR for the Etcd cluster is &lt;code>etcd-main&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Etcd cluster in shoot control plane of gardener deployment:&lt;/strong>
There are two &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/">Etcd clusters&lt;/a> running in the shoot control plane. One is named &lt;code>etcd-events&lt;/code> and another is named &lt;code>etcd-main&lt;/code>. The operator needs to take care of permanent quorum loss to a specific cluster. If permanent quorum loss occurs to &lt;code>etcd-events&lt;/code> cluster, the operator needs to note down the PVCs, configmaps, statefulsets, CRs, etc. related to the &lt;code>etcd-events&lt;/code> cluster and work on those resources only.&lt;/p>
&lt;p>⚠️ &lt;strong>Note:&lt;/strong> Please note that manually restoring etcd can result in data loss. This guide is the last resort to bring an Etcd cluster up and running again.&lt;/p>
&lt;p>If etcd-druid and etcd-backup-restore is being used with gardener, then:&lt;/p>
&lt;p>Target the control plane of affected shoot cluster via &lt;code>kubectl&lt;/code>. Alternatively, you can use &lt;a href="https://github.com/gardener/gardenctl-v2">gardenctl&lt;/a> to target the control plane of the affected shoot cluster. You can get the details to target the control plane from the Access tile in the shoot cluster details page on the Gardener dashboard. Ensure that you are targeting the correct namespace.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Add the following annotations to the &lt;code>Etcd&lt;/code> resource &lt;code>etcd-main&lt;/code>:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>kubectl annotate etcd etcd-main druid.gardener.cloud/suspend-etcd-spec-reconcile=&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>kubectl annotate etcd etcd-main druid.gardener.cloud/disable-resource-protection=&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Note down the configmap name that is attached to the &lt;code>etcd-main&lt;/code> statefulset. If you describe the statefulset with &lt;code>kubectl describe sts etcd-main&lt;/code>, look for the lines similar to following lines to identify attached configmap name. It will be needed at later stages:&lt;/p>
&lt;pre tabindex="0">&lt;code>Volumes:
etcd-config-file:
Type: ConfigMap (a volume populated by a ConfigMap)
Name: etcd-bootstrap-4785b0
Optional: false
&lt;/code>&lt;/pre>&lt;p>Alternatively, the related configmap name can be obtained by executing following command as well:&lt;/p>
&lt;p>&lt;code>kubectl get sts etcd-main -o jsonpath='{.spec.template.spec.volumes[?(@.name==&amp;quot;etcd-config-file&amp;quot;)].configMap.name}'&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Scale down the &lt;code>etcd-main&lt;/code> statefulset replicas to &lt;code>0&lt;/code>:&lt;/p>
&lt;p>&lt;code>kubectl scale sts etcd-main --replicas=0&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The PVCs will look like the following on listing them with the command &lt;code>kubectl get pvc&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>main-etcd-etcd-main-0 Bound pv-shoot--garden--aws-ha-dcb51848-49fa-4501-b2f2-f8d8f1fad111 80Gi RWO gardener.cloud-fast 13d
main-etcd-etcd-main-1 Bound pv-shoot--garden--aws-ha-b4751b28-c06e-41b7-b08c-6486e03090dd 80Gi RWO gardener.cloud-fast 13d
main-etcd-etcd-main-2 Bound pv-shoot--garden--aws-ha-ff17323b-d62e-4d5e-a742-9de823621490 80Gi RWO gardener.cloud-fast 13d
&lt;/code>&lt;/pre>&lt;p>Delete all PVCs that are attached to &lt;code>etcd-main&lt;/code> cluster.&lt;/p>
&lt;p>&lt;code>kubectl delete pvc -l instance=etcd-main&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check the etcd&amp;rsquo;s member leases. There should be leases starting with &lt;code>etcd-main&lt;/code> as many as &lt;code>etcd-main&lt;/code> replicas.
One of those leases will have holder identity as &lt;code>&amp;lt;etcd-member-id&amp;gt;:Leader&lt;/code> and rest of etcd member leases have holder identities as &lt;code>&amp;lt;etcd-member-id&amp;gt;:Member&lt;/code>.
Please ignore the snapshot leases, i.e., those leases which have the suffix &lt;code>snap&lt;/code>.&lt;/p>
&lt;p>etcd-main member leases:&lt;/p>
&lt;pre tabindex="0">&lt;code> NAME HOLDER AGE
etcd-main-0 4c37667312a3912b:Member 1m
etcd-main-1 75a9b74cfd3077cc:Member 1m
etcd-main-2 c62ee6af755e890d:Leader 1m
&lt;/code>&lt;/pre>&lt;p>Delete all &lt;code>etcd-main&lt;/code> member leases.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Edit the &lt;code>etcd-main&lt;/code> cluster&amp;rsquo;s configmap (ex: &lt;code>etcd-bootstrap-4785b0&lt;/code>) as follows:&lt;/p>
&lt;p>Find the &lt;code>initial-cluster&lt;/code> field in the configmap. It should look similar to the following:&lt;/p>
&lt;pre tabindex="0">&lt;code># Initial cluster
initial-cluster: etcd-main-0=https://etcd-main-0.etcd-main-peer.default.svc:2380,etcd-main-1=https://etcd-main-1.etcd-main-peer.default.svc:2380,etcd-main-2=https://etcd-main-2.etcd-main-peer.default.svc:2380
&lt;/code>&lt;/pre>&lt;p>Change the &lt;code>initial-cluster&lt;/code> field to have only one member (&lt;code>etcd-main-0&lt;/code>) in the string. It should now look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code># Initial cluster
initial-cluster: etcd-main-0=https://etcd-main-0.etcd-main-peer.default.svc:2380
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Scale up the &lt;code>etcd-main&lt;/code> statefulset replicas to &lt;code>1&lt;/code>:&lt;/p>
&lt;p>&lt;code>kubectl scale sts etcd-main --replicas=1&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wait for the single-member etcd cluster to be completely ready.&lt;/p>
&lt;p>&lt;code>kubectl get pods etcd-main-0&lt;/code> will give the following output when ready:&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME READY STATUS RESTARTS AGE
etcd-main-0 2/2 Running 0 1m
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Remove the following annotations from the &lt;code>Etcd&lt;/code> resource &lt;code>etcd-main&lt;/code>:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>kubectl annotate etcd etcd-main druid.gardener.cloud/suspend-etcd-spec-reconcile-&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>kubectl annotate etcd etcd-main druid.gardener.cloud/disable-resource-protection-&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Finally, add the following annotation to the &lt;code>Etcd&lt;/code> resource &lt;code>etcd-main&lt;/code>:&lt;/p>
&lt;p>&lt;code>kubectl annotate etcd etcd-main gardener.cloud/operation='reconcile'&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Verify that the etcd cluster is formed correctly.&lt;/p>
&lt;p>All the &lt;code>etcd-main&lt;/code> pods will have outputs similar to following:&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME READY STATUS RESTARTS AGE
etcd-main-0 2/2 Running 0 5m
etcd-main-1 2/2 Running 0 1m
etcd-main-2 2/2 Running 0 1m
&lt;/code>&lt;/pre>&lt;p>Additionally, check if the Etcd CR is ready with &lt;code>kubectl get etcd etcd-main&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME READY AGE
etcd-main true 13d
&lt;/code>&lt;/pre>&lt;p>Additionally, check the leases for 30 seconds at least. There should be leases starting with &lt;code>etcd-main&lt;/code> as many as &lt;code>etcd-main&lt;/code> replicas. One of those leases will have holder identity as &lt;code>&amp;lt;etcd-member-id&amp;gt;:Leader&lt;/code> and rest of those leases have holder identities as &lt;code>&amp;lt;etcd-member-id&amp;gt;:Member&lt;/code>. The &lt;code>AGE&lt;/code> of those leases can also be inspected to identify if those leases were updated in conjunction with the restart of the Etcd cluster: Example:&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME HOLDER AGE
etcd-main-0 4c37667312a3912b:Member 1m
etcd-main-1 75a9b74cfd3077cc:Member 1m
etcd-main-2 c62ee6af755e890d:Leader 1m
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol></description></item><item><title>Docs: Restoring Single Member In Multi Node Etcd Cluster</title><link>https://gardener.cloud/docs/other-components/etcd-druid/restoring-single-member-in-multi-node-etcd-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/restoring-single-member-in-multi-node-etcd-cluster/</guid><description>
&lt;h1 id="restoration-of-a-single-member-in-multi-node-etcd-deployed-by-etcd-druid">Restoration of a single member in multi-node etcd deployed by etcd-druid&lt;/h1>
&lt;p>&lt;strong>Note&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>For a cluster with n members, we are proposing the solution to only single member restoration within a etcd cluster not the quorum loss scenario (when majority of members within a cluster fail).&lt;/li>
&lt;li>In this proposal we are not targeting the recovery of single member which got separated from cluster due to &lt;a href="https://etcd.io/docs/v3.3/op-guide/failures/#network-partition">network partition&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>If a single etcd member within a multi-node etcd cluster goes down due to DB corruption/PVC corruption/Invalid data-dir then it needs to be brought back. Unlike in the single-node case, a minority member of a multi-node cluster can&amp;rsquo;t be restored from the snapshots present in storage container as you can&amp;rsquo;t restore from the old snapshots as it contains the metadata information of cluster which leads to &lt;strong>memberID mismatch&lt;/strong> that prevents the new member from coming up as new member is getting its metadata information from db which got restore from old snapshots.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>If a corresponding backup-restore sidecar detects that its corresponding etcd is down due to &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/7d27a47f5793b0949492d225ada5fd8344b6b6a2/pkg/initializer/validator/datavalidator.go#L177">data-dir corruption&lt;/a> or &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/7d27a47f5793b0949492d225ada5fd8344b6b6a2/pkg/initializer/validator/datavalidator.go#L204">Invalid data-dir&lt;/a>&lt;/li>
&lt;li>Then backup-restore will first remove the failing etcd member from the cluster using the &lt;a href="https://github.com/etcd-io/etcd/blob/ae9734ed278b7a1a7dfc82e800471ebbf9fce56f/clientv3/cluster.go#L45-L46">MemberRemove API&lt;/a> call and clean the data-dir of failed etcd member.&lt;/li>
&lt;li>It won&amp;rsquo;t affect the etcd cluster as quorum is still maintained.&lt;/li>
&lt;li>After successfully removing failed etcd member from the cluster, backup-restore sidecar will try to add a new etcd member to a cluster to get the same cluster size as before.&lt;/li>
&lt;li>Backup-restore firstly adds new member as a &lt;a href="https://etcd.io/docs/v3.3/learning/learner/">Learner&lt;/a> using the &lt;a href="https://github.com/etcd-io/etcd/blob/ae9734ed278b7a1a7dfc82e800471ebbf9fce56f/clientv3/cluster.go#L42-L43">MemberAddAsLearner API&lt;/a> call, once learner is added to the cluster and it&amp;rsquo;s get in sync with leader and becomes up-to-date then promote the learner(non-voting member) to a voting member using &lt;a href="https://github.com/etcd-io/etcd/blob/ae9734ed278b7a1a7dfc82e800471ebbf9fce56f/clientv3/cluster.go#L51-L52">MemberPromote API&lt;/a> call.&lt;/li>
&lt;li>So, the failed member first needs to be removed from the cluster and then added as a new member.&lt;/li>
&lt;/ul>
&lt;h2 id="example">Example&lt;/h2>
&lt;ol>
&lt;li>If a &lt;code>3&lt;/code> member etcd cluster has 1 downed member(due to invalid data-dir), the cluster can still make forward progress because the quorum is &lt;code>2&lt;/code>.&lt;/li>
&lt;li>Etcd downed member get restarted and it&amp;rsquo;s corresponding backup-restore sidecar receives an &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/docs/proposals/design.md#workflow">initialization&lt;/a> request.&lt;/li>
&lt;li>Then, backup-restore sidecar checks for data corruption/invalid data-dir.&lt;/li>
&lt;li>Backup-restore sidecar detects that data-dir is invalid and its a multi-node etcd cluster.&lt;/li>
&lt;li>Then, backup-restore sidecar removed the downed etcd member from cluster.&lt;/li>
&lt;li>The number of members in a cluster becomes &lt;code>2&lt;/code> and the quorum remains at &lt;code>2&lt;/code>, so it won&amp;rsquo;t affect the etcd cluster.&lt;/li>
&lt;li>Clean the data-dir and add a member as a learner(non-voting member).&lt;/li>
&lt;li>As soon as learner gets in sync with leader, promote the learner to a voting member, hence increasing number of members in a cluster back to &lt;code>3&lt;/code>.&lt;/li>
&lt;/ol></description></item><item><title>Docs: Supported K8s Versions</title><link>https://gardener.cloud/docs/other-components/etcd-druid/supported_k8s_versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/supported_k8s_versions/</guid><description>
&lt;h1 id="supported-kubernetes-versions">Supported Kubernetes Versions&lt;/h1>
&lt;p>We strongly recommend using &lt;code>etcd-druid&lt;/code> with the supported kubernetes versions, published in this document.
The following is a list of kubernetes versions supported by the respective &lt;code>etcd-druid&lt;/code> versions.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Etcd-druid version&lt;/th>
&lt;th>Kubernetes version&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;gt;=0.20&lt;/td>
&lt;td>&amp;gt;=1.21&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt;=0.14 &amp;amp;&amp;amp; &amp;lt;0.20&lt;/td>
&lt;td>All versions supported&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;0.14&lt;/td>
&lt;td>&amp;lt; 1.25&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Webhooks</title><link>https://gardener.cloud/docs/other-components/etcd-druid/concepts/webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/concepts/webhooks/</guid><description>
&lt;h1 id="webhooks">Webhooks&lt;/h1>
&lt;p>The &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/concepts/controllers/#controller-manager">etcd-druid controller-manager&lt;/a> registers certain &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/">admission webhooks&lt;/a> that allow for validation or mutation of requests on resources in the cluster, in order to prevent misconfiguration and restrict access to the etcd cluster resources.&lt;/p>
&lt;p>All webhooks that are a part of etcd-druid reside in package &lt;code>internal/webhook&lt;/code>, as sub-packages.&lt;/p>
&lt;h2 id="package-structure">Package Structure&lt;/h2>
&lt;p>The typical package structure for the webhooks that are part of etcd-druid is shown with the &lt;em>EtcdComponents Webhook&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>internal/webhook/etcdcomponents
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── config.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>├── handler.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── register.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>config.go&lt;/code>: contains all the logic for the configuration of the webhook, including feature gate activations, CLI flag parsing and validations.&lt;/li>
&lt;li>&lt;code>register.go&lt;/code>: contains the logic for registering the webhook with the etcd-druid controller manager.&lt;/li>
&lt;li>&lt;code>handler.go&lt;/code>: contains the webhook admission handler logic.&lt;/li>
&lt;/ul>
&lt;p>Each webhook package may also contain auxiliary files which are relevant to that specific webhook.&lt;/p>
&lt;h2 id="etcd-components-webhook">Etcd Components Webhook&lt;/h2>
&lt;p>Druid controller-manager registers and runs the &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/concepts/controllers/#etcd-controller">etcd controller&lt;/a>, which creates and manages various components/resources such as &lt;code>Leases&lt;/code>, &lt;code>ConfigMap&lt;/code>s, and the &lt;code>Statefulset&lt;/code> for the etcd cluster. It is essential for all these resources to contain correct configuration for the proper functioning of the etcd cluster.&lt;/p>
&lt;p>Unintended changes to any of these &lt;em>managed resources&lt;/em> can lead to misconfiguration of the etcd cluster, leading to unwanted downtime for etcd traffic. To prevent such unintended changes, a validating webhook called &lt;em>EtcdComponents Webhook&lt;/em> guards these managed resources, ensuring that only authorized entities can perform operations on these managed resources.&lt;/p>
&lt;p>&lt;em>EtcdComponents webhook&lt;/em> prevents &lt;em>UPDATE&lt;/em> and &lt;em>DELETE&lt;/em> operations on all resources managed by &lt;em>etcd controller&lt;/em>, unless such an operation is performed by druid itself, and during reconciliation of the &lt;code>Etcd&lt;/code> resource. Operations are also allowed if performed by one of the authorized entities specified by CLI flag &lt;code>--etcd-components-webhook-exempt-service-accounts&lt;/code>, but only if the &lt;code>Etcd&lt;/code> resource is not being reconciled by etcd-druid at that time.&lt;/p>
&lt;p>There may be specific cases where a human operator may need to make changes to the managed resources, possibly to test or fix an etcd cluster. An example of this is &lt;a href="https://gardener.cloud/docs/other-components/etcd-druid/recovery-from-permanent-quorum-loss-in-etcd-cluster/">recovery from permanent quorum loss&lt;/a>, where a human operator will need to suspend reconciliation of the &lt;code>Etcd&lt;/code> resource, make changes to the underlying managed resources such as &lt;code>StatefulSet&lt;/code> and &lt;code>ConfigMap&lt;/code>, and then resume reconciliation for the &lt;code>Etcd&lt;/code> resource. Such manual interventions will require out-of-band changes to the managed resources. Protection of managed resources for such &lt;code>Etcd&lt;/code> resources can be turned off by adding an annotation &lt;code>druid.gardener.cloud/disable-etcd-component-protection&lt;/code> on the &lt;code>Etcd&lt;/code> resource. This will effectively disable &lt;em>EtcdComponents Webhook&lt;/em> protection for all managed resources for the specific &lt;code>Etcd&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> &lt;em>UPDATE&lt;/em> operations for &lt;code>Lease&lt;/code>s by etcd members are always allowed, since these are regularly updated by the etcd-backup-restore sidecar.&lt;/p>
&lt;p>The &lt;em>Etcd Components Webhook&lt;/em> is disabled by default, and can be enabled via the CLI flag `&amp;ndash;enable-etcd-components-webhook.&lt;/p></description></item></channel></rss>