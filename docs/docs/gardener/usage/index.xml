<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Usage</title><link>https://gardener.cloud/docs/gardener/usage/</link><description>Recent content in Usage on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Thu, 19 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://gardener.cloud/docs/gardener/usage/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Hibernate a Cluster</title><link>https://gardener.cloud/docs/gardener/usage/shoot_hibernate/</link><pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shoot_hibernate/</guid><description>
&lt;h1 id="hibernate-a-cluster">Hibernate a Cluster&lt;/h1>
&lt;p>Clusters are only needed 24 hours a day if they run productive workload. So whenever you do development in a cluster, or just use it for tests or demo purposes, you can save much money if you scale-down your Kubernetes resources whenever you don&amp;rsquo;t need them. However, scaling them down manually can become time-consuming the more resources you have.&lt;/p>
&lt;p>Gardener offers a clever way to automatically scale-down all resources to zero: cluster hibernation. You can either hibernate a cluster by pushing a button or by defining a hibernation schedule.&lt;/p>
&lt;blockquote>
&lt;p>To save costs, it&amp;rsquo;s recommended to define a hibernation schedule before the creation of a cluster. You can hibernate your cluster or wake up your cluster manually even if there&amp;rsquo;s a schedule for its hibernation.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="#what-is-hibernated">What is hibernated?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#what-isnt-affected-by-the-hibernation">What isn’t affected by the hibernation?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hibernate-your-cluster-manually">Hibernate your cluster manually&lt;/a>&lt;/li>
&lt;li>&lt;a href="#wake-up-your-cluster-manually">Wake up your cluster manually&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-a-schedule-to-hibernate-your-cluster">Create a schedule to hibernate your cluster&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-hibernated">What is hibernated?&lt;/h2>
&lt;p>When a cluster is hibernated, Gardener scales down worker nodes and the cluster&amp;rsquo;s control plane to free resources at the IaaS provider. This affects:&lt;/p>
&lt;ul>
&lt;li>Your workload, for example, pods, deployments, custom resources.&lt;/li>
&lt;li>The virtual machines running your workload.&lt;/li>
&lt;li>The resources of the control plane of your cluster.&lt;/li>
&lt;/ul>
&lt;h2 id="what-isnt-affected-by-the-hibernation">What isn’t affected by the hibernation?&lt;/h2>
&lt;p>To scale up everything where it was before hibernation, Gardener doesn’t delete state-related information, that is, information stored in persistent volumes. The cluster state as persistent in &lt;code>etcd&lt;/code> is also preserved.&lt;/p>
&lt;h2 id="hibernate-your-cluster-manually">Hibernate your cluster manually&lt;/h2>
&lt;p>To hibernate your cluster you can run the following &lt;code>kubectl&lt;/code> command:&lt;/p>
&lt;pre>&lt;code>$ kubectl patch shoot -n $NAMESPACE $SHOOT_NAME -p '{&amp;quot;spec&amp;quot;:{&amp;quot;hibernation&amp;quot;:{&amp;quot;enabled&amp;quot;: true}}}'
&lt;/code>&lt;/pre>&lt;h2 id="wake-up-your-cluster-manually">Wake up your cluster manually&lt;/h2>
&lt;p>To wake up your cluster you can run the following &lt;code>kubectl&lt;/code> command:&lt;/p>
&lt;pre>&lt;code>$ kubectl patch shoot -n $NAMESPACE $SHOOT_NAME -p '{&amp;quot;spec&amp;quot;:{&amp;quot;hibernation&amp;quot;:{&amp;quot;enabled&amp;quot;: false}}}'
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Hibernation schedule is also supported. More details can be found &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/core/v1beta1/types_shoot.go#L335-L348">here&lt;/a>&lt;/strong>&lt;/p></description></item><item><title>Docs: Apiserver Sni Injection</title><link>https://gardener.cloud/docs/gardener/usage/apiserver-sni-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/apiserver-sni-injection/</guid><description>
&lt;h1 id="apiserversni-environment-variable-injection">APIServerSNI environment variable injection&lt;/h1>
&lt;p>If the Gardener administrator has enabled &lt;code>APIServerSNI&lt;/code> feature gate for a particular Seed cluster, then in each Shoot cluster&amp;rsquo;s &lt;code>kube-system&lt;/code> namespace a &lt;code>DaemonSet&lt;/code> called &lt;code>apiserver-proxy&lt;/code> is deployed. It routes traffic to the upstream Shoot Kube APIServer. See the &lt;a href="https://gardener.cloud/docs/gardener/proposals/08-shoot-apiserver-via-sni/">APIServer SNI GEP&lt;/a> for more details.&lt;/p>
&lt;p>To skip this extra network hop, a &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#mutatingadmissionwebhook">mutating webhook&lt;/a> called &lt;code>apiserver-proxy.networking.gardener.cloud&lt;/code> is deployed next to the API server in the Seed. It adds &lt;code>KUBERNETES_SERVICE_HOST&lt;/code> environment variable to each container and init container that do not specify it. See the webhook &lt;a href="https://github.com/gardener/apiserver-proxy/">repository&lt;/a> for more information.&lt;/p>
&lt;h2 id="opt-out-of-pod-injection">Opt-out of pod injection&lt;/h2>
&lt;p>In some cases it&amp;rsquo;s desirable to opt-out of Pod injection:&lt;/p>
&lt;ul>
&lt;li>DNS is disabled on that individual Pod, but it still needs to talk to the kube-apiserver.&lt;/li>
&lt;li>Want to test the &lt;code>kube-proxy&lt;/code> and &lt;code>kubelet&lt;/code> in-cluster discovery.&lt;/li>
&lt;/ul>
&lt;h3 id="opt-out-of-pod-injection-for-specific-pods">Opt-out of pod injection for specific pods&lt;/h3>
&lt;p>To opt out of the injection, the Pod should be labeled with &lt;code>apiserver-proxy.networking.gardener.cloud/inject: disable&lt;/code> e.g.:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: apps/v1
kind: Deployment
metadata:
name: nginx
labels:
app: nginx
spec:
replicas: 1
selector:
matchLabels:
app: nginx
template:
metadata:
labels:
app: nginx
apiserver-proxy.networking.gardener.cloud/inject: disable
spec:
containers:
- name: nginx
image: nginx:1.14.2
ports:
- containerPort: 80
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="opt-out-of-pod-injection-on-namespace-level">Opt-out of pod injection on namespace level&lt;/h3>
&lt;p>To opt out of the injection of &lt;strong>all&lt;/strong> Pods in a namespace, you should label your namespace with &lt;code>apiserver-proxy.networking.gardener.cloud/inject: disable&lt;/code> e.g.:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: v1
kind: Namespace
metadata:
labels:
apiserver-proxy.networking.gardener.cloud/inject: disable
name: my-namespace
&lt;/code>&lt;/pre>&lt;/div>&lt;p>or via &lt;code>kubectl&lt;/code> for existing namespace:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">kubectl label namespace my-namespace apiserver-proxy.networking.gardener.cloud/inject=disable
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>NOTE: Please be aware that it&amp;rsquo;s not possible to disable injection on namespace level and enable it for individual pods in it.&lt;/p>
&lt;/blockquote>
&lt;h3 id="opt-out-of-pod-injection-for-the-entire-cluster">Opt-out of pod injection for the entire cluster&lt;/h3>
&lt;p>If the injection is causing problems for different workloads and ignoring individual pods or namespaces is not possible, then the feature could be disabled for the entire cluster with the &lt;code>alpha.featuregates.shoot.gardener.cloud/apiserver-sni-pod-injector&lt;/code> annotation with value &lt;code>disable&lt;/code> on the &lt;code>Shoot&lt;/code> resource itself:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: Shoot
metadata:
annotations:
alpha.featuregates.shoot.gardener.cloud/apiserver-sni-pod-injector: &lt;span style="color:#a31515">&amp;#39;disable&amp;#39;&lt;/span>
name: my-cluster
&lt;/code>&lt;/pre>&lt;/div>&lt;p>or via &lt;code>kubectl&lt;/code> for existing shoot cluster:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">kubectl label shoot my-cluster alpha.featuregates.shoot.gardener.cloud/apiserver-sni-pod-injector=disable
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>NOTE: Please be aware that it&amp;rsquo;s not possible to disable injection on cluster level and enable it for individual pods in it.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Configuration</title><link>https://gardener.cloud/docs/gardener/usage/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/configuration/</guid><description>
&lt;h1 id="gardener-configuration-and-usage">Gardener Configuration and Usage&lt;/h1>
&lt;p>Gardener automates the full lifecycle of Kubernetes clusters as a service.
Additionally, it has several extension points allowing external controllers to plug-in to the lifecycle.
As a consequence, there are several configuration options for the various custom resources that are partially required.&lt;/p>
&lt;p>This document describes the&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#configuration-and-usage-of-gardener-as-operatoradministrator">configuration and usage of Gardener as operator/administrator&lt;/a>.&lt;/li>
&lt;li>&lt;a href="#configuration-and-usage-of-gardener-as-end-userstakeholdercustomer">configuration and usage of Gardener as end-user/stakeholder/customer&lt;/a>.&lt;/li>
&lt;/ol>
&lt;h2 id="configuration-and-usage-of-gardener-as-operatoradministrator">Configuration and Usage of Gardener as Operator/Administrator&lt;/h2>
&lt;p>When we use the terms &amp;ldquo;operator/administrator&amp;rdquo; we refer to both the people deploying and operating Gardener.
Gardener consists of the following components:&lt;/p>
&lt;ol>
&lt;li>&lt;code>gardener-apiserver&lt;/code>, a Kubernetes-native API extension that serves custom resources in the Kubernetes-style (like &lt;code>Seed&lt;/code>s and &lt;code>Shoot&lt;/code>s), and a component that contains multiple admission plugins.&lt;/li>
&lt;li>&lt;code>gardener-admission-controller&lt;/code>, an HTTP(S) server with several handlers to be used in a &lt;a href="https://github.com/gardener/gardener/blob/master/charts/gardener/controlplane/charts/application/templates/validatingwebhook-admission-controller.yaml">ValidatingWebhookConfiguration&lt;/a>.&lt;/li>
&lt;li>&lt;code>gardener-controller-manager&lt;/code>, a component consisting out of multiple controllers that implement reconciliation and deletion flows for some of the custom resources (e.g., it contains the logic for maintaining &lt;code>Shoot&lt;/code>s, reconciling &lt;code>Plant&lt;/code>s, etc.).&lt;/li>
&lt;li>&lt;code>gardener-scheduler&lt;/code>, a component that assigns newly created &lt;code>Shoot&lt;/code> clusters to appropriate &lt;code>Seed&lt;/code> clusters.&lt;/li>
&lt;li>&lt;code>gardenlet&lt;/code>, a component running in seed clusters and consisting out of multiple controllers that implement reconciliation and deletion flows for some of the custom resources (e.g., it contains the logic for reconciliation and deletion of &lt;code>Shoot&lt;/code>s).&lt;/li>
&lt;/ol>
&lt;p>Each of these components have various configuration options.
The &lt;code>gardener-apiserver&lt;/code> uses the standard API server library maintained by the Kubernetes community, and as such it mainly supports command line flags.
Other components use so-called componentconfig files that describe their configuration in a Kubernetes-style versioned object.&lt;/p>
&lt;h3 id="configuration-file-for-gardener-admission-controller">Configuration file for Gardener admission controller&lt;/h3>
&lt;p>The Gardener admission controller does only support one command line flag which should be a path to a valid admission-controller configuration file.
Please take a look at &lt;a href="https://github.com/gardener/gardener/blob/master/example/20-componentconfig-gardener-admission-controller.yaml">this&lt;/a> example configuration.&lt;/p>
&lt;h3 id="configuration-file-for-gardener-controller-manager">Configuration file for Gardener controller manager&lt;/h3>
&lt;p>The Gardener controller manager does only support one command line flag which should be a path to a valid controller-manager configuration file.
Please take a look at &lt;a href="https://github.com/gardener/gardener/blob/master/example/20-componentconfig-gardener-controller-manager.yaml">this&lt;/a> example configuration.&lt;/p>
&lt;h3 id="configuration-file-for-gardener-scheduler">Configuration file for Gardener scheduler&lt;/h3>
&lt;p>The Gardener scheduler also only supports one command line flag which should be a path to a valid scheduler configuration file.
Please take a look at &lt;a href="https://github.com/gardener/gardener/blob/master/example/20-componentconfig-gardener-scheduler.yaml">this&lt;/a> example configuration.
Information about the concepts of the Gardener scheduler can be found &lt;a href="https://gardener.cloud/docs/gardener/concepts/scheduler/">here&lt;/a>&lt;/p>
&lt;h3 id="configuration-file-for-gardenlet">Configuration file for Gardenlet&lt;/h3>
&lt;p>The Gardenlet also only supports one command line flag which should be a path to a valid gardenlet configuration file.
Please take a look at &lt;a href="https://github.com/gardener/gardener/blob/master/example/20-componentconfig-gardenlet.yaml">this&lt;/a> example configuration.
Information about the concepts of the Gardenlet can be found &lt;a href="https://gardener.cloud/docs/gardener/concepts/gardenlet/">here&lt;/a>&lt;/p>
&lt;h3 id="system-configuration">System configuration&lt;/h3>
&lt;p>After successful deployment of the four components you need to setup the system.
Let&amp;rsquo;s first focus on some &amp;ldquo;static&amp;rdquo; configuration.
When the &lt;code>gardenlet&lt;/code> starts it scans the &lt;code>garden&lt;/code> namespace of the garden cluster for &lt;code>Secret&lt;/code>s that have influence on its reconciliation loops, mainly the &lt;code>Shoot&lt;/code> reconciliation:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Internal domain secret&lt;/strong>, contains the DNS provider credentials (having appropriate privileges) which will be used to create/delete so-called &amp;ldquo;internal&amp;rdquo; DNS records for the Shoot clusters, please see &lt;a href="https://github.com/gardener/gardener/blob/master/example/10-secret-internal-domain.yaml">this&lt;/a> for an example.&lt;/p>
&lt;ul>
&lt;li>This secret is used in order to establish a stable endpoint for shoot clusters which is used internally by all control plane components.&lt;/li>
&lt;li>The DNS records are normal DNS records but called &amp;ldquo;internal&amp;rdquo; in our scenario because only the kubeconfigs for the control plane components use this endpoint when talking to the shoot clusters.&lt;/li>
&lt;li>It is forbidden to change the internal domain secret if there are existing shoot clusters.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Default domain secrets&lt;/strong> (optional), contain the DNS provider credentials (having appropriate privileges) which will be used to create/delete DNS records for a default domain for shoots (e.g., &lt;code>example.com&lt;/code>), please see &lt;a href="https://github.com/gardener/gardener/blob/master/example/10-secret-default-domain.yaml">this&lt;/a> for an example.&lt;/p>
&lt;ul>
&lt;li>Not every end-user/stakeholder/customer has its own domain, however, Gardener needs to create a DNS record for every shoot cluster.&lt;/li>
&lt;li>As landscape operator you might want to define a default domain owned and controlled by you that is used for all shoot clusters that don&amp;rsquo;t specify their own domain.&lt;/li>
&lt;li>If you have multiple default domain secrets defined you can add a priority as an annotation (&lt;code>dns.gardener.cloud/domain-default-priority&lt;/code>) to select which domain should be used for new shoots while creation. The domain with the highest priority is selected while shoot creation. If there is no annotation defined the default priority is &lt;code>0&lt;/code>, also all non integer values are considered as priority &lt;code>0&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>⚠️ Please note that the mentioned domain secrets are only needed if you have at least one seed cluster that is not specifing &lt;code>.spec.settings.shootDNS.enabled=false&lt;/code>.
Seeds with this taint don&amp;rsquo;t create any DNS records for shoots scheduled on it, hence, if you only have such seeds, you don&amp;rsquo;t need to create the domain secrets.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Alerting secrets&lt;/strong> (optional), contain the alerting configuration and credentials for the &lt;a href="https://prometheus.io/docs/alerting/alertmanager/">AlertManager&lt;/a> to send email alerts. It is also possible to configure the monitoring stack to send alerts to an AlertManager not deployed by Gardener to handle alerting. Please see &lt;a href="https://github.com/gardener/gardener/blob/master/example/10-secret-alerting.yaml">this&lt;/a> for an example.&lt;/p>
&lt;ul>
&lt;li>If email alerting is configured:
&lt;ul>
&lt;li>An AlertManager is deployed into each seed cluster that handles the alerting for all shoots on the seed cluster.&lt;/li>
&lt;li>Gardener will inject the SMTP credentials into the configuration of the AlertManager.&lt;/li>
&lt;li>The AlertManager will send emails to the configured email address in case any alerts are firing.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If an external AlertManager is configured:
&lt;ul>
&lt;li>Each shoot has a &lt;a href="https://prometheus.io/docs/introduction/overview/">Prometheus&lt;/a> responsible for monitoring components and sending out alerts. The alerts will be sent to a URL configured in the alerting secret.&lt;/li>
&lt;li>This external AlertManager is not managed by Gardener and can be configured however the operator sees fit.&lt;/li>
&lt;li>Supported authentication types are no authentication, basic, or mutual TLS.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>OpenVPN Diffie-Hellmann Key secret&lt;/strong> (optional), contains the self-generated Diffie-Hellmann key used by OpenVPN in your landscape, please see &lt;a href="https://github.com/gardener/gardener/blob/master/example/10-secret-openvpn-diffie-hellman.yaml">this&lt;/a> for an example.&lt;/p>
&lt;ul>
&lt;li>If you don&amp;rsquo;t specify a custom key then a default key is used, but for productive landscapes it&amp;rsquo;s recommend to create a landscape-specific key and define it.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Global monitoring secrets&lt;/strong> (optional), contains basic authentication credentials for the Prometheus aggregating metrics for all clusters.&lt;/p>
&lt;ul>
&lt;li>These secrets are synced to each seed cluster and used to gain access to the aggregate monitoring components.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Apart from this &amp;ldquo;static&amp;rdquo; configuration there are several custom resources extending the Kubernetes API and used by Gardener.
As an operator/administrator you have to configure some of them to make the system work.&lt;/p>
&lt;h3 id="configuration-and-usage-of-gardener-as-end-userstakeholdercustomer">Configuration and Usage of Gardener as End-User/Stakeholder/Customer&lt;/h3>
&lt;p>As an end-user/stakeholder/customer you are using a Gardener landscape that has been setup for you by another team.
You don&amp;rsquo;t need to care about how Gardener itself has to be configured or how it has to be deployed.
Take a look at &lt;a href="https://gardener.cloud/docs/gardener/concepts/apiserver/">this document&lt;/a> - it describes which resources are offered by Gardener.
You may want to have a more detailed look for &lt;code>Project&lt;/code>s, &lt;code>SecretBinding&lt;/code>s, &lt;code>Shoot&lt;/code>s, &lt;code>Plant&lt;/code>s, and &lt;code>(Cluster)OpenIDConnectPreset&lt;/code>s.&lt;/p></description></item><item><title>Docs: Control Plane Migration</title><link>https://gardener.cloud/docs/gardener/usage/control_plane_migration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/control_plane_migration/</guid><description>
&lt;h1 id="control-plane-migration">Control Plane Migration&lt;/h1>
&lt;h2 id="preconditions">Preconditions&lt;/h2>
&lt;p>To be able to use this feature you need to enable the feature gate &lt;code>SeedChange&lt;/code> in your &lt;code>gardener-apiserver&lt;/code>
by adding the following command flag: &lt;code>--feature-gates=SeedChange=true&lt;/code>.&lt;/p>
&lt;p>Also, the involved Seeds need to have enabled BackupBuckets.&lt;/p>
&lt;h2 id="shootstate">ShootState&lt;/h2>
&lt;p>&lt;code>ShootState&lt;/code> is an API resource which stores non-reconstructible state and data required to completely recreate a &lt;code>Shoot&lt;/code>&amp;rsquo;s control plane on a new &lt;code>Seed&lt;/code>. The &lt;code>ShootState&lt;/code> resource is created on &lt;code>Shoot&lt;/code> creation in its &lt;code>Project&lt;/code> namespace and the required state/data is persisted during &lt;code>Shoot&lt;/code> creation or reconciliation.&lt;/p>
&lt;h2 id="shoot-control-plane-migration">Shoot Control Plane Migration&lt;/h2>
&lt;p>Triggering the migration is done by changing the &lt;code>Shoot&lt;/code>&amp;rsquo;s &lt;code>.spec.seedName&lt;/code> to a &lt;code>Seed&lt;/code> that differs from the &lt;code>.status.seedName&lt;/code>, we call this &lt;code>Seed&lt;/code> &lt;code>&amp;quot;Destination Seed&amp;quot;&lt;/code>. If the Destination &lt;code>Seed&lt;/code> does not have a backup and restore configuration, the change to &lt;code>spec.seedName&lt;/code> is rejected. Additionally, this Seed must not be set for deletion and must be healthy.&lt;/p>
&lt;p>If the &lt;code>Shoot&lt;/code> has different &lt;code>.spec.seedName&lt;/code> and &lt;code>.status.seedName&lt;/code> a process is started to prepare the Control Plane for migration:&lt;/p>
&lt;ol>
&lt;li>&lt;code>.status.lastOperation&lt;/code> is changed to &lt;code>Migrate&lt;/code>.&lt;/li>
&lt;li>Kubernetes API Server is stopped and the extension resources are annotated with &lt;code>gardener.cloud/operation=migrate&lt;/code>.&lt;/li>
&lt;li>Full snapshot of the ETCD is created and terminating of the Control Plane in the &lt;code>Source Seed&lt;/code> is initiated.&lt;/li>
&lt;/ol>
&lt;p>If the process is successful, we update the status of the &lt;code>Shoot&lt;/code> by setting the &lt;code>.status.seedName&lt;/code> to the null value. That way, a restoration is triggered in the &lt;code>Destination Seed&lt;/code> and &lt;code>.status.lastOperation&lt;/code> is changed to &lt;code>Restore&lt;/code>.&lt;/p></description></item><item><title>Docs: Csi Components</title><link>https://gardener.cloud/docs/gardener/usage/csi_components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/csi_components/</guid><description>
&lt;h1 id="custom-csi-components">(Custom) CSI Components&lt;/h1>
&lt;p>Some provider extensions for Gardener are using CSI components to manage persistent volumes in the shoot clusters.
Additionally, most of the provider extensions are deploying controllers for taking volume snapshots (CSI snapshotter).&lt;/p>
&lt;p>End-users can deploy their own CSI components and controllers into shoot clusters.
In such situations, there are multiple controllers acting on the &lt;code>VolumeSnapshot&lt;/code> custom resources (each responsible for those instances associated with their respective driver provisioner types).&lt;/p>
&lt;p>However, this might lead to operational conflicts that cannot be overcome by Gardener alone.
Concretely, Gardener cannot know which custom CSI components were installed by end-users which can lead to issues, especially during shoot cluster deletion.
You can add a label to your custom CSI components indicating that Gardener should not try to remove them during shoot cluster deletion. This means you have to take care of the lifecycle for these components yourself!&lt;/p>
&lt;h2 id="recommendations">Recommendations&lt;/h2>
&lt;p>Custom CSI components are typically regular &lt;code>Deployment&lt;/code>s running in the shoot clusters.&lt;/p>
&lt;p>&lt;strong>Please label them with the &lt;code>shoot.gardener.cloud/no-cleanup=true&lt;/code> label.&lt;/strong>&lt;/p>
&lt;h2 id="background-information">Background Information&lt;/h2>
&lt;p>When a shoot cluster is deleted, Gardener deletes most Kubernetes resources (&lt;code>Deployment&lt;/code>s, &lt;code>DaemonSet&lt;/code>s, &lt;code>StatefulSet&lt;/code>s, etc.). Gardener will also try to delete CSI components if they are not marked with the above mentioned label.&lt;/p>
&lt;p>This can result in &lt;code>VolumeSnapshot&lt;/code> resources still having finalizers that will never be cleaned up.
Consequently, manual intervention is required to clean them up before the cluster deletion can continue.&lt;/p></description></item><item><title>Docs: Custom Dns</title><link>https://gardener.cloud/docs/gardener/usage/custom-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/custom-dns/</guid><description>
&lt;h1 id="custom-dns-configuration">Custom DNS Configuration&lt;/h1>
&lt;p>Gardener provides Kubernetes-Clusters-As-A-Service where all the system components (e.g., kube-proxy, networking, dns, &amp;hellip;) are managed.
As a result, Gardener needs to ensure and auto-correct additional configuration to those system components to avoid unnecessary down-time.&lt;/p>
&lt;p>In some cases, auto-correcting system components can prevent users from deploying applications on top of the cluster that requires bits of customization, DNS configuration can be a good example.&lt;/p>
&lt;p>To allow for customizations for DNS configuration (that could potentially lead to downtime) while having the option to &amp;ldquo;undo&amp;rdquo;, we utilize the &lt;code>import&lt;/code> plugin from CoreDNS [1].
which enables in-line configuration changes.&lt;/p>
&lt;h2 id="how-to-use">How to use&lt;/h2>
&lt;p>To customize your CoreDNS cluster config, you can simply edit a &lt;code>ConfigMap&lt;/code> named &lt;code>coredns-custom&lt;/code> in the &lt;code>kube-system&lt;/code> namespace.
By editing, this &lt;code>ConfigMap&lt;/code>, you are modifying CoreDNS configuration, therefore care is advised.&lt;/p>
&lt;p>For example, to apply new config to CoreDNS that would point all &lt;code>.global&lt;/code> DNS requests to another DNS pod, simply edit the configuration as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: v1
kind: ConfigMap
metadata:
name: coredns-custom
namespace: kube-system
data:
istio.server: |&lt;span style="color:#a31515">
&lt;/span>&lt;span style="color:#a31515"> global:8053 {
&lt;/span>&lt;span style="color:#a31515"> errors
&lt;/span>&lt;span style="color:#a31515"> cache 30
&lt;/span>&lt;span style="color:#a31515"> forward . 1.2.3.4
&lt;/span>&lt;span style="color:#a31515"> }&lt;/span>
corefile.override: |&lt;span style="color:#a31515">
&lt;/span>&lt;span style="color:#a31515"> # &amp;lt;some-plugin&amp;gt; &amp;lt;some-plugin-config&amp;gt;
&lt;/span>&lt;span style="color:#a31515"> debug
&lt;/span>&lt;span style="color:#a31515"> whoami&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is important to have the &lt;code>ConfigMap&lt;/code> keys ending with &lt;code>*.server&lt;/code> (if you would like to add a new server) or &lt;code>*.override&lt;/code>
if you want to customize the current server configuration (it is optional setting both).&lt;/p>
&lt;h2 id="optional-reload-coredns">[Optional] Reload CoreDNS&lt;/h2>
&lt;p>As Gardener is configuring the &lt;code>reload&lt;/code> &lt;a href="https://coredns.io/plugins/reload/">plugin&lt;/a> of CoreDNS a restart of the CoreDNS components is typically not necessary to propagate &lt;code>ConfigMap&lt;/code> changes. However, if you don&amp;rsquo;t want to wait for the default (30s) to kick in, you can roll-out your CoreDNS deployment using:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n kube-system rollout restart deploy coredns
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will reload the config into CoreDNS.&lt;/p>
&lt;p>The approach we follow here was inspired by AKS&amp;rsquo;s approach [2].&lt;/p>
&lt;h2 id="anti-pattern">Anti-Pattern&lt;/h2>
&lt;p>Applying a configuration that is in-compatible with the running version of CoreDNS is an anti-pattern (sometimes plugin configuration changes,
simply applying a configuration can break DNS).&lt;/p>
&lt;p>If incompatible changes are applied by mistake, simply delete the content of the &lt;code>ConfigMap&lt;/code> and re-apply.
This should bring the cluster DNS back to functioning state.&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;p>[1] &lt;a href="https://github.com/coredns/coredns/tree/master/plugin/import">Import plugin&lt;/a>
[2] &lt;a href="https://docs.microsoft.com/en-us/azure/aks/coredns-custom">AKS Custom DNS&lt;/a>&lt;/p></description></item><item><title>Docs: Dns Autoscaling</title><link>https://gardener.cloud/docs/gardener/usage/dns-autoscaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/dns-autoscaling/</guid><description>
&lt;h1 id="dns-autoscaling">DNS Autoscaling&lt;/h1>
&lt;p>This is a short guide describing different options how to automatically scale CoreDNS in the shoot cluster.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>Currently, Gardener uses CoreDNS as DNS server. Per default, it is installed as a deployment into the shoot cluster that is auto-scaled horizontally to cover for QPS-intensive applications. However, doing so does not seem to be enough to completely circumvent DNS bottlenecks such as:&lt;/p>
&lt;ul>
&lt;li>Cloud provider limits for DNS lookups.&lt;/li>
&lt;li>Unreliable UDP connections that forces a period of timeout in case packets are dropped.&lt;/li>
&lt;li>Unnecessary node hopping since CoreDNS is not deployed on all nodes, and as a result DNS queries end-up traversing multiple nodes before reaching the destination server.&lt;/li>
&lt;li>Inefficient load-balancing of services (e.g., round-robin might not be enough when using IPTables mode).&lt;/li>
&lt;li>Overload of the CoreDNS replicas as the maximum amount of replicas is fixed.&lt;/li>
&lt;li>and more &amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>As an alternative with extended configuration options, Gardener provides cluster-proportional autoscaling of CoreDNS. This guide focuses on the configuration of cluster-proportional autoscaling of CoreDNS and its advantages/disadvantages compared to the horizontal
autoscaling.
Please note that there is also the option to use a &lt;a href="https://gardener.cloud/docs/gardener/usage/node-local-dns/">node-local DNS cache&lt;/a>, which helps mitigate potential DNS bottlenecks (see &lt;a href="#trade-offs-in-conjunction-with-nodelocaldns">Trade-offs in conjunction with NodeLocalDNS&lt;/a> for considerations regarding using NodeLocalDNS together with one of the CoreDNS autoscaling approaches).&lt;/p>
&lt;h2 id="configuring-cluster-proportional-dns-autoscaling">Configuring cluster-proportional DNS Autoscaling&lt;/h2>
&lt;p>All that needs to be done to enable the usage of cluster-proportional autoscaling of CoreDNS is to set the corresponding option (&lt;code>spec.systemComponents.coreDNS.autoscaling.mode&lt;/code>) in the &lt;code>Shoot&lt;/code> resource to &lt;code>cluster-proportional&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">...
spec:
...
systemComponents:
coreDNS:
autoscaling:
mode: cluster-proportional
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To switch back to horizontal DNS autoscaling you can set the &lt;code>spec.systemComponents.coreDNS.autoscaling.mode&lt;/code> to &lt;code>horizontal&lt;/code> (or remove the &lt;code>coreDNS&lt;/code> section).&lt;/p>
&lt;p>Once the cluster-proportional autoscaling of CoreDNS has been enabled and the Shoot cluster has been reconciled afterwards, a ConfigMap called &lt;code>coredns-autoscaler&lt;/code> will be created in the &lt;code>kube-system&lt;/code> namespace with the default settings. The content will be similar to the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">linear: &lt;span style="color:#a31515">&amp;#39;{&amp;#34;coresPerReplica&amp;#34;:256,&amp;#34;min&amp;#34;:2,&amp;#34;nodesPerReplica&amp;#34;:16}&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is possible to adapt the ConfigMap according to your needs in case the defaults do not work as desired. The number of CoreDNS replicas is calculated according to the following formula:&lt;/p>
&lt;pre>&lt;code>replicas = max( ceil( cores × 1 / coresPerReplica ) , ceil( nodes × 1 / nodesPerReplica ) )
&lt;/code>&lt;/pre>&lt;p>Depending on your needs, you can adjust &lt;code>coresPerReplica&lt;/code> or &lt;code>nodesPerReplica&lt;/code>, but it is also possible to override &lt;code>min&lt;/code> if required.&lt;/p>
&lt;h2 id="trade-offs-of-horizontal-and-cluster-proportional-dns-autoscaling">Trade-offs of horizontal and cluster-proportional DNS Autoscaling&lt;/h2>
&lt;p>The horizontal autoscaling of CoreDNS as implemented by Gardener is fully managed, i.e. you do not need to perform any configuration changes. It scales according to the CPU usage of CoreDNS replicas meaning that it will create new replicas if the existing ones are under heavy load. This approach scales between 2 and 5 instances, which is sufficient for most workloads. In case this is not enough, the cluster-proportional autoscaling approach can be used instead with its more flexible configuration options.&lt;/p>
&lt;p>The cluster-proportional autoscaling of CoreDNS as implemented by Gardener is fully managed, but allows more configuration options to adjust the default settings to your individual needs. It scales according to the cluster size, i.e. if your cluster grows in terms of cores/nodes so will the amount of CoreDNS replicas. However, it does not take the actual workload, e.g. CPU consumption, into account.&lt;/p>
&lt;p>Experience shows that the horizontal autoscaling of CoreDNS works for a variety of workloads. It does reach its limits if a cluster has a high amount of DNS requests, though. The cluster-proportional autoscaling approach allows to fine-tune the amount of CoreDNS replicas. It helps to scale in clusters of changing size. However, please keep in mind that you need to cater for the maximum amount of DNS requests as the replicas will not be adapted according to the workload, but only according to the cluster size (cores/nodes).&lt;/p>
&lt;h2 id="trade-offs-in-conjunction-with-nodelocaldns">Trade-offs in conjunction with NodeLocalDNS&lt;/h2>
&lt;p>Using a &lt;a href="https://gardener.cloud/docs/gardener/usage/node-local-dns/">node-local DNS cache&lt;/a> can mitigate a lot of the potential DNS related problems. It works fine with a DNS workload that can be handle through the cache and reduces the inter-node DNS communication. As &lt;a href="https://gardener.cloud/docs/gardener/usage/node-local-dns/">node-local DNS cache&lt;/a> reduces the amount of traffic being sent to the cluster&amp;rsquo;s CoreDNS replicas, it usually works fine with horizontally scaled CoreDNS. Nevertheless, it also works with CoreDNS scaled in a cluster-proportional approach. In this mode, though, it might make sense to adapt the default settings as the CoreDNS workload is likely significantly reduced.&lt;/p>
&lt;p>Overall, you can view the DNS options on a scale. Horizontally scaled DNS provides a small amount of DNS servers. Especially for bigger clusters, a cluster-proportional approach will yield more CoreDNS instances and hence may yield a more balanced DNS solution. By adapting the settings you can further increase the amount of CoreDNS replicas. On the other end of the spectrum, a &lt;a href="https://gardener.cloud/docs/gardener/usage/node-local-dns/">node-local DNS cache&lt;/a> provides DNS on every node and allows to reduce the amount of (backend) CoreDNS instances regardless if they are horizontally or cluster-proportionally scaled.&lt;/p></description></item><item><title>Docs: Docker Shim Removal</title><link>https://gardener.cloud/docs/gardener/usage/docker-shim-removal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/docker-shim-removal/</guid><description>
&lt;h1 id="kubernetes-dockershim-removal">Kubernetes dockershim removal&lt;/h1>
&lt;h2 id="whats-happening">What&amp;rsquo;s happening?&lt;/h2>
&lt;p>With Kubernetes v1.20 the built-in dockershim &lt;a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md#dockershim-deprecation">was deprecated&lt;/a> and is scheduled to be &lt;a href="https://github.com/kubernetes/enhancements/issues/2221">removed with v1.24&lt;/a>.
Don&amp;rsquo;t Panic! The Kubernetes community has &lt;a href="https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/">published a blogpost&lt;/a> and an &lt;a href="https://kubernetes.io/blog/2020/12/02/dockershim-faq/">FAQ&lt;/a> with more information.&lt;/p>
&lt;p>Gardener also needs to switch from using the built-in dockershim to &lt;code>containerd&lt;/code>.
Gardener will not change running Shoot clusters. But changes to the container runtime will be coupled to the K8s version selected by the Shoot:&lt;/p>
&lt;ul>
&lt;li>starting with K8s version 1.22 Shoots not explicitly selecting a container runtime will get &lt;code>containerd&lt;/code> instead of &lt;code>docker&lt;/code>. Shoots can still select &lt;code>docker&lt;/code> explicitly if needed.&lt;/li>
&lt;li>starting with K8s version 1.23 &lt;code>docker&lt;/code> can no longer be selected.&lt;/li>
&lt;/ul>
&lt;p>At this point in time, we have no plans to support other container runtimes, such as &lt;code>cri-o&lt;/code>.&lt;/p>
&lt;h2 id="what-should-i-do">What should I do?&lt;/h2>
&lt;p>As a gardener operator:&lt;/p>
&lt;ul>
&lt;li>add &lt;code>containerd&lt;/code> and &lt;code>docker&lt;/code> to &lt;code>.spec.machineImages[].versions[].cri.name&lt;/code> in your CloudProfile to allow users selecting a container runtime for their Shoots (see below). &lt;strong>Note:&lt;/strong> Please take a look at our detailed information regarding &lt;a href="#container-runtime-support-in-gardener-operating-system-extensions">container runtime support in Gardener Operating System Extensions&lt;/a>&lt;/li>
&lt;li>update your cloud provider extensions to avoid a node rollout when a Shoot is configured from &lt;code>cri: nil&lt;/code> to &lt;code>cri.name: docker&lt;/code>. &lt;strong>Note:&lt;/strong> Please take a look at our detailed information regarding &lt;a href="#stable-worker-node-hash-support-in-gardener-provider-extensions">stable Worker node hash support in Gardener Provider Extensions&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>As a shoot owner:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/migrating-from-dockershim/check-if-dockershim-deprecation-affects-you/#find-docker-dependencies">check if you have dependencies to the &lt;code>docker&lt;/code> container runtime&lt;/a>. &lt;strong>Note:&lt;/strong> This is not only about your actual workload, but also concerns ops tooling as well as logging, monitoring and metric agents installed on the nodes&lt;/li>
&lt;li>test with &lt;code>containerd&lt;/code>:
&lt;ul>
&lt;li>create a new Shoot or add a Worker Pool to an existing one&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/api-reference/core/#cri">set &lt;code>.spec.provider.workers[].cri.name: containerd&lt;/code>&lt;/a> for your Shoot&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>once testing is successful, switch to &lt;code>containerd&lt;/code> with your production workload. You don&amp;rsquo;t need to wait for kubernetes v1.22, &lt;code>containerd&lt;/code> is considered production ready as of today&lt;/li>
&lt;li>if you find dependencies to &lt;code>docker&lt;/code>, set &lt;code>.spec.provider.workers[].cri.name: docker&lt;/code> explicitly to avoid defaulting to &lt;code>containerd&lt;/code> once you update your Shoot to kubernetes v1.22&lt;/li>
&lt;/ul>
&lt;h2 id="timeline">Timeline&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>2021-08-04:&lt;/strong> Kubernetes v1.22 released. Shoots using this version get &lt;code>containerd&lt;/code> as default container runtime. Shoots can still select &lt;code>docker&lt;/code> explicitly if needed.&lt;/li>
&lt;li>&lt;strong>2021-12-07:&lt;/strong> Kubernetes v1.23 released. Shoots using this version can no longer select &lt;code>docker&lt;/code> as container runtime.&lt;/li>
&lt;li>&lt;strong>2022-06-28:&lt;/strong> Kubernetes v1.21 goes out of maintenance. This is the last version not affected by these changes. Make sure you have tested thoroughly and set the correct configuration for your Shoots!&lt;/li>
&lt;li>&lt;strong>2022-10-28:&lt;/strong> Kubernetes v1.22 goes out of maintenance. This is the last version that you can use with &lt;code>docker&lt;/code> as container runtime. Make sure you have removed any dependencies to &lt;code>docker&lt;/code> as container runtime!&lt;/li>
&lt;/ul>
&lt;p>See &lt;a href="https://kubernetes.io/releases/">the official kubernetes documentation&lt;/a> for the exact dates for all releases.&lt;/p>
&lt;h2 id="container-runtime-support-in-gardener-operating-system-extensions">Container Runtime support in Gardener Operating System Extensions&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Operating System&lt;/th>
&lt;th>docker support&lt;/th>
&lt;th>containerd support&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GardenLinux&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>&amp;gt;= v0.3.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ubuntu&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>&amp;gt;= v1.4.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SuSE CHost&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>&amp;gt;= v1.14.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CoreOS/FlatCar&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>&amp;gt;= v1.8.0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Note&lt;/strong>: If you&amp;rsquo;re using a different Operating System Extension, start evaluating now if it provides support for &lt;code>containerd&lt;/code>. Please refer to &lt;a href="https://gardener.cloud/docs/gardener/extensions/operatingsystemconfig/#cri-support">our documentation of the &lt;code>operatingsystemconfig&lt;/code> contract&lt;/a> to understand how to support &lt;code>containerd&lt;/code> for an Operating System Extension.&lt;/p>
&lt;h2 id="stable-worker-node-hash-support-in-gardener-provider-extensions">Stable Worker node hash support in Gardener Provider Extensions&lt;/h2>
&lt;p>Upgrade to these versions to avoid a node rollout when a Shoot is configured from &lt;code>cri: nil&lt;/code> to &lt;code>cri.name: docker&lt;/code>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Provider Extension&lt;/th>
&lt;th>Stable worker hash support&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Alicloud&lt;/td>
&lt;td>&amp;gt;= 1.26.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AWS&lt;/td>
&lt;td>&amp;gt;= 1.27.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Azure&lt;/td>
&lt;td>&amp;gt;= 1.21.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GCP&lt;/td>
&lt;td>&amp;gt;= 1.18.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>OpenStack&lt;/td>
&lt;td>&amp;gt;= 1.21.0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>vSphere&lt;/td>
&lt;td>&amp;gt;= 0.11.0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Note&lt;/strong>: If you&amp;rsquo;re using a different Provider Extension, start evaluating now if it keeps the worker hash stable when switching from &lt;code>.spec.provider.workers[].cri: nil&lt;/code> to &lt;code>.spec.provider.workers[].cri.name: docker&lt;/code>. This doesn&amp;rsquo;t impact functional correctness, however, a node rollout will be triggered when users decide to configure &lt;code>docker&lt;/code> for their shoots.&lt;/p></description></item><item><title>Docs: Exposureclasses</title><link>https://gardener.cloud/docs/gardener/usage/exposureclasses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/exposureclasses/</guid><description>
&lt;h1 id="exposureclasses">ExposureClasses&lt;/h1>
&lt;p>The Gardener API server provides a cluster-scoped &lt;code>ExposureClass&lt;/code> resource.
This resource is used to allow exposing the control plane of a Shoot cluster in various network environments like restricted corporate networks, DMZ etc.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>The &lt;code>ExposureClass&lt;/code> resource is based on the concept for the &lt;code>RuntimeClass&lt;/code> resource in Kubernetes.&lt;/p>
&lt;p>A &lt;code>RuntimeClass&lt;/code> abstracts the installation of a certain container runtime (e.g. gVisor, Kata Containers) on all nodes or a subset of the nodes in a Kubernetes cluster.
See &lt;a href="https://kubernetes.io/docs/concepts/containers/runtime-class/">here&lt;/a>.&lt;/p>
&lt;p>In contrast, an &lt;code>ExposureClass&lt;/code> abstracts the ability to expose a Shoot clusters control plane in certain network environments (e.g. corporate networks, DMZ, internet) on all Seeds or a subset of the Seeds.&lt;/p>
&lt;p>Example: &lt;code>RuntimeClass&lt;/code> and &lt;code>ExposureClass&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: node.k8s.io/v1
kind: RuntimeClass
metadata:
name: gvisor
handler: gvisorconfig
&lt;span style="color:#008000"># scheduling:&lt;/span>
&lt;span style="color:#008000"># nodeSelector:&lt;/span>
&lt;span style="color:#008000"># env: prod&lt;/span>
---
kind: ExposureClass
metadata:
name: internet
handler: internet-config
&lt;span style="color:#008000"># scheduling:&lt;/span>
&lt;span style="color:#008000"># seedSelector:&lt;/span>
&lt;span style="color:#008000"># matchLabels:&lt;/span>
&lt;span style="color:#008000"># network/env: internet&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Similar to &lt;code>RuntimeClasses&lt;/code>, &lt;code>ExposureClasses&lt;/code> also define a &lt;code>.handler&lt;/code> field reflecting the name reference for the corresponding CRI configuration of the &lt;code>RuntimeClass&lt;/code> and the control plane exposure configuration for the &lt;code>ExposureClass&lt;/code>.&lt;/p>
&lt;p>The CRI handler for &lt;code>RuntimeClasses&lt;/code> is usually installed by an administrator (e.g. via a &lt;code>DaemonSet&lt;/code> which installs the corresponding container runtime on the nodes).
The control plane exposure configuration for &lt;code>ExposureClasses&lt;/code> will be also provided by an administrator.
This exposure configuration is part of the Gardenlet configuration as this component is responsible to configure the control plane accordingly.
See &lt;a href="#Gardenlet-Configuration-ExposureClass-handlers">here&lt;/a>.&lt;/p>
&lt;p>The &lt;code>RuntimeClass&lt;/code> also supports the selection of a node subset (which have the respective controller runtime binaries installed) for pod scheduling via its &lt;code>.scheduling&lt;/code> section.
The &lt;code>ExposureClass&lt;/code> also supports the selection of a subset of available Seed clusters whose Gardenlet is capable of applying the exposure configuration for the Shoot control plane accordingly via its &lt;code>.scheduling&lt;/code> section.&lt;/p>
&lt;h2 id="usage-by-a-shoot">Usage by a &lt;code>Shoot&lt;/code>&lt;/h2>
&lt;p>A &lt;code>Shoot&lt;/code> can reference an &lt;code>ExposureClass&lt;/code> via the &lt;code>.spec.exposureClassName&lt;/code> field.&lt;/p>
&lt;p>⚠️ When creating a &lt;code>Shoot&lt;/code> resource, the Gardener scheduler will try to assign the &lt;code>Shoot&lt;/code> to a &lt;code>Seed&lt;/code> which will host its control plane.
The scheduling behaviour can be influenced via the &lt;code>.spec.seedSelectors&lt;/code> and/or &lt;code>.spec.tolerations&lt;/code> fields in the &lt;code>Shoot&lt;/code>.
&lt;code>ExposureClass&lt;/code>es can contain also scheduling instructions.
If a &lt;code>Shoot&lt;/code> is referencing an &lt;code>ExposureClass&lt;/code> then the scheduling instructions of both will be merged into the &lt;code>Shoot&lt;/code>.
Those unions of scheduling instructions might lead to a selection of a &lt;code>Seed&lt;/code> which is not able to deal with the &lt;code>handler&lt;/code> of the &lt;code>ExposureClass&lt;/code> and the &lt;code>Shoot&lt;/code> creation might end up in an error.
In such case, the &lt;code>Shoot&lt;/code> scheduling instructions should be revisited to check that they are not interfere with the ones from the &lt;code>ExposureClass&lt;/code>.
If this is not feasible then the combination with the &lt;code>ExposureClass&lt;/code> is might not possible and you need to contact your Gardener administrator.&lt;/p>
&lt;details>
&lt;summary>Example: Shoot and ExposureClass scheduling instructions merge flow&lt;/summary>
&lt;ol>
&lt;li>Assuming there is the following &lt;code>Shoot&lt;/code> which is referencing the &lt;code>ExposureClass&lt;/code> below:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: Shoot
metadata:
name: abc
namespace: garden-dev
spec:
exposureClassName: abc
seedSelectors:
matchLabels:
env: prod
---
apiVersion: core.gardener.cloud/v1alpha1
kind: ExposureClass
metadata:
name: abc
handler: abc
scheduling:
seedSelector:
matchLabels:
network: internal
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Both &lt;code>seedSelectors&lt;/code> would be merged into the &lt;code>Shoot&lt;/code>. The result would be the following:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1alpha1
kind: Shoot
metadata:
name: abc
namespace: garden-dev
spec:
exposureClassName: abc
seedSelectors:
matchLabels:
env: prod
network: internal
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Now the Gardener Scheduler would try to find a &lt;code>Seed&lt;/code> with those labels.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>If there are &lt;strong>no&lt;/strong> Seeds with matching labels for the seed selector then the &lt;code>Shoot&lt;/code> will be unschedulable&lt;/li>
&lt;li>If there are Seeds with matching labels for the seed selector then the Shoot will be assigned to the best candidate after the scheduling strategy is applied, see &lt;a href="https://gardener.cloud/docs/gardener/concepts/scheduler/#algorithm-overview">here&lt;/a>
&lt;ul>
&lt;li>If the &lt;code>Seed&lt;/code> is &lt;strong>not&lt;/strong> able to serve the &lt;code>ExposureClass&lt;/code> handler &lt;code>abc&lt;/code> then the Shoot will end up in error state&lt;/li>
&lt;li>If the &lt;code>Seed&lt;/code> is able to serve the &lt;code>ExposureClass&lt;/code> handler &lt;code>abc&lt;/code> then the &lt;code>Shoot&lt;/code> will be created&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/details>
&lt;h2 id="gardenlet-configuration-exposureclass-handlers">Gardenlet Configuration &lt;code>ExposureClass&lt;/code> handlers&lt;/h2>
&lt;p>The Gardenlet is responsible to realize the control plane exposure strategy defined in the referenced &lt;code>ExposureClass&lt;/code> of a &lt;code>Shoot&lt;/code>.&lt;/p>
&lt;p>Therefore, the &lt;code>GardenletConfiguration&lt;/code> can contain an &lt;code>.exposureClassHandlers&lt;/code> list with the respective configuration.&lt;/p>
&lt;p>Example of the &lt;code>GardenletConfiguration&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">exposureClassHandlers:
- name: internet-config
loadBalancerService:
annotations:
loadbalancer/network: internet
- name: internal-config
loadBalancerService:
annotations:
loadbalancer/network: internal
sni:
ingress:
namespace: ingress-internal
labels:
network: internal
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each Gardenlet can define how the handler of a certain &lt;code>ExposureClass&lt;/code> needs to be implemented for the Seed(s) where it is responsible for.&lt;/p>
&lt;p>The &lt;code>.name&lt;/code> is the name of the handler config and it must match to the &lt;code>.handler&lt;/code> in the &lt;code>ExposureClass&lt;/code>.&lt;/p>
&lt;p>All control planes on a &lt;code>Seed&lt;/code> are exposed via a load balancer.
Either a dedicated one or a central shared one.
The load balancer service needs to be configured in a way that it is reachable from the target network environment.
Therefore, the configuration of load balancer service need to be specified which can be done via the &lt;code>.loadBalancerService&lt;/code> section.
The common way to influence load balancer service behaviour is via annotations where the respective cloud-controller-manager will react on and configure the infrastructure load balancer accordingly.&lt;/p>
&lt;p>In case the Gardenlet runs with activated &lt;code>APIServerSNI&lt;/code> feature flag (default), the control planes on a &lt;code>Seed&lt;/code> will be exposed via a central load balancer and with Envoy via TLS SNI passthrough proxy.
In this case, the Gardenlet will install a dedicated ingress gateway (Envoy + load balancer + respective configuration) for each handler on the &lt;code>Seed&lt;/code>.
The configuration of the ingress gateways can be controlled via the &lt;code>.sni&lt;/code> section in the same way like for the default ingress gateways.&lt;/p></description></item><item><title>Docs: Istio</title><link>https://gardener.cloud/docs/gardener/usage/istio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/istio/</guid><description>
&lt;h1 id="istio">Istio&lt;/h1>
&lt;p>&lt;a href="https://istio.io">Istio&lt;/a> offers a service mesh implementation with focus on several important features - traffic, observability, security and policy.&lt;/p>
&lt;h2 id="gardener-managedistio-feature-gate">Gardener &lt;code>ManagedIstio&lt;/code> feature gate&lt;/h2>
&lt;p>When enabled in gardenlet the &lt;code>ManagedIstio&lt;/code> feature gate can be used to deploy a Gardener-tailored Istio installation in Seed clusters. It&amp;rsquo;s main usage is to enable features such as &lt;a href="https://gardener.cloud/docs/gardener/proposals/08-shoot-apiserver-via-sni/">Shoot API server SNI&lt;/a>. This feature should not be enabled on a Seed cluster where Istio is already deployed.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Third-party JWT is used, therefore each Seed cluster where this feature is enabled must have &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection">Service Account Token Volume Projection&lt;/a> enabled.&lt;/li>
&lt;li>Kubernetes 1.16+&lt;/li>
&lt;/ul>
&lt;h2 id="differences-with-istios-default-profile">Differences with Istio&amp;rsquo;s default profile&lt;/h2>
&lt;p>The &lt;a href="https://istio.io/docs/setup/additional-setup/config-profiles/">default profile&lt;/a> which is recommended for production deployment, is not suitable for the Gardener use case as it offers more functionality than desired. The current installation goes through heavy refactorings due to the &lt;code>IstioOperator&lt;/code> and the mixture of Helm values + Kubernetes API specification makes configuring and fine-tuning it very hard. A more simplistic deployment is used by Gardener. The differences are the following:&lt;/p>
&lt;ul>
&lt;li>Telemetry is not deployed.&lt;/li>
&lt;li>&lt;code>istiod&lt;/code> is deployed.&lt;/li>
&lt;li>&lt;code>istio-ingress-gateway&lt;/code> is deployed in a separate &lt;code>istio-ingress&lt;/code> namespace.&lt;/li>
&lt;li>&lt;code>istio-egress-gateway&lt;/code> is not deployed.&lt;/li>
&lt;li>None of the Istio addons are deployed.&lt;/li>
&lt;li>Mixer (deprecated) is not deployed&lt;/li>
&lt;li>Mixer CDRs are not deployed.&lt;/li>
&lt;li>Kubernetes &lt;code>Service&lt;/code>, Istio&amp;rsquo;s &lt;code>VirtualService&lt;/code> and &lt;code>ServiceEntry&lt;/code> are &lt;strong>NOT&lt;/strong> advertised in the service mesh. This means that if a &lt;code>Service&lt;/code> needs to be accessed directly from the Istio Ingress Gateway, it should have &lt;code>networking.istio.io/exportTo: &amp;quot;*&amp;quot;&lt;/code> annotation. &lt;code>VirtualService&lt;/code> and &lt;code>ServiceEntry&lt;/code> must have &lt;code>.spec.exportTo: [&amp;quot;*&amp;quot;]&lt;/code> set on them respectively.&lt;/li>
&lt;li>Istio injector is not enabled.&lt;/li>
&lt;li>mTLS is enabled by default.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Logging</title><link>https://gardener.cloud/docs/gardener/usage/logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/logging/</guid><description>
&lt;h1 id="logging-stack">Logging stack&lt;/h1>
&lt;h3 id="motivation">Motivation&lt;/h3>
&lt;p>Kubernetes uses the underlying container runtime logging, which does not persist logs for stopped and destroyed containers. This makes it difficult to investigate issues in the very common case of not running containers. Gardener provides a solution to this problem for the managed cluster components, by introducing its own logging stack.&lt;/p>
&lt;h3 id="components">Components:&lt;/h3>
&lt;p>&lt;img src="https://gardener.cloud/__resources/logging-architecture_c8dc32.png" alt="">&lt;/p>
&lt;ul>
&lt;li>A Fluent-bit daemonset which works like a log collector and custom custom Golang plugin which spreads log messages to their Loki instances&lt;/li>
&lt;li>One Loki Statefulset in the &lt;code>garden&lt;/code> namespace which contains logs for the seed cluster and one per shoot namespace which contains logs for shoot&amp;rsquo;s controlplane.&lt;/li>
&lt;li>One Grafana Deployment in &lt;code>garden&lt;/code> namespace and two Deployments per shoot namespace (one exposed to the end users and one for the operators). Grafana is the UI component used in the logging stack.&lt;/li>
&lt;/ul>
&lt;h3 id="how-to-access-the-logs">How to access the logs&lt;/h3>
&lt;p>The first step is to authenticate in front of the Grafana ingress. The secret with the credentials can be found in &lt;code>garden-&amp;lt;project&amp;gt;&lt;/code> namespace under &lt;code>&amp;lt;shoot-name&amp;gt;.monitoring&lt;/code>.
Logs are accessible via Grafana UI. Its URL can be found in the &lt;code>Logging and Monitoring&lt;/code> section of a cluster in the Gardener Dashboard.&lt;/p>
&lt;p>There are two methods to explore logs:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The first option is to use the &lt;code>Explore&lt;/code> view (available at the left side of the screen). It is used for creating log queries using the predefined filters in Loki. For example:
&lt;code>{pod_name='prometheus-0'}&lt;/code>
or with regex:
&lt;code>{pod_name=~'prometheus.+'}&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The other option is to use &lt;code>Dashboards&lt;/code> panel. There are custom dashboards for pod logs with one selector field for &lt;code>pod_name&lt;/code> and one &lt;code>search&lt;/code> field. The &lt;code>search&lt;/code> field allows to filter the logs for a particular string. The following dashboards can be used for logs:&lt;/p>
&lt;ul>
&lt;li>Garden Grafana
&lt;ul>
&lt;li>Pod Logs&lt;/li>
&lt;li>Extensions&lt;/li>
&lt;li>Systemd Logs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>User Grafana
&lt;ul>
&lt;li>Kube Apiserver&lt;/li>
&lt;li>Kube Controller Manager&lt;/li>
&lt;li>Kube Scheduler&lt;/li>
&lt;li>Cluster Autoscaler * Operator Grafana&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Operator Grafana
&lt;ul>
&lt;li>All user&amp;rsquo;s dashboards&lt;/li>
&lt;li>Kubernetes Pods&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="expose-logs-for-component-to-user-grafana">Expose logs for component to User Grafana&lt;/h3>
&lt;p>Exposing logs for a new component to the User&amp;rsquo;s Grafana is described &lt;a href="https://gardener.cloud/docs/gardener/extensions/logging-and-monitoring/#how-to-expose-logs-to-the-users">here&lt;/a>&lt;/p>
&lt;h3 id="configuration">Configuration&lt;/h3>
&lt;h4 id="fluent-bit">Fluent-bit&lt;/h4>
&lt;p>The Fluent-bit configurations can be found on &lt;code>charts/seed-bootstrap/charts/fluent-bit/templates/fluent-bit-configmap.yaml&lt;/code>
There are five different specifications:&lt;/p>
&lt;ul>
&lt;li>SERVICE: Defines the location of the server specifications&lt;/li>
&lt;li>INPUT: Defines the location of the input stream of the logs&lt;/li>
&lt;li>OUTPUT: Defines the location of the output source (Loki for example)&lt;/li>
&lt;li>FILTER: Defines filters which match specific keys&lt;/li>
&lt;li>PARSER: Defines parsers which are used by the filters&lt;/li>
&lt;/ul>
&lt;h4 id="loki">Loki&lt;/h4>
&lt;p>The Loki configurations can be found on &lt;code>charts/seed-bootstrap/charts/loki/templates/loki-configmap.yaml&lt;/code>&lt;/p>
&lt;p>The main specifications there are:&lt;/p>
&lt;ul>
&lt;li>Index configuration: Currently is used the following one:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> schema_config:
configs:
- from: 2018-04-15
store: boltdb
object_store: filesystem
schema: v11
index:
prefix: index_
period: 24h
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>from&lt;/code>: is the date from which logs collection is started. Using a date in the past is okay.&lt;/li>
&lt;li>&lt;code>store&lt;/code>: The DB used for storing the index.&lt;/li>
&lt;li>&lt;code>object_store&lt;/code>: Where the data is stored&lt;/li>
&lt;li>&lt;code>schema&lt;/code>: Schema version which should be used (v11 is currently recommended)&lt;/li>
&lt;li>&lt;code>index.prefix&lt;/code>: The prefix for the index.&lt;/li>
&lt;li>&lt;code>index.period&lt;/code>: The period for updating the indices&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Adding of new index happens with new config block definition. &lt;code>from&lt;/code> field should start from the current day + previous &lt;code>index.period&lt;/code> and should not overlap with the current index. The &lt;code>prefix&lt;/code> also should be different&lt;/strong>&lt;/p>
&lt;pre>&lt;code> schema_config:
configs:
- from: 2018-04-15
store: boltdb
object_store: filesystem
schema: v11
index:
prefix: index_
period: 24h
- from: 2020-06-18
store: boltdb
object_store: filesystem
schema: v11
index:
prefix: index_new_
period: 24h
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>chunk_store_config Configuration&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> chunk_store_config:
max_look_back_period: 336h
&lt;/code>&lt;/pre>&lt;p>&lt;strong>&lt;code>chunk_store_config.max_look_back_period&lt;/code> should be the same as the &lt;code>retention_period&lt;/code>&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>table_manager Configuration&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> table_manager:
retention_deletes_enabled: true
retention_period: 336h
&lt;/code>&lt;/pre>&lt;p>&lt;code>table_manager.retention_period&lt;/code> is the living time for each log message. Loki will keep messages for sure for (&lt;code>table_manager.retention_period&lt;/code> - &lt;code>index.period&lt;/code>) time due to specification in the Loki implementation.&lt;/p>
&lt;h4 id="grafana">Grafana&lt;/h4>
&lt;p>The Grafana configurations can be found on &lt;code>charts/seed-bootstrap/charts/templates/grafana/grafana-datasources-configmap.yaml&lt;/code> and
&lt;code>charts/seed-monitoring/charts/grafana/tempates/grafana-datasources-configmap.yaml&lt;/code>&lt;/p>
&lt;p>This is the Loki configuration that Grafana uses:&lt;/p>
&lt;pre>&lt;code> - name: loki
type: loki
access: proxy
url: http://loki.{{ .Release.Namespace }}.svc:3100
jsonData:
maxLines: 5000
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>name&lt;/code>: is the name of the datasource&lt;/li>
&lt;li>&lt;code>type&lt;/code>: is the type of the datasource&lt;/li>
&lt;li>&lt;code>access&lt;/code>: should be set to proxy&lt;/li>
&lt;li>&lt;code>url&lt;/code>: Loki&amp;rsquo;s url&lt;/li>
&lt;li>&lt;code>svc&lt;/code>: Loki&amp;rsquo;s port&lt;/li>
&lt;li>&lt;code>jsonData.maxLines&lt;/code>: The limit of the log messages which Grafana will show to the users.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Decrease this value if the browser works slowly!&lt;/strong>&lt;/p></description></item><item><title>Docs: Managed See</title><link>https://gardener.cloud/docs/gardener/usage/managed_seed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/managed_seed/</guid><description>
&lt;h1 id="register-shoot-as-seed">Register Shoot as Seed&lt;/h1>
&lt;p>An existing shoot can be registered as a seed by creating a &lt;code>ManagedSeed&lt;/code> resource. This resource replaces the &lt;code>use-as-seed&lt;/code> annotation that was previously used to create &lt;a href="https://gardener.cloud/docs/gardener/usage/shooted_seed/">shooted seeds&lt;/a>, and that is already deprecated. It contains:&lt;/p>
&lt;ul>
&lt;li>The name of the shoot that should be registered as seed.&lt;/li>
&lt;li>An optional &lt;code>seedTemplate&lt;/code> section that contains the &lt;code>Seed&lt;/code> spec and parts of its metadata, such as labels and annotations.&lt;/li>
&lt;li>An optional &lt;code>gardenlet&lt;/code> section that contains:
&lt;ul>
&lt;li>&lt;code>gardenlet&lt;/code> deployment parameters, such as the number of replicas, the image, etc.&lt;/li>
&lt;li>The &lt;code>GardenletConfiguration&lt;/code> resource that contains controllers configuration, feature gates, and a &lt;code>seedConfig&lt;/code> section that contains the &lt;code>Seed&lt;/code> spec and parts of its metadata.&lt;/li>
&lt;li>Additional configuration parameters, such as the garden connection bootstrap mechanism (see &lt;a href="https://gardener.cloud/docs/gardener/concepts/gardenlet/#tls-bootstrapping">TLS Bootstrapping&lt;/a>), and whether to merge the provided configuration with the configuration of the parent &lt;code>gardenlet&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Either the &lt;code>seedTemplate&lt;/code> or the &lt;code>gardenlet&lt;/code> section must be specified, but not both:&lt;/p>
&lt;ul>
&lt;li>If the &lt;code>seedTemplate&lt;/code> section is specified, &lt;code>gardenlet&lt;/code> is not deployed to the shoot, and a new &lt;code>Seed&lt;/code> resource is created based on the template.&lt;/li>
&lt;li>If the &lt;code>gardenlet&lt;/code> section is specified, &lt;code>gardenlet&lt;/code> is deployed to the shoot, and it registers a new seed upon startup based on the &lt;code>seedConfig&lt;/code> section of the &lt;code>GardenletConfiguration&lt;/code> resource.&lt;/li>
&lt;/ul>
&lt;p>Note the following important aspects:&lt;/p>
&lt;ul>
&lt;li>Unlike the &lt;code>Seed&lt;/code> resource, the &lt;code>ManagedSeed&lt;/code> resource is namespaced. Currently, managed seeds are restricted to the &lt;code>garden&lt;/code> namespace.&lt;/li>
&lt;li>The newly created &lt;code>Seed&lt;/code> resource always has the same name as the &lt;code>ManagedSeed&lt;/code> resource. Attempting to specify a different name in &lt;code>seedTemplate&lt;/code> or &lt;code>seedConfig&lt;/code> will fail.&lt;/li>
&lt;li>The &lt;code>ManagedSeed&lt;/code> resource must always refer to an existing shoot. Attempting to create a &lt;code>ManagedSeed&lt;/code> referring to a non-existing shoot will fail.&lt;/li>
&lt;li>A shoot that is being referred to by a &lt;code>ManagedSeed&lt;/code> cannot be deleted. Attempting to delete such a shoot will fail.&lt;/li>
&lt;li>You can omit practically everything from the &lt;code>seedTemplate&lt;/code> or &lt;code>gardenlet&lt;/code> section, including all or most of the &lt;code>Seed&lt;/code> spec fields. Proper defaults will be supplied in all cases, based either on the most common use cases or the information already available in the &lt;code>Shoot&lt;/code> resource.&lt;/li>
&lt;li>Some &lt;code>Seed&lt;/code> spec fields, for example the provider type and region, networking CIDRs for pods, services, and nodes, etc., must be the same as the corresponding &lt;code>Shoot&lt;/code> spec fields of the shoot that is being registered as seed. Attempting to use different values (except empty ones, so that they are supplied by the defaulting mechanims) will fail.&lt;/li>
&lt;/ul>
&lt;h2 id="deploying-gardenlet-to-the-shoot">Deploying Gardenlet to the Shoot&lt;/h2>
&lt;p>To register a shoot as a seed and deploy &lt;code>gardenlet&lt;/code> to the shoot using a default configuration, create a &lt;code>ManagedSeed&lt;/code> resource similar to the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: seedmanagement.gardener.cloud/v1alpha1
kind: ManagedSeed
metadata:
name: my-managed-seed
namespace: garden
spec:
shoot:
name: crazy-botany
gardenlet: {}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For an example that uses non-default configuration, see &lt;a href="https://github.com/gardener/gardener/blob/master/example/55-managedseed-gardenlet.yaml">55-managed-seed-gardenlet.yaml&lt;/a>&lt;/p>
&lt;h2 id="creating-a-seed-from-a-template">Creating a Seed from a Template&lt;/h2>
&lt;p>To register a shoot as a seed from a template without deploying &lt;code>gardenlet&lt;/code> to the shoot using a default configuration, create a &lt;code>ManagedSeed&lt;/code> resource similar to the following:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: seedmanagement.gardener.cloud/v1alpha1
kind: ManagedSeed
metadata:
name: my-managed-seed
namespace: garden
spec:
shoot:
name: crazy-botany
seedTemplate:
spec:
dns:
ingressDomain: &lt;span style="color:#a31515">&amp;#34;&amp;#34;&lt;/span>
networks:
pods: &lt;span style="color:#a31515">&amp;#34;&amp;#34;&lt;/span>
services: &lt;span style="color:#a31515">&amp;#34;&amp;#34;&lt;/span>
provider:
type: &lt;span style="color:#a31515">&amp;#34;&amp;#34;&lt;/span>
region: &lt;span style="color:#a31515">&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For an example that uses non-default configuration, see &lt;a href="https://github.com/gardener/gardener/blob/master/example/55-managedseed-seedtemplate.yaml">55-managed-seed-seedtemplate.yaml&lt;/a>&lt;/p>
&lt;h2 id="migrating-from-the-use-as-seed-annotation-to-managedseeds">Migrating from the &lt;code>use-as-seed&lt;/code> Annotation to &lt;code>ManagedSeeds&lt;/code>&lt;/h2>
&lt;p>If you have existing seeds managed via the &lt;code>use-as-seed&lt;/code> annotation, you should migrate them to &lt;code>ManagedSeed&lt;/code> resources before support for the annotation has been completely removed from Gardener.&lt;/p>
&lt;p>The &lt;em>seed registration controller&lt;/em> that is responsible for reconciling the &lt;code>use-as-seed&lt;/code> annotation is still functional, However, instead of reconciling the annotation directly as before, it converts it to a &lt;code>ManagedSeed&lt;/code> resource and lets the &lt;em>managed seed controller&lt;/em> perform the actual reconciliation. Therefore, for every &lt;code>use-as-seed&lt;/code> annotation, you already have an equivalent &lt;code>ManagedSeed&lt;/code> resource in your cluster. Since it has been created by reconciling an annotation on a shoot, it is also &amp;ldquo;owned&amp;rdquo; by the shoot, that is it contains an &lt;code>ownerReference&lt;/code> to the corresponding shoot. This owner reference is used by the seed registration controller to determine that it should continue updating (or deleting) the &lt;code>ManagedSeed&lt;/code> as a result of reconciling changes to (or the removal of) the &lt;code>use-as-seed&lt;/code> annotation.&lt;/p>
&lt;p>In order to migrate the &lt;code>use-as-seed&lt;/code> annotation to a &lt;code>ManagedSeed&lt;/code>, you should simply:&lt;/p>
&lt;ul>
&lt;li>Remove the owner reference to the shoot from the existing &lt;code>ManagedSeed&lt;/code> resource.&lt;/li>
&lt;li>Remove the &lt;code>use-as-seed&lt;/code> annotation from the &lt;code>Shoot&lt;/code> resource.&lt;/li>
&lt;li>From this moment on, update or delete the &lt;code>ManagedSeed&lt;/code> directly, instead of indirectly via the &lt;code>use-as-seed&lt;/code> annotation.&lt;/li>
&lt;/ul>
&lt;p>If the shoot containing the &lt;code>use-as-seed&lt;/code> annotation was created via a yaml file (e.g. via &lt;code>kubectl apply -f&lt;/code>), a helm chart, or a script, you should update the corresponding file, template, or script so that it contains or generates the &lt;code>ManagedSeed&lt;/code> that you have in your cluster, instead of the &lt;code>use-as-seed&lt;/code> annotation. If you use an automated approach, make sure that the owner reference is removed from the existing &lt;code>ManagedSeed&lt;/code> before removing the annotation from the &lt;code>Shoot&lt;/code>.&lt;/p>
&lt;h3 id="specifying-apiserver-replicas-and-autoscaler-options">Specifying &lt;code>apiServer&lt;/code> &lt;code>replicas&lt;/code> and &lt;code>autoscaler&lt;/code> options&lt;/h3>
&lt;p>A few of &lt;code>use-as-seed&lt;/code> configuration options are not supported in a &lt;code>Seed&lt;/code> resource, and therefore also not in a &lt;code>ManagedSeed&lt;/code>. These options are (from the &lt;a href="https://gardener.cloud/docs/gardener/usage/shooted_seed/">shooted seeds&lt;/a> description):&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>apiServer.autoscaler.minReplicas&lt;/code>&lt;/td>
&lt;td>Controls the minimum number of &lt;code>kube-apiserver&lt;/code> replicas for the shooted seed cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>apiServer.autoscaler.maxReplicas&lt;/code>&lt;/td>
&lt;td>Controls the maximum number of &lt;code>kube-apiserver&lt;/code> replicas for the shooted seed cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>apiServer.replicas&lt;/code>&lt;/td>
&lt;td>Controls how many &lt;code>kube-apiserver&lt;/code> replicas the shooted seed cluster gets by default.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>For backward compatibility, it is still possible to specify these options via the &lt;code>shoot.gardener.cloud/managed-seed-api-server&lt;/code> annotation, using exactly the same syntax as before.&lt;/p>
&lt;p>If you use any of these fields in any or your &lt;code>use-as-seed&lt;/code> annotations, instead of removing the annotation completely as mentioned above, simply rename it to &lt;code>managed-seed-api-server&lt;/code>, keeping these fields, and removing everything else.&lt;/p></description></item><item><title>Docs: Node Local Dns</title><link>https://gardener.cloud/docs/gardener/usage/node-local-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/node-local-dns/</guid><description>
&lt;h1 id="nodelocaldns-configuration">NodeLocalDNS Configuration&lt;/h1>
&lt;p>This is a short guide describing how to enable DNS caching on the shoot cluster nodes.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>Currently in Gardener we are using CoreDNS as a deployment that is auto-scaled horizontally to cover for QPS-intensive applications. However, doing so does not seem to be enough to completely circumvent DNS bottlenecks such as:&lt;/p>
&lt;ul>
&lt;li>Cloud provider limits for DNS lookups.&lt;/li>
&lt;li>Unreliable UDP connections that forces a period of timeout in case packets are dropped.&lt;/li>
&lt;li>Unnecessary node hopping since CoreDNS is not deployed on all nodes, and as a result DNS queries end-up traversing multiple nodes before reaching the destination server.&lt;/li>
&lt;li>Inefficient load-balancing of services (e.g., round-robin might not be enough when using IPTables mode)&lt;/li>
&lt;li>and more &amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>To workaround the issues described above, &lt;code>node-local-dns&lt;/code> was introduced. The architecture is described below. The idea is simple:&lt;/p>
&lt;ul>
&lt;li>For new queries, the connection is upgraded from UDP to TCP and forwarded towards the cluster IP for the original CoreDNS server.&lt;/li>
&lt;li>For previously resolved queries, an immediate response from the same node where the requester workload / pod resides is provided.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gardener.cloud/__resources/node-local-dns_cbcbae.png" alt="node-local-dns-architecture">&lt;/p>
&lt;h2 id="configuring-nodelocaldns">Configuring NodeLocalDNS&lt;/h2>
&lt;p>All that needs to be done to enable the usage of the &lt;code>node-local-dns&lt;/code> feature is to annotate the &lt;code>Shoot&lt;/code> resource with the annotation &lt;code>alpha.featuregates.shoot.gardener.cloud/node-local-dns&lt;/code> set to &lt;code>&amp;quot;true&amp;quot;&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml"> annotations:
alpha.featuregates.shoot.gardener.cloud/node-local-dns: &lt;span style="color:#a31515">&amp;#34;true&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is worth noting that:&lt;/p>
&lt;ul>
&lt;li>When migrating from IPVS to IPTables, existing pods will continue to leverage the node-local-dns cache.&lt;/li>
&lt;li>When migrating from IPtables to IPVS, only newer pods will be switched to the node-local-dns cache.&lt;/li>
&lt;li>The annotation will take effect during the next shoot reconciliation. This happens automatically once per day in the maintenance period (unless you have disabled it).&lt;/li>
&lt;li>During the reconfiguration of the node-local-dns there might be a short disruption in terms of domain name resolution depending on the setup. Usually, dns requests are repeated for some time as udp is an unreliable protocol, but that strictly depends on the application/way the domain name resolution happens. It is recommended to let the shoot be reconciled during the next maintenance period.&lt;/li>
&lt;li>If a short DNS outage is not a big issue, you can &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_operations/#immediate-reconciliation">trigger reconciliation&lt;/a> directly after setting the annotation.&lt;/li>
&lt;li>Switching node-local-dns off by removing the annotation can be a rather destructive operation that will result in pods without a working dns configuration.&lt;/li>
&lt;/ul>
&lt;p>For more information about &lt;code>node-local-dns&lt;/code> please refer to the &lt;a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/1024-nodelocal-cache-dns/README.md">KEP&lt;/a> or to the &lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/nodelocaldns/">usage documentation&lt;/a>.&lt;/p></description></item><item><title>Docs: Openidconnect Presets</title><link>https://gardener.cloud/docs/gardener/usage/openidconnect-presets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/openidconnect-presets/</guid><description>
&lt;h1 id="clusteropenidconnectpreset-and-openidconnectpreset">ClusterOpenIDConnectPreset and OpenIDConnectPreset&lt;/h1>
&lt;p>This page provides an overview of ClusterOpenIDConnectPresets and OpenIDConnectPresets, which are objects for injecting &lt;a href="https://openid.net/connect/">OpenIDConnect Configuration&lt;/a> into &lt;code>Shoot&lt;/code> at creation time. The injected information contains configuration for the Kube API Server and optionally configuration for kubeconfig generation using said configuration.&lt;/p>
&lt;h2 id="openidconnectpreset">OpenIDConnectPreset&lt;/h2>
&lt;p>An OpenIDConnectPreset is an API resource for injecting additional runtime OIDC requirements into a Shoot at creation time. You use label selectors to specify the &lt;code>Shoot&lt;/code> to which a given OpenIDConnectPreset applies.&lt;/p>
&lt;p>Using a OpenIDConnectPresets allows project owners to not have to explicitly provide the same OIDC configuration for every &lt;code>Shoot&lt;/code> in their &lt;code>Project&lt;/code>.&lt;/p>
&lt;p>For more information about the background, see the &lt;a href="https://github.com/gardener/gardener/issues/1161">issue&lt;/a> for OpenIDConnectPreset.&lt;/p>
&lt;h3 id="how-openidconnectpreset-works">How OpenIDConnectPreset works&lt;/h3>
&lt;p>Gardener provides an admission controller (OpenIDConnectPreset) which, when enabled, applies OpenIDConnectPresets to incoming &lt;code>Shoot&lt;/code> creation requests. When a &lt;code>Shoot&lt;/code> creation request occurs, the system does the following:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Retrieve all OpenIDConnectPreset available for use in the &lt;code>Shoot&lt;/code> namespace.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check if the shoot label selectors of any OpenIDConnectPreset matches the labels on the Shoot being created.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If multiple presets are matched then only one is chosen and results are sorted based on:&lt;/p>
&lt;ol>
&lt;li>&lt;code>.spec.weight&lt;/code> value.&lt;/li>
&lt;li>lexicographically ordering their names ( e.g. &lt;code>002preset&lt;/code> &amp;gt; &lt;code>001preset&lt;/code> )&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>If the &lt;code>Shoot&lt;/code> already has a &lt;code>.spec.kubernetes.kubeAPIServer.oidcConfig&lt;/code> then no mutation occurs.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="simple-openidconnectpreset-example">Simple OpenIDConnectPreset example&lt;/h3>
&lt;p>This is a simple example to show how a &lt;code>Shoot&lt;/code> is modified by the OpenIDConnectPreset&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: settings.gardener.cloud/v1alpha1
kind: OpenIDConnectPreset
metadata:
name: test-1
namespace: default
spec:
shootSelector:
matchLabels:
oidc: enabled
server:
clientID: test-1
issuerURL: https://foo.bar
&lt;span style="color:#008000"># caBundle: |&lt;/span>
&lt;span style="color:#008000"># -----BEGIN CERTIFICATE-----&lt;/span>
&lt;span style="color:#008000"># Li4u&lt;/span>
&lt;span style="color:#008000"># -----END CERTIFICATE-----&lt;/span>
groupsClaim: groups-claim
groupsPrefix: groups-prefix
usernameClaim: username-claim
usernamePrefix: username-prefix
signingAlgs:
- RS256
requiredClaims:
key: value
client:
secret: oidc-client-secret
extraConfig:
extra-scopes: &lt;span style="color:#a31515">&amp;#34;email,offline_access,profile&amp;#34;&lt;/span>
foo: bar
weight: 90
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create the OpenIDConnectPreset:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">kubectl apply -f preset.yaml
&lt;/code>&lt;/pre>&lt;p>Examine the created OpenIDConnectPreset:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">kubectl get openidconnectpresets
NAME ISSUER SHOOT-SELECTOR AGE
test-1 https://foo.bar oidc=enabled 1s
&lt;/code>&lt;/pre>&lt;p>Simple &lt;code>Shoot&lt;/code> example:&lt;/p>
&lt;p>This is a sample of a &lt;code>Shoot&lt;/code> with some fields omitted:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: Shoot
metadata:
name: preset
namespace: default
labels:
oidc: enabled
spec:
kubernetes:
allowPrivilegedContainers: &lt;span style="color:#00f">true&lt;/span>
version: 1.20.2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create the Shoot:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">kubectl apply -f shoot.yaml
&lt;/code>&lt;/pre>&lt;p>Examine the created Shoot:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">kubectl get shoot preset -o yaml
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: Shoot
metadata:
name: preset
namespace: default
labels:
oidc: enabled
spec:
kubernetes:
kubeAPIServer:
oidcConfig:
clientAuthentication:
extraConfig:
extra-scopes: email,offline_access,profile
foo: bar
secret: oidc-client-secret
clientID: test-1
groupsClaim: groups-claim
groupsPrefix: groups-prefix
issuerURL: https://foo.bar
requiredClaims:
key: value
signingAlgs:
- RS256
usernameClaim: username-claim
usernamePrefix: username-prefix
version: 1.20.2
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="disable-openidconnectpreset">Disable OpenIDConnectPreset&lt;/h3>
&lt;p>The OpenIDConnectPreset admission control is enabled by default. To disable it use the &lt;code>--disable-admission-plugins&lt;/code> flag on the gardener-apiserver.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">--disable-admission-plugins=OpenIDConnectPreset
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="clusteropenidconnectpreset">ClusterOpenIDConnectPreset&lt;/h2>
&lt;p>A ClusterOpenIDConnectPreset is an API resource for injecting additional runtime OIDC requirements into a Shoot at creation time. In contrast to OpenIDConnect it&amp;rsquo;s a cluster-scoped resource. You use label selectors to specify the &lt;code>Project&lt;/code> and &lt;code>Shoot&lt;/code> to which a given OpenIDCConnectPreset applies.&lt;/p>
&lt;p>Using a OpenIDConnectPresets allows cluster owners to not have to explicitly provide the same OIDC configuration for every &lt;code>Shoot&lt;/code> in specific &lt;code>Project&lt;/code>.&lt;/p>
&lt;p>For more information about the background, see the &lt;a href="https://github.com/gardener/gardener/issues/1161">issue&lt;/a> for ClusterOpenIDConnectPreset.&lt;/p>
&lt;h3 id="how-clusteropenidconnectpreset-works">How ClusterOpenIDConnectPreset works&lt;/h3>
&lt;p>Gardener provides an admission controller (ClusterOpenIDConnectPreset) which, when enabled, applies ClusterOpenIDConnectPresets to incoming &lt;code>Shoot&lt;/code> creation requests. When a &lt;code>Shoot&lt;/code> creation request occurs, the system does the following:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Retrieve all ClusterOpenIDConnectPresets available.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check if the project label selector of any ClusterOpenIDConnectPreset matches the labels of the &lt;code>Project&lt;/code> in which the &lt;code>Shoot&lt;/code> is being created.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check if the shoot label selectors of any ClusterOpenIDConnectPreset matches the labels on the &lt;code>Shoot&lt;/code> being created.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If multiple presets are matched then only one is chosen and results are sorted based on:&lt;/p>
&lt;ol>
&lt;li>&lt;code>.spec.weight&lt;/code> value.&lt;/li>
&lt;li>lexicographically ordering their names ( e.g. &lt;code>002preset&lt;/code> &amp;gt; &lt;code>001preset&lt;/code> )&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>If the &lt;code>Shoot&lt;/code> already has a &lt;code>.spec.kubernetes.kubeAPIServer.oidcConfig&lt;/code> then no mutation occurs.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note: Due to the previous requirement if a &lt;code>Shoot&lt;/code> is matched by both &lt;code>OpenIDConnectPreset&lt;/code> and &lt;code>ClusterOpenIDConnectPreset&lt;/code> then &lt;code>OpenIDConnectPreset&lt;/code> takes precedence over &lt;code>ClusterOpenIDConnectPreset&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;h3 id="simple-clusteropenidconnectpreset-example">Simple ClusterOpenIDConnectPreset example&lt;/h3>
&lt;p>This is a simple example to show how a &lt;code>Shoot&lt;/code> is modified by the ClusterOpenIDConnectPreset&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: settings.gardener.cloud/v1alpha1
kind: ClusterOpenIDConnectPreset
metadata:
name: test
spec:
shootSelector:
matchLabels:
oidc: enabled
projectSelector: {} &lt;span style="color:#008000"># selects all projects.&lt;/span>
server:
clientID: cluster-preset
issuerURL: https://foo.bar
&lt;span style="color:#008000"># caBundle: |&lt;/span>
&lt;span style="color:#008000"># -----BEGIN CERTIFICATE-----&lt;/span>
&lt;span style="color:#008000"># Li4u&lt;/span>
&lt;span style="color:#008000"># -----END CERTIFICATE-----&lt;/span>
groupsClaim: groups-claim
groupsPrefix: groups-prefix
usernameClaim: username-claim
usernamePrefix: username-prefix
signingAlgs:
- RS256
requiredClaims:
key: value
client:
secret: oidc-client-secret
extraConfig:
extra-scopes: &lt;span style="color:#a31515">&amp;#34;email,offline_access,profile&amp;#34;&lt;/span>
foo: bar
weight: 90
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create the ClusterOpenIDConnectPreset:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">kubectl apply -f preset.yaml
&lt;/code>&lt;/pre>&lt;p>Examine the created ClusterOpenIDConnectPreset:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl get clusteropenidconnectpresets
NAME ISSUER PROJECT-SELECTOR SHOOT-SELECTOR AGE
test https://foo.bar &amp;lt;none&amp;gt; oidc=enabled 1s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a sample of a &lt;code>Shoot&lt;/code> with some fields omitted:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">kind: Shoot
apiVersion: core.gardener.cloud/v1beta1
metadata:
name: preset
namespace: default
labels:
oidc: enabled
spec:
kubernetes:
allowPrivilegedContainers: &lt;span style="color:#00f">true&lt;/span>
version: 1.20.2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create the Shoot:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">kubectl apply -f shoot.yaml
&lt;/code>&lt;/pre>&lt;p>Examine the created Shoot:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">kubectl get shoot preset -o yaml
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: Shoot
metadata:
name: preset
namespace: default
labels:
oidc: enabled
spec:
kubernetes:
kubeAPIServer:
oidcConfig:
clientAuthentication:
extraConfig:
extra-scopes: email,offline_access,profile
foo: bar
secret: oidc-client-secret
clientID: cluster-preset
groupsClaim: groups-claim
groupsPrefix: groups-prefix
issuerURL: https://foo.bar
requiredClaims:
key: value
signingAlgs:
- RS256
usernameClaim: username-claim
usernamePrefix: username-prefix
version: 1.20.2
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="disable-clusteropenidconnectpreset">Disable ClusterOpenIDConnectPreset&lt;/h3>
&lt;p>The ClusterOpenIDConnectPreset admission control is enabled by default. To disable it use the &lt;code>--disable-admission-plugins&lt;/code> flag on the gardener-apiserver.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">--disable-admission-plugins=ClusterOpenIDConnectPreset
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Projects</title><link>https://gardener.cloud/docs/gardener/usage/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/projects/</guid><description>
&lt;h1 id="projects">Projects&lt;/h1>
&lt;p>The Gardener API server supports a cluster-scoped &lt;code>Project&lt;/code> resource which is used for data isolation between individual Gardener consumers. For example, each development team has its own project to manage its own shoot clusters.&lt;/p>
&lt;p>Each &lt;code>Project&lt;/code> is backed by a Kubernetes &lt;code>Namespace&lt;/code> that contains the actual related Kubernetes resources like &lt;code>Secret&lt;/code>s or &lt;code>Shoot&lt;/code>s.&lt;/p>
&lt;p>&lt;strong>Example resource:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: Project
metadata:
name: dev
spec:
namespace: garden-dev
description: &lt;span style="color:#a31515">&amp;#34;This is my first project&amp;#34;&lt;/span>
purpose: &lt;span style="color:#a31515">&amp;#34;Experimenting with Gardener&amp;#34;&lt;/span>
owner:
apiGroup: rbac.authorization.k8s.io
kind: User
name: john.doe@example.com
members:
- apiGroup: rbac.authorization.k8s.io
kind: User
name: alice.doe@example.com
role: admin
&lt;span style="color:#008000"># roles:&lt;/span>
&lt;span style="color:#008000"># - viewer &lt;/span>
&lt;span style="color:#008000"># - uam&lt;/span>
&lt;span style="color:#008000"># - extension:foo&lt;/span>
- apiGroup: rbac.authorization.k8s.io
kind: User
name: bob.doe@example.com
role: viewer
&lt;span style="color:#008000"># tolerations:&lt;/span>
&lt;span style="color:#008000"># defaults:&lt;/span>
&lt;span style="color:#008000"># - key: &amp;lt;some-key&amp;gt;&lt;/span>
&lt;span style="color:#008000"># whitelist:&lt;/span>
&lt;span style="color:#008000"># - key: &amp;lt;some-key&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.namespace&lt;/code> field is optional and will be initialized if it&amp;rsquo;s unset.
The name of the resulting namespace will be generated and look like &lt;code>garden-dev-5anj3&lt;/code>, i.e., it has a random suffix.
It&amp;rsquo;s also possible to adopt existing namespaces by labeling them &lt;code>gardener.cloud/role=project&lt;/code> and &lt;code>project.gardener.cloud/name=dev&lt;/code> beforehand (otherwise, they cannot be adopted).&lt;/p>
&lt;p>When deleting a Project resource, the corresponding namespace is also deleted.
To keep a namespace after project deletion, an administrator/operator (not Project members!) can annotate the project-namespace with &lt;code>namespace.gardener.cloud/keep-after-project-deletion&lt;/code>.&lt;/p>
&lt;p>The &lt;code>spec.description&lt;/code> and &lt;code>.spec.purpose&lt;/code> fields can be used to describe to fellow team members and Gardener operators what this project is used for.&lt;/p>
&lt;p>Each project has one dedicated owner, configured in &lt;code>.spec.owner&lt;/code> using the &lt;code>rbac.authorization.k8s.io/v1.Subject&lt;/code> type.
The owner is the main contact person for Gardener operators.
Please note that the &lt;code>.spec.owner&lt;/code> field is deprecated and will be removed in future API versions in favor of the &lt;code>owner&lt;/code> role, see below.&lt;/p>
&lt;p>The list of members (again a list in &lt;code>.spec.members[]&lt;/code> using the &lt;code>rbac.authorization.k8s.io/v1.Subject&lt;/code> type) contains all the people that are associated with the project in any way.
Each project member must have at least one role (currently described in &lt;code>.spec.members[].role&lt;/code>, additional roles can be added to &lt;code>.spec.members[].roles[]&lt;/code>). The following roles exist:&lt;/p>
&lt;ul>
&lt;li>&lt;code>admin&lt;/code>: This allows to fully manage resources inside the project (e.g., secrets, shoots, configmaps, and similar).&lt;/li>
&lt;li>&lt;code>uam&lt;/code>: This allows to add/modify/remove human users or groups to/from the project member list. Technical users (service accounts) can be managed by all admins.&lt;/li>
&lt;li>&lt;code>viewer&lt;/code>: This allows to read all resources inside the project except secrets.&lt;/li>
&lt;li>&lt;code>owner&lt;/code>: This combines the &lt;code>admin&lt;/code> and &lt;code>uam&lt;/code> roles.&lt;/li>
&lt;li>Extension roles (prefixed with &lt;code>extension:&lt;/code>): Please refer to &lt;a href="https://gardener.cloud/docs/gardener/extensions/project-roles/">this document&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>The &lt;a href="https://gardener.cloud/docs/gardener/concepts/controller-manager/#project-controller">project controller&lt;/a> inside the Gardener Controller Manager is managing RBAC resources that grant the described privileges to the respective members.&lt;/p>
&lt;p>There are two central &lt;code>ClusterRole&lt;/code>s &lt;code>gardener.cloud:system:project-member&lt;/code> and &lt;code>gardener.cloud:system:project-viewer&lt;/code> that grant the permissions for namespaced resources (e.g., &lt;code>Secret&lt;/code>s, &lt;code>Shoot&lt;/code>s, etc.).
Via referring &lt;code>RoleBinding&lt;/code>s created in the respective namespace the project members get bound to these &lt;code>ClusterRole&lt;/code>s and, thus, the needed permissions.
There are also project-specific &lt;code>ClusterRole&lt;/code>s granting the permissions for cluster-scoped resources, e.g. the &lt;code>Namespace&lt;/code> or &lt;code>Project&lt;/code> itself.&lt;br>
For each role, the following &lt;code>ClusterRole&lt;/code>s, &lt;code>ClusterRoleBinding&lt;/code>s, and &lt;code>RoleBinding&lt;/code>s are created:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Role&lt;/th>
&lt;th>&lt;code>ClusterRole&lt;/code>&lt;/th>
&lt;th>&lt;code>ClusterRoleBinding&lt;/code>&lt;/th>
&lt;th>&lt;code>RoleBinding&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>admin&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-member:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-member:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-member&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>uam&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-uam:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-uam:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>viewer&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-viewer:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-viewer:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-viewer&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>owner&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>extension:*&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:extension:project:&amp;lt;projectName&amp;gt;:&amp;lt;extensionRoleName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;code>gardener.cloud:extension:project:&amp;lt;projectName&amp;gt;:&amp;lt;extensionRoleName&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="user-access-management">User Access Management&lt;/h2>
&lt;p>For &lt;code>Project&lt;/code>s created before Gardener v1.8 all admins were allowed to manage other members.
Beginning with v1.8 the new &lt;code>uam&lt;/code> role is being introduced.
It is backed by the &lt;code>manage-members&lt;/code> custom RBAC verb which allows to add/modify/remove human users or groups to/from the project member list.
Human users are subjects with &lt;code>kind=User&lt;/code> and &lt;code>name!=system:serviceaccount:*&lt;/code>, and groups are subjects with &lt;code>kind=Group&lt;/code>.
The management of service account subjects (&lt;code>kind=ServiecAccount&lt;/code> or &lt;code>name=system:serviceaccount:*&lt;/code>) is not controlled via the &lt;code>uam&lt;/code> custom verb but with the standard &lt;code>update&lt;/code>/&lt;code>patch&lt;/code> verbs for projects.&lt;/p>
&lt;p>All newly created projects will only bind the owner to the &lt;code>uam&lt;/code> role.
The owner can still grant the &lt;code>uam&lt;/code> role to other members if desired.
For projects created before Gardener v1.8 the Gardener Controller Manager will migrate all projects to also assign the &lt;code>uam&lt;/code> role to all &lt;code>admin&lt;/code> members (to not break existing use-cases). The corresponding migration logic is present in Gardener Controller Manager from v1.8 to v1.13.
The project owner can gradually remove these roles if desired.&lt;/p>
&lt;h2 id="stale-projects">Stale Projects&lt;/h2>
&lt;p>When a project is not actively used for some period of time the project is marked as &amp;ldquo;stale&amp;rdquo;. This is done by controller called &amp;ldquo;Stale Projects Reconciler&amp;rdquo;. Once the project is marked as stale there is a time frame in which if not used it will be deleted by that controller. More detailed information can be found &lt;a href="https://gardener.cloud/docs/gardener/concepts/controller-manager/#stale-projects-reconciler">here&lt;/a>.&lt;/p></description></item><item><title>Docs: Reversed Vpn Tunnel</title><link>https://gardener.cloud/docs/gardener/usage/reversed-vpn-tunnel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/reversed-vpn-tunnel/</guid><description>
&lt;h1 id="reversed-vpn-tunnel-setup-and-configuration">Reversed VPN Tunnel Setup and Configuration&lt;/h1>
&lt;p>This is a short guide describing how to enable tunneling traffic from shoot cluster to seed cluster instead of the default &amp;ldquo;seed to shoot&amp;rdquo; direction.&lt;/p>
&lt;h2 id="the-openvpn-default">The OpenVPN Default&lt;/h2>
&lt;p>By default, Gardener makes use of OpenVPN to connect the shoot controlplane running on the seed cluster to the dataplane
running on the shoot worker nodes, usually in isolated networks. This is achieved by having a sidecar to certain control plane components such as the &lt;code>kube-apiserver&lt;/code> and &lt;code>prometheus&lt;/code>.&lt;/p>
&lt;p>With a sidecar, all traffic directed to the cluster is intercepted by iptables rules and redirected
to the tunnel endpoint in the shoot cluster deployed behind a cloud loadbalancer. This has the following disadvantages:&lt;/p>
&lt;ul>
&lt;li>Every shoot would require an additional loadbalancer, this accounts for additional overhead in terms of both costs and troubleshooting efforts.&lt;/li>
&lt;li>Private access use-cases would not be possible without having a seed residing in the same private domain as a hard requirement. For example, have a look at &lt;a href="https://github.com/gardener/gardener-extension-provider-gcp/issues/56">this issue&lt;/a>&lt;/li>
&lt;li>Providing a public endpoint to access components in the shoot poses a security risk.&lt;/li>
&lt;/ul>
&lt;p>This is how it looks like today with the OpenVPN solution:&lt;/p>
&lt;p>&lt;code>APIServer | VPN-seed ---&amp;gt; internet ---&amp;gt; LB --&amp;gt; VPN-Shoot (4314) --&amp;gt; Pods | Nodes | Services&lt;/code>&lt;/p>
&lt;h2 id="reversing-the-tunnel">Reversing the Tunnel&lt;/h2>
&lt;p>To address the above issues, the tunnel can establishment direction can be reverted, i.e. instead of having the client reside in the seed,
we deploy the client in the shoot and initiate the connection from there. This way, there is no need to deploy a special purpose
loadbalancer for the sake of addressing the dataplane, in addition to saving costs, this is considered the more secure alternative.
For more information on how this is achieved, please have a look at the following &lt;a href="https://gardener.cloud/docs/gardener/proposals/14-reversed-cluster-vpn/">GEP&lt;/a>.&lt;/p>
&lt;p>How it should look like at the end:&lt;/p>
&lt;p>&lt;code>APIServer --&amp;gt; Envoy-Proxy | VPN-Seed-Server &amp;lt;-- Istio/Envoy-Proxy &amp;lt;-- SNI API Server Endpoint &amp;lt;-- LB (one for all clusters of a seed) &amp;lt;--- internet &amp;lt;--- VPN-Shoot-Client --&amp;gt; Pods | Nodes | Services&lt;/code>&lt;/p>
&lt;h3 id="how-to-configure">How to Configure&lt;/h3>
&lt;p>To enable the usage of the reversed vpn tunnel feature, either the Gardenlet &lt;code>ReversedVPN&lt;/code> feature-gate must be set to &lt;code>true&lt;/code> as shown below or the shoot must be annotated with &lt;code>&amp;quot;alpha.featuregates.shoot.gardener.cloud/reversed-vpn: true&amp;quot;&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">featureGates:
ReversedVPN: &lt;span style="color:#00f">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please refer to the examples &lt;a href="https://github.com/gardener/gardener/blob/master/example/20-componentconfig-gardenlet.yaml">here&lt;/a> for more information.&lt;/p>
&lt;p>To disable the feature-gate the shoot must be annotated with &lt;code>&amp;quot;alpha.featuregates.shoot.gardener.cloud/reversed-vpn: false&amp;quot;&lt;/code>&lt;/p>
&lt;p>Once the feature-gate is enabled, a &lt;code>vpn-seed-server&lt;/code> deployment will be added to the controlplane. The &lt;code>kube-apiserver&lt;/code> will be configured to connect to resources in the dataplane such as pods, services and nodes though the &lt;code>vpn-seed-service&lt;/code> via http proxy/connect protocol.
In the dataplane of the cluster, the &lt;code>vpn-shoot&lt;/code> will establish the connection to the &lt;code>vpn-seed-server&lt;/code> indirectly using the SNI API Server endpoint as a http proxy. After the connection has been established requests from the &lt;code>kube-apiserver&lt;/code> will be handled by the tunnel.&lt;/p>
&lt;blockquote>
&lt;p>Please note this feature is available ONLY for &amp;gt;= 1.18 kubernetes clusters. For clusters with Kubernetes version &amp;lt; 1.18, the default OpenVPN setup will be used by default even if the featuregate is enabled.
Furthermore, this feature is still in Alpha, so you might see instabilities every now and then.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Secrets Rotation</title><link>https://gardener.cloud/docs/gardener/usage/secrets_rotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/secrets_rotation/</guid><description>
&lt;h1 id="secrets-and-rotation">Secrets and rotation&lt;/h1>
&lt;p>The following sections contain information about &lt;code>Secret&lt;/code>s in the Garden cluster that are either provided by users or
generated by Gardener for users.&lt;/p>
&lt;h2 id="list-of-secrets">List of secrets&lt;/h2>
&lt;h3 id="user-provided-secrets">User provided secrets&lt;/h3>
&lt;h4 id="cloudprovider-secret">Cloudprovider Secret&lt;/h4>
&lt;p>&lt;em>Example&lt;/em>: &lt;a href="https://github.com/gardener/gardener/blob/master/example/70-secret-provider.yaml">https://github.com/gardener/gardener/blob/master/example/70-secret-provider.yaml&lt;/a>&lt;/p>
&lt;p>&lt;em>Usage&lt;/em>: Authenticate gardener and kubernetes components for infrastructure operations&lt;/p>
&lt;p>&lt;em>Description&lt;/em>: Gardener uses the cloudprovider secret to interact with the infrastructure when setting up shoot networks or security groups via the &lt;a href="https://github.com/gardener/terraformer">terraformer&lt;/a>. It is also used by the &lt;a href="https://kubernetes.io/docs/concepts/architecture/cloud-controller/">cloud-controller-manager&lt;/a> of your Shoot to communicate with the infrastructure for example to create Loadbalancer services, routes or retrieve information about Node objects.
Depending on the cloudprovider the format of the secret differs. Please consult the example above and respective infrastructure extension documentation for the concrete layout.&lt;/p>
&lt;p>To put it in use, a cloudprovider secret is bound to one more namespaces (and therefore projects) using a &lt;a href="https://github.com/gardener/gardener/blob/master/example/80-secretbinding.yaml">SecretBinding&lt;/a>. For Shoots created in those projects the secret is synced to the shoot namespace in the seed cluster.&lt;/p>
&lt;p>&lt;em>Rotation&lt;/em>: Rotating the cloudprovider secret requires multiple steps:&lt;/p>
&lt;ol>
&lt;li>Update the data keys in the secret.&lt;/li>
&lt;li>⚠️ Wait until all Shoots using the secret are reconciled before you disable the old secret in your infrastructure account! Otherwise the shoots will no longer function.&lt;/li>
&lt;li>After all Shoots using the secret were reconciled you can go ahead and deactivate the old secret in your infrastructure account.&lt;/li>
&lt;/ol>
&lt;h3 id="gardener-generated-secrets">Gardener generated secrets&lt;/h3>
&lt;h4 id="kubeconfig">Kubeconfig&lt;/h4>
&lt;p>&lt;em>Name&lt;/em>: &lt;code>&amp;lt;shoot-name&amp;gt;.kubeconfig&lt;/code>&lt;/p>
&lt;p>&lt;em>Description&lt;/em>: Admin Kubeconfig provided by Gardener for the managed shoot cluster.&lt;/p>
&lt;p>This &lt;code>Secret&lt;/code> has multiple keys:&lt;/p>
&lt;ul>
&lt;li>&lt;code>kubeconfig&lt;/code>: the completed kubeconfig&lt;/li>
&lt;li>&lt;code>token&lt;/code>: token for &lt;code>system:cluster-admin&lt;/code> user&lt;/li>
&lt;li>&lt;code>username&lt;/code>/&lt;code>password&lt;/code>: basic auth credentials (if enabled via &lt;code>Shoot.spec.kubernetes.kubeAPIServer.enableBasicAuthentication&lt;/code>)&lt;/li>
&lt;li>&lt;code>ca.crt&lt;/code>: the CA bundle for establishing trust to the API server (same as in the &lt;a href="#cluster-certificate-authority-bundle">Cluster CA bundle secret&lt;/a>)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>NOTE&lt;/strong>&lt;/p>
&lt;p>This Kubeconfig contains the highest privileges in the cluster. We strongly discourage distributing or using this Kubeconfig.
Instead, configure dedicated &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">Service Accounts&lt;/a>,
&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#openid-connect-tokens">OIDC&lt;/a> or similar alternatives
to grant role-based and revocable access for a broader audience.&lt;/p>
&lt;hr>
&lt;p>&lt;em>Rotation&lt;/em>: Kubeconfig can be rotated by annotating the shoot resource with &lt;code>gardener.cloud/operation: rotate-kubeconfig-credentials&lt;/code>.
The substituted Kubeconfig are provided after the initialized reconciliation was performed. Please note, shoot clusters
which were created with Gardener version &lt;code>&amp;lt;= 0.28.0&lt;/code> used to have a Kubeconfig based on a client certificate instead of a static token.
These client certificates are not revocable and thus a full credential rotation is not supported.&lt;/p>
&lt;p>You can check the &lt;code>.status.credentials.rotation.kubeconfig&lt;/code> field in the &lt;code>Shoot&lt;/code> to see when the rotation was last initiated or last completed.&lt;/p>
&lt;h4 id="cluster-certificate-authority-bundle">Cluster Certificate Authority Bundle&lt;/h4>
&lt;p>&lt;em>Name&lt;/em>: &lt;code>&amp;lt;shoot-name&amp;gt;.ca-cluster&lt;/code>&lt;/p>
&lt;p>&lt;em>Description&lt;/em>: Certificate Authority (CA) bundle of the Cluster (&lt;code>Secret&lt;/code> key: &lt;code>ca.crt&lt;/code>).&lt;/p>
&lt;p>This bundle contains one or multiple CAs which are used for signing serving certificates of the Shoot&amp;rsquo;s API server. Hence, the certificates contained in this &lt;code>Secret&lt;/code> can be used to verify the API server&amp;rsquo;s identity when communicating with its public endpoint (e.g. as &lt;code>certificate-authority-data&lt;/code> in a Kubeconfig).
This is the same certificate that is also contained in the Kubeconfig&amp;rsquo;s &lt;code>certificate-authority-data&lt;/code> field.&lt;/p>
&lt;p>&lt;em>Rotation&lt;/em>: Not supported yet, but work is in progress. See &lt;a href="https://github.com/gardener/gardener/issues/3292">gardener/gardener#3292&lt;/a> and &lt;a href="https://github.com/gardener/gardener/blob/release-v1.42/docs/proposals/18-shoot-CA-rotation.md">GEP-18&lt;/a> for more details.&lt;/p>
&lt;h4 id="monitoring">Monitoring&lt;/h4>
&lt;p>&lt;em>Name&lt;/em>: &lt;code>&amp;lt;shoot-name&amp;gt;.monitoring&lt;/code>&lt;/p>
&lt;p>&lt;em>Description&lt;/em>: Username/password for accessing the user Grafana instance of a shoot cluster (&lt;code>Secret&lt;/code> keys: &lt;code>username&lt;/code>/&lt;code>password&lt;/code>).&lt;/p>
&lt;p>&lt;em>Rotation&lt;/em>: Not supported yet.&lt;/p>
&lt;h4 id="ssh-keypair">SSH-Keypair&lt;/h4>
&lt;p>&lt;em>Name&lt;/em>: &lt;code>&amp;lt;shoot-name&amp;gt;.ssh-keypair&lt;/code>&lt;/p>
&lt;p>&lt;em>Description&lt;/em>: SSH-Keypair that is propagated to the worker nodes of the shoot cluster.
The private key can be used to establish an SSH connection to the workers for troubleshooting purposes (&lt;code>Secret&lt;/code> keys: &lt;code>id_rsa&lt;/code>/&lt;code>id_rsa.pub&lt;/code>).&lt;/p>
&lt;p>&lt;em>Rotation&lt;/em>: Keypair can be rotated by annotating the shoot resource with &lt;code>gardener.cloud/operation: rotate-ssh-keypair&lt;/code>.
Propagating the new keypair to all worker nodes may take longer than the initiated reconciliation of the shoot.
The previous keypair can still be found in the &lt;code>&amp;lt;shoot-name&amp;gt;.ssh-keypair.old&lt;/code> secret and is still valid until the next rotation.&lt;/p>
&lt;p>You can check the &lt;code>.status.credentials.rotation.sshKeypair&lt;/code> field in the &lt;code>Shoot&lt;/code> to see when the rotation was last initiated or last completed.&lt;/p></description></item><item><title>Docs: Seed Bootstrapping</title><link>https://gardener.cloud/docs/gardener/usage/seed_bootstrapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/seed_bootstrapping/</guid><description>
&lt;h1 id="seed-bootstrapping">Seed Bootstrapping&lt;/h1>
&lt;p>Whenever the Gardenlet is responsible for a new &lt;code>Seed&lt;/code> resource its &amp;ldquo;seed controller&amp;rdquo; is being activated.
One part of this controller&amp;rsquo;s reconciliation logic is deploying certain components into the &lt;code>garden&lt;/code> namespace of the seed cluster itself.
These components are required to spawn and manage control planes for shoot clusters later on.
This document is providing an overview which actions are performed during this bootstrapping phase, and it explains the rationale behind them.&lt;/p>
&lt;h2 id="dependency-watchdog">Dependency Watchdog&lt;/h2>
&lt;p>The dependency watchdog (abbreviation: DWD) is a component developed separately in the &lt;a href="https://github.com/gardener/dependency-watchdog">gardener/dependency-watchdog&lt;/a> GitHub repository.
Gardener is using it for two purposes:&lt;/p>
&lt;ol>
&lt;li>Prevention of melt-down situations when the load balancer used to expose the kube-apiserver of shoot clusters goes down while the kube-apiserver itself is still up and running&lt;/li>
&lt;li>Fast recovery times for crash-looping pods when depending pods are again available&lt;/li>
&lt;/ol>
&lt;p>For the sake of separating these concerns, two instances of the DWD are deployed by the seed controller.&lt;/p>
&lt;h3 id="probe">Probe&lt;/h3>
&lt;p>The &lt;code>dependency-watchdog-probe&lt;/code> deployment is responsible for above mentioned first point.&lt;/p>
&lt;p>The &lt;code>kube-apiserver&lt;/code> of shoot clusters is exposed via a load balancer, usually with an attached public IP, which serves as the main entry point when it comes to interaction with the shoot cluster (e.g., via &lt;code>kubectl&lt;/code>).
While end-users are talking to their clusters via this load balancer, other control plane components like the &lt;code>kube-controller-manager&lt;/code> or &lt;code>kube-scheduler&lt;/code> run in the same namespace/same cluster, so they can communicate via the in-cluster &lt;code>Service&lt;/code> directly instead of using the detour with the load balancer.
However, the worker nodes of shoot clusters run in isolated, distinct networks.
This means that the &lt;code>kubelet&lt;/code>s and &lt;code>kube-proxy&lt;/code>s also have to talk to the control plane via the load balancer.&lt;/p>
&lt;p>The &lt;code>kube-controller-manager&lt;/code> has a special control loop called &lt;a href="https://github.com/kubernetes/kubernetes/tree/master/pkg/controller/nodelifecycle">&lt;code>nodelifecycle&lt;/code>&lt;/a> which will set the status of &lt;code>Node&lt;/code>s to &lt;code>NotReady&lt;/code> in case the kubelet stops to regularly renew its lease/to send its heartbeat.
This will trigger other self-healing capabilities of Kubernetes, for example the eviction of pods from such &amp;ldquo;unready&amp;rdquo; nodes to healthy nodes.
Similarly, the &lt;code>cloud-controller-manager&lt;/code> has a control loop that will disconnect load balancers from &amp;ldquo;unready&amp;rdquo; nodes, i.e., such workload would no longer be accessible until moved to a healthy node.&lt;/p>
&lt;p>While these are awesome Kubernetes features on their own, they have a dangerous drawback when applied in the context of Gardener&amp;rsquo;s architecture:
When the &lt;code>kube-apiserver&lt;/code> load balancer fails for whatever reason then the &lt;code>kubelet&lt;/code>s can&amp;rsquo;t talk to the &lt;code>kube-apiserver&lt;/code> to renew their lease anymore.
After a minute or so the &lt;code>kube-controller-manager&lt;/code> will get the impression that all nodes have died and will mark them as &lt;code>NotReady&lt;/code>.
This will trigger above mentioned eviction as well as detachment of load balancers.
As a result, the customer&amp;rsquo;s workload will go down and become unreachable.&lt;/p>
&lt;p>This is exactly the situation that the DWD prevents:
It regularly tries to talk to the &lt;code>kube-apiserver&lt;/code>s of the shoot clusters, once by using their load balancer, and once by talking via the in-cluster &lt;code>Service&lt;/code>.
If it detects that the &lt;code>kube-apiserver&lt;/code> is reachable internally but not externally it scales down the &lt;code>kube-controller-manager&lt;/code> to &lt;code>0&lt;/code>.
This will prevent it from marking the shoot worker nodes as &amp;ldquo;unready&amp;rdquo;.
As soon as the &lt;code>kube-apiserver&lt;/code> is reachable externally again the &lt;code>kube-controller-manager&lt;/code> will be scaled up to &lt;code>1&lt;/code> again.&lt;/p>
&lt;h3 id="endpoint">Endpoint&lt;/h3>
&lt;p>The &lt;code>dependency-watchdog-endpoint&lt;/code> deployment is responsible for above mentioned second point.&lt;/p>
&lt;p>Kubernetes is restarting failing pods with an exponentially increasing backoff time.
While this is a great strategy to prevent system overloads it has the disadvantage that the delay between restarts is increasing up to multiple minutes very fast.&lt;/p>
&lt;p>In the Gardener context, we are deploying many components that are depending on other components.
For example, the &lt;code>kube-apiserver&lt;/code> is depending on a running &lt;code>etcd&lt;/code>, or the &lt;code>kube-controller-manager&lt;/code> and &lt;code>kube-scheduler&lt;/code> are depending on a running &lt;code>kube-apiserver&lt;/code>.
In case such a &amp;ldquo;higher-level&amp;rdquo; component fails for whatever reason, the dependent pods will fail and end-up in crash-loops.
As Kubernetes does not know anything about these hierarchies it won&amp;rsquo;t recognize that such pods can be restarted faster as soon as their dependents are up and running again.&lt;/p>
&lt;p>This is exactly the situation in which the DWD will become active:
If it detects that a certain &lt;code>Service&lt;/code> is available again (e.g., after the &lt;code>etcd&lt;/code> was temporarily down while being moved to another seed node) then DWD will restart all crash-looping dependant pods.
These dependant pods are detected via a pre-configured label selector.&lt;/p>
&lt;p>As of today, the DWD is configured to restart a crash-looping &lt;code>kube-apiserver&lt;/code> after &lt;code>etcd&lt;/code> became available again, or any pod depending on the &lt;code>kube-apiserver&lt;/code> that has a &lt;code>gardener.cloud/role=controlplane&lt;/code> label (e.g., &lt;code>kube-controller-manager&lt;/code>, &lt;code>kube-scheduler&lt;/code>, etc.).&lt;/p></description></item><item><title>Docs: Seed Settings</title><link>https://gardener.cloud/docs/gardener/usage/seed_settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/seed_settings/</guid><description>
&lt;h1 id="settings-for-seeds">Settings for &lt;code>Seed&lt;/code>s&lt;/h1>
&lt;p>The &lt;code>Seed&lt;/code> resource offers a few settings that are used to control the behaviour of certain Gardener components.
This document provides an overview over the available settings:&lt;/p>
&lt;h2 id="dependency-watchdog">Dependency Watchdog&lt;/h2>
&lt;p>Gardenlet can deploy two instances of the &lt;a href="https://github.com/gardener/dependency-watchdog">dependency-watchdog&lt;/a> into the &lt;code>garden&lt;/code> namespace of the seed cluster.
One instance only activates the &lt;code>endpoint&lt;/code> controller while the second instance only activates the &lt;code>probe&lt;/code> controller.&lt;/p>
&lt;h3 id="endpoint-controller">Endpoint Controller&lt;/h3>
&lt;p>The &lt;code>endpoint&lt;/code> controller helps to alleviate the delay where control plane components remain unavailable by finding the respective pods in CrashLoopBackoff status and restarting them once their dependants become ready and available again.
For example, if &lt;code>etcd&lt;/code> goes down then also &lt;code>kube-apiserver&lt;/code> goes down (and into a &lt;code>CrashLoopBackoff&lt;/code> state). If &lt;code>etcd&lt;/code> comes up again then (without the &lt;code>endpoint&lt;/code> controller) it might take some time until &lt;code>kube-apiserver&lt;/code> gets restarted as well.&lt;/p>
&lt;p>It can be enabled/disabled via the &lt;code>.spec.settings.dependencyWatchdog.endpoint.enabled&lt;/code> field.
It defaults to &lt;code>true&lt;/code>.&lt;/p>
&lt;h3 id="probe-controller">Probe Controller&lt;/h3>
&lt;p>The &lt;code>probe&lt;/code> controller scales down the &lt;code>kube-controller-manager&lt;/code> of shoot clusters in case their respective &lt;code>kube-apiserver&lt;/code> is not reachable via its external ingress.
This is in order to avoid melt-down situations since the &lt;code>kube-controller-manager&lt;/code> uses in-cluster communication when talking to the &lt;code>kube-apiserver&lt;/code>, i.e., it wouldn&amp;rsquo;t be affected if the external access to the &lt;code>kube-apiserver&lt;/code> is interrupted for whatever reason.
The &lt;code>kubelet&lt;/code>s on the shoot worker nodes, however, would indeed be affected since they typically run in different networks and use the external ingress when talking to the &lt;code>kube-apiserver&lt;/code>.
Hence, without scaling down &lt;code>kube-controller-manager&lt;/code>, the nodes might be marked as &lt;code>NotReady&lt;/code> and eventually replaced (since the &lt;code>kubelet&lt;/code>s cannot report their status anymore).
To prevent such unnecessary turbulences, &lt;code>kube-controller-manager&lt;/code> is being scaled down until the external ingress becomes available again.&lt;/p>
&lt;p>It can be enabled/disabled via the &lt;code>.spec.settings.dependencyWatchdog.probe.enabled&lt;/code> field.
It defaults to &lt;code>true&lt;/code>.&lt;/p>
&lt;h2 id="reserve-excess-capacity">Reserve Excess Capacity&lt;/h2>
&lt;p>If the excess capacity reservation is enabled then the Gardenlet will deploy a special &lt;code>Deployment&lt;/code> into the &lt;code>garden&lt;/code> namespace of the seed cluster.
This &lt;code>Deployment&lt;/code>&amp;rsquo;s pod template has only one container, the &lt;code>pause&lt;/code> container, which simply runs in an infinite loop.
The priority of the deployment is very low, so any other pod will preempt these &lt;code>pause&lt;/code> pods.
This is especially useful if new shoot control planes are created in the seed.
In case the seed cluster runs at its capacity then there is no waiting time required during the scale-up.
Instead, the low-priority &lt;code>pause&lt;/code> pods will be preempted and allow newly created shoot control plane pods to be scheduled fast.
In the meantime, the cluster-autoscaler will trigger the scale-up because the preempted &lt;code>pause&lt;/code> pods want to run again.
However, this delay doesn&amp;rsquo;t affect the important shoot control plane pods which will improve the user experience.&lt;/p>
&lt;p>It can be enabled/disabled via the &lt;code>.spec.settings.excessCapacityReservation.enabled&lt;/code> field.
It defaults to &lt;code>true&lt;/code>.&lt;/p>
&lt;h2 id="scheduling">Scheduling&lt;/h2>
&lt;p>By default, the Gardener Scheduler will consider all seed clusters when a new shoot cluster shall be created.
However, administrators/operators might want to exclude some of them from being considered by the scheduler.
Therefore, seed clusters can be marked as &amp;ldquo;invisible&amp;rdquo;.
In this case, the scheduler simply ignores them as if they wouldn&amp;rsquo;t exist.
Shoots can still use the invisible seed but only by explicitly specifying the name in their &lt;code>.spec.seedName&lt;/code> field.&lt;/p>
&lt;p>Seed clusters can be marked visible/invisible via the &lt;code>.spec.settings.scheduling.visible&lt;/code> field.
It defaults to &lt;code>true&lt;/code>.&lt;/p>
&lt;h2 id="shoot-dns">Shoot DNS&lt;/h2>
&lt;p>Generally, the Gardenlet creates a few DNS records during the creation/reconciliation of a shoot cluster (see &lt;a href="https://gardener.cloud/docs/gardener/usage/configuration/">here&lt;/a>).
However, some infrastructures don&amp;rsquo;t need/want this behaviour.
Instead, they want to directly use the IP addresses/hostnames of load balancers.
Another use-case is a local development setup where DNS is not needed for simplicity reasons.&lt;/p>
&lt;p>By setting the &lt;code>.spec.settings.shootDNS.enabled&lt;/code> field this behavior can be controlled.&lt;/p>
&lt;p>ℹ️ In previous Gardener versions (&amp;lt; 1.5) these settings were controlled via taint keys (&lt;code>seed.gardener.cloud/{disable-capacity-reservation,disable-dns,invisible}&lt;/code>).
The taint keys are no longer supported and removed in version 1.12.
The rationale behind it is the implementation of tolerations similar to Kubernetes tolerations.
More information about it can be found in &lt;a href="https://github.com/gardener/gardener/issues/2193">#2193&lt;/a>.&lt;/p>
&lt;h2 id="load-balancer-services">Load Balancer Services&lt;/h2>
&lt;p>Gardener creates certain Kubernetes &lt;code>Service&lt;/code> objects of type &lt;code>LoadBalancer&lt;/code> in the seed cluster.
Most prominently, they are used for exposing the shoot control planes, namely the kube-apiserver of the shoot clusters.
In most cases, the cloud-controller-manager (responsible for managing these load balancers on the respective underlying infrastructure) supports certain customization and settings via annotations.
&lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer">This document&lt;/a> provides a good overview and many examples.&lt;/p>
&lt;p>By setting the &lt;code>.spec.settings.loadBalancerServices.annotations&lt;/code> field the Gardener administrator can specify a list of annotations which will be injected into the &lt;code>Service&lt;/code>s of type &lt;code>LoadBalancer&lt;/code>.&lt;/p>
&lt;h2 id="vertical-pod-autoscaler">Vertical Pod Autoscaler&lt;/h2>
&lt;p>Gardener heavily relies on the Kubernetes &lt;a href="https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler">&lt;code>vertical-pod-autoscaler&lt;/code> component&lt;/a>.
By default, the seed controller deploys the VPA components into the &lt;code>garden&lt;/code> namespace of the respective seed clusters.
In case you want to manage the VPA deployment on your own or have a custom one then you might want to disable the automatic deployment of Gardener.
Otherwise, you might end up with two VPAs which will cause erratic behaviour.
By setting the &lt;code>.spec.settings.verticalPodAutoscaler.enabled=false&lt;/code> you can disable the automatic deployment.&lt;/p>
&lt;p>⚠️ In any case, there must be a VPA available for your seed cluster. Using a seed without VPA is not supported.&lt;/p>
&lt;h2 id="owner-checks">Owner Checks&lt;/h2>
&lt;p>When a shoot is scheduled to a seed and actually reconciled, Gardener appoints the seed as the current &amp;ldquo;owner&amp;rdquo; of the shoot by creating a special &amp;ldquo;owner DNS record&amp;rdquo; and checking against it if the seed still owns the shoot in order to guard against &amp;ldquo;split brain scenario&amp;rdquo; during control plane migration, as described in &lt;a href="https://gardener.cloud/docs/gardener/proposals/17-shoot-control-plane-migration-bad-case/">GEP-17 Shoot Control Plane Migration &amp;ldquo;Bad Case&amp;rdquo; Scenario&lt;/a>.
This mechanism relies on the DNS resolution of TXT DNS records being possible and highly reliable, since if the owner check fails the shoot will be effectively disabled for the duration of the failure.
In environments where resolving TXT DNS records is either not possible or not considered reliable enough, it may be necessary to disable the owner check mechanism, in order to avoid shoots failing to reconcile or temporary outages due to transient DNS failures.
By setting the &lt;code>.spec.settings.ownerChecks.enabled=false&lt;/code> (default is &lt;code>true&lt;/code>) the creation and checking of owner DNS records can be disabled for all shoots scheduled on this seed. Note that if owner checks are disabled, migrating shoots scheduled on this seed to other seeds should be considered unsafe, and in the future will be disabled as well.&lt;/p></description></item><item><title>Docs: Shoot Auditpolicy</title><link>https://gardener.cloud/docs/gardener/usage/shoot_auditpolicy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shoot_auditpolicy/</guid><description>
&lt;h1 id="audit-a-kubernetes-cluster">Audit a Kubernetes Cluster&lt;/h1>
&lt;p>The shoot cluster is a kubernetes cluster and its &lt;code>kube-apiserver&lt;/code> handles the audit events. In order to define which audit events must be logged, a proper audit policy file must be passed to the kubernetes API server. You could find more information about auditing a kubernetes cluster &lt;a href="https://kubernetes.io/docs/tasks/debug-application-cluster/audit/">here&lt;/a>.&lt;/p>
&lt;h2 id="default-audit-policy">Default Audit Policy&lt;/h2>
&lt;p>By default, the Gardener will deploy the shoot cluster with audit policy defined in the &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/operation/botanist/component/kubeapiserver/secrets.go">kube-apiserver package&lt;/a>.&lt;/p>
&lt;h2 id="custom-audit-policy">Custom Audit Policy&lt;/h2>
&lt;p>If you need specific audit policy for your shoot cluster, then you could deploy the required audit policy in the garden cluster as &lt;code>ConfigMap&lt;/code> resource and set up your shoot to refer this &lt;code>ConfigMap&lt;/code>. Note, the policy must be stored under the key &lt;code>policy&lt;/code> in the data section of the &lt;code>ConfigMap&lt;/code>.&lt;/p>
&lt;p>For example, deploy the auditpolicy &lt;code>ConfigMap&lt;/code> in the same namespace as your &lt;code>Shoot&lt;/code> resource:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f example/95-configmap-custom-audit-policy.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>then set your shoot to refer that &lt;code>ConfigMap&lt;/code> (only related fields are shown):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">spec:
kubernetes:
kubeAPIServer:
auditConfig:
auditPolicy:
configMapRef:
name: auditpolicy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Gardener validate the &lt;code>Shoot&lt;/code> resource to refer only existing &lt;code>ConfigMap&lt;/code> containing valid audit policy, and rejects the &lt;code>Shoot&lt;/code> on failure.
If you want to switch back to the default audit policy, you have to remove the section&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">auditPolicy:
configMapRef:
name: &amp;lt;configmap-name&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>from the shoot spec.&lt;/p>
&lt;h2 id="rolling-out-changes-to-the-audit-policy">Rolling Out Changes to the Audit Policy&lt;/h2>
&lt;p>Gardener is not automatically rolling out changes to the Audit Policy to minimize the amount of Shoot reconciliations in order to prevent cloud provider rate limits, etc.
Gardener will pick up the changes on the next reconciliation of Shoots referencing the Audit Policy ConfigMap.
If users want to immediately rollout Audit Policy changes, they can manually trigger a Shoot reconciliation as described in &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_operations/#immediate-reconciliation">triggering an immediate reconciliation&lt;/a>.
This is similar to changes to the cloud provider secret referenced by Shoots.&lt;/p></description></item><item><title>Docs: Shoot Autoscaling</title><link>https://gardener.cloud/docs/gardener/usage/shoot_autoscaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shoot_autoscaling/</guid><description>
&lt;h1 id="auto-scaling-in-shoot-clusters">Auto-Scaling in Shoot Clusters&lt;/h1>
&lt;p>There are two parts that relate to auto-scaling in Kubernetes clusters in general:&lt;/p>
&lt;ul>
&lt;li>Horizontal node auto-scaling, i.e., dynamically adding and removing worker nodes&lt;/li>
&lt;li>Vertical pod auto-scaling, i.e., dynamically raising or shrinking the resource requests/limits of pods&lt;/li>
&lt;/ul>
&lt;p>This document provides an overview of both scenarios.&lt;/p>
&lt;h2 id="horizontal-node-auto-scaling">Horizontal Node Auto-Scaling&lt;/h2>
&lt;p>Every shoot cluster that has at least one worker pool with &lt;code>minimum &amp;lt; maximum&lt;/code> nodes configuration will get a &lt;code>cluster-autoscaler&lt;/code> deployment.
Gardener is leveraging the upstream community Kubernetes &lt;a href="https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler">&lt;code>cluster-autoscaler&lt;/code> component&lt;/a>.
We have forked it to &lt;a href="https://github.com/gardener/autoscaler/">gardener/autoscaler&lt;/a> so that it supports the way how Gardener manages the worker nodes (leveraging &lt;a href="https://github.com/gardener/machine-controller-manager">gardener/machine-controller-manager&lt;/a>).
However, we have not touched the logic how it performs auto-scaling decisions.
Consequently, please refer to the &lt;a href="https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler#faqdocumentation">offical documentation&lt;/a> for this component.&lt;/p>
&lt;p>The &lt;code>Shoot&lt;/code> API allows to configure a few flags of the &lt;code>cluster-autoscaler&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.spec.kubernetes.clusterAutoscaler.ScaleDownDelayAfterAdd&lt;/code> defines how long after scale up that scale down evaluation resumes (default: &lt;code>1h&lt;/code>).&lt;/li>
&lt;li>&lt;code>.spec.kubernetes.clusterAutoscaler.ScaleDownDelayAfterDelete&lt;/code> defines how long after node deletion that scale down evaluation resumes (defaults to &lt;code>ScanInterval&lt;/code>).&lt;/li>
&lt;li>&lt;code>.spec.kubernetes.clusterAutoscaler.ScaleDownDelayAfterFailure&lt;/code> defines how long after scale down failure that scale down evaluation resumes (default: &lt;code>3m&lt;/code>).&lt;/li>
&lt;li>&lt;code>.spec.kubernetes.clusterAutoscaler.ScaleDownUnneededTime&lt;/code> defines how long a node should be unneeded before it is eligible for scale down (default: &lt;code>30m&lt;/code>).&lt;/li>
&lt;li>&lt;code>.spec.kubernetes.clusterAutoscaler.ScaleDownUtilizationThreshold&lt;/code> defines the threshold under which a node is being removed (default: &lt;code>0.5&lt;/code>).&lt;/li>
&lt;li>&lt;code>.spec.kubernetes.clusterAutoscaler.ScanInterval&lt;/code> defines how often cluster is reevaluated for scale up or down (default: &lt;code>10s&lt;/code>).&lt;/li>
&lt;li>&lt;code>.spec.kubernetes.clusterAutoscaler.IgnoreTaints&lt;/code> specifies a list of taint keys to ignore in node templates when considering to scale a node group (default: &lt;code>nil&lt;/code>).&lt;/li>
&lt;/ul>
&lt;h2 id="vertical-pod-auto-scaling">Vertical Pod Auto-Scaling&lt;/h2>
&lt;p>This form of auto-scaling is not enabled by default and must be explicitly enabled in the &lt;code>Shoot&lt;/code> by setting &lt;code>.spec.kubernetes.verticalPodAutoscaler.enabled=true&lt;/code>.
The reason is that it was only introduced lately, and some end-users might have already deployed their own VPA into their clusters, i.e., enabling it by default would interfere with such custom deployments and lead to issues, eventually.&lt;/p>
&lt;p>Gardener is also leveraging an upstream community tool, i.e., the Kubernetes &lt;a href="https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler">&lt;code>vertical-pod-autoscaler&lt;/code> component&lt;/a>.
If enabled, Gardener will deploy it as part of the control plane into the seed cluster.
It will also be used for the vertical autoscaling of Gardener&amp;rsquo;s system components deployed into the &lt;code>kube-system&lt;/code> namespace of shoot clusters, for example, &lt;code>kube-proxy&lt;/code> or &lt;code>metrics-server&lt;/code>.&lt;/p>
&lt;p>You might want to refer to the &lt;a href="https://github.com/kubernetes/autoscaler/blob/master/vertical-pod-autoscaler/README.md">official documentation&lt;/a> for this component to get more information how to use it.&lt;/p>
&lt;p>The &lt;code>Shoot&lt;/code> API allows to configure a few flags of the &lt;code>vertical-pod-autoscaler&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.spec.kubernetes.verticalPodAutoscaler.evictAfterOOMThreshold&lt;/code> defines the threshold that will lead to pod eviction in case it OOMed in less than the given threshold since its start and if it has only one container (default: &lt;code>10m0s&lt;/code>).&lt;/li>
&lt;li>&lt;code>.spec.kubernetes.verticalPodAutoscaler.evictionRateBurst&lt;/code> defines the burst of pods that can be evicted (default: &lt;code>1&lt;/code>).&lt;/li>
&lt;li>&lt;code>.spec.kubernetes.verticalPodAutoscaler.evictionRateLimit&lt;/code> defines the number of pods that can be evicted per second. A rate limit set to 0 or -1 will disable the rate limiter (default: &lt;code>-1&lt;/code>).&lt;/li>
&lt;li>&lt;code>.spec.kubernetes.verticalPodAutoscaler.evictionTolerance&lt;/code> defines the fraction of replica count that can be evicted for update in case more than one pod can be evicted (default: &lt;code>0.5&lt;/code>).&lt;/li>
&lt;li>&lt;code>.spec.kubernetes.verticalPodAutoscaler.recommendationMarginFraction&lt;/code> is the fraction of usage added as the safety margin to the recommended request (default: &lt;code>0.15&lt;/code>).&lt;/li>
&lt;li>&lt;code>.spec.kubernetes.verticalPodAutoscaler.updaterInterval&lt;/code> is the interval how often the updater should run (default: &lt;code>1m0s&lt;/code>).&lt;/li>
&lt;li>&lt;code>.spec.kubernetes.verticalPodAutoscaler.RecommenderInterval&lt;/code> is the interval how often metrics should be fetched (default: &lt;code>1m0s&lt;/code>).&lt;/li>
&lt;/ul>
&lt;p>⚠️ Please note that if you disable the VPA again then the related &lt;code>CustomResourceDefinition&lt;/code>s will remain in your shoot cluster (although, nobody will act on them).
This will also keep all existing &lt;code>VerticalPodAutoscaler&lt;/code> objects in the system, including those that might be created by you. You can delete the &lt;code>CustomResourceDefinition&lt;/code>s yourself using &lt;code>kubectl delete crd&lt;/code> if you want to get rid of them.&lt;/p></description></item><item><title>Docs: Shoot Cleanup</title><link>https://gardener.cloud/docs/gardener/usage/shoot_cleanup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shoot_cleanup/</guid><description>
&lt;h1 id="cleanup-of-shoot-clusters-in-deletion">Cleanup of Shoot clusters in deletion&lt;/h1>
&lt;p>When a shoot cluster is deleted then Gardener tries to gracefully remove most of the Kubernetes resources inside the cluster.
This is to prevent that any infrastructure or other artefacts remain after the shoot deletion.&lt;/p>
&lt;p>The cleanup is performed in four steps.
Some resources are deleted with a grace period, and all resources are forcefully deleted (by removing blocking finalizers) after some time to not block the cluster deletion entirely.&lt;/p>
&lt;p>&lt;strong>Cleanup steps:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>All &lt;code>ValidatingWebhookConfiguration&lt;/code>s and &lt;code>MutatingWebhookConfiguration&lt;/code>s are deleted with a &lt;code>5m&lt;/code> grace period. Forceful finalization happens after &lt;code>5m&lt;/code>.&lt;/li>
&lt;li>All &lt;code>APIService&lt;/code>s and &lt;code>CustomResourceDefinition&lt;/code>s are deleted with a &lt;code>5m&lt;/code> grace period. Forceful finalization happens after &lt;code>1h&lt;/code>.&lt;/li>
&lt;li>All &lt;code>CronJob&lt;/code>s, &lt;code>DaemonSet&lt;/code>s, &lt;code>Deployment&lt;/code>s, &lt;code>Ingress&lt;/code>s, &lt;code>Job&lt;/code>s, &lt;code>Pod&lt;/code>s, &lt;code>ReplicaSet&lt;/code>s, &lt;code>ReplicationController&lt;/code>s, &lt;code>Service&lt;/code>s, &lt;code>StatefulSet&lt;/code>s, &lt;code>PersistentVolumeClaim&lt;/code>s are deleted with a &lt;code>5m&lt;/code> grace period. Forceful finalization happens after &lt;code>5m&lt;/code>.
&lt;blockquote>
&lt;p>If the &lt;code>Shoot&lt;/code> is annotated with &lt;code>shoot.gardener.cloud/skip-cleanup=true&lt;/code> then only &lt;code>Service&lt;/code>s and &lt;code>PersistentVolumeClaim&lt;/code>s are considered.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>All &lt;code>VolumeSnapshot&lt;/code>s and &lt;code>VolumeSnapshotContent&lt;/code>s are deleted with a &lt;code>5m&lt;/code> grace period. Forceful finalization happens after &lt;code>1h&lt;/code>.&lt;/li>
&lt;li>All &lt;code>Namespace&lt;/code>s are deleted without any grace period. Forceful finalization happens after &lt;code>5m&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>It is possible to override the finalization grace periods via annotations on the &lt;code>Shoot&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>shoot.gardener.cloud/cleanup-webhooks-finalize-grace-period-seconds&lt;/code> (for the resources handled in step 1)&lt;/li>
&lt;li>&lt;code>shoot.gardener.cloud/cleanup-extended-apis-finalize-grace-period-seconds&lt;/code> (for the resources handled in step 2)&lt;/li>
&lt;li>&lt;code>shoot.gardener.cloud/cleanup-kubernetes-resources-finalize-grace-period-seconds&lt;/code> (for the resources handled in step 3)&lt;/li>
&lt;li>&lt;code>shoot.gardener.cloud/cleanup-namespaces-finalize-grace-period-seconds&lt;/code> (for the resources handled in step 4)&lt;/li>
&lt;/ul>
&lt;p>⚠️ If &lt;code>&amp;quot;0&amp;quot;&lt;/code> is provided then all resources are finalized immediately without waiting for any graceful deletion.
Please be aware that this might lead to orphaned infrastructure artefacts.&lt;/p>
&lt;h2 id="infrastructure-cleanup-wait-period">Infrastructure Cleanup Wait Period&lt;/h2>
&lt;p>After all above cleanup steps have been performed and the &lt;code>Infrastructure&lt;/code> extension resource has been deleted the gardenlet waits for a certain duration to allow controllers to properly cleanup infrastructure resources.&lt;/p>
&lt;p>By default, this duration is set to &lt;code>5m&lt;/code>. Only after this time has passed the shoot deletion flow continues with the entire tear-down of the remaining control plane components (including &lt;code>kube-apiserver&lt;/code>s, etc.).&lt;/p>
&lt;p>It is also possible to override this wait period via an annotations on the &lt;code>Shoot&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>shoot.gardener.cloud/infrastructure-cleanup-wait-period-seconds&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>ℹ️️ All provided period values larger than the above mentioned defaults are ignored.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Shoot Info Configmap</title><link>https://gardener.cloud/docs/gardener/usage/shoot_info_configmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shoot_info_configmap/</guid><description>
&lt;h1 id="shoot-info-configmap">Shoot Info &lt;code>ConfigMap&lt;/code>&lt;/h1>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>Gardenlet maintains a &lt;a href="https://kubernetes.io/docs/concepts/configuration/configmap/">ConfigMap&lt;/a> inside the Shoot cluster that contains information about the cluster itself. The ConfigMap is named &lt;code>shoot-info&lt;/code> and located in the &lt;code>kube-system&lt;/code> namespace.&lt;/p>
&lt;h2 id="fields">Fields&lt;/h2>
&lt;p>The following fields are provided:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: v1
kind: ConfigMap
metadata:
name: shoot-info
namespace: kube-system
data:
domain: crazy-botany.core.my-custom-domain.com &lt;span style="color:#008000"># .spec.dns.domain field from the Shoot resource&lt;/span>
extensions: foobar,foobaz &lt;span style="color:#008000"># List of extensions that are enabled&lt;/span>
kubernetesVersion: 1.20.1 &lt;span style="color:#008000"># .spec.kubernetes.version field from the Shoot resource&lt;/span>
maintenanceBegin: 220000+0100 &lt;span style="color:#008000"># .spec.maintenance.timeWindow.begin field from the Shoot resource&lt;/span>
maintenanceEnd: 230000+0100 &lt;span style="color:#008000"># .spec.maintenance.timeWindow.end field from the Shoot resource&lt;/span>
nodeNetwork: 10.250.0.0/16 &lt;span style="color:#008000"># .spec.networking.nodes field from the Shoot resource&lt;/span>
podNetwork: 100.96.0.0/11 &lt;span style="color:#008000"># .spec.networking.pods field from the Shoot resource&lt;/span>
projectName: dev &lt;span style="color:#008000"># .metadata.name of the Project&lt;/span>
provider: &amp;lt;some-provider-name&amp;gt; &lt;span style="color:#008000"># .spec.provider.type field from the Shoot resource&lt;/span>
region: europe-central-1 &lt;span style="color:#008000"># .spec.region field from the Shoot resource&lt;/span>
serviceNetwork: 100.64.0.0/13 &lt;span style="color:#008000"># .spec.networking.services field from the Shoot resource&lt;/span>
shootName: crazy-botany &lt;span style="color:#008000"># .metadata.name from the Shoot resource&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Shoot Maintenance</title><link>https://gardener.cloud/docs/gardener/usage/shoot_maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shoot_maintenance/</guid><description>
&lt;h1 id="shoot-maintenance">Shoot Maintenance&lt;/h1>
&lt;p>Shoots configure a maintenance time window in which Gardener performs certain operations that may restart the control plane, roll out the nodes, result in higher network traffic, etc.
This document outlines what happens during a shoot maintenance.&lt;/p>
&lt;h2 id="time-window">Time Window&lt;/h2>
&lt;p>Via the &lt;code>.spec.maintenance.timeWindow&lt;/code> field in the shoot specification end-users can configure the time window in which maintenance operations are executed.
Gardener runs one maintenance operation per day in this time window:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">spec:
maintenance:
timeWindow:
begin: 220000+0100
end: 230000+0100
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The offset (&lt;code>+0100&lt;/code>) is considered with respect to UTC time.
The minimum time window is &lt;code>30m&lt;/code> and the maximum is &lt;code>6h&lt;/code>.&lt;/p>
&lt;p>⚠️ Please note that there is no guarantee that a maintenance operation that e.g. starts a node roll-out will finish &lt;em>within&lt;/em> the time window.
Especially for large clusters it may take several hours until a graceful rolling update of the worker nodes succeeds (also depending on the workload and the configured pod disruption budgets/termination grace periods).&lt;/p>
&lt;p>Internally, Gardener is subtracting &lt;code>15m&lt;/code> from the end of the time window to (best-effort) try to finish the maintenance until the end is reached, however, it might not work in all cases.&lt;/p>
&lt;p>If you don&amp;rsquo;t specify a time window then Gardener will randomly compute it.
You can change it later, of course.&lt;/p>
&lt;h2 id="automatic-version-updates">Automatic Version Updates&lt;/h2>
&lt;p>The &lt;code>.spec.maintenance.autoUpdate&lt;/code> field in the shoot specification allows you to control how/whether automatic updates of Kubernetes patch and machine image versions are performed.
Machine image versions are updated per worker pool.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">spec:
maintenance:
autoUpdate:
kubernetesVersion: &lt;span style="color:#00f">true&lt;/span>
machineImageVersion: &lt;span style="color:#00f">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>During the daily maintenance, the Gardener Controller Manager updates the Shoot&amp;rsquo;s Kubernetes and machine image version if any of the following criteria applies:&lt;/p>
&lt;ul>
&lt;li>there is a higher version available and the Shoot opted-in for automatic version updates&lt;/li>
&lt;li>the currently used version is &lt;code>expired&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Gardener creates events with type &lt;code>MaintenanceDone&lt;/code> on the Shoot describing the action performed during maintenance including the reason why an update has been triggered.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">MaintenanceDone Updated image of worker-pool &amp;#39;coreos-xy&amp;#39; from &amp;#39;coreos&amp;#39; version &amp;#39;xy&amp;#39; to version &amp;#39;abc&amp;#39;. Reason: AutoUpdate of MachineImage configured.
MaintenanceDone Updated Kubernetes version &amp;#39;0.0.1&amp;#39; to version &amp;#39;0.0.5&amp;#39;. This is an increase in the patch level. Reason: AutoUpdate of Kubernetes version configured.
MaintenanceDone Updated Kubernetes version &amp;#39;0.0.5&amp;#39; to version &amp;#39;0.1.5&amp;#39;. This is an increase in the minor level. Reason: Kubernetes version expired - force update required.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please refer to &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_versions/">this document&lt;/a> for more information about Kubernetes and machine image versions in Gardener.&lt;/p>
&lt;h2 id="cluster-reconciliation">Cluster Reconciliation&lt;/h2>
&lt;p>Gardener administrators/operators can configure the Gardenlet in a way that it only reconciles shoot clusters during their maintenance time windows.
This behaviour is not controllable by end-users but might make sense for large Gardener installations.
Concretely, your shoot will be reconciled regularly during its maintenance time window.
Outside of the maintenance time window it will only reconcile if you change the specification or if you explicitly trigger it, see also &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_operations/">this document&lt;/a>.&lt;/p>
&lt;h2 id="confine-specification-changesupdates-roll-out">Confine Specification Changes/Updates Roll Out&lt;/h2>
&lt;p>Via the &lt;code>.spec.maintenance.confineSpecUpdateRollout&lt;/code> field you can control whether you want to make Gardener roll out changes/updates to your shoot specification only during the maintenance time window.
It is &lt;code>false&lt;/code> by default, i.e., any change to your shoot specification triggers a reconciliation (even outside of the maintenance time window).
This is helpful if you want to update your shoot but don&amp;rsquo;t want the changes to be applied immediately. One example use-case would be a Kubernetes version upgrade that you want to roll out during the maintenance time window.
Any update to the specification will not increase the &lt;code>.metadata.generation&lt;/code> of the &lt;code>Shoot&lt;/code> which is something you should be aware of.
Also, even if Gardener administrators/operators have not enabled the &amp;ldquo;reconciliation in maintenance time window only&amp;rdquo; configuration (as mentioned above) then your shoot will only reconcile in the maintenance time window.
The reason is that Gardener cannot differentiate between create/update/reconcile operations.&lt;/p>
&lt;p>⚠️ If &lt;code>confineSpecUpdateRollout=true&lt;/code>, please note that if you change the maintenance time window itself then it will only be effective after the upcoming maintenance.&lt;/p>
&lt;p>⚠️ There is one exceptional change in the shoot specification that triggers an immediate roll out which is changes to the &lt;code>.spec.hibernation.enabled&lt;/code> field.
If you hibernate or wake-up your shoot then Gardener gets active right away.&lt;/p>
&lt;h2 id="special-operations-during-maintenance">Special Operations During Maintenance&lt;/h2>
&lt;p>The shoot maintenance controller triggers special operations that are performed as part of the shoot reconciliation.&lt;/p>
&lt;h3 id="infrastructure-and-dnsrecord-reconciliation">&lt;code>Infrastructure&lt;/code> and &lt;code>DNSRecord&lt;/code> Reconciliation&lt;/h3>
&lt;p>The reconciliation of the &lt;code>Infrastructure&lt;/code> and &lt;code>DNSRecord&lt;/code> extension resources is only demanded during the shoot&amp;rsquo;s maintenance time window.
The rationale behind it is to prevent sending too many requests against the cloud provider APIs, especially on large landscapes or if a user has many shoot clusters in the same cloud provider account.&lt;/p>
&lt;h3 id="restart-control-plane-controllers">Restart Control Plane Controllers&lt;/h3>
&lt;p>Gardener operators can make Gardener restart/delete certain control plane pods during a shoot maintenance.
This feature helps to automatically solve service denials of controllers due to stale caches, dead-locks or starving routines.&lt;/p>
&lt;p>Please note that these are exceptional cases but they are observed from time to time.
Gardener, for example, takes this precautionary measure for &lt;code>kube-controller-manager&lt;/code> pods.&lt;/p>
&lt;p>See &lt;a href="https://gardener.cloud/docs/gardener/extensions/shoot-maintenance/">this document&lt;/a> to see how extension developers can extend this behaviour.&lt;/p>
&lt;h3 id="restart-some-core-addons">Restart Some Core Addons&lt;/h3>
&lt;p>Gardener operators can make Gardener restart some core addons, at the moment only CoreDNS, during a shoot maintenance.&lt;/p>
&lt;p>CoreDNS benefits from this feature as it automatically solve problems with clients stuck to single replica of the deployment and thus overloading it.
Please note that these are exceptional cases but they are observed from time to time.&lt;/p></description></item><item><title>Docs: Shoot Network Policies</title><link>https://gardener.cloud/docs/gardener/usage/shoot_network_policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shoot_network_policies/</guid><description>
&lt;h2 id="network-policies-in-the-shoot-cluster">Network policies in the Shoot Cluster&lt;/h2>
&lt;p>In addition to deploying network policies &lt;a href="https://gardener.cloud/docs/gardener/development/seed_network_policies/">into the Seed&lt;/a>,
Gardener deploys network policies into the &lt;code>kube-system&lt;/code> namespace of the Shoot.
These network policies are used by Shoot system components (that are not part of the control plane).
Other namespaces in the Shoot do not contain network policies deployed by Gardener.&lt;/p>
&lt;p>As best practice, every pod deployed into the &lt;code>kube-system&lt;/code> namespace should use appropriate network policies in order to only allow &lt;strong>required&lt;/strong> network traffic.
Therefore, pods should have labels matching to the selectors of the available network policies.&lt;/p>
&lt;p>Gardener deploys the following network policies:&lt;/p>
&lt;pre>&lt;code>NAME POD-SELECTOR
gardener.cloud--allow-dns k8s-app in (kube-dns)
gardener.cloud--allow-from-seed networking.gardener.cloud/from-seed=allowed
gardener.cloud--allow-to-apiserver networking.gardener.cloud/to-apiserver=allowed
gardener.cloud--allow-to-dns networking.gardener.cloud/to-dns=allowed
gardener.cloud--allow-to-from-nginx app=nginx-ingress
gardener.cloud--allow-to-kubelet networking.gardener.cloud/to-kubelet=allowed
gardener.cloud--allow-to-public-networks networking.gardener.cloud/to-public-networks=allowed
gardener.cloud--allow-vpn app=vpn-shoot
&lt;/code>&lt;/pre>&lt;p>Additionally, there can be network policies deployed by Gardener extensions such as &lt;a href="https://github.com/gardener/gardener-extension-networking-calico">extension-calico&lt;/a>.&lt;/p>
&lt;pre>&lt;code>NAME POD-SELECTOR
gardener.cloud--allow-from-calico-node k8s-app=calico-typha
&lt;/code>&lt;/pre></description></item><item><title>Docs: Shoot Networking</title><link>https://gardener.cloud/docs/gardener/usage/shoot_networking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shoot_networking/</guid><description>
&lt;h1 id="shoot-networking">Shoot Networking&lt;/h1>
&lt;p>This document contains network related information for Shoot clusters.&lt;/p>
&lt;h2 id="pod-network">Pod Network&lt;/h2>
&lt;p>A Pod network is imperative for any kind of cluster communication with Pods not started within the Node&amp;rsquo;s host network.
More information about the Kubernetes network model can be found &lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/networking/">here&lt;/a>.&lt;/p>
&lt;p>Gardener allows users to configure the Pod network&amp;rsquo;s CIDR during Shoot creation:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: Shoot
spec:
networking:
type: &amp;lt;some-network-extension-name&amp;gt; &lt;span style="color:#008000"># {calico,cilium}&lt;/span>
pods: 100.96.0.0/16
nodes: ...
services: ...
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>⚠️ The &lt;code>networking.pods&lt;/code> IP configuration is immutable and cannot be changed afterwards.
Please consider the following paragraph to choose a configuration which will meet your demands.&lt;/p>
&lt;/blockquote>
&lt;p>One of the network plugin&amp;rsquo;s (CNI) tasks is to assign IP addresses to Pods started in the Pod network.
Different network plugins come with different IP address management (IPAM) features, so we can&amp;rsquo;t give any definite advice how IP ranges should be configured.
Nevertheless, we want to outline the standard configuration.&lt;/p>
&lt;p>Information in &lt;code>.spec.networking.pods&lt;/code> matches the &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/">&amp;ndash;cluster-cidr flag&lt;/a> of the Kube-Controller-Manager of your Shoot cluster.
This IP range is divided into smaller subnets, also called &lt;code>podCIDRs&lt;/code> (default mask &lt;code>/24&lt;/code>) and assigned to Node objects &lt;code>.spec.podCIDR&lt;/code>.
Pods get their IP address from this smaller node subnet in a default IPAM setup.
Thus, it must be guaranteed that enough of these subnets can be created for the maximum amount of nodes you expect in the cluster.&lt;/p>
&lt;p>&lt;em>&lt;strong>Example 1&lt;/strong>&lt;/em>&lt;/p>
&lt;pre>&lt;code>Pod network: 100.96.0.0/16
nodeCIDRMaskSize: /24
-------------------------
Number of podCIDRs: 256 --&amp;gt; max. Node count
Number of IPs per podCIDRs: 256
&lt;/code>&lt;/pre>&lt;p>With the configuration above a Shoot cluster can at most have &lt;strong>256 nodes&lt;/strong> which are ready to run workload in the Pod network.&lt;/p>
&lt;p>&lt;em>&lt;strong>Example 2&lt;/strong>&lt;/em>&lt;/p>
&lt;pre>&lt;code>Pod network: 100.96.0.0/20
nodeCIDRMaskSize: /24
-------------------------
Number of podCIDRs: 16 --&amp;gt; max. Node count
Number of IPs per podCIDRs: 256
&lt;/code>&lt;/pre>&lt;p>With the configuration above a Shoot cluster can at most have &lt;strong>16 nodes&lt;/strong> which are ready to run workload in the Pod network.&lt;/p>
&lt;p>Beside the configuration in &lt;code>.spec.networking.pods&lt;/code>, users can tune the &lt;code>nodeCIDRMaskSize&lt;/code> used by Kube-Controller-Manager on shoot creation.
A smaller IP range per node means more &lt;code>podCIDRs&lt;/code> and thus the ability to provision more nodes in the cluster, but less available IPs for Pods running on each of the nodes.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: Shoot
spec:
kubeControllerManager:
nodeCIDRMaskSize: 24 (default)
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>⚠️ The &lt;code>nodeCIDRMaskSize&lt;/code> configuration is immutable and cannot be changed afterwards.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;em>&lt;strong>Example 3&lt;/strong>&lt;/em>&lt;/p>
&lt;pre>&lt;code>Pod network: 100.96.0.0/20
nodeCIDRMaskSize: /25
-------------------------
Number of podCIDRs: 32 --&amp;gt; max. Node count
Number of IPs per podCIDRs: 128
&lt;/code>&lt;/pre>&lt;p>With the configuration above a Shoot cluster can at most have &lt;strong>32 nodes&lt;/strong> which are ready to run workload in the Pod network.&lt;/p></description></item><item><title>Docs: Shoot Operations</title><link>https://gardener.cloud/docs/gardener/usage/shoot_operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shoot_operations/</guid><description>
&lt;h1 id="trigger-shoot-operations">Trigger shoot operations&lt;/h1>
&lt;p>You can trigger a few explicit operations by annotating the &lt;code>Shoot&lt;/code> with an operation annotation.
This might allow you to induct certain behavior without the need to change the &lt;code>Shoot&lt;/code> specification.
Some of the operations can also not be caused by changing something in the shoot specification because they can&amp;rsquo;t properly be reflected here.
Note, once the triggered operation is considered by the controllers, the annotation will be automatically removed and you have to add it each time you want to trigger the operation.&lt;/p>
&lt;p>Please note: If &lt;code>.spec.maintenance.confineSpecUpdateRollout=true&lt;/code> then the only way to trigger a shoot reconciliation is by setting the &lt;code>reconcile&lt;/code> operation, see below.&lt;/p>
&lt;h2 id="immediate-reconciliation">Immediate reconciliation&lt;/h2>
&lt;p>Annotate the shoot with &lt;code>gardener.cloud/operation=reconcile&lt;/code> to make the &lt;code>gardenlet&lt;/code> start a reconciliation operation without changing the shoot spec and possibly without being in its maintenance time window:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n garden-&amp;lt;project-name&amp;gt; annotate shoot &amp;lt;shoot-name&amp;gt; gardener.cloud/operation=reconcile
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="immediate-maintenance">Immediate maintenance&lt;/h2>
&lt;p>Annotate the shoot with &lt;code>gardener.cloud/operation=maintain&lt;/code> to make the &lt;code>gardener-controller-manager&lt;/code> start maintaining your shoot immediately (possibly without being in its maintenance time window).
If no reconciliation starts then nothing needed to be maintained:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n garden-&amp;lt;project-name&amp;gt; annotate shoot &amp;lt;shoot-name&amp;gt; gardener.cloud/operation=maintain
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="retry-failed-operation">Retry failed operation&lt;/h2>
&lt;p>Annotate the shoot with &lt;code>gardener.cloud/operation=retry&lt;/code> to make the &lt;code>gardenlet&lt;/code> start a new reconciliation loop on a failed shoot.
Failed shoots are only reconciled again if a new Gardener version is deployed, the shoot specification is changed or this annotation is set&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n garden-&amp;lt;project-name&amp;gt; annotate shoot &amp;lt;shoot-name&amp;gt; gardener.cloud/operation=retry
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="rotate-kubeconfig-credentials">Rotate kubeconfig credentials&lt;/h2>
&lt;p>Annotate the shoot with &lt;code>gardener.cloud/operation=rotate-kubeconfig-credentials&lt;/code> to make the &lt;code>gardenlet&lt;/code> exchange the credentials in your shoot cluster&amp;rsquo;s kubeconfig.
This operation is not allowed for shoot clusters that are already in deletion.
Please note that only the token (and basic auth password, if enabled) are exchanged. The cluster CAs remain the same.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n garden-&amp;lt;project-name&amp;gt; annotate shoot &amp;lt;shoot-name&amp;gt; gardener.cloud/operation=rotate-kubeconfig-credentials
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can check the &lt;code>.status.credentials.rotation.kubeconfig&lt;/code> field in the &lt;code>Shoot&lt;/code> to see when the rotation was last initiated or last completed.&lt;/p>
&lt;h2 id="restart-systemd-services-on-particular-worker-nodes">Restart systemd services on particular worker nodes&lt;/h2>
&lt;p>It is possible to make Gardener restart particular systemd services on your shoot worker nodes if needed.
The annotation is not set on the &lt;code>Shoot&lt;/code> resource but directly on the &lt;code>Node&lt;/code> object you want to target.
For example, the following will restart both the &lt;code>kubelet&lt;/code> and the &lt;code>docker&lt;/code> services:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl annotate node &amp;lt;node-name&amp;gt; worker.gardener.cloud/restart-systemd-services=kubelet,docker
&lt;/code>&lt;/pre>&lt;/div>&lt;p>It may take up to a minute until the service is restarted.
The annotation will be removed from the &lt;code>Node&lt;/code> object after all specified systemd services have been restarted.
It will also be removed even if the restart of one or more services failed.&lt;/p>
&lt;blockquote>
&lt;p>ℹ️ In the example mentioned above, you could additionally verify when/whether the kubelet restarted by using &lt;code>kubectl describe node &amp;lt;node-name&amp;gt;&lt;/code> and looking for such a &lt;code>Starting kubelet&lt;/code> event.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Shoot Purposes</title><link>https://gardener.cloud/docs/gardener/usage/shoot_purposes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shoot_purposes/</guid><description>
&lt;h1 id="shoot-cluster-purpose">Shoot Cluster Purpose&lt;/h1>
&lt;p>The &lt;code>Shoot&lt;/code> resource contains a &lt;code>.spec.purpose&lt;/code> field indicating how the shoot is used whose allowed values are as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;code>evaluation&lt;/code> (default): Indicates that the shoot cluster is for evaluation scenarios.&lt;/li>
&lt;li>&lt;code>development&lt;/code>: Indicates that the shoot cluster is for development scenarios.&lt;/li>
&lt;li>&lt;code>testing&lt;/code>: Indicates that the shoot cluster is for testing scenarios.&lt;/li>
&lt;li>&lt;code>production&lt;/code>: Indicates that the shoot cluster is for production scenarios.&lt;/li>
&lt;li>&lt;code>infrastructure&lt;/code>: Indicates that the shoot cluster is for infrastructure scenarios (only allowed for shoots in the &lt;code>garden&lt;/code> namespace).&lt;/li>
&lt;/ul>
&lt;h2 id="behavioral-differences">Behavioral Differences&lt;/h2>
&lt;p>The following enlists the differences in the way the shoot clusters are set up based on the selected purpose:&lt;/p>
&lt;ul>
&lt;li>&lt;code>testing&lt;/code> shoot clusters &lt;strong>do not&lt;/strong> get a monitoring or a logging stack as part of their control planes.&lt;/li>
&lt;li>&lt;code>production&lt;/code> shoot clusters get at least two replicas of the &lt;code>kube-apiserver&lt;/code> for their control planes.
Auto-scaling scale down of the main ETCD is disabled for such clusters.&lt;/li>
&lt;/ul>
&lt;p>There are also differences with respect to how &lt;code>testing&lt;/code> shoots are scheduled after creation, please consult the &lt;a href="https://gardener.cloud/docs/gardener/concepts/scheduler/">Scheduler documentation&lt;/a>.&lt;/p>
&lt;h2 id="future-steps">Future Steps&lt;/h2>
&lt;p>We might introduce more behavioral difference depending on the shoot purpose in the future.
As of today, there are no plans yet.&lt;/p></description></item><item><title>Docs: Shoot Status</title><link>https://gardener.cloud/docs/gardener/usage/shoot_status/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shoot_status/</guid><description>
&lt;h1 id="shoot-status">Shoot Status&lt;/h1>
&lt;p>This document provides an overview of the &lt;a href="https://gardener.cloud/docs/gardener/api-reference/core/#shootstatus">ShootStatus&lt;/a>.&lt;/p>
&lt;h2 id="conditions">Conditions&lt;/h2>
&lt;p>The Shoot status consists of a set of conditions. A &lt;a href="https://gardener.cloud/docs/gardener/api-reference/core/#condition">Condition&lt;/a> has the following fields:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field name&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>type&lt;/code>&lt;/td>
&lt;td>Name of the condition.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>status&lt;/code>&lt;/td>
&lt;td>Indicates whether the condition is applicable, with possible values &lt;code>True&lt;/code>, &lt;code>False&lt;/code>, &lt;code>Unknown&lt;/code>, or &lt;code>Progressing&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lastTransitionTime&lt;/code>&lt;/td>
&lt;td>Timestamp for when the condition last transitioned from one status to another.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lastUpdateTime&lt;/code>&lt;/td>
&lt;td>Timestamp for when the condition was updated. Usually changes when &lt;code>reason&lt;/code> or &lt;code>message&lt;/code> in condition is updated.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>reason&lt;/code>&lt;/td>
&lt;td>Machine-readable, UpperCamelCase text indicating the reason for the condition&amp;rsquo;s last transition.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>message&lt;/code>&lt;/td>
&lt;td>Human-readable message indicating details about the last status transition.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>codes&lt;/code>&lt;/td>
&lt;td>Well-defined error codes in case the condition reports a problem.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Currently the available Shoot condition types are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>APIServerAvailable&lt;/code>&lt;/p>
&lt;p>This condition type indicates whether the Shoot&amp;rsquo;s kube-apiserver is available or not. In particular, the &lt;code>/healthz&lt;/code> endpoint of the kube-apiserver is called, and the expected response code is &lt;code>HTTP 200&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ControlPlaneHealthy&lt;/code>&lt;/p>
&lt;p>This condition type indicates whether all the control plane components deployed to the Shoot&amp;rsquo;s namespace in the Seed do exist and are running fine.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>EveryNodeReady&lt;/code>&lt;/p>
&lt;p>This condition type indicates whether at least the requested minimum number of Nodes is present per each worker pool and whether all Nodes are healthy.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SystemComponentsHealthy&lt;/code>&lt;/p>
&lt;p>This condition type indicates whether all system components deployed to the &lt;code>kube-system&lt;/code> namespace in the shoot do exist and are running fine. It also reflects whether the tunnel connection between the control plane and the Shoot networks can be established.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The Shoot conditions are maintained by the &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/gardenlet/controller/shoot/shoot_care_control.go">shoot care control&lt;/a> of gardenlet.&lt;/p>
&lt;h3 id="sync-period">Sync Period&lt;/h3>
&lt;p>The condition checks are executed periodically at interval which is configurable in the &lt;code>GardenletConfiguration&lt;/code> (&lt;code>.controllers.shootCare.syncPeriod&lt;/code>, defaults to &lt;code>1m&lt;/code>).&lt;/p>
&lt;h3 id="condition-thresholds">Condition Thresholds&lt;/h3>
&lt;p>The &lt;code>GardenletConfiguration&lt;/code> also allows configuring condition thresholds (&lt;code>controllers.shootCare.conditionThresholds&lt;/code>). Condition threshold is the amount of time to consider condition as &lt;code>Processing&lt;/code> on condition status changes.&lt;/p>
&lt;p>Let&amp;rsquo;s check the following example to get better understanding. Let&amp;rsquo;s say that the &lt;code>APIServerAvailable&lt;/code> condition of our Shoot is with status &lt;code>True&lt;/code>. If the next condition check fails (for example kube-apiserver becomes unreachable), then the condition first goes to &lt;code>Processing&lt;/code> state. Only if this state remains for condition threshold amount of time, then the condition finally is updated to &lt;code>False&lt;/code>.&lt;/p>
&lt;h3 id="constraints">Constraints&lt;/h3>
&lt;p>Constraints represent conditions of a Shoot’s current state that constraint some operations on it.
Currently there are two constraints:&lt;/p>
&lt;p>&lt;strong>&lt;code>HibernationPossible&lt;/code>&lt;/strong>:&lt;/p>
&lt;p>This constraint indicates whether a Shoot is allowed to be hibernated.
The rationale behind this constraint is that a Shoot can have &lt;code>ValidatingWebhookConfiguration&lt;/code>s or &lt;code>MutatingWebhookConfiguration&lt;/code>s acting on resources that are critical for waking up a cluster.
For example, if a webhook has rules for &lt;code>CREATE/UPDATE&lt;/code> Pods or Nodes and &lt;code>failurePolicy=Fail&lt;/code>, the webhook will block joining &lt;code>Nodes&lt;/code> and creating critical system component Pods and thus block the entire wakeup operation, because the server backing the webhook is not running.&lt;/p>
&lt;p>Even if the &lt;code>failurePolicy&lt;/code> is set to &lt;code>Ignore&lt;/code>, high timeouts (&lt;code>&amp;gt;15s&lt;/code>) can lead to blocking requests of control plane components.
That&amp;rsquo;s because most control-plane API calls are made with a client-side timeout of &lt;code>30s&lt;/code>, so if a webhook has &lt;code>timeoutSeconds=30&lt;/code>
the overall request might still fail as there is overhead in communication with the API server and potential other webhooks.
Generally, it&amp;rsquo;s &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#timeouts">best pratice&lt;/a> to specify low timeouts in WebhookConfigs.
Also, it&amp;rsquo;s &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#avoiding-operating-on-the-kube-system-namespace">best practice&lt;/a>
to exclude the &lt;code>kube-system&lt;/code> namespace from webhooks to avoid blocking critical operations on system components of the cluster.
Shoot owners can do so by adding a &lt;code>namespaceSelector&lt;/code> similar to this one to their webhook configurations:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">namespaceSelector:
matchExpressions:
- key: gardener.cloud/purpose
operator: NotIn
values:
- kube-system
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the Shoot still has webhooks with either &lt;code>failurePolicy={Fail,nil}&lt;/code> or &lt;code>failurePolicy=Ignore &amp;amp;&amp;amp; timeoutSeconds&amp;gt;15&lt;/code> that act on &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/operation/botanist/matchers/matcher.go#L60">critical resources&lt;/a> in the &lt;code>kube-system&lt;/code> namespace, Gardener will set the &lt;code>HibernationPossible&lt;/code> to &lt;code>False&lt;/code> indicating, that the Shoot can probably not be woken up again after hibernation without manual intervention of the Gardener Operator.
&lt;code>gardener-apiserver&lt;/code> will prevent any Shoot with the &lt;code>HibernationPossible&lt;/code> constraint set to &lt;code>False&lt;/code> from being hibernated, that is via manual hibernation as well as scheduled hibernation.&lt;/p>
&lt;p>&lt;strong>&lt;code>MaintenancePreconditionsSatisfied&lt;/code>&lt;/strong>:&lt;/p>
&lt;p>This constraint indicates whether all preconditions for a safe maintenance operation are satisfied (see also &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_maintenance/">this document&lt;/a> for more information about what happens during a shoot maintenance).
As of today, the same checks as in the &lt;code>HibernationPossible&lt;/code> constraint are being performed (user-deployed webhooks that might interfere with potential rolling updates of shoot worker nodes).
There is no further action being performed on this constraint&amp;rsquo;s status (maintenance is still being performed).
It is meant to make the user aware of potential problems that might occur due to his configurations.&lt;/p>
&lt;h3 id="last-operation">Last Operation&lt;/h3>
&lt;p>The Shoot status holds information about the last operation that is performed on the Shoot. The last operation field reflects overall progress and the tasks that are currently being executed. Allowed operation types are &lt;code>Create&lt;/code>, &lt;code>Reconcile&lt;/code>, &lt;code>Delete&lt;/code>, &lt;code>Migrate&lt;/code> and &lt;code>Restore&lt;/code>. Allowed operation states are &lt;code>Processing&lt;/code>, &lt;code>Succeeded&lt;/code>, &lt;code>Error&lt;/code>, &lt;code>Failed&lt;/code>, &lt;code>Pending&lt;/code> and &lt;code>Aborted&lt;/code>. An operation in &lt;code>Error&lt;/code> state is an operation that will be retried for a configurable amount of time (&lt;code>controllers.shoot.retryDuration&lt;/code> field in &lt;code>GardenletConfiguration&lt;/code>, defaults to &lt;code>12h&lt;/code>). If the operation cannot complete successfully for the configured retry duration, it will be marked as &lt;code>Failed&lt;/code>. An operation in &lt;code>Failed&lt;/code> state is an operation that won&amp;rsquo;t be retried automatically (to retry such an operation, see &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_operations/#retry-failed-operation">Retry failed operation&lt;/a>).&lt;/p>
&lt;h3 id="last-errors">Last Errors&lt;/h3>
&lt;p>The Shoot status also contains information about the last occurred error(s) (if any) during an operation. A &lt;a href="https://gardener.cloud/docs/gardener/api-reference/core/#lasterror">LastError&lt;/a> consists of identifier of the task returned error, human-readable message of the error and error codes (if any) associated with the error.&lt;/p>
&lt;h3 id="error-codes">Error Codes&lt;/h3>
&lt;p>Known error codes are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ERR_INFRA_UNAUTHENTICATED&lt;/code> - indicates that the last error occurred due to the client request not being completed because it lacks valid authentication credentials for the requested resource. It is classified as a non-retryable error code.&lt;/li>
&lt;li>&lt;code>ERR_INFRA_UNAUTHORIZED&lt;/code> - indicates that the last error occurred due to the server understanding the request but refusing to authorize it. It is classified as a non-retryable error code.&lt;/li>
&lt;li>&lt;code>ERR_INFRA_QUOTA_EXCEEDED&lt;/code> - indicates that the last error occurred due to infrastructure quota limits. It is classified as a non-retryable error code.&lt;/li>
&lt;li>&lt;code>ERR_INFRA_RATE_LIMITS_EXCEEDED&lt;/code> - indicates that the last error occurred due to exceeded infrastructure request rate limits.&lt;/li>
&lt;li>&lt;code>ERR_INFRA_DEPENDENCIES&lt;/code> - indicates that the last error occurred due to dependent objects on the infrastructure level. It is classified as a non-retryable error code.&lt;/li>
&lt;li>&lt;code>ERR_RETRYABLE_INFRA_DEPENDENCIES&lt;/code> - indicates that the last error occurred due to dependent objects on the infrastructure level, but the operation should be retried.&lt;/li>
&lt;li>&lt;code>ERR_INFRA_RESOURCES_DEPLETED&lt;/code> - indicates that the last error occurred due to depleted resource in the infrastructure.&lt;/li>
&lt;li>&lt;code>ERR_CLEANUP_CLUSTER_RESOURCES&lt;/code> - indicates that the last error occurred due to resources in the cluster that are stuck in deletion.&lt;/li>
&lt;li>&lt;code>ERR_CONFIGURATION_PROBLEM&lt;/code> - indicates that the last error occurred due to a configuration problem. It is classified as a non-retryable error code.&lt;/li>
&lt;li>&lt;code>ERR_RETRYABLE_CONFIGURATION_PROBLEM&lt;/code> - indicates that the last error occurred due to a retryable configuration problem. &amp;ldquo;Retryable&amp;rdquo; means that the occurred error is likely to be resolved in a ungraceful manner after given period of time.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Shoot Updates</title><link>https://gardener.cloud/docs/gardener/usage/shoot_updates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shoot_updates/</guid><description>
&lt;h1 id="shoot-updates-and-upgrades">Shoot Updates and Upgrades&lt;/h1>
&lt;p>This document describes what happens during shoot updates (changes incorporated in a newly deployed Gardener version) and during shoot upgrades (changes for version controllable by end-users).&lt;/p>
&lt;h2 id="updates">Updates&lt;/h2>
&lt;p>Updates to all aspects of the shoot cluster happen when the gardenlet reconciles the &lt;code>Shoot&lt;/code> resource.&lt;/p>
&lt;h3 id="when-are-reconciliations-triggered">When are Reconciliations Triggered&lt;/h3>
&lt;p>Generally, when you change the specification of your &lt;code>Shoot&lt;/code> the reconciliation will start immediately, potentially updating your cluster.
Please note that you can also confine the reconciliation triggered due to your specification updates to the cluster&amp;rsquo;s maintenance time window. Please find more information &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_maintenance/#confine-specification-changesupdates-roll-out">here&lt;/a>.&lt;/p>
&lt;p>You can also annotate your shoot with special operation annotations (see &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_operations/">this document&lt;/a>) which will cause the reconciliation to start due to your actions.&lt;/p>
&lt;p>There is also an automatic reconciliation by Gardener.
The period, i.e., how often it is performed, depends on the configuration of the Gardener administrators/operators.
In some Gardener installations the operators might enable &amp;ldquo;reconciliation in maintenance time window only&amp;rdquo; (&lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_maintenance/#cluster-reconciliation">more information&lt;/a>) which will result in at least one reconciliation during the time configured in the &lt;code>Shoot&lt;/code>&amp;rsquo;s &lt;code>.spec.maintenance.timeWindow&lt;/code> field.&lt;/p>
&lt;h3 id="which-updates-are-applied">Which Updates are Applied&lt;/h3>
&lt;p>As end-users can only control the &lt;code>Shoot&lt;/code> resource&amp;rsquo;s specification but not the used Gardener version, they don&amp;rsquo;t have any influence on which of the updates are rolled out (other than those settings configurable in the &lt;code>Shoot&lt;/code>).
A Gardener operator can deploy a new Gardener version at any point in time.
Any subsequent reconciliation of &lt;code>Shoot&lt;/code>s will update them by rolling out the changes incorporated in this new Gardener version.&lt;/p>
&lt;p>Some examples for such shoot updates are:&lt;/p>
&lt;ul>
&lt;li>Add a new/remove an old component to/from the shoot&amp;rsquo;s control plane running in the seed, or to/from the shoot&amp;rsquo;s system components running on the worker nodes.&lt;/li>
&lt;li>Change the configuration of an existing control plane/system component.&lt;/li>
&lt;li>Restart of existing control plane/system components (this might result in a short unavailability of the Kubernetes API server, e.g., when etcd or a kube-apiserver itself is being restarted)&lt;/li>
&lt;/ul>
&lt;h3 id="behavioural-changes">Behavioural Changes&lt;/h3>
&lt;p>Generally, some of such updates (e.g., configuration changes) could theoretically result in different behaviour of controllers.
If such changes would be backwards-incompatible then we usually follow one of those approaches (depends on the concrete change):&lt;/p>
&lt;ul>
&lt;li>Only apply the change for new clusters.&lt;/li>
&lt;li>Expose a new field in the &lt;code>Shoot&lt;/code> resource that lets users control this changed behaviour to enable it at a convenient point in time.&lt;/li>
&lt;li>Put the change behind an alpha feature gate (disabled by default) in the gardenlet (only controllable by Gardener operators) which will be promoted to beta (enabled by default) in subsequent releases (in this case, end-users have no influence on when the behaviour changes - Gardener operators should inform their end-users and provide clear timelines when they will enable the feature gate).&lt;/li>
&lt;/ul>
&lt;h2 id="upgrades">Upgrades&lt;/h2>
&lt;p>We consider shoot upgrades to change either the&lt;/p>
&lt;ul>
&lt;li>Kubernetes version (&lt;code>.spec.kubernetes.version&lt;/code>)&lt;/li>
&lt;li>Kubernetes version of the worker pool if specified (&lt;code>.spec.provider.workers[].kubernetes.version&lt;/code>)&lt;/li>
&lt;li>Machine image version of at least one worker pool (&lt;code>.spec.provider.workers[].machine.image.version&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>Generally, an upgrade is also performed through a reconciliation of the &lt;code>Shoot&lt;/code> resource, i.e., the same concepts like for &lt;a href="#updates">shoot updates&lt;/a> apply.
If an end-user triggers an upgrade (e.g., by changing the Kubernetes version) after a new Gardener version was deployed but before the shoot was reconciled again, then this upgrade might incorporate the changes delivered with this new Gardener version.&lt;/p>
&lt;h3 id="in-place-vs-rolling-updates">In-Place vs. Rolling Updates&lt;/h3>
&lt;p>If the Kubernetes patch version is changed then the upgrade happens in-place.
This means that the shoot worker nodes remain untouched and only the &lt;code>kubelet&lt;/code> process restarts with the new Kubernetes version binary.
The same applies for configuration changes of the kubelet.&lt;/p>
&lt;p>If the Kubernetes minor version is changed then the upgrade is done in a &amp;ldquo;rolling update&amp;rdquo; fashion, similar to how pods in Kubernetes are updated (when backed by a &lt;code>Deployment&lt;/code>).
The worker nodes will be terminated one after another and replaced by new machines.
The existing workload is gracefully drained and evicted from the old worker nodes to new worker nodes, respecting the configured &lt;code>PodDisruptionBudget&lt;/code>s (see &lt;a href="https://kubernetes.io/docs/tasks/run-application/configure-pdb/">Kubernetes documentation&lt;/a>).&lt;/p>
&lt;h4 id="customize-rolling-update-behaviour-of-shoot-worker-nodes">Customize Rolling Update Behaviour of Shoot Worker Nodes&lt;/h4>
&lt;p>The &lt;code>.spec.provider.workers[]&lt;/code> list exposes two fields that you might configure based on your workload&amp;rsquo;s needs: &lt;code>maxSurge&lt;/code> and &lt;code>maxUnavailable&lt;/code>.
The same concepts &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#rolling-update-deployment">like in Kubernetes&lt;/a> apply.
Additionally, you might customize how the machine-controller-manager (abbrev.: MCM; the component instrumenting this rolling update) is behaving. You can configure the following fields in &lt;code>.spec.provider.worker[].machineControllerManager&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>machineDrainTimeout&lt;/code>: Timeout (in duration) used while draining of machine before deletion, beyond which MCM forcefully deletes machine (default: &lt;code>10m&lt;/code>).&lt;/li>
&lt;li>&lt;code>machineHealthTimeout&lt;/code>: Timeout (in duration) used while re-joining (in case of temporary health issues) of machine before it is declared as failed (default: &lt;code>10m&lt;/code>).&lt;/li>
&lt;li>&lt;code>machineCreationTimeout&lt;/code>: Timeout (in duration) used while joining (during creation) of machine before it is declared as failed (default: &lt;code>10m&lt;/code>).&lt;/li>
&lt;li>&lt;code>maxEvictRetries&lt;/code>: Maximum number of times evicts would be attempted on a pod before it is forcibly deleted during draining of a machine (default: &lt;code>10&lt;/code>).&lt;/li>
&lt;li>&lt;code>nodeConditions&lt;/code>: List of case-sensitive node-conditions which will change a machine to a &lt;code>Failed&lt;/code> state after the &lt;code>machineHealthTimeout&lt;/code> duration. It may further be replaced with a new machine if the machine is backed by a machine-set object (defaults: &lt;code>KernelDeadlock&lt;/code>, &lt;code>ReadonlyFilesystem&lt;/code> , &lt;code>DiskPressure&lt;/code>).&lt;/li>
&lt;/ul>
&lt;h4 id="rolling-update-triggers">Rolling Update Triggers&lt;/h4>
&lt;p>Apart from the above mentioned triggers, a rolling update of the shoot worker nodes is also triggered for some changes to your worker pool specification (&lt;code>.spec.provider.workers[]&lt;/code>, even if you don&amp;rsquo;t change the Kubernetes or machine image version).
The complete list of fields that trigger a rolling update:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.spec.kubernetes.version&lt;/code> (except for patch version changes)&lt;/li>
&lt;li>&lt;code>.spec.provider.workers[].machine.image.name&lt;/code>&lt;/li>
&lt;li>&lt;code>.spec.provider.workers[].machine.image.version&lt;/code>&lt;/li>
&lt;li>&lt;code>.spec.provider.workers[].machine.type&lt;/code>&lt;/li>
&lt;li>&lt;code>.spec.provider.workers[].volume.type&lt;/code>&lt;/li>
&lt;li>&lt;code>.spec.provider.workers[].volume.size&lt;/code>&lt;/li>
&lt;li>&lt;code>.spec.provider.workers[].providerConfig&lt;/code>&lt;/li>
&lt;li>&lt;code>.spec.provider.workers[].cri.name&lt;/code>&lt;/li>
&lt;li>&lt;code>.spec.provider.workers[].kubernetes.version&lt;/code> (except for patch version changes)&lt;/li>
&lt;/ul>
&lt;p>Generally, the provider extension controllers might have additional constraints for changes leading to rolling updates, so please consult the respective documentation as well.&lt;/p>
&lt;h2 id="related-documentation">Related Documentation&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_operations/">Shoot Operations&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_maintenance/">Shoot Maintenance&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_maintenance/#confine-specification-changesupdates-roll-out">Confine Specification Changes/Updates Roll Out To Maintenance Time Window&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Shoot Versions</title><link>https://gardener.cloud/docs/gardener/usage/shoot_versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shoot_versions/</guid><description>
&lt;h1 id="shoot-kubernetes-and-operating-system-versioning-in-gardener">Shoot Kubernetes and Operating System Versioning in Gardener&lt;/h1>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>On the one hand-side, Gardener is responsible for managing the Kubernetes and the Operating System (OS) versions of its Shoot clusters.
On the other hand-side, Gardener needs to be configured and updated based on the availability and support of the Kubernetes and Operating System version it provides.
For instance, the Kubernetes community releases &lt;strong>minor&lt;/strong> versions roughly every three months and usually maintains &lt;strong>three minor&lt;/strong> versions (the current and the last two) with bug fixes and security updates.
Patch releases are done more frequently.&lt;/p>
&lt;p>When using the term &lt;code>Machine image&lt;/code> in the following, we refer to the OS version that comes with the machine image of the node/worker pool of a Gardener Shoot cluster.
As such we are not referring to the &lt;code>CloudProvider&lt;/code> specific machine image like the &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html">&lt;code>AMI&lt;/code>&lt;/a> for AWS.
For more information how Gardener maps machine image versions to &lt;code>CloudProvider&lt;/code> specific machine images, take a look at the individual gardener extension providers
such as the &lt;a href="https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/docs/usage-as-operator/">provider for AWS&lt;/a>.&lt;/p>
&lt;p>Gardener should be configured accordingly to reflect the &amp;ldquo;logical state&amp;rdquo; of a version.
It should be possible to define the Kubernetes or Machine image versions that still receive bug fixes and security patches, and also vice-versa to define the version that are out-of-maintenance and are potentially vulnerable.
Moreover, this allows Gardener to &amp;ldquo;understand&amp;rdquo; the current state of a version and act upon it (more information in the following sections).&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;strong>As a Gardener operator&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>I can classify a version based on it&amp;rsquo;s logical state (&lt;code>preview&lt;/code>, &lt;code>supported&lt;/code>, &lt;code>deprecated&lt;/code> and &lt;code>expired&lt;/code> see &lt;a href="#version-classifications">Version Classification&lt;/a>).&lt;/li>
&lt;li>I can define which Machine image and Kubernetes versions are eligible for the auto update of clusters during the maintenance time.&lt;/li>
&lt;li>I can disallow the creation of clusters having a certain version (think of severe security issues).&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>As an end-user/Shoot owner of Gardener&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>I can get information about which Kubernetes and Machine image versions exist and their classification.&lt;/li>
&lt;li>I can determine the time when my Shoot clusters Machine image and Kubernetes version will be forcefully updated to the next patch or minor version (in case the cluster is running a deprecated version with an expiration date).&lt;/li>
&lt;li>I can get this information via API from the &lt;code>CloudProfile&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="version-classifications">Version Classifications&lt;/h2>
&lt;p>Administrators can classify versions into four distinct &amp;ldquo;logical states&amp;rdquo;: &lt;code>preview&lt;/code>, &lt;code>supported&lt;/code>, &lt;code>deprecated&lt;/code> and &lt;code>expired&lt;/code>.
The version classification serves as a &amp;ldquo;point-of-reference&amp;rdquo; for end-users and also has implications during shoot creation and the maintenance time.&lt;/p>
&lt;p>If a version is unclassified, Gardener cannot make those decision based on the &amp;ldquo;logical state&amp;rdquo;.
Nevertheless, Gardener can operate without version classifications and can be added at any time to the Kubernetes and machine image versions in the &lt;code>CloudProfile&lt;/code>.&lt;/p>
&lt;p>As a best practice, versions usually start with the classification &lt;code>preview&lt;/code>, then are promoted to &lt;code>supported&lt;/code>, eventually &lt;code>deprecated&lt;/code> and finally &lt;code>expired&lt;/code>.
This information is programmatically available in the &lt;code>CloudProfiles&lt;/code> of the Garden cluster.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>preview:&lt;/strong> A &lt;code>preview&lt;/code> version is a new version that has not yet undergone thorough testing, possibly a new release, and needs time to be validated.
Due to its short early age, there is a higher probability of undiscovered issues and is therefore not yet recommended for production usage.
A Shoot does not update (neither &lt;code>auto-update&lt;/code> or &lt;code>force-update&lt;/code>) to a &lt;code>preview&lt;/code> version during the maintenance time.
Also &lt;code>preview&lt;/code> versions are not considered for the defaulting to the highest available version when deliberately omitting the patch version during Shoot creation.
Typically, after a fresh release of a new Kubernetes (e.g. v1.23.0) or Machine image version (e.g. coreos-2023.5), the operator tags it as &lt;code>preview&lt;/code> until he has gained sufficient experience and regards this version to be reliable.
After the operator gained sufficient trust, the version can be manually promoted to &lt;code>supported&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>supported:&lt;/strong> A &lt;code>supported&lt;/code> version is the recommended version for new and existing Shoot clusters. New Shoot clusters should use and existing clusters should update to this version.
Typically for Kubernetes versions, the latest Kubernetes patch versions of the actual (if not still in &lt;code>preview&lt;/code>) and the last 3 minor Kubernetes versions are maintained by the community. An operator could define these versions as being &lt;code>supported&lt;/code> (e.g. v1.22.1, v1.21.4, v1.20.9 and v1.19.12).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>deprecated:&lt;/strong> A &lt;code>deprecated&lt;/code> version is a version that approaches the end of its lifecycle and can contain issues which are probably resolved in a supported version.
New Shoots should not use this version any more.
Existing Shoots will be updated to a newer version if &lt;code>auto-update&lt;/code> is enabled (&lt;code>.spec.maintenance.autoUpdate.kubernetesVersion&lt;/code> for Kubernetes version &lt;code>auto-update&lt;/code>, or &lt;code>.spec.maintenance.autoUpdate.machineImageVersion&lt;/code> for machine machine image version &lt;code>auto-update&lt;/code>).
Using automatic upgrades, however, does not guarantee that a Shoot runs a non-deprecated version, as the latest version (overall or of the minor version) can be deprecated as well.
Deprecated versions &lt;strong>should&lt;/strong> have an expiration date set for eventual expiration.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>expired:&lt;/strong> An &lt;code>expired&lt;/code> versions has an expiration date (based on the &lt;a href="https://golang.org/src/time/time.go">Golang time package&lt;/a>) in the past.
New clusters with that version cannot be created and existing clusters are forcefully migrated to a higher version during the maintenance time.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Below is an example how the relevant section of the &lt;code>CloudProfile&lt;/code> might look like:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: CloudProfile
metadata:
name: alicloud
spec:
kubernetes:
versions:
- classification: supported
version: 1.17.1
- classification: deprecated
expirationDate: &lt;span style="color:#a31515">&amp;#34;2020-07-24T16:13:26Z&amp;#34;&lt;/span>
version: 1.17.0
- classification: preview
version: 1.16.6
- classification: supported
version: 1.16.5
- classification: deprecated
expirationDate: &lt;span style="color:#a31515">&amp;#34;2020-04-25T09:30:40Z&amp;#34;&lt;/span>
version: 1.16.4
- classification: supported
version: 1.15.7
- classification: deprecated
expirationDate: &lt;span style="color:#a31515">&amp;#34;2020-06-09T14:01:39Z&amp;#34;&lt;/span>
version: 1.15.6
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="version-requirements-kubernetes-and-machine-image">Version Requirements (Kubernetes and Machine image)&lt;/h2>
&lt;p>The Gardener API server enforces the following requirements for versions:&lt;/p>
&lt;h3 id="deletion-of-a-version">Deletion of a version&lt;/h3>
&lt;ul>
&lt;li>A version that is in use by a Shoot cannot be deleted from the &lt;code>CloudProfile&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="adding-a-version">Adding a version&lt;/h3>
&lt;ul>
&lt;li>A version must not have an expiration date in the past.&lt;/li>
&lt;li>There can be only one &lt;code>supported&lt;/code> version per minor version.&lt;/li>
&lt;li>The latest Kubernetes version cannot have an expiration date.&lt;/li>
&lt;li>The latest version for a machine image can have an expiration date. [*]&lt;/li>
&lt;/ul>
&lt;p>&lt;sub>[*] Useful for cases in which support for given machine image needs to be deprecated and removed (for example the machine image reaches end of life).&lt;/sub>&lt;/p>
&lt;h2 id="forceful-migration-of-expired-versions">Forceful migration of expired versions&lt;/h2>
&lt;p>If a Shoot is running a version after its expiration date has passed, it will be forcefully migrated during its maintenance time.
This happens &lt;strong>even if the owner has opted out of automatic cluster updates!&lt;/strong>&lt;/p>
&lt;p>For &lt;strong>Machine images&lt;/strong>, the Shoots worker pools will be updated to the latest &lt;code>non-preview&lt;/code> version of the pools respective image.&lt;/p>
&lt;p>For &lt;strong>Kubernetes versions&lt;/strong>, the forceful update picks the latest &lt;code>non-preview&lt;/code> patch version of the current minor version.&lt;/p>
&lt;p>If the cluster is already on the latest patch version and the latest patch version is also expired,
it will continue with the latest patch version of the &lt;strong>next consecutive minor Kubernetes version&lt;/strong>, so &lt;strong>it will result in an
update of a minor Kubernetes version!&lt;/strong>&lt;/p>
&lt;p>Please note, that multiple consecutive minor version upgrades are possible.
This can occur if the Shoot is updated to a version that in turn is also &lt;code>expired&lt;/code>.
In this case, the version is again upgraded in the &lt;strong>next&lt;/strong> maintenance time.&lt;/p>
&lt;p>&lt;strong>Depending on the circumstances described above, it can happen that the cluster receives multiple consecutive minor Kubernetes version updates!&lt;/strong>&lt;/p>
&lt;p>Kubernetes &amp;ldquo;minor version jumps&amp;rdquo; are not allowed - meaning to skip the update to the consecutive minor version and directly update to any version after that.
For instance, the version &lt;code>1.10.x&lt;/code> can only update to a version &lt;code>1.11.x&lt;/code>, not to &lt;code>1.12.x&lt;/code> or any other version.
This is because Kubernetes does not guarantee upgradeability in this case, leading to possibly broken Shoot clusters.
The administrator has to set up the &lt;code>CloudProfile&lt;/code> in such a way, that consecutive Kubernetes minor versions are available.
Otherwise, Shoot clusters will fail to upgrade during the maintenance time.&lt;/p>
&lt;p>Consider the &lt;code>CloudProfile&lt;/code> below with a Shoot using the Kubernetes version &lt;code>1.10.12&lt;/code>.
Even though the version is &lt;code>expired&lt;/code>, due to missing &lt;code>1.11.x&lt;/code> versions, the Gardener Controller Manager cannot upgrade the Shoot&amp;rsquo;s Kubernetes version.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">spec:
kubernetes:
versions:
- version: 1.12.8
- version: 1.12.7
- version: 1.10.12
expirationDate: &lt;span style="color:#a31515">&amp;#34;&amp;lt;expiration date in the past&amp;gt;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>CloudProfile&lt;/code> must specify versions &lt;code>1.11.x&lt;/code> of the &lt;strong>consecutive&lt;/strong> minor version.
Configuring the &lt;code>CloudProfile&lt;/code> in such a way, the Shoot&amp;rsquo;s Kubernetes version will be upgraded to version &lt;code>1.11.10&lt;/code> in the next maintenance time.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">spec:
kubernetes:
versions:
- version: 1.12.8
- version: 1.11.10
- version: 1.11.09
- version: 1.10.12
expirationDate: &lt;span style="color:#a31515">&amp;#34;&amp;lt;expiration date in the past&amp;gt;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="related-documentation">Related Documentation&lt;/h2>
&lt;p>You might want to read about the &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_updates/">Shoot Updates and Upgrades&lt;/a> procedures to get to know the effects of such operations.&lt;/p></description></item><item><title>Docs: Shooted See</title><link>https://gardener.cloud/docs/gardener/usage/shooted_seed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/shooted_seed/</guid><description>
&lt;h1 id="create-shooted-seed-cluster">Create Shooted Seed Cluster&lt;/h1>
&lt;p>Create managed seed (aka &amp;ldquo;shooted seed&amp;rdquo;) cluster with the &lt;code>shoot.gardener.cloud/use-as-seed&lt;/code> annotation.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Starting with Gardener v1.18, the &lt;code>shoot.gardener.cloud/use-as-seed&lt;/code> annotation is deprecated.
It still works as described here, however behind the scenes a &lt;code>ManagedSeed&lt;/code> resource is created and reconciled.
It is strongly recommended to use such resources directly to register shoots as seeds, as described in &lt;a href="https://gardener.cloud/docs/gardener/usage/managed_seed/">Register Shoot as Seed&lt;/a>. For instructions how to migrate existing seeds managed via the &lt;code>use-as-seed&lt;/code> annotation, see &lt;a href="https://gardener.cloud/docs/gardener/usage/managed_seed/#migrating-from-the-use-as-seed-annotation-to-managedseeds">Migrating from the &lt;code>use-as-seed&lt;/code> Annotation to &lt;code>ManagedSeeds&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="procedure">Procedure&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Add the following project labels to the &lt;code>garden&lt;/code> namespace if they don&amp;rsquo;t exist yet:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">labels:
gardener.cloud/role: project
project.gardener.cloud/name: garden
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>The annotation works only for shoot clusters created in the &lt;code>garden&lt;/code> namespace. Create a project for the &lt;code>garden&lt;/code> namespace using &lt;code>kubectl&lt;/code> if you don&amp;rsquo;t have one yet.&lt;/p>
&lt;blockquote>
&lt;p>⚠️&lt;br>Don&amp;rsquo;t use the Gardener Dashboard as it would add a &lt;code>garden&lt;/code> prefix for the namespace.&lt;/p>
&lt;/blockquote>
&lt;p>Example: &lt;a href="https://github.com/gardener/gardener/blob/master/example/05-project-dev.yaml">/example/05-project-dev.yaml&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: Project
metadata:
name: garden
spec:
owner:
...
namespace: garden
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Create the shoot cluster.&lt;/p>
&lt;p>Set the following annotation on the &lt;code>Shoot&lt;/code> to mark it as a shooted seed cluster.&lt;/p>
&lt;p>Example (full example: &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-shoot.yaml">/example/90-shoot.yaml&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml"> annotations:
shoot.gardener.cloud/use-as-seed: &amp;gt;-&lt;span style="color:#a31515">
&lt;/span>&lt;span style="color:#a31515"> &lt;/span> &lt;span style="color:#00f">true&lt;/span>,shootDefaults.pods=100.96.0.0/11,shootDefaults.services=100.64.0.0/13,disable-capacity-reservation,with-secret-ref
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;ul>
&lt;li>The networks from the seed cluster and its shoot clusters have to be different. To create shoot clusters with the dashboard you have to set a different worker CIDR in the shooted seed cluster (&lt;code>spec.provider.infrastructureConfig&lt;/code> and &lt;code>spec.networking.nodes&lt;/code>) and set the &lt;code>shootDefaults&lt;/code> in the &lt;code>shoot.gardener.cloud/use-as-seed&lt;/code> annotation to different CIDRs.&lt;/li>
&lt;li>Optional: The shoot clusters to be created can use the same network as the garden cluster. To use the same network, set different CIDRs for pods and services in the shooted seed cluster (&lt;code>spec.networking.pods&lt;/code> and &lt;code>spec.networking.services&lt;/code>).&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h2 id="configuration-options-for-the-seed-cluster">Configuration Options for the Seed Cluster&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Option&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>true&lt;/code>&lt;/td>
&lt;td>Registers the cluster as a seed cluster. Automatically deploys the gardenlet into the shoot cluster, unless specified otherwise (e.g. setting the &lt;code>no-gardenlet&lt;/code> flag).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>no-gardenlet&lt;/code>&lt;/td>
&lt;td>Prevents the automatic deployment of the gardenlet into the shoot cluster. Instead, the &lt;code>Seed&lt;/code> object will be created with the assumption that another gardenlet will be responsible for managing it (according to its &lt;code>seedConfig&lt;/code> configuration).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>disable-capacity-reservation&lt;/code>&lt;/td>
&lt;td>Set &lt;code>spec.settings.excessCapacity.enabled&lt;/code> in the seed cluster to false (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">/example/50-seed.yaml&lt;/a>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>invisible&lt;/code>&lt;/td>
&lt;td>Set &lt;code>spec.settings.scheduling.visible&lt;/code> in the seed cluster to false (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">/example/50-seed.yaml&lt;/a>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>visible&lt;/code>&lt;/td>
&lt;td>Set &lt;code>spec.settings.scheduling.visible&lt;/code> in the seed cluster to true (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">/example/50-seed.yaml&lt;/a>) (&lt;strong>default&lt;/strong>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>disable-dns&lt;/code>&lt;/td>
&lt;td>Set &lt;code>spec.settings.shootDNS.enabled&lt;/code> in the seed cluster to false (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">/example/50-seed.yaml&lt;/a>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>protected&lt;/code>&lt;/td>
&lt;td>Only shoot clusters in the &lt;code>garden&lt;/code> namespace can use this seed cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>unprotected&lt;/code>&lt;/td>
&lt;td>Shoot clusters from all namespaces can use this seed cluster (&lt;strong>default&lt;/strong>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>loadBalancerServices.annotations.*&lt;/code>&lt;/td>
&lt;td>Set &lt;code>spec.settings.loadBalancerServices.annotations&lt;/code> in the seed cluster (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">/example/50-seed.yaml&lt;/a>), e.g &lt;code>loadBalancerServices.annotations.service.beta.kubernetes.io/aws-load-balancer-type=nlb&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>with-secret-ref&lt;/code>&lt;/td>
&lt;td>Creates a secret with the &lt;code>kubeconfig&lt;/code> of the cluster in the &lt;code>garden&lt;/code> namespace in the garden cluster and specifies the &lt;code>.spec.secretRef&lt;/code> in the &lt;code>Seed&lt;/code> object accordingly.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>shootDefaults.pods&lt;/code>&lt;/td>
&lt;td>Default pod network CIDR for shoot clusters created on this seed cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>shootDefaults.services&lt;/code>&lt;/td>
&lt;td>Default service network CIDR for shoot clusters created on this seed cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>minimumVolumeSize&lt;/code>&lt;/td>
&lt;td>Set &lt;code>spec.volume.minimumSize&lt;/code> in the seed cluster (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">/example/50-seed.yaml&lt;/a>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>blockCIDRs&lt;/code>&lt;/td>
&lt;td>Set &lt;code>spec.network.blockCIDRs&lt;/code> seperated by &lt;code>;&lt;/code> (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">/example/50-seed.yaml&lt;/a>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>backup.provider&lt;/code>&lt;/td>
&lt;td>Set &lt;code>spec.backup.provider&lt;/code> in the seed cluster (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">/example/50-seed.yaml&lt;/a>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>backup.region&lt;/code>&lt;/td>
&lt;td>Set &lt;code>spec.backup.region&lt;/code> in the seed cluster (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">/example/50-seed.yaml&lt;/a>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>backup.secretRef.name&lt;/code>&lt;/td>
&lt;td>Set &lt;code>spec.backup.secretRef.name&lt;/code> in the seed cluster (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">/example/50-seed.yaml&lt;/a>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>backup.secretRef.namespace&lt;/code>&lt;/td>
&lt;td>Set &lt;code>spec.backup.secretRef.namespace&lt;/code> in the seed cluster (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">/example/50-seed.yaml&lt;/a>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>apiServer.autoscaler.minReplicas&lt;/code>&lt;/td>
&lt;td>Controls the minimum number of &lt;code>kube-apiserver&lt;/code> replicas for the shooted seed cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>apiServer.autoscaler.maxReplicas&lt;/code>&lt;/td>
&lt;td>Controls the maximum number of &lt;code>kube-apiserver&lt;/code> replicas for the shooted seed cluster.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>apiServer.replicas&lt;/code>&lt;/td>
&lt;td>Controls how many &lt;code>kube-apiserver&lt;/code> replicas the shooted seed cluster gets by default.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>use-serviceaccount-bootstrapping&lt;/code>&lt;/td>
&lt;td>States that the gardenlet registers with the garden cluster using a temporary &lt;code>ServiceAccount&lt;/code> instead of a &lt;code>CertificateSigningRequest&lt;/code> (&lt;strong>default&lt;/strong>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>providerConfig.*&lt;/code>&lt;/td>
&lt;td>Sets &lt;code>providerConfig&lt;/code> configuration parameters of the Seed resource. Each parameter is specified via its path, e.g. &lt;code>providerConfig.param1=foo&lt;/code> or &lt;code>providerConfig.sublevel1.sublevel2.param3=bar&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>featureGates.*={true,false}&lt;/code>&lt;/td>
&lt;td>Overwrites the &lt;code>.featureGates&lt;/code> in the gardenlet configuration (only applicable when the &lt;code>no-gardenlet&lt;/code> setting is &lt;strong>not&lt;/strong> set), e.g. &lt;code>featureGates.APIServerSNI=true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>resources.capacity.*&lt;/code>&lt;/td>
&lt;td>Overwrites the &lt;code>resources.capacity&lt;/code> field in the gardenlet configuration (only applicable when the &lt;code>no-gardenlet&lt;/code> setting is &lt;strong>not&lt;/strong> set), e.g. &lt;code>resources.capacity.shoots=250&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>resources.reserved.*&lt;/code>&lt;/td>
&lt;td>Overwrites the &lt;code>resources.reserved&lt;/code> field in the gardenlet configuration (only applicable when the &lt;code>no-gardenlet&lt;/code> setting is &lt;strong>not&lt;/strong> set), e.g. &lt;code>resources.reserved.foo=42&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ingress.controller.kind&lt;/code>&lt;/td>
&lt;td>Activates and specifies the kind of the managed ingress controller in the seed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ingress.controller.providerConfig.*&lt;/code>&lt;/td>
&lt;td>Sets provider specific configuration parameters for the managed ingress controller. Each parameter is specified via its path, e.g. &lt;code>ingress.controller.providerConfig.param1=foo&lt;/code> or &lt;code>ingress.controller.providerConfig.sublevel1.sublevel2.param3=bar&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Supported K8s Versions</title><link>https://gardener.cloud/docs/gardener/usage/supported_k8s_versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/supported_k8s_versions/</guid><description>
&lt;h1 id="supported-kubernetes-versions">Supported Kubernetes Versions&lt;/h1>
&lt;p>Currently, the Gardener supports the following Kubernetes versions:&lt;/p>
&lt;h2 id="garden-cluster-version">Garden cluster version&lt;/h2>
&lt;p>⚠️ The minimum version of the garden cluster that can be used to run Gardener is &lt;strong>&lt;code>1.17.x&lt;/code>&lt;/strong>.&lt;/p>
&lt;h2 id="seed-cluster-versions">Seed cluster versions&lt;/h2>
&lt;p>⚠️ The minimum version of a seed cluster that can be connected to Gardener is &lt;strong>&lt;code>1.18.x&lt;/code>&lt;/strong>.
Kubernetes &lt;code>1.18&lt;/code> sets the common ground for several Gardener features, e.g. &lt;code>SeedKubeScheduler&lt;/code> (&lt;a href="https://gardener.cloud/docs/gardener/deployment/feature_gates/#list-of-feature-gates">ref&lt;/a>).
It also enables the Gardener code base to leverage more advanced Kubernetes features, like &lt;a href="https://kubernetes.io/docs/reference/using-api/server-side-apply/">Server-Side Apply&lt;/a>, in the future.&lt;/p>
&lt;h2 id="shoot-cluster-versions">Shoot cluster versions&lt;/h2>
&lt;p>Gardener itself is capable of spinning up clusters with Kubernetes versions &lt;strong>&lt;code>1.17&lt;/code>&lt;/strong> up to &lt;strong>&lt;code>1.23&lt;/code>&lt;/strong>.
However, the concrete versions that can be used for shoot clusters depend on the installed provider extension.
Consequently, please consult the documentation of your provider extension to see which Kubernetes versions are supported for shoot clusters.&lt;/p>
&lt;blockquote>
&lt;p>👨🏼‍💻 Developers note: &lt;a href="https://gardener.cloud/docs/gardener/development/new-kubernetes-version/">This document&lt;/a> explains what needs to be done in order to add support for a new Kubernetes version.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Tolerations</title><link>https://gardener.cloud/docs/gardener/usage/tolerations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/tolerations/</guid><description>
&lt;h1 id="taints-and-tolerations-for-seeds-and-shoots">Taints and Tolerations for &lt;code>Seed&lt;/code>s and &lt;code>Shoot&lt;/code>s&lt;/h1>
&lt;p>Similar to &lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/">taints and tolerations&lt;/a> for &lt;code>Node&lt;/code>s and &lt;code>Pod&lt;/code>s in Kubernetes, the &lt;code>Seed&lt;/code> resource supports specifying taints (&lt;code>.spec.taints&lt;/code>, see &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml#L48-L55">this example&lt;/a>) while the &lt;code>Shoot&lt;/code> resource supports specifying tolerations (&lt;code>.spec.tolerations&lt;/code>, see &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-shoot.yaml#L268-L269">this example&lt;/a>).
The feature is used to control scheduling to seeds as well as decisions whether a shoot can use a certain seed.&lt;/p>
&lt;p>Compared to Kubernetes, Gardener&amp;rsquo;s taints and tolerations are very much down-stripped right now and have some behavioral differences.
Please read the following explanations carefully if you plan to use it.&lt;/p>
&lt;h2 id="scheduling">Scheduling&lt;/h2>
&lt;p>When scheduling a new shoot then the gardener-scheduler will filter all seed candidates whose taints are not tolerated by the shoot.
As Gardener&amp;rsquo;s taints/tolerations don&amp;rsquo;t support &lt;code>effect&lt;/code>s yet you can compare this behaviour with using a &lt;code>NoSchedule&lt;/code> effect taint in Kubernetes.&lt;/p>
&lt;p>Be reminded that taints/tolerations are no means to define any affinity or selection for seeds - please use &lt;code>.spec.seedSelector&lt;/code> in the &lt;code>Shoot&lt;/code> to state such desires.&lt;/p>
&lt;p>⚠️ Please note that - unlike how it&amp;rsquo;s implemented in Kubernetes - a certain seed cluster &lt;strong>may&lt;/strong> only be used when the shoot tolerates &lt;strong>all&lt;/strong> the seed&amp;rsquo;s taints.
This means that specifying &lt;code>.spec.seedName&lt;/code> for a seed whose taints are not tolerated will make the gardener-apiserver rejecting the request.&lt;/p>
&lt;p>Consequently, the taints/tolerations feature can be used as means to restrict usage of certain seeds.&lt;/p>
&lt;h2 id="toleration-defaults-and-whitelist">Toleration Defaults and Whitelist&lt;/h2>
&lt;p>The &lt;code>Project&lt;/code> resource features a &lt;code>.spec.tolerations&lt;/code> object that may carry &lt;code>defaults&lt;/code> and a &lt;code>whitelist&lt;/code> (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/05-project-dev.yaml#L33-L37">this example&lt;/a>).
The corresponding &lt;code>ShootTolerationRestriction&lt;/code> admission plugin (cf. Kubernetes' &lt;code>PodTolerationRestriction&lt;/code> admission plugin) is responsible for evaluating these settings during creation/update of &lt;code>Shoot&lt;/code>s.&lt;/p>
&lt;h3 id="whitelist">Whitelist&lt;/h3>
&lt;p>If a shoot gets created or updated with tolerations then it is validated that only those tolerations may be used which were added to either a) the &lt;code>Project&lt;/code>&amp;rsquo;s &lt;code>.spec.tolerations.whitelist&lt;/code>, or b) to the global whitelist in the &lt;code>ShootTolerationRestriction&lt;/code>&amp;rsquo;s admission config (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/20-admissionconfig.yaml#L7-L14">this example&lt;/a>).&lt;/p>
&lt;p>⚠️ Please note that the tolerations whitelist of &lt;code>Project&lt;/code>s can only be changed if the user trying to change it is bound to the &lt;code>modify-spec-tolerations-whitelist&lt;/code> custom RBAC role, e.g. via the following &lt;code>ClusterRole&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
name: full-project-modification-access
rules:
- apiGroups:
- core.gardener.cloud
resources:
- projects
verbs:
- create
- patch
- update
- modify-spec-tolerations-whitelist
- delete
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="defaults">Defaults&lt;/h3>
&lt;p>If a shoot gets created then the default tolerations specified in both the &lt;code>Project&lt;/code>&amp;rsquo;s &lt;code>.spec.tolerations.defaults&lt;/code> and global default list in the &lt;code>ShootTolerationRestriction&lt;/code> admission plugin&amp;rsquo;s configuration will be added to the &lt;code>.spec.tolerations&lt;/code> of the &lt;code>Shoot&lt;/code> (unless it already specifies a certain key).&lt;/p></description></item><item><title>Docs: Trouble Shooting Guide</title><link>https://gardener.cloud/docs/gardener/usage/trouble_shooting_guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/trouble_shooting_guide/</guid><description>
&lt;h1 id="trouble-shooting-guide">Trouble Shooting Guide&lt;/h1>
&lt;h2 id="are-there-really-issue-that-cannot-be-fixed-o">Are there really issue that cannot be fixed :O?&lt;/h2>
&lt;p>Well, of course not :P. With continuous development of Gardener, over the time its architecture and API might have to be changed to reduce complexity and support more features. In this process developers are bound to keep Gardener version backward compatible with last two releases. But maintaining backward compatibility is quite complex and effortful tasks. So, to save short term complex effort, its common practice in open source community to use work around or hacky solutions sometimes. This results in rare issues which are supposed to be resolved by human interaction across upgrades of Gardener version.&lt;/p>
&lt;p>This guide records the issues that are quite possible across upgrade of Gardener version, root cause and the human action required for graceful resolution of issue. For troubleshooting guide of bugs which are not yet fixed, please refer the associated github issue.&lt;/p>
&lt;p>&lt;strong>Note To Maintainers:&lt;/strong> Please use only mention the resolution of issues which are by design. For bugs please report the temporary resolution on github issue create for the bug.&lt;/p>
&lt;h3 id="etcd-main-pod-fails-to-come-up-since-backup-restore-sidecar-is-reporting-revisionconsistencycheckerr">Etcd-Main pod fails to come up, since backup-restore sidecar is reporting RevisionConsistencyCheckErr&lt;/h3>
&lt;h4 id="issue">Issue&lt;/h4>
&lt;ul>
&lt;li>Etcd-main pod goes in &lt;code>CrashLoopBackoff&lt;/code>.&lt;/li>
&lt;li>Etcd-backup-restore sidecar reports validation error with RevisionConsistencyCheckErr.&lt;/li>
&lt;/ul>
&lt;h4 id="environment">Environment&lt;/h4>
&lt;ul>
&lt;li>Gardener version: 0.29.0+&lt;/li>
&lt;/ul>
&lt;h4 id="root-cause">Root Cause&lt;/h4>
&lt;ul>
&lt;li>From version 0.29.0, Gardener uses shared backup bucket for storing etcd backups, replacing old logic of having single bucket per shoot as per &lt;a href="https://gardener.cloud/docs/gardener/proposals/02-backupinfra/">proposal&lt;/a>.&lt;/li>
&lt;li>Since there are very rare chances that etcd data directory will get corrupt, while doing this migration, to avoid etcd down time and implementation effort, we decided to switch directly from old bucket to new shared bucket without migrating old snapshot from old bucket to new bucket.&lt;/li>
&lt;li>In this case just for safety side we added sanity check in etcd-backup-restore sidecar of etcd-main pod, which checks if etcd data revision is greater than the last snapshot revision from old bucket.&lt;/li>
&lt;li>If above check fails mean there is surely some data corruption occurred with etcd, so etcd-backup-restore reports error and then etcd-main pod goes in &lt;code>CrashLoopBackoff&lt;/code> creating etcd-main down alerts.&lt;/li>
&lt;/ul>
&lt;h4 id="action">Action&lt;/h4>
&lt;ol>
&lt;li>Disable the Gardener reconciliation for Shoot by annotating it with &lt;code>shoot.gardener.cloud/ignore=true&lt;/code>&lt;/li>
&lt;li>Scale down the etcd-main statefulset in seed cluster.&lt;/li>
&lt;li>Find out the latest full snapshot and delta snapshot from old backup bucket. The old backup bucket name is same as the backupInfra resource associated with Shoot in Garden cluster.&lt;/li>
&lt;li>Move them manually to new backup bucket.&lt;/li>
&lt;li>Enable the Gardener reconciliation for shoot by removing annotation &lt;code>shoot.gardener.cloud/ignore=true&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h3 id="after-upgradingrestarting-a-local-gardener-setup-the-dnsentries-on-the-seeds-show-the-error--already-busy-for-owner-">After upgrading/restarting a local Gardener setup, the DNSEntries on the seeds show the error &amp;ldquo;&amp;hellip; already busy for owner &amp;hellip;&amp;rdquo;&lt;/h3>
&lt;h4 id="issue-1">Issue&lt;/h4>
&lt;ul>
&lt;li>custom resources DNSEntries on the seeds show the error &amp;ldquo;dns name &amp;ldquo;api.myshoot.mygarden.internal.dev.k8s.ondemand.com&amp;rdquo; already busy for owner &amp;ldquo;seed.gardener.cloud/a1234567-XXXX-XXXX-XXXX-025000000001/aws&amp;rdquo;&lt;/li>
&lt;li>API server is not available via DNS name&lt;/li>
&lt;/ul>
&lt;h4 id="environment-1">Environment&lt;/h4>
&lt;ul>
&lt;li>Gardener version: 0.20.0+&lt;/li>
&lt;/ul>
&lt;h4 id="root-cause-1">Root Cause&lt;/h4>
&lt;p>DNS records created by Gardener&amp;rsquo;s dns-controller-manager are stored together with meta data, especially
with an owner identifier. In this way the dns-controller-manager knows which records belong to it.
It never changes records which are not owned by it.
The owner identifier is unique for every seed and computed from the Gardener identity and the seed identity.
The Gardener identity is the UUID of the garden namespace of the Gardener cluster.
Especially if you have a local Gardener setup, there are situations where the Kubernetes cluster and therefore the garden namespace have to be recreated.
For example, on updating docker-desktop all containers may have been deleted and are recreated.&lt;/p>
&lt;h4 id="action-1">Action&lt;/h4>
&lt;p>On each seed, you have to tell the dns-controller-manager, that it is also responsible for secondary owner
identifiers. For this purpose create a custom resource &lt;code>DNSOwner&lt;/code> and set the attribute &lt;code>ownerId&lt;/code> to the old
owner identifier shown in the error message of the DNS entries, e.g.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: dns.gardener.cloud/v1alpha1
kind: DNSOwner
metadata:
name: old-owner
namespace: default
spec:
ownerId: seed.gardener.cloud/a1234567-XXXX-XXXX-XXXX-025000000001/aws
active: &lt;span style="color:#00f">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Currently the dns-controller-manager has to be restarted (i.e. delete its current pod) to make it known of
the secondary owner identifier.&lt;/p></description></item><item><title>Docs: Trusted Tls For Control Planes</title><link>https://gardener.cloud/docs/gardener/usage/trusted-tls-for-control-planes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/trusted-tls-for-control-planes/</guid><description>
&lt;h1 id="trusted-tls-certificate-for-shoot-control-planes">Trusted TLS certificate for shoot control planes&lt;/h1>
&lt;p>Shoot clusters are composed of several control plane components deployed by the Gardener and corresponding extensions.&lt;/p>
&lt;p>Some components are exposed via &lt;code>Ingress&lt;/code> resources which make them addressable under the HTTPS protocol.&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;ul>
&lt;li>Alertmanager&lt;/li>
&lt;li>Grafana for operators and end-users&lt;/li>
&lt;li>Prometheus&lt;/li>
&lt;/ul>
&lt;p>Gardener generates the backing TLS certificates which are signed by the shoot cluster&amp;rsquo;s CA by default (self-signed).&lt;/p>
&lt;p>Unlike with a self-contained Kubeconfig file, common internet browsers or operating systems don&amp;rsquo;t trust a shoot&amp;rsquo;s cluster CA and adding it as a trusted root is often undesired in enterprise environments.&lt;/p>
&lt;p>Therefore, Gardener operators can predefine trusted wildcard certificates under which the mentioned endpoints will be served instead.&lt;/p>
&lt;h2 id="register-a-trusted-wildcard-certificate">Register a trusted wildcard certificate&lt;/h2>
&lt;p>Since control plane components are published under the ingress domain (&lt;code>core.gardener.cloud/v1beta1.Seed.spec.dns.ingressDomain&lt;/code>) a wildcard certificate is required.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;ul>
&lt;li>Seed ingress domain: &lt;code>dev.my-seed.example.com&lt;/code>&lt;/li>
&lt;li>&lt;code>CN&lt;/code> or &lt;code>SAN&lt;/code> for certificate: &lt;code>*.dev.my-seed.example.com&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>A wildcard certificate matches exactly one seed. It must be deployed as part of your landscape setup as a Kubernetes &lt;code>Secret&lt;/code> inside the &lt;code>garden&lt;/code> namespace of the corresponding seed cluster.&lt;/p>
&lt;p>Please ensure that the secret has the &lt;code>gardener.cloud/role&lt;/code> label shown below.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: v1
data:
ca.crt: base64-encoded-ca.crt
tls.crt: base64-encoded-tls.crt
tls.key: base64-encoded-tls.key
kind: Secret
metadata:
labels:
gardener.cloud/role: controlplane-cert
name: seed-ingress-certificate
namespace: garden
type: Opaque
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gardener copies the secret during the reconciliation of shoot clusters to the shoot namespace in the seed. Afterwards, &lt;code>Ingress&lt;/code> resources in that namespace for the mentioned components will refer to the wildcard certificate.&lt;/p>
&lt;h2 id="best-practice">Best practice&lt;/h2>
&lt;p>While it is possible to create the wildcard certificates manually and deploy them to seed clusters, it is recommended to let certificate management components do this job. Often, a seed cluster is also a shoot cluster at the same time (shooted seed) and might already provide a certificate service extension.
Otherwise, a Gardener operator may use solutions like &lt;a href="https://github.com/gardener/cert-management">Cert-Management&lt;/a> or &lt;a href="https://github.com/jetstack/cert-manager">Cert-Manager&lt;/a>.&lt;/p></description></item><item><title>Docs: Worker Pool K8s Versions</title><link>https://gardener.cloud/docs/gardener/usage/worker_pool_k8s_versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/usage/worker_pool_k8s_versions/</guid><description>
&lt;h1 id="controlling-the-kubernetes-versions-for-specific-worker-pools">Controlling the Kubernetes versions for specific worker pools&lt;/h1>
&lt;p>Since Gardener &lt;code>v1.36&lt;/code>, worker pools can have different Kubernetes versions specified than the control plane.&lt;/p>
&lt;p>It must be enabled by setting the featureGate &lt;code>WorkerPoolKubernetesVersion: true&lt;/code> in the gardenlet&amp;rsquo;s component configuration.&lt;/p>
&lt;p>In earlier Gardener versions all worker pools inherited the Kubernetes version of the control plane. Once the Kubernetes version of the control plane was modified, all worker pools have been updated as well (either by rolling the nodes in case of a minor version change, or in-place for patch version changes).&lt;/p>
&lt;p>In order to gracefully perform Kubernetes upgrades (triggering a rolling update of the nodes) with workloads sensitive to restarts (e.g., those dealing with lots of data), it might be required to be able to gradually perform the upgrade process.
In such cases, the Kubernetes version for the worker pools can be pinned (&lt;code>.spec.provider.workers[].kubernetes.version&lt;/code>) while the control plane Kubernetes version (&lt;code>.spec.kubernetes.version&lt;/code>) is updated.
This results in the nodes being untouched while the control plane is upgraded.
Now a new worker pool (with the version equal to the control plane version) can be added.
Administrators can then reschedule their workloads to the new worekr pool according to their upgrade requirements and processes.&lt;/p>
&lt;h2 id="example-usage-in-a-shoot">Example Usage in a &lt;code>Shoot&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">spec:
kubernetes:
version: 1.20.1
provider:
workers:
- name: data1
kubernetes:
version: 1.19.1
- name: data2
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>If &lt;code>.kubernetes.version&lt;/code> is not specified in a worker pool then the Kubernetes version of the kubelet is inherited from the control plane (&lt;code>.spec.kubernetes.version&lt;/code>), i.e., in above example the &lt;code>data2&lt;/code> pool will use &lt;code>1.20.1&lt;/code>.&lt;/li>
&lt;li>If &lt;code>.kubernetes.version&lt;/code> is specified in a worker pool then it must meet the following constraints:
&lt;ul>
&lt;li>It must be at most two minor versions lower than the control plane version.&lt;/li>
&lt;li>If it was not specified before then no downgrade is possible (you cannot set it to &lt;code>1.19.1&lt;/code> while &lt;code>.spec.kubernetes.version&lt;/code> is already &lt;code>1.20.1&lt;/code>). The &amp;ldquo;two minor version skew&amp;rdquo; is only possible if the worker pool version is set to control plane version and then the control plane was updated gradually two minor versions.&lt;/li>
&lt;li>If the version is removed from the worker pool, only one minor version difference is allowed to the control plane (you cannot upgrade a pool from version &lt;code>1.18.0&lt;/code> to &lt;code>1.20.0&lt;/code> in one go).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Automatic updates of Kubernetes versions (see &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_maintenance/#automatic-version-updates">this document&lt;/a>) also apply to worker pool Kubernetes versions.&lt;/p></description></item></channel></rss>