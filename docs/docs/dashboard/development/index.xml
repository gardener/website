<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Development</title><link>https://gardener.cloud/docs/dashboard/development/</link><description>Recent content in Development on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/dashboard/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Local Setup</title><link>https://gardener.cloud/docs/dashboard/development/local-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/dashboard/development/local-setup/</guid><description>
&lt;h3 id="install-dependencies">Install Dependencies&lt;/h3>
&lt;p>Install all dependencies via yarn&lt;/p>
&lt;img width="200" src="https://raw.githubusercontent.com/yarnpkg/assets/master/yarn-kitten-full.png">
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">yarn
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="configuration">Configuration&lt;/h3>
&lt;h4 id="kubeconfig">KUBECONFIG&lt;/h4>
&lt;p>If the dashboard is not running in the Garden Cluster you have to point the kubeconfig to Garden Cluster. This can be done in the default kubeconfig file in &lt;code>${HOME}/.kube/config&lt;/code> or by the &lt;code>KUBECONFIG&lt;/code> environment variable.&lt;/p>
&lt;h4 id="gardener_config">GARDENER_CONFIG&lt;/h4>
&lt;p>The configuration file of the Gardener Dashboard can be specified as first command line argument or as environment variable &lt;code>GARDENER_CONFIG&lt;/code> at the server process. If nothing is specified the default location is &lt;code>${HOME}/.gardener/config.yaml&lt;/code>.&lt;/p>
&lt;p>A local configuration example for &lt;a href="https://github.com/kubernetes/minikube">minikube&lt;/a> and &lt;a href="https://github.com/coreos/dex">dex&lt;/a> could look like follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">port: 3030
logLevel: debug
logFormat: text
apiServerUrl: https://minkube &lt;span style="color:#008000"># garden cluster kube-apiserver url&lt;/span>
sessionSecret: c2VjcmV0 &lt;span style="color:#008000"># symetric key used for encryption&lt;/span>
oidc:
issuer: https://minikube:32001
client_id: dashboard
client_secret: c2VjcmV0 &lt;span style="color:#008000"># oauth client secret&lt;/span>
redirect_uri: http://localhost:8080/auth/callback
scope: &lt;span style="color:#a31515">&amp;#39;openid email profile groups audience:server:client_id:dashboard audience:server:client_id:kube-kubectl&amp;#39;&lt;/span>
clockTolerance: 15
frontend:
dashboardUrl:
pathname: /api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy/
defaultHibernationSchedule:
evaluation:
- start: 00 17 * * 1,2,3,4,5
development:
- start: 00 17 * * 1,2,3,4,5
end: 00 08 * * 1,2,3,4,5
production: ~
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="run-locally-small-stylecolor-grey-font-size-07emduring-developmentsmall">Run locally &lt;small style="color: grey; font-size: 0.7em">(during development)&lt;/small>&lt;/h2>
&lt;p>Concurrently run the backend server (port &lt;code>3030&lt;/code>) and the frontend server (port &lt;code>8080&lt;/code>) both with hot reload enabled.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">yarn serve
&lt;/code>&lt;/pre>&lt;/div>&lt;p>All request to &lt;code>/api&lt;/code>, &lt;code>/auth&lt;/code> and &lt;code>/config.json&lt;/code> will be proxied by default to the backend server.&lt;/p>
&lt;h2 id="build">Build&lt;/h2>
&lt;p>Build docker image locally.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">make build
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="push">Push&lt;/h2>
&lt;p>Push docker image to Google Container Registry.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">make push
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command expects a valid gcloud configuration named &lt;code>gardener&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">gcloud config configurations describe gardener
is_active: true
name: gardener
properties:
core:
account: john.doe@example.org
project: johndoe-1008
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Testing</title><link>https://gardener.cloud/docs/dashboard/development/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/dashboard/development/testing/</guid><description>
&lt;h1 id="testing">Testing&lt;/h1>
&lt;h2 id="jest">Jest&lt;/h2>
&lt;p>We use Jest JavaScript Testing Framework&lt;/p>
&lt;img width="200" src="https://jestjs.io/img/jest.svg">
&lt;ul>
&lt;li>Jest can collect code coverage information​&lt;/li>
&lt;li>Jest support snapshot testing out of the box​&lt;/li>
&lt;li>All in One solution. Replaces Mocha, Chai, Sinon and Istanbul​&lt;/li>
&lt;li>It works with Vue.js and Node.js projects​&lt;/li>
&lt;/ul>
&lt;p>To execute all tests, simply run&lt;/p>
&lt;pre>&lt;code>yarn workspaces foreach --all run test
&lt;/code>&lt;/pre>&lt;p>or to include test coverage generation&lt;/p>
&lt;pre>&lt;code>yarn workspaces foreach --all run test-coverage
&lt;/code>&lt;/pre>&lt;p>You can also run tests for frontend, backend and charts directly inside the respective folder via&lt;/p>
&lt;pre>&lt;code>yarn test
&lt;/code>&lt;/pre>&lt;h2 id="lint">Lint&lt;/h2>
&lt;p>We use ESLint for static code analyzing.&lt;/p>
&lt;img width="200" src="https://d33wubrfki0l68.cloudfront.net/204482ca413433c80cd14fe369e2181dd97a2a40/092e2/assets/img/logo.svg">
&lt;p>To execute, run&lt;/p>
&lt;pre>&lt;code>yarn workspaces foreach --all run lint
&lt;/code>&lt;/pre></description></item></channel></rss>