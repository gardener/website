<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Development</title><link>https://gardener.cloud/docs/gardener/development/</link><description>Recent content in Development on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/gardener/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Changing The Api</title><link>https://gardener.cloud/docs/gardener/development/changing-the-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/changing-the-api/</guid><description>
&lt;h1 id="extending-the-api">Extending the API&lt;/h1>
&lt;p>This document describes the steps that need to be performed when changing the API.
It provides guidance for API changes to both (Gardener system in general or component configurations).&lt;/p>
&lt;p>Generally, as Gardener is a Kubernetes-native extension, it follows the same API conventions and guidelines like Kubernetes itself.
&lt;a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md">This document&lt;/a> as well as &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api_changes.md">this document&lt;/a> already provide a good overview and general explanation of the basic concepts behind it.
We are following the same approaches.&lt;/p>
&lt;h2 id="gardener-api">Gardener API&lt;/h2>
&lt;p>The Gardener API is defined in &lt;code>pkg/apis/{core,extensions,settings}&lt;/code> directories and is the main point of interaction with the system.
It must be ensured that the API is always backwards-compatible.
If fields shall be removed permanently from the API then a proper deprecation period must be adhered to so that end-users have enough time adapt their clients.&lt;/p>
&lt;p>&lt;strong>Checklist&lt;/strong> when changing the API:&lt;/p>
&lt;ol>
&lt;li>Modify the field(s) in the respective Golang files of all external and the internal version.
&lt;ol>
&lt;li>Make sure new fields are being added as &amp;ldquo;optional&amp;rdquo; fields, i.e., they are of pointer types, they have the &lt;code>// +optional&lt;/code> comment, and they have the &lt;code>omitempty&lt;/code> JSON tag.&lt;/li>
&lt;li>Make sure that the existing field numbers in the protobuf tags are not changed.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>If necessary then implement/adapt the conversion logic defined in the versioned APIs (e.g., &lt;code>pkg/apis/core/v1beta1/conversions*.go&lt;/code>).&lt;/li>
&lt;li>If necessary then implement/adapt defaulting logic defined in the versioned APIs (e.g., &lt;code>pkg/apis/core/v1beta1/defaults*.go&lt;/code>).&lt;/li>
&lt;li>Run the code generation: &lt;code>make generate&lt;/code>&lt;/li>
&lt;li>If necessary then implement/adapt validation logic defined in the internal API (e.g., &lt;code>pkg/apis/core/validation/validation*.go&lt;/code>).&lt;/li>
&lt;li>If necessary then adapt the exemplary YAML manifests of the Gardener resources defined in &lt;code>example/*.yaml&lt;/code>.&lt;/li>
&lt;li>In most cases it makes sense to add/adapt the documentation for administrators/operators and/or end-users in the &lt;code>docs&lt;/code> folder to provide information on purpose and usage of the added/changed fields.&lt;/li>
&lt;li>When opening the pull request then always add a release note so that end-users are becoming aware of the changes.&lt;/li>
&lt;/ol>
&lt;h2 id="component-configuration-apis">Component configuration APIs&lt;/h2>
&lt;p>Most Gardener components have a component configuration that follows similar principles to the Gardener API.
Those component configurations are defined in &lt;code>pkg/{controllermanager,gardenlet,scheduler},pkg/apis/config&lt;/code>.
Hence, the above checklist also applies for changes to those APIs.
However, since these APIs are only used internally and only during the deployment of Gardener the guidelines with respect to changes and backwards-compatibility are slightly relaxed.
If necessary then it is allowed to remove fields without a proper deprecation period if the release note uses the &lt;code>breaking operator&lt;/code> keywords.&lt;/p>
&lt;p>In addition to the above checklist:&lt;/p>
&lt;ol>
&lt;li>If necessary then adapt the Helm chart of Gardener defined in &lt;code>charts/gardener&lt;/code>. Adapt the &lt;code>values.yaml&lt;/code> file as well as the manifest templates.&lt;/li>
&lt;/ol></description></item><item><title>Docs: Dependencies</title><link>https://gardener.cloud/docs/gardener/development/dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/dependencies/</guid><description>
&lt;h1 id="dependency-management">Dependency Management&lt;/h1>
&lt;p>We are using &lt;a href="https://github.com/golang/go/wiki/Modules">go modules&lt;/a> for depedency management.
In order to add a new package dependency to the project, you can perform &lt;code>go get &amp;lt;PACKAGE&amp;gt;@&amp;lt;VERSION&amp;gt;&lt;/code> or edit the &lt;code>go.mod&lt;/code> file and append the package along with the version you want to use.&lt;/p>
&lt;h2 id="updating-dependencies">Updating Dependencies&lt;/h2>
&lt;p>The &lt;code>Makefile&lt;/code> contains a rule called &lt;code>revendor&lt;/code> which performs &lt;code>go mod tidy&lt;/code> and &lt;code>go mod vendor&lt;/code>.
&lt;code>go mod tidy&lt;/code> makes sure go.mod matches the source code in the module. It adds any missing modules necessary to build the current module&amp;rsquo;s packages and dependencies, and it removes unused modules that don&amp;rsquo;t provide any relevant packages.
&lt;code>go mod vendor&lt;/code> resets the main module&amp;rsquo;s vendor directory to include all packages needed to build and test all the main module&amp;rsquo;s packages. It does not include test code for vendored packages.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make revendor
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The dependencies are installed into the &lt;code>vendor&lt;/code> folder which &lt;strong>should be added&lt;/strong> to the VCS.&lt;/p>
&lt;p>⚠️ Make sure that you test the code after you have updated the dependencies!&lt;/p>
&lt;h2 id="exported-packages">Exported Packages&lt;/h2>
&lt;p>This repository contains several packages that could be considered &amp;ldquo;exported packages&amp;rdquo;, in a sense that they are supposed to be reused in other Go projects.
For example:&lt;/p>
&lt;ul>
&lt;li>Gardener&amp;rsquo;s API packages: &lt;code>pkg/apis&lt;/code>&lt;/li>
&lt;li>Library for building Gardener extensions: &lt;code>extensions&lt;/code>&lt;/li>
&lt;li>Gardener&amp;rsquo;s Test Framework: &lt;code>test/framework&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>There are a few more folders in this repository (non-Go sources) that are reused across projects in the gardener organization:&lt;/p>
&lt;ul>
&lt;li>GitHub templates: &lt;code>.github&lt;/code>&lt;/li>
&lt;li>Concourse / cc-utils related helpers: &lt;code>hack/.ci&lt;/code>&lt;/li>
&lt;li>Development, build and testing helpers: &lt;code>hack&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>These packages feature a dummy &lt;code>doc.go&lt;/code> file to allow other Go projects to pull them in as go mod dependencies.&lt;/p>
&lt;p>These packages are explicitly &lt;em>not&lt;/em> supposed to be used in other projects (consider them as &amp;ldquo;non-exported&amp;rdquo;):&lt;/p>
&lt;ul>
&lt;li>API validation packages: &lt;code>pkg/apis/*/*/validation&lt;/code>&lt;/li>
&lt;li>Operation package (main Gardener business logic regarding &lt;code>Seed&lt;/code> and &lt;code>Shoot&lt;/code> clusters): &lt;code>pkg/operation&lt;/code>&lt;/li>
&lt;li>Third party code: &lt;code>third_party&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Currently, we don&amp;rsquo;t have a mechanism yet for selectively syncing out these exported packages into dedicated repositories like kube&amp;rsquo;s &lt;a href="https://github.com/kubernetes/kubernetes/tree/master/staging">staging mechanism&lt;/a> (&lt;a href="https://github.com/kubernetes/publishing-bot">publishing-bot&lt;/a>).&lt;/p>
&lt;h2 id="import-restrictions">Import Restrictions&lt;/h2>
&lt;p>We want to make sure, that other projects can depend on this repository&amp;rsquo;s &amp;ldquo;exported&amp;rdquo; packages without pulling in the entire repository (including &amp;ldquo;non-exported&amp;rdquo; packages) or a high number of other unwanted dependencies.
Hence, we have to be careful when adding new imports or references between our packages.&lt;/p>
&lt;blockquote>
&lt;p>ℹ️ General rule of thumb: the mentioned &amp;ldquo;exported&amp;rdquo; packages should be as self-contained as possible and depend on as few other packages in the repository and other projects as possible.&lt;/p>
&lt;/blockquote>
&lt;p>In order to support that rule and automatically check compliance with that goal, we leverage &lt;a href="https://github.com/kubernetes/code-generator/tree/master/cmd/import-boss">import-boss&lt;/a>.
The tool checks all imports of the given packages (including transitive imports) against rules defined in &lt;code>.import-restrictions&lt;/code> files in each directory.
An import is allowed if it matches at least one allowed prefix and does not match any forbidden prefixes.
Note: &lt;code>''&lt;/code> (the empty string) is a prefix of everything.
For more details, see: &lt;a href="https://github.com/kubernetes/code-generator/tree/master/cmd/import-boss">https://github.com/kubernetes/code-generator/tree/master/cmd/import-boss&lt;/a>&lt;/p>
&lt;p>&lt;code>import-boss&lt;/code> is executed on every pull request and blocks the PR if it doesn&amp;rsquo;t comply with the defined import restrictions.
You can also run it locally using &lt;code>make check&lt;/code>.&lt;/p>
&lt;p>Import restrictions should be changed in the following situations:&lt;/p>
&lt;ul>
&lt;li>We spot a new pattern of imports across our packages that was not restricted before but makes it more difficult for other projects to depend on our &amp;ldquo;exported&amp;rdquo; packages.
In that case, the imports should be further restricted to disallow such problematic imports, and the code/package structure should be reworked to comply with the newly given restrictions.&lt;/li>
&lt;li>We want to share code between packages, but existing import restrictions prevent us from doing so.
In that case, please consider what additional dependencies it will pull in, when loosening existing restrictions.
Also consider possible alternatives, like code restructurings or extracting shared code into dedicated packages for minimal impact on dependent projects.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Getting Started Locally</title><link>https://gardener.cloud/docs/gardener/development/getting_started_locally/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/getting_started_locally/</guid><description>
&lt;h1 id="running-gardener-locally">Running Gardener locally&lt;/h1>
&lt;p>This document will walk you through running Gardener on your local machine for development purposes.
If you encounter difficulties, please open an issue so that we can make this process easier.&lt;/p>
&lt;p>Gardener runs in any Kubernetes cluster.
In this guide, we will start a &lt;a href="https://kind.sigs.k8s.io/">KinD&lt;/a> cluster which is used as both garden and seed cluster (please refer to the &lt;a href="https://gardener.cloud/docs/gardener/concepts/architecture/">architecture overview&lt;/a>) for simplicity.&lt;/p>
&lt;p>The Gardener components, however, will be run as regular processes on your machine (hence, no container images are being built).&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/getting_started_locally_39a5b3.png" alt="Architecture Diagram">&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Make sure your Docker daemon is up-to-date, up and running and has enough resources (at least &lt;code>4&lt;/code> CPUs and &lt;code>4Gi&lt;/code> memory; see &lt;a href="https://docs.docker.com/desktop/mac/#resources">here&lt;/a> how to configure the resources for Docker for Mac).&lt;/p>
&lt;blockquote>
&lt;p>Please note that 4 CPU / 4Gi memory might not be enough for more than one &lt;code>Shoot&lt;/code> cluster, i.e., you might need to increase these values if you want to run additional &lt;code>Shoot&lt;/code>s.&lt;/p>
&lt;/blockquote>
&lt;p>Additionally, please configure at least &lt;code>120Gi&lt;/code> of disk size for the Docker daemon.&lt;/p>
&lt;blockquote>
&lt;p>Tip: With &lt;code>docker system df&lt;/code> and &lt;code>docker system prune -a&lt;/code> you can cleanup unused data.&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Make sure that you increase the maximum number of open files on your host:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>On Mac, run &lt;code>sudo launchctl limit maxfiles 65536 200000&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On Linux, extend the &lt;code>/etc/security/limits.conf&lt;/code> file with&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">* hard nofile 97816
* soft nofile 97816
&lt;/code>&lt;/pre>&lt;/div>&lt;p>and reload the terminal.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="setting-up-the-kind-cluster-garden-and-seed">Setting up the KinD cluster (garden and seed)&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make kind-up KIND_ENV=local
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command sets up a new KinD cluster named &lt;code>gardener-local&lt;/code> and stores the kubeconfig in the &lt;code>./example/gardener-local/kind/kubeconfig&lt;/code> file.&lt;/p>
&lt;blockquote>
&lt;p>It might be helpful to copy this file to &lt;code>$HOME/.kube/config&lt;/code> since you will need to target this KinD cluster multiple times.
Alternatively, make sure to set your &lt;code>KUBECONFIG&lt;/code> environment variable to &lt;code>./example/gardener-local/kind/kubeconfig&lt;/code> for all future steps via &lt;code>export KUBECONFIG=example/gardener-local/kind/kubeconfig&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>All following steps assume that your are using this kubeconfig.&lt;/p>
&lt;h2 id="setting-up-gardener">Setting up Gardener&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make dev-setup &lt;span style="color:#008000"># preparing the environment (without webhooks for now)&lt;/span>
kubectl wait --for=condition=ready pod -l run=etcd -n garden --timeout 2m &lt;span style="color:#008000"># wait for etcd to be ready&lt;/span>
make start-apiserver &lt;span style="color:#008000"># starting gardener-apiserver&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In a new terminal pane, run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl wait --for=condition=available apiservice v1beta1.core.gardener.cloud &lt;span style="color:#008000"># wait for gardener-apiserver to be ready&lt;/span>
make start-admission-controller &lt;span style="color:#008000"># starting gardener-admission-controller&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In a new terminal pane, run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make dev-setup DEV_SETUP_WITH_WEBHOOKS=true &lt;span style="color:#008000"># preparing the environment with webhooks&lt;/span>
make start-controller-manager &lt;span style="color:#008000"># starting gardener-controller-manager&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Optional): In a new terminal pane, run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make start-scheduler &lt;span style="color:#008000"># starting gardener-scheduler&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In a new terminal pane, run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make register-local-env &lt;span style="color:#008000"># registering the local environment (CloudProfile, Seed, etc.)&lt;/span>
make start-gardenlet SEED_NAME=local &lt;span style="color:#008000"># starting gardenlet&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In a new terminal pane, run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make start-extension-provider-local &lt;span style="color:#008000"># starting gardener-extension-provider-local&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ℹ️ The &lt;a href="https://gardener.cloud/docs/gardener/extensions/provider-local/">&lt;code>provider-local&lt;/code>&lt;/a> is started with elevated privileges since it needs to manipulate your &lt;code>/etc/hosts&lt;/code> file to enable you accessing the created shoot clusters from your local machine, see &lt;a href="https://gardener.cloud/docs/gardener/extensions/provider-local/#dnsrecord">this&lt;/a> for more details.&lt;/p>
&lt;h2 id="creating-a-shoot-cluster">Creating a &lt;code>Shoot&lt;/code> cluster&lt;/h2>
&lt;p>You can wait for the &lt;code>Seed&lt;/code> to be ready by running&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl wait --for=condition=gardenletready --for=condition=extensionsready --for=condition=bootstrapped seed local --timeout=5m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively, you can run &lt;code>kubectl get seed local&lt;/code> and wait for the &lt;code>STATUS&lt;/code> to indicate readiness:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">NAME STATUS PROVIDER REGION AGE VERSION K8S VERSION
local Ready local local 4m42s vX.Y.Z-dev v1.21.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to create a first shoot cluster, just run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f example/provider-local/shoot.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can wait for the &lt;code>Shoot&lt;/code> to be ready by running&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl wait --for=condition=apiserveravailable --for=condition=controlplanehealthy --for=condition=everynodeready --for=condition=systemcomponentshealthy shoot local -n garden-local --timeout=10m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively, you can run &lt;code>kubectl -n garden-local get shoot local&lt;/code> and wait for the &lt;code>LAST OPERATION&lt;/code> to reach &lt;code>100%&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">NAME CLOUDPROFILE PROVIDER REGION K8S VERSION HIBERNATION LAST OPERATION STATUS AGE
local local local local 1.21.0 Awake Create Processing (43%) healthy 94s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Optional): You could also execute a simple e2e test (creating and deleting a shoot) by running&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">make test-e2e-local-fast KUBECONFIG=&lt;span style="color:#a31515">&amp;#34;&lt;/span>$PWD&lt;span style="color:#a31515">/example/gardener-local/kind/kubeconfig&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the shoot got successfully created you can access it as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n garden-local get secret local.kubeconfig -o jsonpath={.data.kubeconfig} | base64 -d &amp;gt; /tmp/kubeconfig-shoot-local.yaml
kubectl --kubeconfig=/tmp/kubeconfig-shoot-local.yaml get nodes
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deleting-the-shoot-cluster">Deleting the &lt;code>Shoot&lt;/code> cluster&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">./hack/usage/delete shoot local garden-local
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tear-down-the-gardener-environment">Tear down the Gardener environment&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">make tear-down-local-env
make kind-down
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="further-reading">Further reading&lt;/h2>
&lt;p>This setup makes use of the local provider extension. You can read more about it in &lt;a href="https://gardener.cloud/docs/gardener/extensions/provider-local/">this document&lt;/a>.&lt;/p></description></item><item><title>Docs: Kubernetes Clients</title><link>https://gardener.cloud/docs/gardener/development/kubernetes-clients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/kubernetes-clients/</guid><description>
&lt;h1 id="kubernetes-clients-in-gardener">Kubernetes Clients in Gardener&lt;/h1>
&lt;p>This document aims at providing a general developer guideline on different aspects of using Kubernetes clients in a large-scale distributed system and project like Gardener.
The points included here are not meant to be consulted as absolute rules, but rather as general rules of thumb, that allow developers to get a better feeling about certain gotchas and caveats.
It should be updated with lessons learned from maintaining the project and running Gardener in production.&lt;/p>
&lt;p>&lt;strong>Prerequisites&lt;/strong>:&lt;/p>
&lt;p>Please familiarize yourself with the following basic Kubernetes API concepts first, if you&amp;rsquo;re new to Kubernetes. A good understanding of these basics will help you better comprehend the following document.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/using-api/api-concepts/">Kubernetes API Concepts&lt;/a> (including terminology, watch basics, etc.)&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/">Extending the Kubernetes API&lt;/a> (including Custom Resources and aggregation layer / extension API servers)&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/">Extend the Kubernetes API with CustomResourceDefinitions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/">Working with Kubernetes Objects&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/sample-controller/blob/master/docs/controller-client-go.md">Sample Controller&lt;/a> (the diagram helps to build an understanding of an controller&amp;rsquo;s basic structure)&lt;/li>
&lt;/ul>
&lt;h2 id="client-types-client-go-generated-controller-runtime">Client Types: Client-Go, Generated, Controller-Runtime&lt;/h2>
&lt;p>For historical reasons, you will find different kinds of Kubernetes clients in Gardener:&lt;/p>
&lt;h3 id="client-go-clients">Client-Go Clients&lt;/h3>
&lt;p>&lt;a href="https://github.com/kubernetes/client-go">client-go&lt;/a> is the default/official client for talking to the Kubernetes API in Golang.
It features so called &lt;a href="https://github.com/kubernetes/client-go/blob/release-1.21/kubernetes/clientset.go#L72">&amp;ldquo;client sets&amp;rdquo;&lt;/a> for all built-in Kubernetes API groups and versions (e.g. &lt;code>v1&lt;/code> (aka &lt;code>core/v1&lt;/code>), &lt;code>apps/v1&lt;/code>, etc.).
client-go clients are generated from the built-in API types using &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-api-machinery/generating-clientset.md">client-gen&lt;/a> and are composed of interfaces for every known API GroupVersionKind.
A typical client-go usage looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#00f">var&lt;/span> (
ctx context.Context
c kubernetes.Interface &lt;span style="color:#008000">// &amp;#34;k8s.io/client-go/kubernetes&amp;#34;
&lt;/span>&lt;span style="color:#008000">&lt;/span> deployment *appsv1.Deployment &lt;span style="color:#008000">// &amp;#34;k8s.io/api/apps/v1&amp;#34;
&lt;/span>&lt;span style="color:#008000">&lt;/span>)
updatedDeployment, err := c.AppsV1().Deployments(&lt;span style="color:#a31515">&amp;#34;default&amp;#34;&lt;/span>).Update(ctx, deployment, metav1.UpdateOptions{})
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Important characteristics of client-go clients:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>clients are specific to a given API GroupVersionKind, i.e., clients are hard-coded to corresponding API-paths (don&amp;rsquo;t need to use the discovery API to map GVK to a REST endpoint path).&lt;/li>
&lt;li>client&amp;rsquo;s don&amp;rsquo;t modify the passed in-memory object (e.g. &lt;code>deployment&lt;/code> in the above example). Instead, they return a new in-memory object.&lt;br>
This means, controllers have to continue working with the new in-memory object or overwrite the shared object to not lose any state updates.&lt;/li>
&lt;/ul>
&lt;h3 id="generated-client-sets-for-gardener-apis">Generated Client Sets for Gardener APIs&lt;/h3>
&lt;p>Gardener&amp;rsquo;s APIs extend the Kubernetes API by registering an extension API server (in the garden cluster) and &lt;code>CustomResourceDefinition&lt;/code>s (on Seed clusters), meaning that the Kubernetes API will expose additional REST endpoints to manage Gardener resources in addition to the built-in API resources.
In order to talk to these extended APIs in our controllers and components, client-gen is used to generate client-go-style clients to &lt;a href="https://github.com/gardener/gardener/tree/master/pkg/client">&lt;code>pkg/client/{core,extensions,seedmanagement,...}&lt;/code>&lt;/a>.&lt;/p>
&lt;p>Usage of these clients is equivalent to &lt;code>client-go&lt;/code> clients, and the same characteristics apply. For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#00f">var&lt;/span> (
ctx context.Context
c gardencoreclientset.Interface &lt;span style="color:#008000">// &amp;#34;github.com/gardener/gardener/pkg/client/core/clientset/versioned&amp;#34;
&lt;/span>&lt;span style="color:#008000">&lt;/span> shoot *gardencorev1beta1.Shoot &lt;span style="color:#008000">// &amp;#34;github.com/gardener/gardener/pkg/apis/core/v1beta1&amp;#34;
&lt;/span>&lt;span style="color:#008000">&lt;/span>)
updatedShoot, err := c.CoreV1beta1().Shoots(&lt;span style="color:#a31515">&amp;#34;garden-my-project&amp;#34;&lt;/span>).Update(ctx, shoot, metav1.UpdateOptions{})
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="controller-runtime-clients">Controller-Runtime Clients&lt;/h3>
&lt;p>&lt;a href="https://github.com/kubernetes-sigs/controller-runtime">controller-runtime&lt;/a> is a Kubernetes community project (&lt;a href="https://github.com/kubernetes-sigs/kubebuilder">kubebuilder&lt;/a> subproject) for building controllers and operators for custom resources.
Therefore, it features a generic client, that follows a different approach and does not rely on generated client sets. Instead, the client can be used for managing any Kubernetes resources (built-in or custom) homogeneously.
For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#00f">var&lt;/span> (
ctx context.Context
c client.Client &lt;span style="color:#008000">// &amp;#34;sigs.k8s.io/controller-runtime/pkg/client&amp;#34;
&lt;/span>&lt;span style="color:#008000">&lt;/span> deployment *appsv1.Deployment &lt;span style="color:#008000">// &amp;#34;k8s.io/api/apps/v1&amp;#34;
&lt;/span>&lt;span style="color:#008000">&lt;/span> shoot *gardencorev1beta1.Shoot &lt;span style="color:#008000">// &amp;#34;github.com/gardener/gardener/pkg/apis/core/v1beta1&amp;#34;
&lt;/span>&lt;span style="color:#008000">&lt;/span>)
err := c.Update(ctx, deployment)
&lt;span style="color:#008000">// or
&lt;/span>&lt;span style="color:#008000">&lt;/span>err = c.Update(ctx, shoot)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A brief introduction to controller-runtime and its basic constructs can be found &lt;a href="https://pkg.go.dev/sigs.k8s.io/controller-runtime">here&lt;/a>.&lt;/p>
&lt;p>&lt;em>Important characteristics of controller-runtime clients:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>The client functions take a generic &lt;code>client.Object&lt;/code> or &lt;code>client.ObjectList&lt;/code> value. These interfaces are implemented by all Golang types, that represent Kubernetes API objects or lists respectively which can be interacted with via usual API requests. [1]&lt;/li>
&lt;li>The client first consults a &lt;code>runtime.Scheme&lt;/code> (configured during client creation) for recognizing the object&amp;rsquo;s &lt;code>GroupVersionKind&lt;/code> (this happens on the client-side only).&lt;br>
A &lt;code>runtime.Scheme&lt;/code> is basically a registry for Golang API types, defaulting and conversion functions. Schemes are usually provided per &lt;code>GroupVersion&lt;/code> (see &lt;a href="https://github.com/kubernetes/api/blob/release-1.21/apps/v1/register.go">this example&lt;/a> for &lt;code>apps/v1&lt;/code>) and can be combined to one single scheme for further usage (&lt;a href="https://github.com/gardener/gardener/blob/v1.29.0/pkg/client/kubernetes/types.go#L96">example&lt;/a>). In controller-runtime clients, schemes are used only for mapping a typed API object to its &lt;code>GroupVersionKind&lt;/code>.&lt;/li>
&lt;li>It then consults a &lt;code>meta.RESTMapper&lt;/code> (also configured during client creation) for mapping the &lt;code>GroupVersionKind&lt;/code> to a &lt;code>RESTMapping&lt;/code>, which contains the &lt;code>GroupVersionResource&lt;/code> and &lt;code>Scope&lt;/code> (namespaced or cluster-scoped). From these values, the client can unambiguously determine the REST endpoint path of the corresponding API resource. For instance: &lt;code>appsv1.DeploymentList&lt;/code> is available at &lt;code>/apis/apps/v1/deployments&lt;/code> or &lt;code>/apis/apps/v1/namespaces/&amp;lt;namespace&amp;gt;/deployments&lt;/code> respectively.
&lt;ul>
&lt;li>There are different &lt;code>RESTMapper&lt;/code> implementations, but generally they are talking to the API server&amp;rsquo;s discovery API for retrieving &lt;code>RESTMappings&lt;/code> for all API resources known to the API server (either built-in, registered via API extension or &lt;code>CustomResourceDefinition&lt;/code>s).&lt;/li>
&lt;li>The default implementation of controller-runtime (which Gardener uses as well), is the &lt;a href="https://github.com/kubernetes-sigs/controller-runtime/blob/v0.9.0/pkg/client/apiutil/dynamicrestmapper.go#L77">dynamic &lt;code>RESTMapper&lt;/code>&lt;/a>. It caches discovery results (i.e. &lt;code>RESTMappings&lt;/code>) in-memory and only re-discovers resources from the API server, when a client tries to use an unknown &lt;code>GroupVersionKind&lt;/code>, i.e., when it encounters a &lt;code>No{Kind,Resource}MatchError&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The client writes back results from the API server into the passed in-memory object.
&lt;ul>
&lt;li>This means, that controllers don&amp;rsquo;t have to worry about copying back the results and should just continue to work on the given in-memory object.&lt;/li>
&lt;li>This is a nice and flexible pattern and helper functions should try to follow it wherever applicable. Meaning, if possible accept an object param, pass it down to clients and keep working on the same in-memory object instead of creating a new one in your helper function.&lt;/li>
&lt;li>The benefit is, that you don&amp;rsquo;t lose updates to the API object and always have the last-known state in memory. Therefore, you don&amp;rsquo;t have to read it again, e.g., for getting the current &lt;code>resourceVersion&lt;/code> when working with &lt;a href="#conflicts-concurrency-control-and-optimistic-locking">optimistic locking&lt;/a>, and thus minimize the chances for running into conflicts.&lt;/li>
&lt;li>However, controllers &lt;em>must not&lt;/em> use the same in-memory object concurrently in multiple goroutines. For example, decoding results from the API server in multiple goroutines into the same maps (e.g., labels, annotations) will cause panics because of &amp;ldquo;concurrent map writes&amp;rdquo;. Also, reading from an in-memory API object in one goroutine while decoding into it in another goroutine will yield non-atomic reads, meaning data might be corrupt and represent a non-valid/non-existing API object.&lt;/li>
&lt;li>Therefore, if you need to use the same in-memory object in multiple goroutines concurrently (e.g., shared state), remember to leverage proper synchronization techniques like channels, mutexes, &lt;code>atomic.Value&lt;/code> and/or copy the object prior to use. The average controller however, will not need to share in-memory API objects between goroutines, and it&amp;rsquo;s typically an indicator that the controller&amp;rsquo;s design should be improved.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The client decoder erases the object&amp;rsquo;s &lt;code>TypeMeta&lt;/code> (&lt;code>apiVersion&lt;/code> and &lt;code>kind&lt;/code> fields) after retrieval from the API server, see &lt;a href="https://github.com/kubernetes/kubernetes/issues/80609">kubernetes/kubernetes#80609&lt;/a>, &lt;a href="https://github.com/kubernetes-sigs/controller-runtime/issues/1517">kubernetes-sigs/controller-runtime#1517&lt;/a>.
Unstructured and metadata-only requests objects are an exception to this because the contained &lt;code>TypeMeta&lt;/code> is the only way to identify the object&amp;rsquo;s type.
Because of this behavior, &lt;code>obj.GetObjectKind().GroupVersionKind()&lt;/code> is likely to return an empty &lt;code>GroupVersionKind&lt;/code>.
I.e., you must not rely on &lt;code>TypeMeta&lt;/code> being set or &lt;code>GetObjectKind()&lt;/code> to return something usable.&lt;br>
If you need to identify an object&amp;rsquo;s &lt;code>GroupVersionKind&lt;/code>, use a scheme and its &lt;code>ObjectKinds&lt;/code> function instead (or the helper function &lt;code>apiutil.GVKForObject&lt;/code>).
This is not specific to controller-runtime clients and applies to client-go clients as well.&lt;/li>
&lt;/ul>
&lt;p>[1] Other lower level, config or internal API types (e.g., such as &lt;a href="https://github.com/kubernetes/api/blob/release-1.21/admission/v1/types.go#L29">&lt;code>AdmissionReview&lt;/code>&lt;/a>) don&amp;rsquo;t implement &lt;code>client.Object&lt;/code>. However, you also can&amp;rsquo;t interact with such objects via the Kubernetes API and thus also not via a client, so this can be disregarded at this point.&lt;/p>
&lt;h3 id="metadata-only-clients">Metadata-Only Clients&lt;/h3>
&lt;p>Additionally, controller-runtime clients can be used to easily retrieve metadata-only objects or lists.
This is useful for efficiently checking if at least one object of a given kind exists, or retrieving metadata of an object, if one is not interested in the rest (e.g., spec/status).&lt;br>
The &lt;code>Accept&lt;/code> header sent to the API server then contains &lt;code>application/json;as=PartialObjectMetadataList;g=meta.k8s.io;v=v1&lt;/code>, which makes the API server only return metadata of the retrieved object(s).
This saves network traffic and cpu/memory load on the API server and client side.
If the client fully lists all objects of a given kind including their spec/status, the resulting list can be quite large and easily exceed the controllers available memory.
That&amp;rsquo;s why it&amp;rsquo;s important to carefully check, if a full list is actually needed or if metadata-only list can be used instead.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#00f">var&lt;/span> (
ctx context.Context
c client.Client &lt;span style="color:#008000">// &amp;#34;sigs.k8s.io/controller-runtime/pkg/client&amp;#34;
&lt;/span>&lt;span style="color:#008000">&lt;/span> shootList = &amp;amp;metav1.PartialObjectMetadataList{} &lt;span style="color:#008000">// &amp;#34;k8s.io/apimachinery/pkg/apis/meta/v1&amp;#34;
&lt;/span>&lt;span style="color:#008000">&lt;/span>)
shootList.SetGroupVersionKind(gardencorev1beta1.SchemeGroupVersion.WithKind(&lt;span style="color:#a31515">&amp;#34;ShootList&amp;#34;&lt;/span>))
&lt;span style="color:#00f">if&lt;/span> err := c.List(ctx, shootList, client.InNamespace(&lt;span style="color:#a31515">&amp;#34;garden-my-project&amp;#34;&lt;/span>), client.Limit(1)); err != &lt;span style="color:#00f">nil&lt;/span> {
&lt;span style="color:#00f">return&lt;/span> err
}
&lt;span style="color:#00f">if&lt;/span> len(shootList.Items) &amp;gt; 0 {
&lt;span style="color:#008000">// project has at least one shoot
&lt;/span>&lt;span style="color:#008000">&lt;/span>} &lt;span style="color:#00f">else&lt;/span> {
&lt;span style="color:#008000">// project doesn&amp;#39;t have any shoots
&lt;/span>&lt;span style="color:#008000">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="gardeners-client-collection-clientmaps">Gardener&amp;rsquo;s Client Collection, ClientMaps&lt;/h3>
&lt;p>The Gardener codebase has a collection of clients (&lt;a href="https://github.com/gardener/gardener/blob/v1.29.0/pkg/client/kubernetes/types.go#L149">&lt;code>kubernetes.Interface&lt;/code>&lt;/a>), which can return all the above mentioned client types.
Additionally, it contains helpers for rendering and applying helm charts (&lt;code>ChartRender&lt;/code>, &lt;code>ChartApplier&lt;/code>) and retrieving the API server&amp;rsquo;s version (&lt;code>Version&lt;/code>).&lt;br>
Client sets are managed by so called &lt;code>ClientMap&lt;/code>s, which are a form of registry for all client set for a given type of cluster, i.e., Garden, Seed, Shoot and Plant.
ClientMaps manage the whole lifecycle of clients: they take care of creating them if they don&amp;rsquo;t exist already, running their caches, refreshing their cached server version and invalidating them when they are no longer needed.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#00f">var&lt;/span> (
ctx context.Context
cm clientmap.ClientMap &lt;span style="color:#008000">// &amp;#34;github.com/gardener/gardener/pkg/client/kubernetes/clientmap&amp;#34;
&lt;/span>&lt;span style="color:#008000">&lt;/span> shoot *gardencorev1beta1.Shoot
)
cs, err := cm.GetClient(ctx, keys.ForShoot(shoot)) &lt;span style="color:#008000">// kubernetes.Interface
&lt;/span>&lt;span style="color:#008000">&lt;/span>&lt;span style="color:#00f">if&lt;/span> err != &lt;span style="color:#00f">nil&lt;/span> {
&lt;span style="color:#00f">return&lt;/span> err
}
c := cs.Client() &lt;span style="color:#008000">// client.Client
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The client collection mainly exist for historical reasons (there used to be a lot of code using the client-go style clients).
However, Gardener is in the process of moving more towards controller-runtime and only using their clients, as they provide many benefits and are much easier to use.
Also, &lt;a href="https://github.com/gardener/gardener/issues/4251">gardener/gardener#4251&lt;/a> aims at refactoring our controller and admission components to native controller-runtime components.&lt;/p>
&lt;blockquote>
&lt;p>⚠️ Please always prefer controller-runtime clients over other clients when writing new code or refactoring existing code.&lt;/p>
&lt;/blockquote>
&lt;h2 id="cache-types-informers-listers-controller-runtime-caches">Cache Types: Informers, Listers, Controller-Runtime Caches&lt;/h2>
&lt;p>Similar to the different types of client(set)s, there are also different kinds of Kubernetes client caches.
However, all of them are based on the same concept: &lt;code>Informer&lt;/code>s.
An &lt;code>Informer&lt;/code> is a watch-based cache implementation, meaning it opens &lt;a href="https://kubernetes.io/docs/reference/using-api/api-concepts/#efficient-detection-of-changes">watch connections&lt;/a> to the API server and continuously updates cached objects based on the received watch events (&lt;code>ADDED&lt;/code>, &lt;code>MODIFIED&lt;/code>, &lt;code>DELETED&lt;/code>).
&lt;code>Informer&lt;/code>s offer to add indices to the cache for efficient object lookup (e.g., by name or labels) and to add &lt;code>EventHandler&lt;/code>s for the watch events.
The latter is used by controllers to fill queues with objects that should be reconciled on watch events.&lt;/p>
&lt;p>Informers are used in and created via several higher-level constructs:&lt;/p>
&lt;h3 id="sharedinformerfactories-listers">SharedInformerFactories, Listers&lt;/h3>
&lt;p>The generated clients (built-in as well as extended) feature a &lt;code>SharedInformerFactory&lt;/code> for every API group, which can be used to create and retrieve &lt;code>Informers&lt;/code> for all GroupVersionKinds.
Similarly, it can be used to retrieve &lt;code>Listers&lt;/code>, that allow getting and listing objects from the &lt;code>Informer&lt;/code>&amp;rsquo;s cache.
However, both of these constructs are only used for historical reasons, and we are in the process of migrating away from them in favor of cached controller-runtime clients (see &lt;a href="https://github.com/gardener/gardener/issues/2414">gardener/gardener#2414&lt;/a>, &lt;a href="https://github.com/gardener/gardener/issues/2822">gardener/gardener#2822&lt;/a>). Thus, they are described only briefly here.&lt;/p>
&lt;p>&lt;em>Important characteristics of Listers:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Objects read from Informers and Listers can always be slightly out-out-date (i.e., stale) because the client has to first observe changes to API objects via watch events (which can intermittently lag behind by a second or even more).&lt;/li>
&lt;li>Thus, don&amp;rsquo;t make any decisions based on data read from Listers if the consequences of deciding wrongfully based on stale state might be catastrophic (e.g. leaking infrastructure resources). In such cases, read directly from the API server via a client instead.&lt;/li>
&lt;li>Objects retrieved from Informers or Listers are pointers to the cached objects, so they must not be modified without copying them first, otherwise the objects in the cache are also modified.&lt;/li>
&lt;/ul>
&lt;h3 id="controller-runtime-caches">Controller-Runtime Caches&lt;/h3>
&lt;p>controller-runtime features a cache implementation that can be used equivalently as their clients. In fact, it implements a subset of the &lt;code>client.Client&lt;/code> interface containing the &lt;code>Get&lt;/code> and &lt;code>List&lt;/code> functions.
Under the hood, a &lt;code>cache.Cache&lt;/code> dynamically creates &lt;code>Informers&lt;/code> (i.e., opens watches) for every object GroupVersionKind that is being retrieved from it.&lt;/p>
&lt;p>Note, that the underlying Informers of a controller-runtime cache (&lt;code>cache.Cache&lt;/code>) and the ones of a &lt;code>SharedInformerFactory&lt;/code> (client-go) are not related in any way.
Both create &lt;code>Informers&lt;/code> and watch objects on the API server individually.
This means, that if you read the same object from different cache implementations, you may receive different versions of the object because the watch connections of the individual Informers are not synced.&lt;/p>
&lt;blockquote>
&lt;p>⚠️ Because of this, controllers/reconcilers should get the object from the same cache in the reconcile loop, where the &lt;code>EventHandler&lt;/code> was also added to set up the controller. For example, if a &lt;code>SharedInformerFactory&lt;/code> is used for setting up the controller then read the object in the reconciler from the &lt;code>Lister&lt;/code> instead of from a cached controller-runtime client.&lt;/p>
&lt;/blockquote>
&lt;p>By default, the &lt;code>client.Client&lt;/code> created by a controller-runtime &lt;code>Manager&lt;/code> is a &lt;code>DelegatingClient&lt;/code>. It delegates &lt;code>Get&lt;/code> and &lt;code>List&lt;/code> calls to a &lt;code>Cache&lt;/code> and all other calls to a client, that talks directly to the API server. Exceptions are requests with &lt;code>*unstructured.Unstructured&lt;/code> objects and object kinds that were configured to be excluded from the cache in the &lt;code>DelegatingClient&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>ℹ️
If the &lt;code>CachedRuntimeClients&lt;/code> feature gate is enabled (enabled by default starting from &lt;code>v1.34&lt;/code>), &lt;code>kubernetes.Interface.Client()&lt;/code> returns a &lt;code>DelegatingClient&lt;/code> that uses the cache returned from &lt;code>kubernetes.Interface.Cache()&lt;/code> under the hood. This means, all &lt;code>Client()&lt;/code> usages need to be ready for cached clients and should be able to cater with stale cache reads.
See &lt;a href="https://github.com/gardener/gardener/issues/2822">gardener/gardener#2822&lt;/a> for details on the graduation progress to beta.&lt;/p>
&lt;p>If the feature gate is explicitly disabled, the controller-runtime client (&lt;code>kubernetes.Interface.Client()&lt;/code>) is not cached and does not use the cache contained in the client set (&lt;code>kubernetes.Interface.Cache()&lt;/code>). This means, the client always reads directly from the API server, but you can intentionally read from the cache if desired.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;em>Important characteristics of cached controller-runtime clients:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Like for Listers, objects read from a controller-runtime cache can always be slightly out of date. Hence, don&amp;rsquo;t base any important decisions on data read from the cache (see above).&lt;/li>
&lt;li>In contrast to Listers, controller-runtime caches fill the passed in-memory object with the state of the object in the cache (i.e., they perform something like a &amp;ldquo;deep copy into&amp;rdquo;). This means that objects read from a controller-runtime cache can safely be modified without unintended side effects.&lt;/li>
&lt;li>Reading from a controller-runtime cache or a cached controller-runtime client implicitly starts a watch for the given object kind under the hood. This has important consequences:
&lt;ul>
&lt;li>Reading a given object kind from the cache for the first time can take up to a few seconds depending on size and amount of objects as well as API server latency. This is because the cache has to do a full list operation and wait for an initial watch sync before returning results.&lt;/li>
&lt;li>⚠️ Controllers need appropriate RBAC permissions for the object kinds they retrieve via cached clients (i.e., &lt;code>list&lt;/code> and &lt;code>watch&lt;/code>).&lt;/li>
&lt;li>⚠️ By default, watches started by a controller-runtime cache are cluster-scoped, meaning it watches and caches objects across all namespaces. Thus, be careful which objects to read from the cache as it might significantly increase the controller&amp;rsquo;s memory footprint.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>There is no interaction with the cache on writing calls (&lt;code>Create&lt;/code>, &lt;code>Update&lt;/code>, &lt;code>Patch&lt;/code> and &lt;code>Delete&lt;/code>), see below.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Uncached objects, filtered caches, &lt;code>APIReader&lt;/code>s:&lt;/strong>&lt;/p>
&lt;p>In order to allow more granular control over which object kinds should be cached and which calls should bypass the cache, controller-runtime offers a few mechanisms to further tweak the client/cache behavior:&lt;/p>
&lt;ul>
&lt;li>When creating a &lt;code>DelegatingClient&lt;/code>, certain object kinds can be configured to always be read directly from the API instead of from the cache. Note that this does not prevent starting a new Informer when retrieving them directly from the cache.&lt;/li>
&lt;li>Watches can be restricted to a given (set of) namespace(s) by using &lt;code>cache.MultiNamespacedCacheBuilder&lt;/code> or setting &lt;code>cache.Options.Namespace&lt;/code>.&lt;/li>
&lt;li>Watches can be filtered (e.g., by label) per object kind by configuring &lt;code>cache.Options.SelectorsByObject&lt;/code> on creation of the cache.&lt;/li>
&lt;li>Retrieving metadata-only objects or lists from a cache results in a metadata-only watch/cache for that object kind.&lt;/li>
&lt;li>The &lt;code>APIReader&lt;/code> can be used to always talk directly to the API server for a given &lt;code>Get&lt;/code> or &lt;code>List&lt;/code> call (use with care and only as a last resort!).&lt;/li>
&lt;/ul>
&lt;h3 id="to-cache-or-not-to-cache">To Cache or Not to Cache&lt;/h3>
&lt;p>Although watch-based caches are an important factor for the immense scalability of Kubernetes, it definitely comes at a price (mainly in terms of memory consumption).
Thus, developers need to be careful when introducing new API calls and caching new object kinds.
Here are some general guidelines on choosing whether to read from a cache or not:&lt;/p>
&lt;ul>
&lt;li>Always try to use the cache wherever possible and make your controller able to tolerate stale reads.
&lt;ul>
&lt;li>Leverage optimistic locking: use deterministic naming for objects you create (this is what the &lt;code>Deployment&lt;/code> controller does [2]).&lt;/li>
&lt;li>Leverage optimistic locking / concurrency control of the API server: send updates/patches with the last-known &lt;code>resourceVersion&lt;/code> from the cache (see below). This will make the request fail, if there were concurrent updates to the object (conflict error), which indicates that we have operated on stale data and might have made wrong decisions. In this case, let the controller handle the error with exponential backoff. This will make the controller eventually consistent.&lt;/li>
&lt;li>Track the actions you took, e.g., when creating objects with &lt;code>generateName&lt;/code> (this is what the &lt;code>ReplicaSet&lt;/code> controller does [3]). The actions can be tracked in memory and repeated if the expected watch events don&amp;rsquo;t occur after a given amount of time.&lt;/li>
&lt;li>Always try to write controllers with the assumption that data will only be eventually correct and can be slightly out of date (even if read directly from the API server!).&lt;/li>
&lt;li>If there is already some other code that needs a cache (e.g., a controller watch), reuse it instead of doing extra direct reads.&lt;/li>
&lt;li>Don&amp;rsquo;t read an object again if you just sent a write request. Write requests (&lt;code>Create&lt;/code>, &lt;code>Update&lt;/code>, &lt;code>Patch&lt;/code> and &lt;code>Delete&lt;/code>) don&amp;rsquo;t interact with the cache. Hence, use the current state that the API server returned (filled into the passed in-memory object), which is basically a &amp;ldquo;free direct read&amp;rdquo;, instead of reading the object again from a cache, because this will probably set back the object to an older &lt;code>resourceVersion&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If you are concerned about the impact of the resulting cache, try to minimize that by using filtered or metadata-only watches.&lt;/li>
&lt;li>If watching and caching an object type is not feasible, for example because there will be a lot of updates, and you are only interested in the object every ~5m, or because it will blow up the controllers memory footprint, fallback to a direct read. This can either be done by disabling caching the object type generally or doing a single request via an &lt;code>APIReader&lt;/code>. In any case, please bear in mind that every direct API call results in a &lt;a href="https://kubernetes.io/docs/reference/using-api/api-concepts/#the-resourceversion-parameter">quorum read from etcd&lt;/a>, which can be costly in a heavily-utilized cluster and impose significant scalability limits. Thus, always try to minimize the impact of direct calls by filtering results by namespace or labels, limiting the number of results and/or using metadata-only calls.&lt;/li>
&lt;/ul>
&lt;p>[2] The &lt;code>Deployment&lt;/code> controller uses the pattern &lt;code>&amp;lt;deployment-name&amp;gt;-&amp;lt;podtemplate-hash&amp;gt;&lt;/code> for naming &lt;code>ReplicaSets&lt;/code>. This means, the name of a &lt;code>ReplicaSet&lt;/code> it tries to create/update/delete at any given time is deterministically calculated based on the &lt;code>Deployment&lt;/code> object. By this, it is insusceptible to stale reads from its &lt;code>ReplicaSets&lt;/code> cache.&lt;/p>
&lt;p>[3] In simple terms, the &lt;code>ReplicaSet&lt;/code> controller tracks its &lt;code>CREATE pod&lt;/code> actions as follows: when creating new &lt;code>Pods&lt;/code>, it increases a counter of expected &lt;code>ADDED&lt;/code> watch events for the corresponding &lt;code>ReplicaSet&lt;/code>. As soon as such events arrive, it decreases the counter accordingly. It only creates new &lt;code>Pods&lt;/code> for a given &lt;code>ReplicaSet&lt;/code>, once all expected events occurred (counter is back to zero) or a timeout occurred. This way, it prevents creating more &lt;code>Pods&lt;/code> than desired because of stale cache reads and makes the controller eventually consistent.&lt;/p>
&lt;h2 id="conflicts-concurrency-control-and-optimistic-locking">Conflicts, Concurrency Control and Optimistic Locking&lt;/h2>
&lt;p>Every Kubernetes API object contains the &lt;code>metadata.resourceVersion&lt;/code> field, which identifies an object&amp;rsquo;s version in the backing data store, i.e., etcd. Every write to an object in etcd results in a newer &lt;code>resourceVersion&lt;/code>.
This field is mainly used for concurrency control on the API server in an optimistic locking fashion, but also for efficient resumption of interrupted watch connections.&lt;/p>
&lt;p>Optimistic locking in the Kubernetes API sense means that when a client wants to update an API object then it includes the object&amp;rsquo;s &lt;code>resourceVersion&lt;/code> in the request to indicate the object&amp;rsquo;s version the modifications are based on.
If the &lt;code>resourceVersion&lt;/code> in etcd has not changed in the meantime, the update request is accepted by the API server and the updated object is written to etcd.
If the &lt;code>resourceVersion&lt;/code> sent by the client does not match the one of the object stored in etcd, there were concurrent modifications to the object. Consequently, the request is rejected with a conflict error (status code &lt;code>409&lt;/code>, API reason &lt;code>Conflict&lt;/code>), for example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&amp;#34;kind&amp;#34;: &lt;span style="color:#a31515">&amp;#34;Status&amp;#34;&lt;/span>,
&amp;#34;apiVersion&amp;#34;: &lt;span style="color:#a31515">&amp;#34;v1&amp;#34;&lt;/span>,
&amp;#34;metadata&amp;#34;: {},
&amp;#34;status&amp;#34;: &lt;span style="color:#a31515">&amp;#34;Failure&amp;#34;&lt;/span>,
&amp;#34;message&amp;#34;: &lt;span style="color:#a31515">&amp;#34;Operation cannot be fulfilled on configmaps \&amp;#34;foo\&amp;#34;: the object has been modified; please apply your changes to the latest version and try again&amp;#34;&lt;/span>,
&amp;#34;reason&amp;#34;: &lt;span style="color:#a31515">&amp;#34;Conflict&amp;#34;&lt;/span>,
&amp;#34;details&amp;#34;: {
&amp;#34;name&amp;#34;: &lt;span style="color:#a31515">&amp;#34;foo&amp;#34;&lt;/span>,
&amp;#34;kind&amp;#34;: &lt;span style="color:#a31515">&amp;#34;configmaps&amp;#34;&lt;/span>
},
&amp;#34;code&amp;#34;: 409
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This concurrency control is an important mechanism in Kubernetes as there are typically multiple clients acting on API objects at the same time (humans, different controllers, etc.). If a client receives a conflict error, it should read the object&amp;rsquo;s latest version from the API server, make the modifications based on the newest changes and retry the update.
The reasoning behind this is that a client might choose to make different decisions based on the concurrent changes made by other actors compared to the outdated version that it operated on.&lt;/p>
&lt;p>&lt;em>Important points about concurrency control and conflicts:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>The &lt;code>resourceVersion&lt;/code> field carries a string value and clients must not assume numeric values (the type and structure of versions depend on the backing data store). This means clients may compare &lt;code>resourceVersion&lt;/code> values to detect whether objects were changed. But they must not compare &lt;code>resourceVersion&lt;/code>s to figure out which one is newer/older, i.e., no greater/less-than comparisons are allowed.&lt;/li>
&lt;li>By default, update calls (e.g. via client-go and controller-runtime clients) use optimistic locking as the passed in-memory usually object contains the latest &lt;code>resourceVersion&lt;/code> known to the controller which is then also sent to the API server.&lt;/li>
&lt;li>API servers can also choose to accept update calls without optimistic locking (i.e., without a &lt;code>resourceVersion&lt;/code> in the object&amp;rsquo;s metadata) for any given resource. However, sending update requests without optimistic locking is strongly discouraged as doing so overwrites the entire object discarding any concurrent changes made to it.&lt;/li>
&lt;li>On the other side, patch requests can always be executed either with or without optimistic locking, by (not) including the &lt;code>resourceVersion&lt;/code> in the patched object&amp;rsquo;s metadata. Sending patch requests without optimistic locking might be safe and even desirable as a patch typically updates only a specific section of the object. However, there are also situations where patching without optimistic locking is not safe (see below).&lt;/li>
&lt;/ul>
&lt;h3 id="dont-retry-on-conflict">Don’t Retry on Conflict&lt;/h3>
&lt;p>Similar to how a human would typically handle a conflict error, there are helper functions implementing &lt;code>RetryOnConflict&lt;/code>-semantics, i.e., try an update call, then re-read the object if a conflict occurs, apply the modification again and retry the update.
However, controllers should generally &lt;em>not&lt;/em> use &lt;code>RetryOnConflict&lt;/code>-semantics. Instead, controllers should abort their current reconciliation run and let the queue handle the conflict error with exponential backoff.
The reasoning behind this is, that a conflict error indicates that the controller has operated on stale data and might have made wrong decisions earlier on in the reconciliation.
When using a helper function that implements &lt;code>RetryOnConflict&lt;/code>-semantics, the controller doesn&amp;rsquo;t check which fields were changed and doesn&amp;rsquo;t revise its previous decisions accordingly.
Instead, retrying on conflict basically just ignores any conflict error and blindly applies the modification.&lt;/p>
&lt;p>To properly solve the conflict situation, controllers should immediately return with the error from the update call. This will cause retries with exponential backoff so that the cache has a chance to observe the latest changes to the object.
In a later run, the controller will then make correct decisions based on the newest version of the object, not run into conflict errors and will then be able to successfully reconcile the object. This way, the controller becomes eventually consistent.&lt;/p>
&lt;p>The other way to solve the situation is to modify objects without optimistic locking in order to avoid running into a conflict in the first place (only if this is safe).
This can be a preferable solution for controllers with long-running reconciliations (which is actually an anti-pattern but quite unavoidable in some of Gardener&amp;rsquo;s controllers).
Aborting the entire reconciliation run is rather undesirable in such cases as it will add a lot of unnecessary waiting time for end users and overhead in terms of compute and network usage.&lt;/p>
&lt;p>However, in any case retrying on conflict is probably not the right option to solve the situation (there are some correct use cases for it, though, they are very rare). Hence, don&amp;rsquo;t retry on conflict.&lt;/p>
&lt;h3 id="to-lock-or-not-to-lock">To Lock or Not to Lock&lt;/h3>
&lt;p>As explained before, conflicts are actually important and prevent clients from doing wrongful concurrent updates. This means, conflicts are not something we generally want to avoid or ignore.
However, in many cases controllers are exclusive owners of the fields they want to update and thus it might be safe to run without optimistic locking.&lt;/p>
&lt;p>For example, the gardenlet is the exclusive owner of the &lt;code>spec&lt;/code> section of the Extension resources it creates on behalf of a Shoot (e.g., the &lt;code>Infrastructure&lt;/code> resource for creating VPC, etc.). Meaning, it knows the exact desired state and no other actor is supposed to update the Infrastructure&amp;rsquo;s &lt;code>spec&lt;/code> fields.
When the gardenlet now updates the Infrastructures &lt;code>spec&lt;/code> section as part of the Shoot reconciliation, it can simply issue a &lt;code>PATCH&lt;/code> request that only updates the &lt;code>spec&lt;/code> and runs without optimistic locking.
If another controller concurrently updated the object in the meantime (e.g., the &lt;code>status&lt;/code> section), the &lt;code>resourceVersion&lt;/code> got changed which would cause a conflict error if running with optimistic locking.
However, concurrent &lt;code>status&lt;/code> updates would not change the gardenlet&amp;rsquo;s mind on the desired &lt;code>spec&lt;/code> of the Infrastructure resource as it is determined only by looking at the Shoot&amp;rsquo;s specification.
If the &lt;code>spec&lt;/code> section was changed concurrently, it&amp;rsquo;s still fine to overwrite it because the gardenlet should reconcile the &lt;code>spec&lt;/code> back to its desired state.&lt;/p>
&lt;p>Generally speaking, if a controller is the exclusive owner of a given set of fields and they are independent of concurrent changes to other fields in that object, it can patch these fields without optimistic locking.
This might ignore concurrent changes to other fields or blindly overwrite changes to the same fields, but this is fine if the mentioned conditions apply.
Obviously, this applies only to patch requests that modify only a specific set of fields but not to update requests that replace the entire object.&lt;/p>
&lt;p>In such cases, it&amp;rsquo;s even desirable to run without optimistic locking as it will be more performant and save retries.
If certain requests are made with high frequency and have a good chance of causing conflicts, retries because of optimistic locking can cause a lot of additional network traffic in a large-scale Gardener installation.&lt;/p>
&lt;h2 id="updates-patches-server-side-apply">Updates, Patches, Server-side Apply&lt;/h2>
&lt;p>There are different ways of modifying Kubernetes API objects.
The following snippet demonstrates how to do a given modification with the most frequently used options using a controller-runtime client:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#00f">var&lt;/span> (
ctx context.Context
c client.Client
shoot *gardencorev1beta1.Shoot
)
&lt;span style="color:#008000">// update
&lt;/span>&lt;span style="color:#008000">&lt;/span>shoot.Spec.Kubernetes.Version = &lt;span style="color:#a31515">&amp;#34;1.22&amp;#34;&lt;/span>
err := c.Update(ctx, shoot)
&lt;span style="color:#008000">// json merge patch
&lt;/span>&lt;span style="color:#008000">&lt;/span>patch := client.MergeFrom(shoot.DeepCopy())
shoot.Spec.Kubernetes.Version = &lt;span style="color:#a31515">&amp;#34;1.22&amp;#34;&lt;/span>
err = c.Patch(ctx, shoot, patch)
&lt;span style="color:#008000">// strategic merge patch
&lt;/span>&lt;span style="color:#008000">&lt;/span>patch = client.StrategicMergeFrom(shoot.DeepCopy())
shoot.Spec.Kubernetes.Version = &lt;span style="color:#a31515">&amp;#34;1.22&amp;#34;&lt;/span>
err = c.Patch(ctx, shoot, patch)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Important characteristics of the shown request types:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Update requests always send the entire object to the API server and update all fields accordingly. By default, optimistic locking is used (&lt;code>resourceVersion&lt;/code> is included).&lt;/li>
&lt;li>Both patch types run without optimistic locking by default. However, it can be enabled explicitly if needed:
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#008000">// json merge patch + optimistic locking
&lt;/span>&lt;span style="color:#008000">&lt;/span>patch := client.MergeFromWithOptions(shoot.DeepCopy(), client.MergeFromWithOptimisticLock{})
&lt;span style="color:#008000">// ...
&lt;/span>&lt;span style="color:#008000">&lt;/span>
&lt;span style="color:#008000">// strategic merge patch + optimistic locking
&lt;/span>&lt;span style="color:#008000">&lt;/span>patch = client.StrategicMergeFrom(shoot.DeepCopy(), client.MergeFromWithOptimisticLock{})
&lt;span style="color:#008000">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Patch requests only contain the changes made to the in-memory object between the copy passed to &lt;code>client.*MergeFrom&lt;/code> and the object passed to &lt;code>Client.Patch()&lt;/code>. The diff is calculated on the client-side based on the in-memory objects only. This means, if in the meantime some fields were changed on the API server to a different value than the one on the client-side, the fields will not be changed back as long as they are not changed on the client-side as well (there will be no diff in memory).&lt;/li>
&lt;li>Thus, if you want to ensure a given state using patch requests, always read the object first before patching it, as there will be no diff otherwise, meaning the patch will be empty. Also see &lt;a href="https://github.com/gardener/gardener/pull/4057">gardener/gardener#4057&lt;/a> and comments in &lt;a href="https://github.com/gardener/gardener/pull/4027">gardener/gardener#4027&lt;/a>.&lt;/li>
&lt;li>Also, always send updates and patch requests even if your controller hasn&amp;rsquo;t made any changes to the current state on the API server. I.e., don&amp;rsquo;t make any optimization for preventing empty patches or no-op updates. There might be mutating webhooks in the system that will modify the object and that rely on update/patch requests being sent (even if they are no-op). Gardener&amp;rsquo;s extension concept makes heavy use of mutating webhooks, so it&amp;rsquo;s important to keep this in mind.&lt;/li>
&lt;li>JSON merge patches always replace lists as a whole and don&amp;rsquo;t merge them. Keep this in mind when operating on lists with merge patch requests. If the controller is the exclusive owner of the entire list, it&amp;rsquo;s safe to run without optimistic locking. Though, if you want to prevent overwriting concurrent changes to the list or its items made by other actors (e.g., additions/removals to the &lt;code>metadata.finalizers&lt;/code> list), enable optimistic locking.&lt;/li>
&lt;li>Strategic merge patches are able to make more granular modifications to lists and their elements without replacing the entire list. It uses Golang struct tags of the API types to determine which and how lists should be merged. See &lt;a href="https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/">this document&lt;/a> or the &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-api-machinery/strategic-merge-patch.md">strategic merge patch documentation&lt;/a> for more in-depth explanations and comparison with JSON merge patches.
With this, controllers &lt;em>might&lt;/em> be able to issue patch requests for individual list items without optimistic locking, even if they are not exclusive owners of the entire list. Remember to check the &lt;code>patchStrategy&lt;/code> and &lt;code>patchMergeKey&lt;/code> struct tags of the fields you want to modify before blindly adding patch requests without optimistic locking.&lt;/li>
&lt;li>Strategic merge patches are only supported by built-in Kubernetes resources and custom resources served by Extension API servers. Strategic merge patches are not supported by custom resources defined by &lt;code>CustomResourceDefinition&lt;/code>s (see &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/#advanced-features-and-flexibility">this comparison&lt;/a>). In that case, fallback to JSON merge patches.&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/using-api/server-side-apply/">Server-side Apply&lt;/a> is yet another mechanism to modify API objects, which is supported by all API resources (in newer Kubernetes versions). However, it has a few problems and more caveats preventing us from using it in Gardener at the time of writing. See &lt;a href="https://github.com/gardener/gardener/issues/4122">gardener/gardener#4122&lt;/a> for more details.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Generally speaking, patches are often the better option compared to update requests because they can save network traffic, encoding/decoding effort and avoid conflicts under the presented conditions.
If choosing a patch type, consider which type is supported by the resource you&amp;rsquo;re modifying and what will happen in case of a conflict. Consider whether your modification is safe to run without optimistic locking.
However, there is no simple rule of thumb on which patch type to choose.&lt;/p>
&lt;/blockquote>
&lt;h2 id="on-helper-functions">On Helper Functions&lt;/h2>
&lt;p>Here is a note on some helper functions, that should be avoided and why:&lt;/p>
&lt;p>&lt;code>controllerutil.CreateOrUpdate&lt;/code> does a basic get, mutate and create or update call chain, which is often used in controllers. We should avoid using this helper function in Gardener, because it is likely to cause conflicts for cached clients and doesn&amp;rsquo;t send no-op requests if nothing was changed, which can cause problems because of the heavy use of webhooks in Gardener extensions (see above).
That&amp;rsquo;s why usage of this function was completely replaced in &lt;a href="https://github.com/gardener/gardener/pull/4227">gardener/gardener#4227&lt;/a> and similar PRs.&lt;/p>
&lt;p>&lt;code>controllerutil.CreateOrPatch&lt;/code> is similar to &lt;code>CreateOrUpdate&lt;/code> but does a patch request instead of an update request. It has the same drawback as &lt;code>CreateOrUpdate&lt;/code> regarding no-op updates.
Also, controllers can&amp;rsquo;t use optimistic locking or strategic merge patches when using &lt;code>CreateOrPatch&lt;/code>.
Another reason for avoiding use of this function is, that it also implicitly patches the status section if it was changed, which is confusing for others reading the code. To accomplish this, the func does some back and forth conversion, comparison and checks, which are unnecessary in most of our cases and simply wasted CPU cycles and complexity we want to avoid.&lt;/p>
&lt;p>There were some &lt;code>Try{Update,UpdateStatus,Patch,PatchStatus}&lt;/code> helper functions in Gardener that were already removed by &lt;a href="https://github.com/gardener/gardener/pull/4378">gardener/gardener#4378&lt;/a> but are still used in some extension code at the time of writing.
The reason for eliminating these functions is that they implement &lt;code>RetryOnConflict&lt;/code>-semantics. Meaning, they first get the object, mutate it, then try to update and retry if a conflict error occurs.
As explained above, retrying on conflict is a controller anti-pattern and should be avoided in almost every situation.
The other problem with these functions is that they read the object first from the API server (always do a direct call), although in most cases we already have a recent version of the object at hand. So, using this function generally does unnecessary API calls and therefore causes unwanted compute and network load.&lt;/p>
&lt;p>For the reasons explained above, there are similar helper functions that accomplish similar things but address the mentioned drawbacks: &lt;code>controllerutils.{GetAndCreateOrMergePatch,GetAndCreateOrStrategicMergePatch}&lt;/code>.
These can be safely used as replacements for the aforementioned helper funcs.
If they are not fitting for your use case, for example because you need to use optimistic locking, just do the appropriate calls in the controller directly.&lt;/p>
&lt;h2 id="further-resources">Further Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=RPsUo925PUA&amp;amp;t=40s">Kubernetes Client usage in Gardener&lt;/a> (Community Meeting talk, 2020-06-26)&lt;/li>
&lt;/ul>
&lt;p>These resources are only partially related to the topics covered in this doc, but might still be interesting for developer seeking a deeper understanding of Kubernetes API machinery, architecture and foundational concepts.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md">API Conventions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/resource-management.md">The Kubernetes Resource Model&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Local Setup</title><link>https://gardener.cloud/docs/gardener/development/local_setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/local_setup/</guid><description>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;p>Conceptually, all Gardener components are designed to run as a Pod inside a Kubernetes cluster.
The Gardener API server extends the Kubernetes API via the user-aggregated API server concepts.
However, if you want to develop it, you may want to work locally with the Gardener without building a Docker image and deploying it to a cluster each and every time.
That means that the Gardener runs outside a Kubernetes cluster which requires providing a &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/authenticate-across-clusters-kubeconfig/">Kubeconfig&lt;/a> in your local filesystem and point the Gardener to it when starting it (see below).&lt;/p>
&lt;p>Further details can be found in&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/">Principles of Kubernetes&lt;/a>, and its &lt;a href="https://kubernetes.io/docs/concepts/overview/components/">components&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/community/tree/master/contributors/devel">Kubernetes Development Guide&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/documentation/wiki/Architecture">Architecture of Gardener&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>This guide is split into three main parts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#preparing-the-setup">Preparing your setup by installing all dependencies and tools&lt;/a>&lt;/li>
&lt;li>&lt;a href="#start-gardener-locally">Building and starting Gardener components locally&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-a-shoot">Using your local Gardener setup to create a Shoot&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="limitations-of-the-local-development-setup">Limitations of the local development setup&lt;/h2>
&lt;p>You can run Gardener (API server, controller manager, scheduler, gardenlet) against any local Kubernetes cluster, however, your seed and shoot clusters must be deployed to a cloud provider.
Currently, it is not possible to run Gardener entirely isolated from any cloud provider. This means that to be able create Shoot clusters you need to register an external Seed cluster (e.g., one created in AWS).&lt;/p>
&lt;h1 id="preparing-the-setup">Preparing the Setup&lt;/h1>
&lt;h2 id="macos-only-installing-homebrew">[macOS only] Installing homebrew&lt;/h2>
&lt;p>The copy-paste instructions in this guide are designed for macOS and use the package manager &lt;a href="https://brew.sh/">Homebrew&lt;/a>.&lt;/p>
&lt;p>On macOS run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">/bin/bash -c &lt;span style="color:#a31515">&amp;#34;&lt;/span>&lt;span style="color:#00f">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span style="color:#00f">)&lt;/span>&lt;span style="color:#a31515">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installing-git">Installing git&lt;/h2>
&lt;p>We use &lt;code>git&lt;/code> as VCS which you need to install. On macOS run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">brew install git
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For other OS, please check the &lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">Git installation documentation&lt;/a>.&lt;/p>
&lt;h2 id="installing-go">Installing Go&lt;/h2>
&lt;p>Install the latest version of Go. On macOS run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">brew install go
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For other OS, please check &lt;a href="https://golang.org/doc/install">Go installation documentation&lt;/a>.&lt;/p>
&lt;h2 id="installing-kubectl">Installing kubectl&lt;/h2>
&lt;p>Install &lt;code>kubectl&lt;/code>. Please make sure that the version of &lt;code>kubectl&lt;/code> is at least &lt;code>v1.11.x&lt;/code>. On macOS run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">brew install kubernetes-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For other OS, please check the &lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">kubectl installation documentation&lt;/a>.&lt;/p>
&lt;h2 id="installing-helm">Installing helm&lt;/h2>
&lt;p>You also need the &lt;a href="https://github.com/kubernetes/helm">Helm&lt;/a> CLI. On macOS run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">brew install helm
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For other OS please check the &lt;a href="https://helm.sh/docs/intro/install/">Helm installation documentation&lt;/a>.&lt;/p>
&lt;h2 id="installing-openvpn">Installing openvpn&lt;/h2>
&lt;p>We use &lt;code>OpenVPN&lt;/code> to establish network connectivity from the control plane running in the Seed cluster to the Shoot&amp;rsquo;s worker nodes running in private networks.
To harden the security we need to generate another secret to encrypt the network traffic (&lt;a href="https://openvpn.net/index.php/open-source/documentation/howto.html#security">details&lt;/a>).
Please install the &lt;code>openvpn&lt;/code> binary. On macOS run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">brew install openvpn
export PATH=&lt;span style="color:#00f">$(&lt;/span>brew --prefix openvpn&lt;span style="color:#00f">)&lt;/span>/sbin:$PATH
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For other OS, please check the &lt;a href="https://openvpn.net/index.php/open-source/downloads.html">OpenVPN downloads page&lt;/a>.&lt;/p>
&lt;h2 id="installing-docker">Installing Docker&lt;/h2>
&lt;p>You need to have docker installed and running. On macOS run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">brew install --cask docker
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For other OS please check the &lt;a href="https://docs.docker.com/get-docker/">docker installation documentation&lt;/a>.&lt;/p>
&lt;h2 id="installing-iproute2">Installing iproute2&lt;/h2>
&lt;p>&lt;code>iproute2&lt;/code> provides a collection of utilities for network administration and configuration. On macOS run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">brew install iproute2mac
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installing-jq">Installing jq&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">brew install jq
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installing-gnu-parallel">Installing GNU Parallel&lt;/h2>
&lt;p>&lt;a href="https://www.gnu.org/software/parallel/">GNU Parallel&lt;/a> is a shell tool for executing jobs in parallel, used by the code generation scripts (&lt;code>make generate&lt;/code>). On macOS run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">brew install parallel
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="macos-only-install-gnu-core-utilities">[macOS only] Install GNU core utilities&lt;/h2>
&lt;p>When running on macOS, install the GNU core utilities and friends:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">brew install coreutils gnu-sed gnu-tar grep
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will create symbolic links for the GNU utilities with &lt;code>g&lt;/code> prefix in &lt;code>/usr/local/bin&lt;/code>, e.g., &lt;code>gsed&lt;/code> or &lt;code>gbase64&lt;/code>. To allow using them without the &lt;code>g&lt;/code> prefix please put &lt;code>/usr/local/opt/coreutils/libexec/gnubin&lt;/code> etc. at the beginning of your &lt;code>PATH&lt;/code> environment variable, e.g., &lt;code>export PATH=/usr/local/opt/coreutils/libexec/gnubin:$PATH&lt;/code> (&lt;code>brew&lt;/code> will print out instructions for each installed formula).&lt;/p>
&lt;h2 id="windows-only-wsl2">[Windows only] WSL2&lt;/h2>
&lt;p>Apart from Linux distributions and macOS, the local gardener setup can also run on the Windows Subsystem for Linux 2.&lt;/p>
&lt;p>While WSL1, plain docker for windows and various Linux distributions and local Kubernetes environments may be supported, this setup was verified with:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-index">WSL2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/docker-for-windows/wsl/">Docker Desktop WSL2 Engine&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ubuntu.com/blog/ubuntu-on-wsl-2-is-generally-available">Ubuntu 18.04 LTS on WSL2&lt;/a>&lt;/li>
&lt;li>Nodeless local garden (see below)&lt;/li>
&lt;/ul>
&lt;p>The Gardener repository and all the above-mentioned tools (git, golang, kubectl, &amp;hellip;) should be installed in your WSL2 distro, according to the distribution-specific Linux installation instructions.&lt;/p>
&lt;h1 id="start-gardener-locally">Start Gardener locally&lt;/h1>
&lt;h2 id="get-the-sources">Get the sources&lt;/h2>
&lt;p>Clone the repository from GitHub into your &lt;code>$GOPATH&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir -p $GOPATH/src/github.com/gardener
cd $GOPATH/src/github.com/gardener
git clone git@github.com:gardener/gardener.git
cd gardener
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Note: Gardener is using Go modules and cloning the repository into &lt;code>$GOPATH&lt;/code> is not a hard requirement. However it is still recommended to clone into &lt;code>$GOPATH&lt;/code> because &lt;code>k8s.io/code-generator&lt;/code> does not work yet outside of &lt;code>$GOPATH&lt;/code> - &lt;a href="https://github.com/kubernetes/kubernetes/issues/86753">kubernetes/kubernetes#86753&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="start-the-gardener">Start the Gardener&lt;/h2>
&lt;p>ℹ️ In the following guide, you have to define the configuration (&lt;code>CloudProfile&lt;/code>s, &lt;code>SecretBinding&lt;/code>s, &lt;code>Seed&lt;/code>s, etc.) manually for the infrastructure environment you want to develop against.
Additionally, you have to register the respective Gardener extensions manually.
If you are rather looking for a quick start guide to develop entirely locally on your machine (no real cloud provider or infrastructure involved) then you should rather follow &lt;a href="https://gardener.cloud/docs/gardener/development/getting_started_locally/">this guide&lt;/a>.&lt;/p>
&lt;h3 id="start-a-local-kubernetes-cluster">Start a local kubernetes cluster&lt;/h3>
&lt;p>For the development of Gardener you need a Kubernetes API server on which you can register Gardener&amp;rsquo;s own Extension API Server as &lt;code>APIService&lt;/code>. This cluster doesn&amp;rsquo;t need any worker nodes to run pods, though, therefore, you can use the &amp;ldquo;nodeless Garden cluster setup&amp;rdquo; residing in &lt;code>hack/local-garden&lt;/code>. This will start all minimally required components of a Kubernetes cluster (&lt;code>etcd&lt;/code>, &lt;code>kube-apiserver&lt;/code>, &lt;code>kube-controller-manager&lt;/code>)
and an &lt;code>etcd&lt;/code> Instance for the &lt;code>gardener-apiserver&lt;/code> as Docker containers. This is the easiest way to get your
Gardener development setup up and running.&lt;/p>
&lt;p>&lt;strong>Using the nodeless cluster setup&lt;/strong>&lt;/p>
&lt;p>Use the provided Makefile rules to start your local Garden:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make local-garden-up
[...]
Starting gardener-dev kube-etcd cluster..!
Starting gardener-dev kube-apiserver..!
Starting gardener-dev kube-controller-manager..!
Starting gardener-dev gardener-etcd cluster..!
namespace/garden created
clusterrole.rbac.authorization.k8s.io/gardener.cloud:admin created
clusterrolebinding.rbac.authorization.k8s.io/front-proxy-client created
[...]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ℹ️ [Optional] If you want to develop the &lt;code>SeedAuthorization&lt;/code> feature then you have to run &lt;code>make ACTIVATE_SEEDAUTHORIZER=true local-garden-up&lt;/code>. However, please note that this forces you to start the &lt;code>gardener-admission-controller&lt;/code> via &lt;code>make start-admission-controller&lt;/code>.&lt;/p>
&lt;p>To tear down the local Garden cluster and remove the Docker containers, simply run:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make local-garden-down
&lt;/code>&lt;/pre>&lt;/div>&lt;details>
&lt;summary>&lt;b>Alternative: Using a local kubernetes cluster&lt;/b>&lt;/summary>
&lt;p>Instead of starting a kubernetes API server and etcd as docker containers, you can also opt for running a local kubernetes cluster, provided by e.g. &lt;a href="https://minikube.sigs.k8s.io/docs/start/">minikube&lt;/a>, &lt;a href="https://kind.sigs.k8s.io/docs/user/quick-start/">kind&lt;/a> or docker desktop.&lt;/p>
&lt;blockquote>
&lt;p>Note: Gardener requires self-contained kubeconfig files because of a &lt;a href="https://banzaicloud.com/blog/kubeconfig-security/">security issue&lt;/a>. You can configure your minikube to create self-contained kubeconfig files via:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">minikube config set embed-certs true
&lt;/code>&lt;/pre>&lt;/div>&lt;p>or when starting the local cluster&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">minikube start --embed-certs
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;/details>
&lt;details>
&lt;summary>&lt;b>Alternative: Using a remote kubernetes cluster&lt;/b>&lt;/summary>
&lt;p>For some testing scenarios, you may want to use a remote cluster instead of a local one as your Garden cluster.
To do this, you can use the &amp;ldquo;remote Garden cluster setup&amp;rdquo; residing in &lt;code>hack/remote-garden&lt;/code>. This will start an &lt;code>etcd&lt;/code> instance for the &lt;code>gardener-apiserver&lt;/code> as a Docker container, and open tunnels for accessing local gardener components from the remote cluster.&lt;/p>
&lt;p>To avoid mistakes, the remote cluster must have a &lt;code>garden&lt;/code> namespace labeled with &lt;code>gardener.cloud/purpose=remote-garden&lt;/code>.
You must create the &lt;code>garden&lt;/code> namespace and label it manually before running &lt;code>make remote-garden-up&lt;/code> as described below.&lt;/p>
&lt;p>Use the provided &lt;code>Makefile&lt;/code> rules to bootstrap your remote Garden:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">export KUBECONFIG=&amp;lt;path to kubeconfig&amp;gt;
make remote-garden-up
[...]
&lt;span style="color:#008000"># Start gardener etcd used to store gardener resources (e.g., seeds, shoots)&lt;/span>
Starting gardener-dev-remote gardener-etcd cluster!
[...]
&lt;span style="color:#008000"># Open tunnels for accessing local gardener components from the remote cluster&lt;/span>
[...]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To close the tunnels and remove the locally-running Docker containers, run:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make remote-garden-down
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Note: The minimum K8S version of the remote cluster that can be used as Garden cluster is &lt;code>1.19.x&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>ℹ️ [Optional] If you want to use the remote Garden cluster setup with the &lt;code>SeedAuthorization&lt;/code> feature you have to adapt the &lt;code>kube-apiserver&lt;/code> process of your remote Garden cluster. To do this, perform the following steps after running &lt;code>make remote-garden-up&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Create an &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/webhook/#configuration-file-format">authorization webhook configuration file&lt;/a> using the IP of the &lt;code>garden/quic-server&lt;/code> pod running in your remote Garden cluster and port 10444 that tunnels to your locally running &lt;code>gardener-admission-controller&lt;/code> process.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: v1
kind: Config
current-context: seedauthorizer
clusters:
- name: gardener-admission-controller
cluster:
insecure-skip-tls-verify: &lt;span style="color:#00f">true&lt;/span>
server: https://&amp;lt;quic-server-pod-ip&amp;gt;:10444/webhooks/auth/seed
users:
- name: kube-apiserver
user: {}
contexts:
- name: seedauthorizer
context:
cluster: gardener-admission-controller
user: kube-apiserver
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Change or add the following command line parameters to your &lt;code>kube-apiserver&lt;/code> process:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--authorization-mode=&amp;lt;...&amp;gt;,Webhook&lt;/code>&lt;/li>
&lt;li>&lt;code>--authorization-webhook-config-file=&amp;lt;path to config file&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>--authorization-webhook-cache-authorized-ttl=0&lt;/code>&lt;/li>
&lt;li>&lt;code>--authorization-webhook-cache-unauthorized-ttl=0&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Delete the cluster role and rolebinding &lt;code>gardener.cloud:system:seeds&lt;/code> from your remote Garden cluster.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>If your remote Garden cluster is a Gardener shoot, and you can access the seed on which this shoot is scheduled, you can automate the above steps by running the &lt;a href="https://github.com/gardener/gardener/blob/master/hack/local-development/remote-garden/enable-seed-authorizer">&lt;code>enable-seed-authorizer&lt;/code> script&lt;/a> and passing the kubeconfig of the seed cluster and the shoot namespace as parameters:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">hack/local-development/remote-garden/enable-seed-authorizer &amp;lt;seed kubeconfig&amp;gt; &amp;lt;namespace&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Note: The configuration changes introduced by this script result in a working &lt;code>SeedAuthorization&lt;/code> feature only on shoots for which the &lt;code>ReversedVPN&lt;/code> feature is not enabled. If the corresponding feature gate is enabled in &lt;code>gardenlet&lt;/code>, add the annotation &lt;code>alpha.featuregates.shoot.gardener.cloud/reversed-vpn: 'false'&lt;/code> to the remote Garden shoot to disable it for that particular shoot.&lt;/p>
&lt;/blockquote>
&lt;p>To prevent Gardener from reconciling the shoot and overwriting your changes, add the annotation &lt;code>shoot.gardener.cloud/ignore: 'true'&lt;/code> to the remote Garden shoot. Note that this annotation takes effect only if it is enabled via the &lt;code>constollers.shoot.respectSyncPeriodOverwrite: true&lt;/code> option in the &lt;code>gardenlet&lt;/code> configuration.&lt;/p>
&lt;p>To disable the seed authorizer again, run the same script with &lt;code>-d&lt;/code> as a third parameter:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">hack/local-development/remote-garden/enable-seed-authorizer &amp;lt;seed kubeconfig&amp;gt; &amp;lt;namespace&amp;gt; -d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the seed authorizer is enabled, you also have to start the &lt;code>gardener-admission-controller&lt;/code> via &lt;code>make start-admission-controller&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>⚠️ In the remote garden setup all Gardener components run with administrative permissions, i.e., there is no fine-grained access control via RBAC (as opposed to productive installations of Gardener).&lt;/p>
&lt;/blockquote>
&lt;/details>
&lt;h3 id="prepare-the-gardener">Prepare the Gardener&lt;/h3>
&lt;p>Now, that you have started your local cluster, we can go ahead and register the Gardener API Server.
Just point your &lt;code>KUBECONFIG&lt;/code> environment variable to the cluster you created in the previous step and run:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make dev-setup
[...]
namespace/garden created
namespace/garden-dev created
deployment.apps/etcd created
service/etcd created
service/gardener-apiserver created
service/gardener-admission-controller created
endpoints/gardener-apiserver created
endpoints/gardener-admission-controller created
apiservice.apiregistration.k8s.io/v1alpha1.core.gardener.cloud created
apiservice.apiregistration.k8s.io/v1beta1.core.gardener.cloud created
apiservice.apiregistration.k8s.io/v1alpha1.seedmanagement.gardener.cloud created
apiservice.apiregistration.k8s.io/v1alpha1.settings.gardener.cloud created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ℹ️ [Optional] If you want to enable logging, in the Gardenlet configuration add:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">logging:
enabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Gardener exposes the API servers of Shoot clusters via Kubernetes services of type &lt;code>LoadBalancer&lt;/code>.
In order to establish stable endpoints (robust against changes of the load balancer address), it creates DNS records pointing to these load balancer addresses. They are used internally and by all cluster components to communicate.
You need to have control over a domain (or subdomain) for which these records will be created.
Please provide an &lt;em>internal domain secret&lt;/em> (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/10-secret-internal-domain.yaml">this&lt;/a> for an example) which contains credentials with the proper privileges. Further information can be found &lt;a href="https://gardener.cloud/docs/gardener/usage/configuration/">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f example/10-secret-internal-domain-unmanaged.yaml
secret/internal-domain-unmanaged created
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="run-the-gardener">Run the Gardener&lt;/h3>
&lt;p>Next, run the Gardener API Server, the Gardener Controller Manager (optionally), the Gardener Scheduler (optionally), and the Gardenlet in different terminal windows/panes using rules in the &lt;code>Makefile&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make start-apiserver
[...]
I0306 15:23:51.044421 74536 plugins.go:84] Registered admission plugin &lt;span style="color:#a31515">&amp;#34;ResourceReferenceManager&amp;#34;&lt;/span>
I0306 15:23:51.044523 74536 plugins.go:84] Registered admission plugin &lt;span style="color:#a31515">&amp;#34;DeletionConfirmation&amp;#34;&lt;/span>
[...]
I0306 15:23:51.626836 74536 secure_serving.go:116] Serving securely on [::]:8443
[...]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Optional) Now you are ready to launch the Gardener Controller Manager.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make start-controller-manager
time=&lt;span style="color:#a31515">&amp;#34;2019-03-06T15:24:17+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Starting Gardener controller manager...&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-03-06T15:24:17+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Feature Gates: &amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-03-06T15:24:17+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Starting HTTP server on 0.0.0.0:2718&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-03-06T15:24:17+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Acquired leadership, starting controllers.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Starting HTTPS server on 0.0.0.0:2719&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Found internal domain secret internal-domain-unmanaged for domain nip.io.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Successfully bootstrapped the Garden cluster.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Gardener controller manager (version 1.0.0-dev) initialized.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;ControllerRegistration controller initialized.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;SecretBinding controller initialized.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Project controller initialized.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Quota controller initialized.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;CloudProfile controller initialized.&amp;#34;&lt;/span>
[...]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Optional) Now you are ready to launch the Gardener Scheduler.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make start-scheduler
time=&lt;span style="color:#a31515">&amp;#34;2019-05-02T16:31:50+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Starting Gardener scheduler ...&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-05-02T16:31:50+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Starting HTTP server on 0.0.0.0:10251&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-05-02T16:31:50+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Acquired leadership, starting scheduler.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-05-02T16:31:50+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Gardener scheduler initialized (with Strategy: SameRegion)&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-05-02T16:31:50+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Scheduler controller initialized.&amp;#34;&lt;/span>
[...]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Gardener should now be ready to operate on Shoot resources. You can use&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl get shoots
No resources found.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>to operate against your local running Gardener API Server.&lt;/p>
&lt;blockquote>
&lt;p>Note: It may take several seconds until the Gardener API server has been started and is available. &lt;code>No resources found&lt;/code> is the expected result of our initial development setup.&lt;/p>
&lt;/blockquote>
&lt;h1 id="create-a-shoot">Create a Shoot&lt;/h1>
&lt;p>The steps below describe the general process of creating a Shoot. Have in mind that the steps do not provide full example manifests. The reader needs to check the provider documentation and adapt the manifests accordingly.&lt;/p>
&lt;h4 id="1-copy-the-example-manifests">1. Copy the example manifests&lt;/h4>
&lt;p>The next steps require modifications of the example manifests. These modifications are part of local setup and should not be &lt;code>git push&lt;/code>-ed. To do not interfere with git, let&amp;rsquo;s copy the example manifests to &lt;code>dev/&lt;/code> which is ignored by git.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">cp example/*.yaml dev/
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-create-a-project">2. Create a Project&lt;/h4>
&lt;p>Every Shoot is associated with a Project. Check the corresponding example manifests &lt;code>dev/00-namespace-garden-dev.yaml&lt;/code> and &lt;code>dev/05-project-dev.yaml&lt;/code>. Adapt them and create them.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f dev/00-namespace-garden-dev.yaml
kubectl apply -f dev/05-project-dev.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Make sure that the Project is successfully reconciled:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get project dev
NAME NAMESPACE STATUS OWNER CREATOR AGE
dev garden-dev Ready john.doe@example.com kubernetes-admin 6s
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-create-a-cloudprofile">3. Create a CloudProfile&lt;/h4>
&lt;p>The &lt;code>CloudProfile&lt;/code> resource is provider specific and describes the underlying cloud provider (available machine types, regions, machine images, etc.). Check the corresponding example manifest &lt;code>dev/30-cloudprofile.yaml&lt;/code>. Check also the documentation and example manifests of the provider extension. Adapt &lt;code>dev/30-cloudprofile.yaml&lt;/code> and apply it.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f dev/30-cloudprofile.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-install-necessary-gardener-extensions">4. Install necessary Gardener Extensions&lt;/h4>
&lt;p>The &lt;a href="https://github.com/gardener/gardener/blob/master/extensions/README.md#known-extension-implementations">Known Extension Implementations&lt;/a> section contains a list of available extension implementations. You need to create a ControllerRegistration and ControllerDeployment for&lt;/p>
&lt;ul>
&lt;li>at least one infrastructure provider&lt;/li>
&lt;li>a dns provider (if the DNS for the Seed is not disabled)&lt;/li>
&lt;li>at least one operating system extension&lt;/li>
&lt;li>at least one network plugin extension&lt;/li>
&lt;/ul>
&lt;p>As a convention, the example ControllerRegistration manifest (containing also the necessary ControllerDeployment) for an extension is located under &lt;code>example/controller-registration.yaml&lt;/code> in the corresponding repository (for example for AWS the ControllerRegistration can be found &lt;a href="https://github.com/gardener/gardener-extension-provider-aws/blob/master/example/controller-registration.yaml">here&lt;/a>). An example creation for provider-aws (make sure to replace &lt;code>&amp;lt;version&amp;gt;&lt;/code> with the newest released version tag):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f https://raw.githubusercontent.com/gardener/gardener-extension-provider-aws/&amp;lt;version&amp;gt;/example/controller-registration.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Instead of updating extensions manually you can use &lt;a href="https://github.com/gardener/gem">Gardener Extensions Manager&lt;/a> to install and update extension controllers. This is especially useful if you want to keep and maintain your development setup for a longer time.
Also, please refer to &lt;a href="https://gardener.cloud/docs/gardener/extensions/controllerregistration/">this document&lt;/a> for further information about how extensions are registered in case you want to use other versions than the latest releases.&lt;/p>
&lt;h4 id="5-register-a-seed">5. Register a Seed&lt;/h4>
&lt;p>Shoot controlplanes run in seed clusters, so we need to create our first Seed now.&lt;/p>
&lt;p>Check the corresponding example manifest &lt;code>dev/40-secret-seed.yaml&lt;/code> and &lt;code>dev/50-seed.yaml&lt;/code>. Update &lt;code>dev/40-secret-seed.yaml&lt;/code> with base64 encoded kubeconfig of the cluster that will be used as Seed (the scope of the permissions should be identical to the kubeconfig that the Gardenlet creates during bootstrapping - for now, &lt;code>cluster-admin&lt;/code> privileges are recommended).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f dev/40-secret-seed.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Adapt &lt;code>dev/50-seed.yaml&lt;/code> - adjust &lt;code>.spec.secretRef&lt;/code> to refer the newly created Secret, adjust &lt;code>.spec.provider&lt;/code> with the Seed cluster provider and revise the other fields.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f dev/50-seed.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="6-start-gardenlet">6. Start Gardenlet&lt;/h4>
&lt;p>Once the Seed is created, start the Gardenlet to reconcile it. The &lt;code>make start-gardenlet&lt;/code> command will automatically configure the local Gardenlet process to use the Seed and its kubeconfig. If you have multiple Seeds, you have to specify which to use by setting the &lt;code>SEED_NAME&lt;/code> environment variable like in &lt;code>make start-gardenlet SEED_NAME=my-first-seed&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make start-gardenlet
time=&lt;span style="color:#a31515">&amp;#34;2019-11-06T15:24:17+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Starting Gardenlet...&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-11-06T15:24:17+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Feature Gates: HVPA=true, Logging=true&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-11-06T15:24:17+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Acquired leadership, starting controllers.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-11-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Found internal domain secret internal-domain-unmanaged for domain nip.io.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-11-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Gardenlet (version 1.0.0-dev) initialized.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-11-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;ControllerInstallation controller initialized.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-11-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Shoot controller initialized.&amp;#34;&lt;/span>
time=&lt;span style="color:#a31515">&amp;#34;2019-11-06T15:24:18+02:00&amp;#34;&lt;/span> level=info msg=&lt;span style="color:#a31515">&amp;#34;Seed controller initialized.&amp;#34;&lt;/span>
[...]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Gardenlet will now reconcile the Seed. Check the progess from time to time until it&amp;rsquo;s &lt;code>Ready&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl get seed
NAME STATUS PROVIDER REGION AGE VERSION K8S VERSION
seed-aws Ready aws eu-west-1 4m v1.11.0-dev v1.18.12
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="7-create-a-shoot">7. Create a Shoot&lt;/h4>
&lt;p>A Shoot requires a SecretBinding. The SecretBinding refers to a Secret that contains the cloud provider credentials. The Secret data keys are provider specific and you need to check the documentation of the provider to find out which data keys are expected (for example for AWS the related documentation can be found &lt;a href="https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/docs/usage-as-end-user/#provider-secret-data">here&lt;/a>). Adapt &lt;code>dev/70-secret-provider.yaml&lt;/code> and &lt;code>dev/80-secretbinding.yaml&lt;/code> and apply them.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f dev/70-secret-provider.yaml
kubectl apply -f dev/80-secretbinding.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After the SecretBinding creation, you are ready to proceed with the Shoot creation. You need to check the documentation of the provider to find out the expected configuration (for example for AWS the related documentation and example Shoot manifest can be found &lt;a href="https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/docs/usage-as-end-user/">here&lt;/a>). Adapt &lt;code>dev/90-shoot.yaml&lt;/code> and apply it.&lt;/p>
&lt;p>To make sure that a specific Seed cluster will be chosen or to skip the scheduling (the sheduling requires Gardener Scheduler to be running), specify the &lt;code>.spec.seedName&lt;/code> field (see &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-shoot.yaml#L317-L318">here&lt;/a>).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f dev/90-shoot.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Watch the progress of the operation and make sure that the Shoot will be successfully created.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">watch kubectl get shoot --all-namespaces
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Log Parsers</title><link>https://gardener.cloud/docs/gardener/development/log_parsers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/log_parsers/</guid><description>
&lt;h1 id="how-to-create-log-parser-for-container-into-fluent-bit">How to create log parser for container into fluent-bit&lt;/h1>
&lt;p>If our log message is parsed correctly, it has to be showed in Grafana like this:&lt;/p>
&lt;pre>&lt;code class="language-jsonc" data-lang="jsonc"> {&amp;quot;log&amp;quot;:&amp;quot;OpenAPI AggregationController: Processing item v1beta1.metrics.k8s.io&amp;quot;,&amp;quot;pid&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;severity&amp;quot;:&amp;quot;INFO&amp;quot;,&amp;quot;source&amp;quot;:&amp;quot;controller.go:107&amp;quot;}
&lt;/code>&lt;/pre>&lt;p>Otherwise it will looks like this:&lt;/p>
&lt;pre>&lt;code class="language-jsonc" data-lang="jsonc">{
&amp;quot;log&amp;quot;:&amp;quot;{
\&amp;quot;level\&amp;quot;:\&amp;quot;info\&amp;quot;,\&amp;quot;ts\&amp;quot;:\&amp;quot;2020-06-01T11:23:26.679Z\&amp;quot;,\&amp;quot;logger\&amp;quot;:\&amp;quot;gardener-resource-manager.health-reconciler\&amp;quot;,\&amp;quot;msg\&amp;quot;:\&amp;quot;Finished ManagedResource health checks\&amp;quot;,\&amp;quot;object\&amp;quot;:\&amp;quot;garden/provider-aws-dsm9r\&amp;quot;
}\n&amp;quot;
}
}
&lt;/code>&lt;/pre>&lt;h2 id="lets-make-a-custom-parser-now">Lets make a custom parser now&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>First of all we need to know how does the log for the specific container look like (for example lets take a log from the &lt;code>alertmanager&lt;/code> :
&lt;code>level=info ts=2019-01-28T12:33:49.362015626Z caller=main.go:175 build_context=&amp;quot;(go=go1.11.2, user=root@4ecc17c53d26, date=20181109-15:40:48)&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We can see that this log contains 4 subfields(severity=info, timestamp=2019-01-28T12:33:49.362015626Z, source=main.go:175 and the actual message).
So we have to write a regex which matches this log in 4 groups(We can use &lt;a href="https://regex101.com/">https://regex101.com/&lt;/a> like helping tool). So for this purpose our regex
looks like this:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">^level=(?&amp;lt;severity&amp;gt;\w+)\s+ts=(?&amp;lt;time&amp;gt;\d{4}-\d{2}-\d{2}[Tt].*[zZ])\s+caller=(?&amp;lt;source&amp;gt;[^\s]*+)\s+(?&amp;lt;log&amp;gt;.*)
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Now we have to create correct time format for the timestamp(We can use this site for this purpose: &lt;a href="http://ruby-doc.org/stdlib-2.4.1/libdoc/time/rdoc/Time.html#method-c-strptime)">http://ruby-doc.org/stdlib-2.4.1/libdoc/time/rdoc/Time.html#method-c-strptime)&lt;/a>.
So our timestamp matches correctly the following format:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">%Y-%m-%dT%H:%M:%S.%L
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>It&amp;rsquo;s a time to apply our new regex into fluent-bit configuration. Go to fluent-bit-configmap.yaml and create new filter using the following template:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">[FILTER]
Name parser
Match kubernetes.&amp;lt;&amp;lt; pod-name &amp;gt;&amp;gt;*&amp;lt;&amp;lt; container-name &amp;gt;&amp;gt;*
Key_Name log
Parser &amp;lt;&amp;lt; parser-name &amp;gt;&amp;gt;
Reserve_Data True
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">EXAMPLE
[FILTER]
Name parser
Match kubernetes.alertmanager*alertmanager*
Key_Name log
Parser alermanagerParser
Reserve_Data True
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Now lets check if there is already exists parser with such a regex and time format that we need. if not, let`s create one:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">[PARSER]
Name &amp;lt;&amp;lt; parser-name &amp;gt;&amp;gt;
Format regex
Regex &amp;lt;&amp;lt; regex &amp;gt;&amp;gt;
Time_Key time
Time_Format &amp;lt;&amp;lt; time-format &amp;gt;&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">EXAMPLE
[PARSER]
Name alermanagerParser
Format regex
Regex ^level=(?&amp;lt;severity&amp;gt;\w+)\s+ts=(?&amp;lt;time&amp;gt;\d{4}-\d{2}-\d{2}[Tt].*[zZ])\s+caller=(?&amp;lt;source&amp;gt;[^\s]*+)\s+(?&amp;lt;log&amp;gt;.*)
Time_Key time
Time_Format %Y-%m-%dT%H:%M:%S.%L
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">Follow your development setup to validate that parsers are working correctly.
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Logging</title><link>https://gardener.cloud/docs/gardener/development/logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/logging/</guid><description>
&lt;h1 id="logging-in-gardener-components">Logging in Gardener Components&lt;/h1>
&lt;p>This document aims at providing a general developer guideline on different aspects of logging practices and conventions used in the Gardener codebase.
It contains mostly Gardener-specific points and references other existing and commonly accepted logging guidelines for general advice.
Developers and reviewers should consult this guide when writing, refactoring and reviewing Gardener code.
If parts are unclear or new learnings arise, this guide should be adapted accordingly.&lt;/p>
&lt;h2 id="logging-libraries--implementations">Logging Libraries / Implementations&lt;/h2>
&lt;p>Historically, Gardener components have been using &lt;a href="https://github.com/sirupsen/logrus">logrus&lt;/a>.
There is a global logrus logger (&lt;a href="https://github.com/gardener/gardener/blob/626ba7c10e1150819b3905116d3988512c18c9ee/pkg/logger/logrus.go#L28">&lt;code>logger.Logger&lt;/code>&lt;/a>) that is initialized by components on startup and used across the codebase.
In most places, it is used as a &lt;code>printf&lt;/code>-style logger and only in some instances we make use of logrus' structured logging functionality.&lt;/p>
&lt;p>In the process of migrating our components to native controller-runtime components (see &lt;a href="https://github.com/gardener/gardener/issues/4251">gardener/gardener#4251&lt;/a>), we also want to make use of controller-runtime&amp;rsquo;s built-in mechanisms for streamlined logging.
controller-runtime uses &lt;a href="https://github.com/go-logr/logr">logr&lt;/a>, a simple structured logging interface, for library-internal logging and logging in controllers.&lt;/p>
&lt;p>logr itself is only an interface and doesn&amp;rsquo;t provide an implementation out of the box.
Instead, it needs to be backed by a logging implementation like &lt;a href="https://github.com/go-logr/zapr">zapr&lt;/a>. Code that uses the logr interface is thereby not tied to a specific logging implementation and makes the implementation easily exchangeable.
controller-runtime already provides a &lt;a href="https://github.com/kubernetes-sigs/controller-runtime/tree/v0.11.0/pkg/log/zap">set of helpers&lt;/a> for constructing zapr loggers, i.e., logr loggers backed by &lt;a href="https://github.com/uber-go/zap">zap&lt;/a>, which is a popular logging library in the go community.
Hence, we are migrating our component logging from logrus to logr (backed by zap) as part of &lt;a href="https://github.com/gardener/gardener/issues/4251">gardener/gardener#4251&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>⚠️ &lt;code>logger.Logger&lt;/code> (logrus logger) is deprecated in Gardener and shall not be used in new code – use logr loggers when writing new code! (also see &lt;a href="#migration-from-logrus-to-logr">Migration from logrus to logr&lt;/a>)&lt;/p>
&lt;p>ℹ️ Don&amp;rsquo;t use zap loggers directly, always use the logr interface in order to avoid tight coupling to a specific logging implementation.&lt;/p>
&lt;/blockquote>
&lt;p>gardener-apiserver differs from the other components as it is based on the &lt;a href="https://github.com/kubernetes/apiserver">apiserver library&lt;/a> and therefore uses &lt;a href="https://github.com/kubernetes/klog">klog&lt;/a> – just like kube-apiserver.
As gardener-apiserver writes (almost) no logs in our coding (outside the apiserver library), there is currently no plan for switching the logging implementation.
Hence, the following sections focus on logging in the controller and admission components only.&lt;/p>
&lt;h2 id="logcheck-tool">&lt;code>logcheck&lt;/code> Tool&lt;/h2>
&lt;p>To ensure a smooth migration to logr and make logging in Gardener components more consistent, the &lt;a href="https://github.com/gardener/gardener/tree/master/hack/tools/logcheck">&lt;code>logcheck&lt;/code> tool&lt;/a> was added.
It enforces (parts of) this guideline and detects programmer-level errors early on in order to prevent bugs.
Please check out the &lt;a href="https://github.com/gardener/gardener/tree/master/hack/tools/logcheck">tool&amp;rsquo;s documentation&lt;/a> for a detailed description.&lt;/p>
&lt;h2 id="structured-logging">Structured Logging&lt;/h2>
&lt;p>Similar to &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-instrumentation/migration-to-structured-logging.md">efforts in the Kubernetes project&lt;/a>, we want to migrate our component logs to structured logging.
As motivated above, we will use the logr interface instead of klog though.&lt;/p>
&lt;p>You can read more about the motivation behind structured logging in &lt;a href="https://github.com/go-logr/logr#background">logr&amp;rsquo;s background and FAQ&lt;/a> (also see &lt;a href="http://dave.cheney.net/2015/11/05/lets-talk-about-logging">this blog post by Dave Cheney&lt;/a>).
Also, make sure to check out controller-runtime&amp;rsquo;s &lt;a href="https://github.com/kubernetes-sigs/controller-runtime/blob/v0.11.0/TMP-LOGGING.md">logging guideline&lt;/a> with specifics for projects using the library.
The following sections will focus on the most important takeaways from those guidelines and give general instructions on how to apply them to Gardener and its controller-runtime components.
Note: some parts in this guideline differ slightly from controller-runtime&amp;rsquo;s document.&lt;/p>
&lt;h3 id="tldr-of-structured-logging">TL;DR of Structured Logging&lt;/h3>
&lt;p>❌ stop using &lt;code>printf&lt;/code>-style logging:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#00f">var&lt;/span> logger *logrus.Logger
logger.Infof(&lt;span style="color:#a31515">&amp;#34;Scaling deployment %s/%s to %d replicas&amp;#34;&lt;/span>, deployment.Namespace, deployment.Name, replicaCount)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>✅ instead, write static log messages and enrich them with additional structured information in form of key-value pairs:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#00f">var&lt;/span> logger logr.Logger
logger.Info(&lt;span style="color:#a31515">&amp;#34;Scaling deployment&amp;#34;&lt;/span>, &lt;span style="color:#a31515">&amp;#34;deployment&amp;#34;&lt;/span>, client.ObjectKeyFromObject(deployment), &lt;span style="color:#a31515">&amp;#34;replicas&amp;#34;&lt;/span>, replicaCount)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="log-configuration">Log Configuration&lt;/h2>
&lt;p>Gardener components can be configured to either log in &lt;code>json&lt;/code> (default) or &lt;code>text&lt;/code> format:
&lt;code>json&lt;/code> format is supposed to be used in production, while &lt;code>text&lt;/code> format might be nicer for development.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"># json
{&amp;#34;level&amp;#34;:&amp;#34;info&amp;#34;,&amp;#34;ts&amp;#34;:&amp;#34;2021-12-16T08:32:21.059+0100&amp;#34;,&amp;#34;msg&amp;#34;:&amp;#34;Hello botanist&amp;#34;,&amp;#34;garden&amp;#34;:&amp;#34;eden&amp;#34;}
# text
2021-12-16T08:32:21.059+0100 INFO Hello botanist {&amp;#34;garden&amp;#34;: &amp;#34;eden&amp;#34;}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Components can be set to one of the following log levels (with increasing verbosity): &lt;code>error&lt;/code>, &lt;code>info&lt;/code> (default), &lt;code>debug&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>ℹ️ Note: some Gardener components don&amp;rsquo;t feature a configurable log level and format yet.
In this case, they log at &lt;code>info&lt;/code> in &lt;code>json&lt;/code> format.
We might add configuration options via command line flags that can be used in all components in the future though (see &lt;a href="https://github.com/gardener/gardener/issues/5191">gardener/gardener#5191&lt;/a>).&lt;/p>
&lt;/blockquote>
&lt;h2 id="log-levels">Log Levels&lt;/h2>
&lt;p>logr uses &lt;a href="https://github.com/go-logr/logr#why-v-levels">V-levels&lt;/a> (numbered log levels), higher V-level means higher verbosity.
V-levels are relative (in contrast to &lt;code>klog&lt;/code>&amp;rsquo;s absolute V-levels), i.e., &lt;code>V(1)&lt;/code> creates a logger, that is one level more verbose than its parent logger.&lt;/p>
&lt;p>In Gardener components, the mentioned log levels in the component config (&lt;code>error&lt;/code>, &lt;code>info&lt;/code>, &lt;code>debug&lt;/code>) map to the zap levels with the same names (see &lt;a href="https://github.com/gardener/gardener/blob/770fc01a34b70f6cb77b8cfe929d9daef0026d1c/pkg/logger/zap.go#L43-L55">here&lt;/a>).
Hence, our loggers follow the same mapping from numerical logr levels to named zap levels like described in &lt;a href="https://github.com/go-logr/zapr/tree/v1.1.0#increasing-verbosity">zapr&lt;/a>, i.e.:&lt;/p>
&lt;ul>
&lt;li>component config specifies &lt;code>debug&lt;/code> ➡️ both &lt;code>V(0)&lt;/code> and &lt;code>V(1)&lt;/code> are enabled&lt;/li>
&lt;li>component config specifies &lt;code>info&lt;/code> ➡️ &lt;code>V(0)&lt;/code> is enabled, &lt;code>V(1)&lt;/code> will not be shown&lt;/li>
&lt;li>component config specifies &lt;code>error&lt;/code> ➡️ neither &lt;code>V(0)&lt;/code> nor &lt;code>V(1)&lt;/code> will be shown&lt;/li>
&lt;li>&lt;code>Error()&lt;/code> logs will always be shown&lt;/li>
&lt;/ul>
&lt;p>This mapping applies to the components' root loggers (the ones that are not &amp;ldquo;derived&amp;rdquo; from any other logger; constructed on component startup).
If you derive a new logger with e.g. &lt;code>V(1)&lt;/code>, the mapping will shift by one. For example, &lt;code>V(0)&lt;/code> will then log at zap&amp;rsquo;s &lt;code>debug&lt;/code> level.&lt;/p>
&lt;p>There is no &lt;code>warning&lt;/code> level (see &lt;a href="https://dave.cheney.net/2015/11/05/lets-talk-about-logging">Dave Cheney&amp;rsquo;s post&lt;/a>).
If there is an error condition (e.g., unexpected error received from a called function), the error should either be handled or logged at &lt;code>error&lt;/code> if it is neither handled nor returned.
If you have an &lt;code>error&lt;/code> value at hand that doesn&amp;rsquo;t represent an actual error condition, but you still want to log it as an informational message, log it at &lt;code>info&lt;/code> level with key &lt;code>err&lt;/code>.&lt;/p>
&lt;p>We might consider to make use of a broader range of log levels in the future when introducing more logs and common command line flags for our components (comparable to &lt;code>--v&lt;/code> of Kubernetes components).
For now, we stick to the mentioned two log levels like controller-runtime: info (&lt;code>V(0)&lt;/code>) and debug (&lt;code>V(1)&lt;/code>).&lt;/p>
&lt;h2 id="logging-in-controllers">Logging in Controllers&lt;/h2>
&lt;h3 id="named-loggers">Named Loggers&lt;/h3>
&lt;p>Controllers should use named loggers that include their name, e.g.:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">controllerLogger := rootLogger.WithName(&lt;span style="color:#a31515">&amp;#34;controller&amp;#34;&lt;/span>).WithName(&lt;span style="color:#a31515">&amp;#34;shoot&amp;#34;&lt;/span>)
controllerLogger.Info(&lt;span style="color:#a31515">&amp;#34;Deploying kube-apiserver&amp;#34;&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>results in&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">2021-12-16T09:27:56.550+0100 INFO controller.shoot Deploying kube-apiserver
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Logger names are hierarchical. You can make use of it, where controllers are composed of multiple &amp;ldquo;subcontrollers&amp;rdquo;, e.g., &lt;code>controller.shoot.hibernation&lt;/code> or &lt;code>controller.shoot.maintenance&lt;/code>.&lt;/p>
&lt;p>Using the global logger &lt;code>logf.Log&lt;/code> directly is discouraged and should be rather exceptional because it makes correlating logs with code harder.
Preferably, all parts of the code should use some named logger.&lt;/p>
&lt;h3 id="reconciler-loggers">Reconciler Loggers&lt;/h3>
&lt;p>In your &lt;code>Reconcile&lt;/code> function, retrieve a logger from the given &lt;code>context.Context&lt;/code>.
It inherits from the controller&amp;rsquo;s logger (i.e., is already named) and is preconfigured with &lt;code>name&lt;/code> and &lt;code>namespace&lt;/code> values for the reconciliation request:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#00f">func&lt;/span> (r *reconciler) Reconcile(ctx context.Context, request reconcile.Request) (reconcile.Result, &lt;span style="color:#2b91af">error&lt;/span>) {
log := logf.FromContext(ctx)
log.Info(&lt;span style="color:#a31515">&amp;#34;Reconciling Shoot&amp;#34;&lt;/span>)
&lt;span style="color:#008000">// ...
&lt;/span>&lt;span style="color:#008000">&lt;/span> &lt;span style="color:#00f">return&lt;/span> reconcile.Result{}, &lt;span style="color:#00f">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>results in&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">2021-12-16T09:35:59.099+0100 INFO controller.shoot Reconciling Shoot {&amp;#34;name&amp;#34;: &amp;#34;sunflower&amp;#34;, &amp;#34;namespace&amp;#34;: &amp;#34;garden-greenhouse&amp;#34;}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The logger is injected by controller-runtime&amp;rsquo;s &lt;code>Controller&lt;/code> implementation and our &lt;code>controllerutils.CreateWorker&lt;/code> alike (if a logger is passed using &lt;code>controllerutils.WithLogger&lt;/code>). The logger returned by &lt;code>logf.FromContext&lt;/code> is never &lt;code>nil&lt;/code>. If the context doesn&amp;rsquo;t carry a logger, it falls back to the global logger (&lt;code>logf.Log&lt;/code>), which might discard logs if not configured, but is also never &lt;code>nil&lt;/code>.&lt;/p>
&lt;p>The controller implementation (controller-runtime / &lt;code>CreateWorker&lt;/code>) itself takes care of logging the error returned by reconcilers.
Hence, don&amp;rsquo;t log an error that you are returning.
Generally, functions should not return an error, if they already logged it, because that means the error is already handled and not an error anymore.
See &lt;a href="https://dave.cheney.net/2015/11/05/lets-talk-about-logging">Dave Cheney&amp;rsquo;s post&lt;/a> for more on this.&lt;/p>
&lt;h3 id="messages">Messages&lt;/h3>
&lt;ul>
&lt;li>Log messages should be static. Don&amp;rsquo;t put variable content in there, i.e., no &lt;code>fmt.Sprintf&lt;/code> or string concatenation (&lt;code>+&lt;/code>). Use key-value pairs instead.&lt;/li>
&lt;li>Log messages should be capitalized. Note: this contrasts with error messages, that should not be capitalized. However, both should not end with a punctuation mark.&lt;/li>
&lt;/ul>
&lt;h3 id="keys-and-values">Keys and Values&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Use &lt;code>WithValues&lt;/code> instead of repeatedly adding key-value pairs for multiple log statements. &lt;code>WithValues&lt;/code> creates a new logger from the parent, that carries the given key-value pairs. E.g., use it when acting on one object in multiple steps and logging something for each step:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">log := parentLog.WithValues(&lt;span style="color:#a31515">&amp;#34;infrastructure&amp;#34;&lt;/span>, client.ObjectKeyFromObject(infrastrucutre))
&lt;span style="color:#008000">// ...
&lt;/span>&lt;span style="color:#008000">&lt;/span>log.Info(&lt;span style="color:#a31515">&amp;#34;Creating Infrastructure&amp;#34;&lt;/span>)
&lt;span style="color:#008000">// ...
&lt;/span>&lt;span style="color:#008000">&lt;/span>log.Info(&lt;span style="color:#a31515">&amp;#34;Waiting for Infrastructure to be reconciled&amp;#34;&lt;/span>)
&lt;span style="color:#008000">// ...
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: &lt;code>WithValues&lt;/code> bypasses controller-runtime&amp;rsquo;s special zap encoder that nicely encodes &lt;code>ObjectKey&lt;/code>/&lt;code>NamespacedName&lt;/code> and &lt;code>runtime.Object&lt;/code> values, see &lt;a href="https://github.com/kubernetes-sigs/controller-runtime/issues/1290">kubernetes-sigs/controller-runtime#1290&lt;/a>.
Thus, the end result might look different depending on the value and its &lt;code>Stringer&lt;/code> implementation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;a href="https://en.wiktionary.org/wiki/lowerCamelCase">lowerCamelCase&lt;/a> for keys. Don&amp;rsquo;t put spaces in keys, as it will make log processing with simple tools like &lt;code>jq&lt;/code> harder.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Keys should be constant, human-readable, consistent across the codebase and naturally match parts of the log message, see &lt;a href="https://github.com/go-logr/logr#how-do-i-choose-my-keys">logr guideline&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When logging object keys (name and namespace), use the object&amp;rsquo;s type as the log key and a &lt;code>client.ObjectKey&lt;/code>/&lt;code>types.NamespacedName&lt;/code> value as value, e.g.:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#00f">var&lt;/span> deployment *appsv1.Deployment
log.Info(&lt;span style="color:#a31515">&amp;#34;Creating Deployment&amp;#34;&lt;/span>, &lt;span style="color:#a31515">&amp;#34;deployment&amp;#34;&lt;/span>, client.ObjectKeyFromObject(deployment))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>which results in&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{&amp;#34;level&amp;#34;:&amp;#34;info&amp;#34;,&amp;#34;ts&amp;#34;:&amp;#34;2021-12-16T08:32:21.059+0100&amp;#34;,&amp;#34;msg&amp;#34;:&amp;#34;Creating Deployment&amp;#34;,&amp;#34;deployment&amp;#34;:{&amp;#34;name&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;namespace&amp;#34;: &amp;#34;foo&amp;#34;}}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Earlier, we often used &lt;code>kutil.ObjectName()&lt;/code> for logging object keys, which encodes them into a flat string like &lt;code>foo/bar&lt;/code>. However, this flat string cannot be processed so easily by logging stacks (or &lt;code>jq&lt;/code>) like a structured log. Hence, the use of &lt;code>kutil.ObjectName()&lt;/code> for logging object keys is discouraged. Existing usages should be refactored to use &lt;code>client.ObjectKeyFromObject()&lt;/code> instead.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There are cases where you don&amp;rsquo;t have the full object key or the object itself at hand, e.g., if an object references another object (in the same namespace) by name (think &lt;code>secretRef&lt;/code> or similar).
In such a cases, either construct the full object key including the implied namespace or log the object name under a key ending in &lt;code>Name&lt;/code>, e.g.:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#00f">var&lt;/span> (
&lt;span style="color:#008000">// object to reconcile
&lt;/span>&lt;span style="color:#008000">&lt;/span> shoot *gardencorev1beta1.Shoot
&lt;span style="color:#008000">// retrieved via logf.FromContext, preconfigured by controller with namespace and name of reconciliation request
&lt;/span>&lt;span style="color:#008000">&lt;/span> log logr.Logger
)
&lt;span style="color:#008000">// option a: full object key, manually constructed
&lt;/span>&lt;span style="color:#008000">&lt;/span>log.Info(&lt;span style="color:#a31515">&amp;#34;Shoot uses SecretBinding&amp;#34;&lt;/span>, &lt;span style="color:#a31515">&amp;#34;secretBinding&amp;#34;&lt;/span>, client.ObjectKey{Namespace: shoot.Namespace, Name: shoot.Spec.SecretBindingName})
&lt;span style="color:#008000">// option b: only name under respective *Name log key
&lt;/span>&lt;span style="color:#008000">&lt;/span>log.Info(&lt;span style="color:#a31515">&amp;#34;Shoot uses SecretBinding&amp;#34;&lt;/span>, &lt;span style="color:#a31515">&amp;#34;secretBindingName&amp;#34;&lt;/span>, shoot.Spec.SecretBindingName)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Both options result in well-structured logs, that are easy to interpret and process:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{&amp;#34;level&amp;#34;:&amp;#34;info&amp;#34;,&amp;#34;ts&amp;#34;:&amp;#34;2022-01-18T18:00:56.672+0100&amp;#34;,&amp;#34;msg&amp;#34;:&amp;#34;Shoot uses SecretBinding&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;my-shoot&amp;#34;,&amp;#34;namespace&amp;#34;:&amp;#34;garden-project&amp;#34;,&amp;#34;secretBinding&amp;#34;:{&amp;#34;namespace&amp;#34;:&amp;#34;garden-project&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;aws&amp;#34;}}
{&amp;#34;level&amp;#34;:&amp;#34;info&amp;#34;,&amp;#34;ts&amp;#34;:&amp;#34;2022-01-18T18:00:56.673+0100&amp;#34;,&amp;#34;msg&amp;#34;:&amp;#34;Shoot uses SecretBinding&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;my-shoot&amp;#34;,&amp;#34;namespace&amp;#34;:&amp;#34;garden-project&amp;#34;,&amp;#34;secretBindingName&amp;#34;:&amp;#34;aws&amp;#34;}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>When handling generic &lt;code>client.Object&lt;/code> values (e.g. in helper funcs), use &lt;code>object&lt;/code> as key.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When adding timestamps to key-value pairs, use &lt;code>time.Time&lt;/code> values. By this, they will be encoded in the same format as the log entry&amp;rsquo;s timestamp.&lt;br>
Don&amp;rsquo;t use &lt;code>metav1.Time&lt;/code> values, as they will be encoded in a different format by their &lt;code>Stringer&lt;/code> implementation. Pass &lt;code>&amp;lt;someTimestamp&amp;gt;.Time&lt;/code> to loggers in case you have a &lt;code>metav1.Time&lt;/code> value at hand.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Same applies to durations. Use &lt;code>time.Duration&lt;/code> values instead of &lt;code>*metav1.Duration&lt;/code>. Durations can be handled specially by zap just like timestamps.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Event recorders not only create &lt;code>Event&lt;/code> objects but also log them.
However, both Gardener&amp;rsquo;s manually instantiated event recorders and the ones that controller-runtime provides log to &lt;code>debug&lt;/code> level and use generic formats, that are not very easy to interpret or process (no structured logs).
Hence, don&amp;rsquo;t use event recorders as replacements for well-structured logs.
If a controller records an event for a completed action or important information, it should probably log it as well, e.g.:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">log.Info(&lt;span style="color:#a31515">&amp;#34;Creating ManagedSeed&amp;#34;&lt;/span>, &lt;span style="color:#a31515">&amp;#34;replica&amp;#34;&lt;/span>, r.GetObjectKey())
a.recorder.Eventf(managedSeedSet, corev1.EventTypeNormal, EventCreatingManagedSeed, &lt;span style="color:#a31515">&amp;#34;Creating ManagedSeed %s&amp;#34;&lt;/span>, r.GetFullName())
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="logging-in-test-code">Logging in Test Code&lt;/h2>
&lt;ul>
&lt;li>If the tested production code requires a logger, you can pass &lt;code>logr.Discard()&lt;/code> or &lt;code>logf.NullLogger{}&lt;/code> in your test, which simply discards all logs.&lt;/li>
&lt;li>Pass &lt;code>logzap.New(logzap.WriteTo(GinkgoWriter))&lt;/code> in tests where you want to see the logs on test failure but not on success.&lt;/li>
&lt;li>&lt;code>logf.Log&lt;/code> is safe to use in tests and will not cause a nil pointer deref, even if it&amp;rsquo;s not initialized via &lt;code>logf.SetLogger&lt;/code>.
It is initially set to a &lt;code>NullLogger&lt;/code> by default, which means all logs are discarded, unless &lt;code>logf.SetLogger&lt;/code> is called in the first 30 seconds of execution.&lt;/li>
&lt;/ul>
&lt;h2 id="migration-from-logrus-to-logr">Migration from logrus to logr&lt;/h2>
&lt;p>These points might be helpful when refactoring existing code during the migration period:&lt;/p>
&lt;ul>
&lt;li>For migrating an existing controller to logr:
&lt;ul>
&lt;li>Create a named logger (&lt;a href="https://github.com/gardener/gardener/blob/ce9d741798eac2df8c470190ab483aa4c5818ebf/pkg/controllermanager/controller/cloudprofile/cloudprofile.go#L63">example&lt;/a>).&lt;/li>
&lt;li>Pass &lt;code>controllerutils.WithLogger&lt;/code> to &lt;code>CreateWorker&lt;/code> (&lt;a href="https://github.com/gardener/gardener/blob/ce9d741798eac2df8c470190ab483aa4c5818ebf/pkg/controllermanager/controller/cloudprofile/cloudprofile.go#L113">example&lt;/a>). This allows &lt;code>logf.FromContext&lt;/code> to be used in reconcilers.&lt;/li>
&lt;li>Use &lt;code>logf.FromContext&lt;/code> in &lt;code>Reconcile&lt;/code> to retrieve the logr logger and use it from there on (&lt;a href="https://github.com/gardener/gardener/blob/ce9d741798eac2df8c470190ab483aa4c5818ebf/pkg/controllermanager/controller/cloudprofile/cloudprofile_control.go#L72">example&lt;/a>).&lt;/li>
&lt;li>Make sure to follow the other guidelines mentioned above as well (see &lt;a href="#logging-in-controllers">Logging in Controllers&lt;/a>).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Libraries might expect a different logging implementation than the component which uses it. E.g., a controller that already uses logr might want to use the &lt;code>flow&lt;/code> package which still uses logrus. In such cases:
&lt;ul>
&lt;li>You can consider refactoring the library along with the component itself, if feasible.&lt;/li>
&lt;li>It is acceptable for the migration period to use a logger derived from the respective global logger (&lt;code>logger.Logger&lt;/code> or &lt;code>logf.Log&lt;/code>) and pass it to the library.
However, please add a &lt;code>TODO&lt;/code> for cleaning it up later on, once the migration is completed. E.g.:
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#008000">// TODO: switch to logr once flow package is migrated
&lt;/span>&lt;span style="color:#008000">&lt;/span>err := shootFlow.Run(flow.Opts{
Logger: logger.Logger.WithFields(logrus.Fields{&lt;span style="color:#a31515">&amp;#34;logger&amp;#34;&lt;/span>: &lt;span style="color:#a31515">&amp;#34;controller.&amp;#34;&lt;/span> + ControllerName, &lt;span style="color:#a31515">&amp;#34;name&amp;#34;&lt;/span>: shoot.Name, &lt;span style="color:#a31515">&amp;#34;namespace&amp;#34;&lt;/span>: shoot.Namespace})
})
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Monitoring Stack</title><link>https://gardener.cloud/docs/gardener/development/monitoring-stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/monitoring-stack/</guid><description>
&lt;h1 id="extending-the-monitoring-stack">Extending the Monitoring Stack&lt;/h1>
&lt;p>This document provides instructions to extend the Shoot cluster monitoring stack by integrating new scrape targets, alerts and dashboards.&lt;/p>
&lt;p>Please ensure that you have understood the basic principles of &lt;a href="https://prometheus.io/docs/introduction/overview/">Prometheus&lt;/a> and its ecosystem before you continue.&lt;/p>
&lt;p>‼️ &lt;strong>The purpose of the monitoring stack is to observe the behaviour of the control plane and the system components deployed by Gardener onto the worker nodes. Monitoring of custom workloads running in the cluster is out of scope.&lt;/strong>&lt;/p>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/__resources/monitoring-architecture_cd945d.png" alt="Monitoring Architecture">&lt;/p>
&lt;p>Each Shoot cluster comes with its own monitoring stack. The following components are deployed into the seed and shoot:&lt;/p>
&lt;ul>
&lt;li>Seed
&lt;ul>
&lt;li>&lt;a href="https://github.com/prometheus/prometheus">Prometheus&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/grafana/grafana">Grafana&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/prometheus/blackbox_exporter">blackbox-exporter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/kube-state-metrics">kube-state-metrics&lt;/a> (Seed metrics)&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/kube-state-metrics">kube-state-metrics&lt;/a> (Shoot metrics)&lt;/li>
&lt;li>&lt;a href="https://github.com/prometheus/alertmanager">Alertmanager&lt;/a> (Optional)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Shoot
&lt;ul>
&lt;li>&lt;a href="https://github.com/prometheus/node_exporter">node-exporter(s)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/kube-state-metrics">kube-state-metrics&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/prometheus/blackbox_exporter">blackbox-exporter&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>In each Seed cluster there is a Prometheus in the &lt;code>garden&lt;/code> namespace responsible for collecting metrics from the Seed kubelets and cAdvisors. These metrics are provided to each Shoot Prometheus via federation.&lt;/p>
&lt;p>The alerts for all Shoot clusters hosted on a Seed are routed to a central Alertmanger running in the &lt;code>garden&lt;/code> namespace of the Seed. The purpose of this central alertmanager is to forward all important alerts to the operators of the Gardener setup.&lt;/p>
&lt;p>The Alertmanager in the Shoot namespace on the Seed is only responsible for forwarding alerts from its Shoot cluster to a cluster owner/cluster alert receiver via email. The Alertmanager is optional and the conditions for a deployment are already described &lt;a href="https://gardener.cloud/docs/gardener/monitoring/alerting/">here&lt;/a>.&lt;/p>
&lt;h2 id="adding-new-monitoring-targets">Adding New Monitoring Targets&lt;/h2>
&lt;p>After exploring the metrics which your component provides or adding new metrics, you should be aware which metrics are required to write the needed alerts and dashboards.&lt;/p>
&lt;p>Prometheus prefers a pull based metrics collection approach and therefore the targets to observe need to be defined upfront. The targets are defined in &lt;code>charts/seed-monitoring/charts/prometheus/templates/config.yaml&lt;/code>.
New scrape jobs can be added in the section &lt;code>scrape_configs&lt;/code>. Detailed information how to configure scrape jobs and how to use the kubernetes service discovery are available in the &lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config">Prometheus documentation&lt;/a>.&lt;/p>
&lt;p>The &lt;code>job_name&lt;/code> of a scrape job should be the name of the component e.g. &lt;code>kube-apiserver&lt;/code> or &lt;code>vpn&lt;/code>. The collection interval should be the default of &lt;code>30s&lt;/code>. You do not need to specify this in the configuration.&lt;/p>
&lt;p>Please do not ingest all metrics which are provided by a component. Rather collect only those metrics which are needed to define the alerts and dashboards (i.e. whitelist). This can be achieved by adding the following &lt;code>metric_relabel_configs&lt;/code> statement to your scrape jobs (replace &lt;code>exampleComponent&lt;/code> with component name).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml"> - job_name: example-component
...
metric_relabel_configs:
{{ include &amp;#34;prometheus.keep-metrics.metric-relabel-config&amp;#34; .Values.allowedMetrics.exampleComponent | indent 6 }}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The whitelist for the metrics of your job can be maintained in &lt;code>charts/seed-monitoring/charts/prometheus/values.yaml&lt;/code> in section &lt;code>allowedMetrics.exampleComponent&lt;/code> (replace &lt;code>exampleComponent&lt;/code> with component name). Check the following example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">allowedMetrics:
...
exampleComponent:
* metrics_name_1
* metrics_name_2
...
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="adding-alerts">Adding Alerts&lt;/h2>
&lt;p>The alert definitons are located in &lt;code>charts/seed-monitoring/charts/prometheus/rules&lt;/code>. There are two approaches for adding new alerts.&lt;/p>
&lt;ol>
&lt;li>Adding additional alerts for a component which already has a set of alerts. In this case you have to extend the existing rule file for the component.&lt;/li>
&lt;li>Adding alerts for a new component. In this case a new rule file with name scheme &lt;code>example-component.rules.yaml&lt;/code> needs to be added.&lt;/li>
&lt;li>Add the new alert to &lt;code>alertInhibitionGraph.dot&lt;/code>, add any required inhibition flows and render the new graph. To render the graph run:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dot -Tpng ./content/alertInhibitionGraph.dot -o ./content/alertInhibitionGraph.png
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>Create a test for the new alert. See &lt;code>Alert Tests&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>Example alert:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">groups:
* name: example.rules
rules:
* alert: ExampleAlert
expr: absent(up{job=&amp;#34;exampleJob&amp;#34;} == 1)
for: 20m
labels:
service: example
severity: critical &lt;span style="color:#008000"># How severe is the alert? (blocker|critical|info|warning)&lt;/span>
type: shoot &lt;span style="color:#008000"># For which topology is the alert relevant? (seed|shoot)&lt;/span>
visibility: all &lt;span style="color:#008000"># Who should receive the alerts? (all|operator|owner)&lt;/span>
annotations:
description: A longer description of the example alert that should also explain the impact of the alert.
summary: Short summary of an example alert.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the deployment of component is optional then the alert definitions needs to be added to &lt;code>charts/seed-monitoring/charts/prometheus/optional-rules&lt;/code> instead. Furthermore the alerts for component need to be activatable in &lt;code>charts/seed-monitoring/charts/prometheus/values.yaml&lt;/code> via &lt;code>rules.optional.example-component.enabled&lt;/code>. The default should be &lt;code>true&lt;/code>.&lt;/p>
&lt;p>Basic instruction how to define alert rules can be found in the &lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules">Prometheus documentation&lt;/a>.&lt;/p>
&lt;h3 id="routing-tree">Routing tree&lt;/h3>
&lt;p>The Alertmanager is grouping incoming alerts based on labels into buckets. Each bucket has its own configuration like alert receivers, initial delaying duration or resending frequency etc. You can find more information about Alertmanager routing in the &lt;a href="https://prometheus.io/docs/alerting/configuration/#route">Prometheus/Alertmanager documentation&lt;/a>. The routing trees for the Alertmanagers deployed by Gardener are depicted below.&lt;/p>
&lt;p>Central Seed Alertmanager&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">∟ main route (all alerts for all shoots on the seed will enter)
∟ group by project and shoot name
∟ group by visibility &amp;#34;all&amp;#34; and &amp;#34;operator&amp;#34;
∟ group by severity &amp;#34;blocker&amp;#34;, &amp;#34;critical&amp;#34;, and &amp;#34;info&amp;#34; → route to Garden operators
∟ group by severity &amp;#34;warning&amp;#34; (dropped)
∟ group by visibility &amp;#34;owner&amp;#34; (dropped)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Shoot Alertmanager&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">∟ main route (only alerts for one Shoot will enter)
∟ group by visibility &amp;#34;all&amp;#34; and &amp;#34;owner&amp;#34;
∟ group by severity &amp;#34;blocker&amp;#34;, &amp;#34;critical&amp;#34;, and &amp;#34;info&amp;#34; → route to cluster alert receiver
∟ group by severity &amp;#34;warning&amp;#34; (dropped, will change soon → route to cluster alert receiver)
∟ group by visibility &amp;#34;operator&amp;#34; (dropped)
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="alert-inhibition">Alert Inhibition&lt;/h3>
&lt;p>All alerts related to components running on the Shoot workers are inhibited in case of an issue with the vpn connection, because those components can&amp;rsquo;t be scraped anymore and Prometheus will fire alerts in consequence. The components running on the workers are probably healthy and the alerts are presumably false positives. The inhibition flow is shown in the figure below. If you add a new alert make sure to add it to the diagram.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/alertInhibitionGraph_ceaef0.png" alt="alertDiagram">&lt;/p>
&lt;h3 id="alert-attributes">Alert Attributes&lt;/h3>
&lt;p>Each alert rule definition has to contain the following annotations:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>summary&lt;/strong>: A short description of the issue.&lt;/li>
&lt;li>&lt;strong>description&lt;/strong>: A detailed explanation of the issue with hints to the possible root causes and the impact assessment of the issue.&lt;/li>
&lt;/ul>
&lt;p>In addtion each alert must contain the following labels:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>type&lt;/strong>
&lt;ul>
&lt;li>&lt;code>shoot&lt;/code>: Components running on the Shoot worker nodes in the &lt;code>kube-system&lt;/code> namespace.&lt;/li>
&lt;li>&lt;code>seed&lt;/code>: Components running on the Seed in the Shoot namespace as part of/next to the control plane.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>service&lt;/strong>
&lt;ul>
&lt;li>Name of the component (in lowercase) e.g. &lt;code>kube-apiserver&lt;/code>, &lt;code>alertmanager&lt;/code> or &lt;code>vpn&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>severity&lt;/strong>
&lt;ul>
&lt;li>&lt;code>blocker&lt;/code>: All issues which make the cluster entirely unusable e.g. &lt;code>KubeAPIServerDown&lt;/code> or &lt;code>KubeSchedulerDown&lt;/code>&lt;/li>
&lt;li>&lt;code>critical&lt;/code>: All issues which affect single functionalities/components but not affect the cluster in its core functionality e.g. &lt;code>VPNDown&lt;/code> or &lt;code>KubeletDown&lt;/code>.&lt;/li>
&lt;li>&lt;code>info&lt;/code>: All issues that do not affect the cluster or its core functionality, but if this component is down we cannot determine if a blocker alert is firing. (i.e. A component with an info level severity is a dependency for a component with a blocker severity)&lt;/li>
&lt;li>&lt;code>warning&lt;/code>: No current existing issue, rather a hint for situations which could lead to real issue in the close future e.g. &lt;code>HighLatencyApiServerToWorkers&lt;/code> or &lt;code>ApiServerResponseSlow&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="alert-tests">Alert Tests&lt;/h3>
&lt;p>To test the Prometheus alerts:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make test-prometheus
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to add alert tests:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create a new file in &lt;code>rules-tests&lt;/code> in the form &lt;code>&amp;lt;alert-group-name&amp;gt;.rules.test.yaml&lt;/code> or if the alerts are for an existing component with existing tests, simply add the tests to the appropriate files.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Make sure that newly added tests succeed. See above.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="adding-grafana-dashboards">Adding Grafana Dashboards&lt;/h2>
&lt;p>The dashboard definition files are located in &lt;code>charts/seed-monitoring/charts/grafana/dashboards&lt;/code>. Every dashboard needs its own file.&lt;/p>
&lt;p>If you are adding a new component dashboard please also update the overview dashboard by adding a chart for its current up/down status and with a drill down option to the component dashboard.&lt;/p>
&lt;h3 id="dashboard-structure">Dashboard Structure&lt;/h3>
&lt;p>The dashboards should be structured in the following way. The assignment of the component dashboards to the categories should be handled via dashboard tags.&lt;/p>
&lt;ul>
&lt;li>Kubernetes control plane components (Tag: &lt;code>control-plane&lt;/code>)
&lt;ul>
&lt;li>All components which are part of the Kubernetes control plane e. g. Kube API Server, Kube Controller Manager, Kube Scheduler and Cloud Controller Manager&lt;/li>
&lt;li>ETCD + Backup/Restore&lt;/li>
&lt;li>Kubernetes Addon Manager&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Node/Machine components (Tag: &lt;code>node/machine&lt;/code>)
&lt;ul>
&lt;li>All metrics which are related to the behaviour/control of the Kubernetes nodes and kubelets&lt;/li>
&lt;li>Machine-Controller-Manager + Cluster Autoscaler&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Networking components (Tag: &lt;code>network&lt;/code>)
&lt;ul>
&lt;li>CoreDNS, KubeProxy, Calico, VPN, Nginx Ingress&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Addon components (Tag: &lt;code>addon&lt;/code>)
&lt;ul>
&lt;li>Cert Broker&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Monitoring components (Tag: &lt;code>monitoring&lt;/code>)&lt;/li>
&lt;li>Logging components (Tag: &lt;code>logging&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h4 id="mandatory-charts-for-component-dashboards">Mandatory Charts for Component Dashboards&lt;/h4>
&lt;p>For each new component, its corresponding dashboard should contain the following charts in the first row, before adding custom charts for the component in the subsequent rows.&lt;/p>
&lt;ol>
&lt;li>Pod up/down status &lt;code>up{job=&amp;quot;example-component&amp;quot;}&lt;/code>&lt;/li>
&lt;li>Pod/containers cpu utilization&lt;/li>
&lt;li>Pod/containers memorty consumption&lt;/li>
&lt;li>Pod/containers network i/o&lt;/li>
&lt;/ol>
&lt;p>These information is provided by the cAdvisor metrics. These metrics are already integrated. Please check the other dashboards for detailed information on how to query.&lt;/p>
&lt;h5 id="chart-requirements">Chart Requirements&lt;/h5>
&lt;p>Each chart needs to contain:&lt;/p>
&lt;ul>
&lt;li>a meaningful name&lt;/li>
&lt;li>a detailed description (for non trivial charts)&lt;/li>
&lt;li>appropriate x/y axis descriptions&lt;/li>
&lt;li>appropriate scaling levels for the x/y axis&lt;/li>
&lt;li>proper units for the x/y axis&lt;/li>
&lt;/ul>
&lt;h5 id="dashboard-parameters">Dashboard Parameters&lt;/h5>
&lt;p>The following parameters should be added to all dashboards to ensure a homogeneous experience across all dashboards.&lt;/p>
&lt;p>Dashboards have to &amp;hellip;&lt;/p>
&lt;ul>
&lt;li>contain a title which refers to the component name(s)&lt;/li>
&lt;li>contain a timezone statement which should be the browser time&lt;/li>
&lt;li>contain tags which express where the component is running (&lt;code>seed&lt;/code> or &lt;code>shoot&lt;/code>) and to which category the component belong (see dashboard structure)&lt;/li>
&lt;li>contain a version statement with a value of 1&lt;/li>
&lt;li>be immutable&lt;/li>
&lt;/ul>
&lt;p>Example dashboard configuration&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&amp;#34;title&amp;#34;: &lt;span style="color:#a31515">&amp;#34;example-component&amp;#34;&lt;/span>,
&amp;#34;timezone&amp;#34;: &lt;span style="color:#a31515">&amp;#34;utc&amp;#34;&lt;/span>,
&amp;#34;tags&amp;#34;: [
&lt;span style="color:#a31515">&amp;#34;seed&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;control-plane&amp;#34;&lt;/span>
],
&amp;#34;version&amp;#34;: 1,
&amp;#34;editable&amp;#34;: &lt;span style="color:#a31515">&amp;#34;false&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Furthermore all dashboards should contain the following time options:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&amp;#34;time&amp;#34;: {
&amp;#34;from&amp;#34;: &lt;span style="color:#a31515">&amp;#34;now-1h&amp;#34;&lt;/span>,
&amp;#34;to&amp;#34;: &lt;span style="color:#a31515">&amp;#34;now&amp;#34;&lt;/span>
},
&amp;#34;timepicker&amp;#34;: {
&amp;#34;refresh_intervals&amp;#34;: [
&lt;span style="color:#a31515">&amp;#34;30s&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;1m&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;5m&amp;#34;&lt;/span>
],
&amp;#34;time_options&amp;#34;: [
&lt;span style="color:#a31515">&amp;#34;5m&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;15m&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;1h&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;6h&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;12h&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;24h&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;2d&amp;#34;&lt;/span>,
&lt;span style="color:#a31515">&amp;#34;10d&amp;#34;&lt;/span>
]
}
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: New Cloud Provider</title><link>https://gardener.cloud/docs/gardener/development/new-cloud-provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/new-cloud-provider/</guid><description>
&lt;h1 id="adding-cloud-providers">Adding Cloud Providers&lt;/h1>
&lt;p>This document provides an overview of how to integrate a new cloud provider into Gardener. Each component that requires integration has a detailed description of how to integrate it and the steps required.&lt;/p>
&lt;h2 id="cloud-components">Cloud Components&lt;/h2>
&lt;p>Gardener is composed of 2 or more Kubernetes clusters:&lt;/p>
&lt;ul>
&lt;li>Shoot: These are the end-user clusters, the regular Kubernetes clusters you have seen. They provide places for your workloads to run.&lt;/li>
&lt;li>Seed: This is the &amp;ldquo;management&amp;rdquo; cluster. It manages the control planes of shoots by running them as native Kubernetes workloads.&lt;/li>
&lt;/ul>
&lt;p>These two clusters can run in the same cloud provider, but they do not need to. For example, you could run your Seed in AWS, while having one shoot in Azure, two in Google, two in Alicloud, and three in Equinix Metal.&lt;/p>
&lt;p>The Seed cluster deploys and manages the Shoot clusters. Importantly, for this discussion, the &lt;code>etcd&lt;/code> data store backing each Shoot runs as workloads inside the Seed. Thus, to use the above example, the clusters in Azure, Google, Alicloud and Equinix Metal will have their worker nodes and master nodes running in those clouds, but the &lt;code>etcd&lt;/code> clusters backing them will run as separate &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/">deployments&lt;/a> in the Seed Kubernetes cluster on AWS.&lt;/p>
&lt;p>This distinction becomes important when preparing the integration to a new cloud provider.&lt;/p>
&lt;h2 id="gardener-cloud-integration">Gardener Cloud Integration&lt;/h2>
&lt;p>Gardener and its related components integrate with cloud providers at the following key lifecycle elements:&lt;/p>
&lt;ul>
&lt;li>Create/destroy/get/list machines for the Shoot&lt;/li>
&lt;li>Create/destroy/get/list infrastructure components for the Shoot, e.g. VPCs, subnets, routes, etc.&lt;/li>
&lt;li>Backup/restore etcd for the Seed via writing files to and reading them from object storage&lt;/li>
&lt;/ul>
&lt;p>Thus, the integrations you need for your cloud provider depend on whether you want to deploy Shoot clusters to the provider, Seed or both.&lt;/p>
&lt;ul>
&lt;li>Shoot Only: machine lifecycle management, infrastructure.&lt;/li>
&lt;li>Seed: etcd backup/restore&lt;/li>
&lt;/ul>
&lt;h2 id="gardener-api">Gardener API&lt;/h2>
&lt;p>In addition to the requirements to integrate with the cloud provider, you also need to enable the core Gardener app to receive, validate and process requests to use that cloud provider.&lt;/p>
&lt;ul>
&lt;li>Expose the cloud provider to the consumers of the Gardener API, so it can be told to use that cloud provider as an option&lt;/li>
&lt;li>Validate that API as requests come in&lt;/li>
&lt;li>Write cloud provider specific implementation (called &amp;ldquo;provider extension&amp;rdquo;)&lt;/li>
&lt;/ul>
&lt;h2 id="cloud-provider-api-requirements">Cloud Provider API Requirements&lt;/h2>
&lt;p>In order for a cloud provider to integrate with Gardener, the provider must have an API to perform machine lifecycle events, specifically:&lt;/p>
&lt;ul>
&lt;li>Create a machine&lt;/li>
&lt;li>Destroy a machine&lt;/li>
&lt;li>Get information about a machine and its state&lt;/li>
&lt;li>List machines&lt;/li>
&lt;/ul>
&lt;p>In addition, if the Seed is to run on the given provider, it also must have an API to save files to block storage and retrieve them, for etcd backup/restore.&lt;/p>
&lt;p>The current integration with cloud providers is to add their API calls to Gardener and the Machine Controller Manager. As both Gardener and the Machine Controller Manager are written in &lt;a href="https://golang.org">go&lt;/a>, the cloud provider should have a go SDK. However, if it has an API that is wrappable in go, e.g. a REST API, then you can use that to integrate.&lt;/p>
&lt;p>The Gardener team is working on bringing cloud provider integrations out-of-tree, making them pluggable, which should simplify the process and make it possible to use other SDKs.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>To add a new cloud provider, you need some or all of the following. Each repository contains instructions on how to extend it to a new cloud provider.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Purpose&lt;/th>
&lt;th>Location&lt;/th>
&lt;th>Documentation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Seed or Shoot&lt;/td>
&lt;td>Machine Lifecycle&lt;/td>
&lt;td>&lt;a href="https://github.com/gardener/machine-controller-manager">machine-controller-manager&lt;/a>&lt;/td>
&lt;td>&lt;a href="https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/cp_support_new/">MCM new cloud provider&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Seed only&lt;/td>
&lt;td>etcd backup/restore&lt;/td>
&lt;td>&lt;a href="https://github.com/gardener/etcd-backup-restore/">etcd-backup-restore&lt;/a>&lt;/td>
&lt;td>In process&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>All&lt;/td>
&lt;td>Extension implementation&lt;/td>
&lt;td>&lt;a href="https://github.com/gardener/gardener">gardener&lt;/a>&lt;/td>
&lt;td>&lt;a href="https://gardener.cloud/docs/gardener/extensions/overview/">Extension controller&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: New Kubernetes Version</title><link>https://gardener.cloud/docs/gardener/development/new-kubernetes-version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/new-kubernetes-version/</guid><description>
&lt;h1 id="adding-support-for-a-new-kubernetes-version">Adding Support For A New Kubernetes Version&lt;/h1>
&lt;p>This document describes the steps needed to perform in order to confidently add support for a new Kubernetes &lt;strong>minor&lt;/strong> version.&lt;/p>
&lt;blockquote>
&lt;p>⚠️ Typically, once a minor Kubernetes version &lt;code>vX.Y&lt;/code> is supported by Gardener then all patch versions &lt;code>vX.Y.Z&lt;/code> are also automatically supported without any required action.
This is because patch versions do not introduce any new feature or API changes, so there is nothing that needs to be adapted in &lt;code>gardener/gardener&lt;/code> code.&lt;/p>
&lt;/blockquote>
&lt;p>The Kubernetes community release a new minor version roughly every 4 months.
Please refer to the &lt;a href="https://kubernetes.io/releases/release/">official documentation&lt;/a> about their release cycles for any additional information.&lt;/p>
&lt;p>Shortly before a new release, an &amp;ldquo;umbrella&amp;rdquo; issue should be opened which is used to collect the required adaptations and to track the work items.
For example, &lt;a href="https://github.com/gardener/gardener/issues/5102">#5102&lt;/a> can be used as a template for the issue description.&lt;br>
As you can see, the task of supporting a new Kubernetes version also includes the provider extensions maintained in the &lt;code>gardener&lt;/code> GitHub organization and is not restricted to &lt;code>gardener/gardener&lt;/code> only.&lt;/p>
&lt;p>Generally, the work items can be split into two groups:
The first group contains Kubernetes release-independent tasks, the second group contains tasks specific to the changes in the given Kubernetes release.&lt;/p>
&lt;blockquote>
&lt;p>ℹ️ Upgrading the &lt;code>k8s.io/*&lt;/code> and &lt;code>sigs.k8s.io/controller-runtime&lt;/code> Golang dependencies is typically tracked and worked on separately (see e.g. &lt;a href="https://github.com/gardener/gardener/issues/4772">#4772&lt;/a> or &lt;a href="https://github.com/gardener/gardener/issues/5282">#5282&lt;/a>).&lt;/p>
&lt;/blockquote>
&lt;h2 id="deriving-release-specific-tasks">Deriving Release-Specific Tasks&lt;/h2>
&lt;p>Most new minor Kubernetes releases incorporate API changes, deprecations or new features.
The community announces them via their &lt;a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/">change logs&lt;/a>.
In order to derive the release-specific tasks, the respective change log for the new version &lt;code>vX.Y&lt;/code> has to be read and understood (for example, &lt;a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.24.md">this document&lt;/a> for &lt;code>v1.24&lt;/code>).&lt;/p>
&lt;p>As already mentioned, typical changes to watch out for are:&lt;/p>
&lt;ul>
&lt;li>API version promotions or deprecations&lt;/li>
&lt;li>Feature gate promotions or deprecations&lt;/li>
&lt;li>CLI flag changes for Kubernetes components&lt;/li>
&lt;li>New default values in resources&lt;/li>
&lt;li>New available fields in resources&lt;/li>
&lt;li>New features potentially relevant for the Gardener system&lt;/li>
&lt;li>Changes of labels or annotations Gardener relies on&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>Obviously, this requires a certain experience and understanding of the Gardener project so that all &amp;ldquo;relevant changes&amp;rdquo; can be identified.
While reading the change log, add the tasks (along with the respective PR in &lt;code>kubernetes/kubernetes&lt;/code> to the umbrella issue).&lt;/p>
&lt;blockquote>
&lt;p>ℹ️ Some of the changes might be specific to certain cloud providers. Pay attention to those as well and add related tasks to the issue.&lt;/p>
&lt;/blockquote>
&lt;h2 id="list-of-release-independent-tasks">List Of Release-Independent Tasks&lt;/h2>
&lt;p>The following paragraphs describe recurring tasks that need to be performed for each new release.&lt;/p>
&lt;h3 id="releasing-a-new-hyperkube-image">Releasing A New &lt;code>hyperkube&lt;/code> Image&lt;/h3>
&lt;p>The &lt;a href="https://github.com/gardener/hyperkube">&lt;code>gardener/hyperkube&lt;/code>&lt;/a> repository is used to release container images consisting of the &lt;code>kubectl&lt;/code> and &lt;code>kubelet&lt;/code> binaries.&lt;/p>
&lt;p>Run the &lt;a href="https://github.com/gardener/hyperkube/blob/master/.ci/check-and-release">&lt;code>.ci/check-and-release&lt;/code>&lt;/a> script to automatically build the image (make sure Docker is running!), push the images to the GCR (make sure &lt;code>gcloud&lt;/code> is configured properly!) and publish the release on GitHub (make sure &lt;code>git&lt;/code> is configured properly!).&lt;/p>
&lt;h3 id="adapting-gardener">Adapting Gardener&lt;/h3>
&lt;ul>
&lt;li>Allow instantiation of a Kubernetes client for the new minor version and update the &lt;code>README.md&lt;/code>:
&lt;ul>
&lt;li>See &lt;a href="https://github.com/gardener/gardener/pull/5255/commits/63bdae022f1cb1c9cbd1cd49b557545dca2ec32a">this&lt;/a> example commit.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Maintain the Kubernetes feature gates used for validation of &lt;code>Shoot&lt;/code> resources:
&lt;ul>
&lt;li>The feature gates are maintained in &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/utils/validation/features/featuregates.go">this&lt;/a> file.&lt;/li>
&lt;li>To maintain this list for new Kubernetes versions, run &lt;code>hack/compare-k8s-feature-gates.sh &amp;lt;old-version&amp;gt; &amp;lt;new-version&amp;gt;&lt;/code> (e.g. &lt;code>hack/compare-k8s-feature-gates.sh v1.22 v1.23&lt;/code>).&lt;/li>
&lt;li>It will present 2 lists of feature gates: those added and those removed in &lt;code>&amp;lt;new-version&amp;gt;&lt;/code> compared to &lt;code>&amp;lt;old-version&amp;gt;&lt;/code>.&lt;/li>
&lt;li>Add all added feature gates to the map with &lt;code>&amp;lt;new-version&amp;gt;&lt;/code> as &lt;code>AddedInVersion&lt;/code> and no &lt;code>RemovedInVersion&lt;/code>.&lt;/li>
&lt;li>For any removed feature gates, add &lt;code>&amp;lt;new-version&amp;gt;&lt;/code> as RemovedInVersion to the already existing feature gate in the map.&lt;/li>
&lt;li>See &lt;a href="https://github.com/gardener/gardener/pull/5255/commits/97923b0604300ff805def8eae981ed388d5e4a83">this&lt;/a> example commit.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Maintain the &lt;code>ServiceAccount&lt;/code> names for the controllers part of &lt;code>kube-controller-manager&lt;/code>:
&lt;ul>
&lt;li>The names are maintained in &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/operation/botanist/component/shootsystem/shootsystem.go">this&lt;/a> file.&lt;/li>
&lt;li>To maintain this list for new Kubernetes versions, run &lt;code>hack/compare-k8s-controllers.sh &amp;lt;old-version&amp;gt; &amp;lt;new-version&amp;gt;&lt;/code> (e.g. &lt;code>hack/compare-k8s-controllers.sh 1.22 1.23&lt;/code>).&lt;/li>
&lt;li>It will present 2 lists of controllers: those added and those removed in &lt;code>&amp;lt;new-version&amp;gt;&lt;/code> compared to &lt;code>&amp;lt;old-version&amp;gt;&lt;/code>.&lt;/li>
&lt;li>Double check whether such &lt;code>ServiceAccount&lt;/code> indeed appears in the &lt;code>kube-system&lt;/code> namespace when creating a cluster with &lt;code>&amp;lt;new-version&amp;gt;&lt;/code>. Note that it sometimes might be hidden behind a default-off feature gate. You can create a local cluster with the new version using the &lt;a href="https://gardener.cloud/docs/gardener/development/getting_started_locally/">local provider&lt;/a>.&lt;/li>
&lt;li>If it appears, add all added controllers to the list based on the Kubernetes version (&lt;a href="https://github.com/gardener/gardener/blob/5f87b18b951e104c2c25a7145548c8a2d08adefc/pkg/operation/botanist/component/shootsystem/shootsystem.go#L170-L174">example&lt;/a>).&lt;/li>
&lt;li>For any removed controllers, add them only to the Kubernetes version if it is low enough.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Bump the used Kubernetes version for local &lt;code>Shoot&lt;/code> and local e2e test.
&lt;ul>
&lt;li>See &lt;a href="https://github.com/gardener/gardener/pull/5255/commits/5707c4c7a4fd265b176387178b755cabeea89ffe">this&lt;/a> example commit.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="filing-the-pull-request">Filing The Pull Request&lt;/h4>
&lt;p>Work on all the tasks you have collected and validate them using the &lt;a href="https://gardener.cloud/docs/gardener/development/getting_started_locally/">local provider&lt;/a>.
Execute the e2e tests and if everything looks good, then go ahead and file the PR (&lt;a href="https://github.com/gardener/gardener/pull/5255">example PR&lt;/a>).
Generally, it is great if you add the PRs also to the umbrella issue so that they can be tracked more easily.&lt;/p>
&lt;h3 id="adapting-provider-extensions">Adapting Provider Extensions&lt;/h3>
&lt;p>After the PR in &lt;code>gardener/gardener&lt;/code> for the support of the new version has been merged, you can go ahead and work on the provider extensions.&lt;/p>
&lt;blockquote>
&lt;p>Actually, you can already start even if the PR is not yet merged and use the branch of your fork.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Revendor the &lt;code>github.com/gardener/gardener&lt;/code> dependency in the extension and update the &lt;code>README.md&lt;/code>.&lt;/li>
&lt;li>Work on release-specific tasks related to this provider.&lt;/li>
&lt;/ul>
&lt;h4 id="maintaining-the-cloud-controller-manager-images">Maintaining The &lt;code>cloud-controller-manager&lt;/code> Images&lt;/h4>
&lt;p>Some of the cloud providers are not yet using upstream &lt;code>cloud-controller-manager&lt;/code> images.
Instead, we build and maintain them ourselves:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/cloud-provider-aws">https://github.com/gardener/cloud-provider-aws&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/cloud-provider-azure">https://github.com/gardener/cloud-provider-azure&lt;/a> (since &lt;code>v1.23&lt;/code>, we use the upstream image)&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/cloud-provider-gcp">https://github.com/gardener/cloud-provider-gcp&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Until we switch to upstream images, you need to revendor the Kubernetes dependencies and release a new image.
The required steps are as follows:&lt;/p>
&lt;ul>
&lt;li>Checkout the &lt;code>legacy-cloud-provider&lt;/code> branch of the respective repository&lt;/li>
&lt;li>Bump the versions in the &lt;code>Dockerfile&lt;/code> (&lt;a href="https://github.com/gardener/cloud-provider-gcp/commit/b7eb3f56b252aaf29adc78406672574b1bc17495">example commit&lt;/a>).&lt;/li>
&lt;li>Update the &lt;code>VERSION&lt;/code> to &lt;code>vX.Y.Z-dev&lt;/code> where &lt;code>Z&lt;/code> is the latest available Kubernetes patch version for the &lt;code>vX.Y&lt;/code> minor version.&lt;/li>
&lt;li>Update the &lt;code>k8s.io/*&lt;/code> dependencies in the &lt;code>go.mod&lt;/code> file to &lt;code>vX.Y.Z&lt;/code> and run &lt;code>go mod vendor&lt;/code> and &lt;code>go mod tidy&lt;/code> (&lt;a href="https://github.com/gardener/cloud-provider-gcp/commit/d41cc9f035bcc4893b40d90a4f617c4d436c5d62">example commit&lt;/a>).&lt;/li>
&lt;li>Checkout a new &lt;code>release-vX.Y&lt;/code> branch and release it (&lt;a href="https://github.com/gardener/cloud-provider-gcp/commits/release-v1.23">example&lt;/a>)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>As you are already on it, it is great if you also bump the &lt;code>k8s.io/*&lt;/code> dependencies for the last three minor releases as well.
In this case, you need to checkout the &lt;code>release-vX.{Y-{1,2,3}}&lt;/code> branches and only perform the last three steps (&lt;a href="https://github.com/gardener/cloud-provider-gcp/commits/release-v1.20">example branch&lt;/a>, &lt;a href="https://github.com/gardener/cloud-provider-gcp/commit/372aa43fbacdeb76b3da9f6fad6cfd924d916227">example commit&lt;/a>).&lt;/p>
&lt;/blockquote>
&lt;p>Now you need to update the new releases in the &lt;code>charts/images.yaml&lt;/code> of the respective provider extension so that they are used (see this &lt;a href="https://github.com/gardener/gardener-extension-provider-aws/pull/480/commits/76256de933d5a508aba26a8f589dd1a39026142e">example commit&lt;/a> for reference).&lt;/p>
&lt;h4 id="filing-the-pull-request-1">Filing The Pull Request&lt;/h4>
&lt;p>Again, work on all the tasks you have collected.
This time, you cannot use the local provider for validation but should create real clusters on the various infrastructures.
Typically, the following validations should be performed:&lt;/p>
&lt;ul>
&lt;li>Create new clusters with versions &amp;lt; &lt;code>vX.Y&lt;/code>&lt;/li>
&lt;li>Create new clusters with version = &lt;code>vX.Y&lt;/code>&lt;/li>
&lt;li>Upgrade old clusters from version &lt;code>vX.{Y-1}&lt;/code> to version &lt;code>vX.Y&lt;/code>&lt;/li>
&lt;li>Delete clusters with versions &amp;lt; &lt;code>vX.Y&lt;/code>&lt;/li>
&lt;li>Delete clusters with version = &lt;code>vX.Y&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>If everything looks good, then go ahead and file the PR (&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/pull/480">example PR&lt;/a>).
Generally, it is again great if you add the PRs also to the umbrella issue so that they can be tracked more easily.&lt;/p></description></item><item><title>Docs: Process</title><link>https://gardener.cloud/docs/gardener/development/process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/process/</guid><description>
&lt;h1 id="releases-features-hotfixes">Releases, Features, Hotfixes&lt;/h1>
&lt;p>This document describes how to contribute features or hotfixes, and how new Gardener releases are usually scheduled, validated, etc.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#releases">Releases&lt;/a>&lt;/li>
&lt;li>&lt;a href="#contributing-new-features-or-fixes">Contributing new Features or Fixes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cherry-picks">Cherry Picks&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="releases">Releases&lt;/h2>
&lt;p>The &lt;a href="https://github.com/orgs/gardener/teams/gardener-maintainers">@gardener-maintainers&lt;/a> are trying to provide a new release roughly every other week (depending on their capacity and the stability/robustness of the &lt;code>master&lt;/code> branch).&lt;/p>
&lt;p>Hotfixes are usually maintained for the latest three minor releases, though, there are no fixed release dates.&lt;/p>
&lt;h3 id="release-responsible-plan">Release Responsible Plan&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Version&lt;/th>
&lt;th>Week No&lt;/th>
&lt;th>Begin Validation Phase&lt;/th>
&lt;th>Due Date&lt;/th>
&lt;th>Release Responsible&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>v1.42&lt;/td>
&lt;td>Week 09-10&lt;/td>
&lt;td>February 28, 2022&lt;/td>
&lt;td>March 13, 2022&lt;/td>
&lt;td>&lt;a href="https://github.com/kris94">@kris94&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.43&lt;/td>
&lt;td>Week 11-12&lt;/td>
&lt;td>March 14, 2022&lt;/td>
&lt;td>March 27, 2022&lt;/td>
&lt;td>&lt;a href="https://github.com/rfranzke">@rfranzke&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.44&lt;/td>
&lt;td>Week 13-14&lt;/td>
&lt;td>March 28, 2022&lt;/td>
&lt;td>April 10, 2022&lt;/td>
&lt;td>&lt;a href="https://github.com/timebertt">@timebertt&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.45&lt;/td>
&lt;td>Week 15-16&lt;/td>
&lt;td>April 11, 2022&lt;/td>
&lt;td>April 24, 2022&lt;/td>
&lt;td>&lt;a href="https://github.com/acumino">@acumino&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.46&lt;/td>
&lt;td>Week 17-18&lt;/td>
&lt;td>April 25, 2022&lt;/td>
&lt;td>May 8, 2022&lt;/td>
&lt;td>&lt;a href="https://github.com/ialidzhikov">@ialidzhikov&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.47&lt;/td>
&lt;td>Week 19-20&lt;/td>
&lt;td>May 9, 2022&lt;/td>
&lt;td>May 22, 2022&lt;/td>
&lt;td>&lt;a href="https://github.com/BeckerMax">@BeckerMax&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.48&lt;/td>
&lt;td>Week 21-22&lt;/td>
&lt;td>May 23, 2022&lt;/td>
&lt;td>June 5, 2022&lt;/td>
&lt;td>&lt;a href="https://github.com/ary1992">@ary1992&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.49&lt;/td>
&lt;td>Week 23-24&lt;/td>
&lt;td>June 6, 2022&lt;/td>
&lt;td>June 19, 2022&lt;/td>
&lt;td>&lt;a href="https://github.com/plkokanov">@plkokanov&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.50&lt;/td>
&lt;td>Week 25-26&lt;/td>
&lt;td>June 20, 2022&lt;/td>
&lt;td>July 3, 2022&lt;/td>
&lt;td>&lt;a href="https://github.com/rfranzke">@rfranzke&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.51&lt;/td>
&lt;td>Week 27-28&lt;/td>
&lt;td>July 4, 2022&lt;/td>
&lt;td>July 17, 2022&lt;/td>
&lt;td>&lt;a href="https://github.com/shafeeqes">@shafeeqes&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Apart from the release of the next version, the release responsible is also taking care of potential hotfix releases of the last three minor versions.
The release responsible is the main contact person for coordinating new feature PRs for the next minor versions or cherry-pick PRs for the last three minor versions.&lt;/p>
&lt;details>
&lt;summary>Click to expand the archived release responsible associations!&lt;/summary>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Version&lt;/th>
&lt;th>Week No&lt;/th>
&lt;th>Begin Validation Phase&lt;/th>
&lt;th>Due Date&lt;/th>
&lt;th>Release Responsible&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>v1.17&lt;/td>
&lt;td>Week 07-08&lt;/td>
&lt;td>February 15, 2021&lt;/td>
&lt;td>February 28, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/rfranzke">@rfranzke&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.18&lt;/td>
&lt;td>Week 09-10&lt;/td>
&lt;td>March 1, 2021&lt;/td>
&lt;td>March 14, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/danielfoehrKn">@danielfoehrKn&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.19&lt;/td>
&lt;td>Week 11-12&lt;/td>
&lt;td>March 15, 2021&lt;/td>
&lt;td>March 28, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/timebertt">@timebertt&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.20&lt;/td>
&lt;td>Week 13-14&lt;/td>
&lt;td>March 29, 2021&lt;/td>
&lt;td>April 11, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/vpnachev">@vpnachev&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.21&lt;/td>
&lt;td>Week 15-16&lt;/td>
&lt;td>April 12, 2021&lt;/td>
&lt;td>April 25, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/timuthy">@timuthy&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.22&lt;/td>
&lt;td>Week 17-18&lt;/td>
&lt;td>April 26, 2021&lt;/td>
&lt;td>May 9, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/BeckerMax">@BeckerMax&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.23&lt;/td>
&lt;td>Week 19-20&lt;/td>
&lt;td>May 10, 2021&lt;/td>
&lt;td>May 23, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/ialidzhikov">@ialidzhikov&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.24&lt;/td>
&lt;td>Week 21-22&lt;/td>
&lt;td>May 24, 2021&lt;/td>
&lt;td>June 5, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/stoyanr">@stoyanr&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.25&lt;/td>
&lt;td>Week 23-24&lt;/td>
&lt;td>June 7, 2021&lt;/td>
&lt;td>June 20, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/rfranzke">@rfranzke&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.26&lt;/td>
&lt;td>Week 25-26&lt;/td>
&lt;td>June 21, 2021&lt;/td>
&lt;td>July 4, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/danielfoehrKn">@danielfoehrKn&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.27&lt;/td>
&lt;td>Week 27-28&lt;/td>
&lt;td>July 5, 2021&lt;/td>
&lt;td>July 18, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/timebertt">@timebertt&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.28&lt;/td>
&lt;td>Week 29-30&lt;/td>
&lt;td>July 19, 2021&lt;/td>
&lt;td>August 1, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/ialidzhikov">@ialidzhikov&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.29&lt;/td>
&lt;td>Week 31-32&lt;/td>
&lt;td>August 2, 2021&lt;/td>
&lt;td>August 15, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/timuthy">@timuthy&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.30&lt;/td>
&lt;td>Week 33-34&lt;/td>
&lt;td>August 16, 2021&lt;/td>
&lt;td>August 29, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/BeckerMax">@BeckerMax&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.31&lt;/td>
&lt;td>Week 35-36&lt;/td>
&lt;td>August 30, 2021&lt;/td>
&lt;td>September 12, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/stoyanr">@stoyanr&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.32&lt;/td>
&lt;td>Week 37-38&lt;/td>
&lt;td>September 13, 2021&lt;/td>
&lt;td>September 26, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/vpnachev">@vpnachev&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.33&lt;/td>
&lt;td>Week 39-40&lt;/td>
&lt;td>September 27, 2021&lt;/td>
&lt;td>October 10, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/voelzmo">@voelzmo&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.34&lt;/td>
&lt;td>Week 41-42&lt;/td>
&lt;td>October 11, 2021&lt;/td>
&lt;td>October 24, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/plkokanov">@plkokanov&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.35&lt;/td>
&lt;td>Week 43-44&lt;/td>
&lt;td>October 25, 2021&lt;/td>
&lt;td>November 7, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/kris94">@kris94&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.36&lt;/td>
&lt;td>Week 45-46&lt;/td>
&lt;td>November 8, 2021&lt;/td>
&lt;td>November 21, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/timebertt">@timebertt&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.37&lt;/td>
&lt;td>Week 47-48&lt;/td>
&lt;td>November 22, 2021&lt;/td>
&lt;td>December 5, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/danielfoehrKn">@danielfoehrKn&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.38&lt;/td>
&lt;td>Week 49-50&lt;/td>
&lt;td>December 6, 2021&lt;/td>
&lt;td>December 19, 2021&lt;/td>
&lt;td>&lt;a href="https://github.com/rfranzke">@rfranzke&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.39&lt;/td>
&lt;td>Week 01-04&lt;/td>
&lt;td>January 3, 2022&lt;/td>
&lt;td>January 30, 2022&lt;/td>
&lt;td>&lt;a href="https://github.com/ialidzhikov">@ialidzhikov&lt;/a>, &lt;a href="https://github.com/timuthy">@timuthy&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.40&lt;/td>
&lt;td>Week 05-06&lt;/td>
&lt;td>January 31, 2022&lt;/td>
&lt;td>February 13, 2022&lt;/td>
&lt;td>&lt;a href="https://github.com/BeckerMax">@BeckerMax&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>v1.41&lt;/td>
&lt;td>Week 07-08&lt;/td>
&lt;td>February 14, 2022&lt;/td>
&lt;td>February 27, 2022&lt;/td>
&lt;td>&lt;a href="https://github.com/plkokanov">@plkokanov&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/details>
&lt;h3 id="release-validation">Release Validation&lt;/h3>
&lt;p>The release phase for a new minor version lasts two weeks.
Typically, the first week is used for the validation of the release.
This phase includes the following steps:&lt;/p>
&lt;ol>
&lt;li>&lt;code>master&lt;/code> (or latest &lt;code>release-*&lt;/code> branch) is deployed to a development landscape that already hosts some existing seed and shoot clusters.&lt;/li>
&lt;li>An extended test suite is triggered by the &amp;ldquo;release responsible&amp;rdquo; which
&lt;ol>
&lt;li>executes the Gardener integration tests for different Kubernetes versions, infrastructures, and &lt;code>Shoot&lt;/code> settings.&lt;/li>
&lt;li>executes the Kubernetes conformance tests.&lt;/li>
&lt;li>executes further tests like Kubernetes/OS patch/minor version upgrades.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Additionally, every four hours (or on demand) more tests (e.g., including the Kubernetes e2e test suite) are executed for different infrastructures.&lt;/li>
&lt;li>The &amp;ldquo;release responsible&amp;rdquo; is verifying new features or other notable changes (derived of the draft release notes) in this development system.&lt;/li>
&lt;/ol>
&lt;p>Usually, the new release is triggered in the beginning of the second week if all tests are green, all checks were successful, and if all of the planned verifications were performed by the release responsible.&lt;/p>
&lt;h2 id="contributing-new-features-or-fixes">Contributing new Features or Fixes&lt;/h2>
&lt;p>Please refer to the &lt;a href="https://gardener.cloud/docs/contribute/">Gardener contributor guide&lt;/a>.
Besides a lot of a general information, it also provides a checklist for newly created pull requests that may help you to prepare your changes for an efficient review process.
If you are contributing a fix or major improvement, please take care to open cherry-pick PRs to all affected and still supported versions once the change is approved and merged in the &lt;code>master&lt;/code> branch.&lt;/p>
&lt;p>⚠️ Please ensure that your modifications pass the verification checks (linting, formatting, static code checks, tests, etc.) by executing&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make verify
&lt;/code>&lt;/pre>&lt;/div>&lt;p>before filing your pull request.&lt;/p>
&lt;p>The guide applies for both changes to the &lt;code>master&lt;/code> and to any &lt;code>release-*&lt;/code> branch.
All changes must be submitted via a pull request and be reviewed and approved by at least one code owner.&lt;/p>
&lt;h2 id="cherry-picks">Cherry Picks&lt;/h2>
&lt;p>This section explains how to initiate cherry picks on release branches within the &lt;code>gardener/gardener&lt;/code> repository.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#prerequisites">Prerequisites&lt;/a>&lt;/li>
&lt;li>&lt;a href="#initiate-a-cherry-pick">Initiate a Cherry Pick&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;p>Before you initiate a cherry pick, make sure that the following prerequisites are accomplished.&lt;/p>
&lt;ul>
&lt;li>A pull request merged against the &lt;code>master&lt;/code> branch.&lt;/li>
&lt;li>The release branch exists (check in the &lt;a href="https://github.com/gardener/gardener/branches">branches section&lt;/a>)&lt;/li>
&lt;li>Have the &lt;code>gardener/gardener&lt;/code> repository cloned as follows:
&lt;ul>
&lt;li>the &lt;code>origin&lt;/code> remote should point to your fork (alternatively this can be overwritten by passing &lt;code>FORK_REMOTE=&amp;lt;fork-remote&amp;gt;&lt;/code>)&lt;/li>
&lt;li>the &lt;code>upstream&lt;/code> remote should point to the Gardener github org (alternatively this can be overwritten by passing &lt;code>UPSTREAM_REMOTE=&amp;lt;upstream-remote&amp;gt;&lt;/code>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Have &lt;code>hub&lt;/code> installed, which is most easily installed via
&lt;code>go get github.com/github/hub&lt;/code> assuming you have a standard golang
development environment.&lt;/li>
&lt;li>A github token which has permissions to create a PR in an upstream branch.&lt;/li>
&lt;/ul>
&lt;h3 id="initiate-a-cherry-pick">Initiate a Cherry Pick&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Run the &lt;a href="https://github.com/gardener/gardener/blob/master/hack/cherry-pick-pull.sh">cherry pick script&lt;/a>&lt;/p>
&lt;p>This example applies a master branch PR #3632 to the remote branch
&lt;code>upstream/release-v3.14&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">GITHUB_USER=&amp;lt;your-user&amp;gt; hack/cherry-pick-pull.sh upstream/release-v3.14 3632
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Be aware the cherry pick script assumes you have a git remote called
&lt;code>upstream&lt;/code> that points at the Gardener github org.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You will need to run the cherry pick script separately for each patch
release you want to cherry pick to. Cherry picks should be applied to all
active release branches where the fix is applicable.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When asked for your github password, provide the created github token
rather than your actual github password.
Refer &lt;a href="https://github.com/github/hub/issues/2655#issuecomment-735836048">https://github.com/github/hub/issues/2655#issuecomment-735836048&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Secrets Management</title><link>https://gardener.cloud/docs/gardener/development/secrets_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/secrets_management/</guid><description>
&lt;h1 id="secrets-management-for-seed-and-shoot-cluster">Secrets Management for Seed and Shoot Cluster&lt;/h1>
&lt;blockquote>
&lt;p>🚧️ Please note that the work in the new secrets management is ongoing and hence not yet completed.
Accordingly, expect adaptations to this document and implementation details.&lt;/p>
&lt;/blockquote>
&lt;p>The gardenlet needs to create quite some amount of credentials (certificates, private keys, passwords, etc.) for seed and shoot clusters in order to ensure secure deployments.
Such credentials typically should be rotated regularly, and they potentially need to be persisted such that they don&amp;rsquo;t get lost in case of a control plane migration or a lost seed cluster.&lt;/p>
&lt;h2 id="secretsmanager-introduction">SecretsManager Introduction&lt;/h2>
&lt;p>These requirements can be covered by using the &lt;code>SecretsManager&lt;/code> package maintained in &lt;a href="https://github.com/gardener/gardener/tree/master/docs/development/pkg/utils/secrets/manager">&lt;code>pkg/utils/secrets/manager&lt;/code>&lt;/a>.
It is built on top of the &lt;code>ConfigInterface&lt;/code> and &lt;code>DataInterface&lt;/code> interfaces part of &lt;a href="https://github.com/gardener/gardener/tree/master/docs/development/pkg/utils/secrets">&lt;code>pkg/utils/secrets&lt;/code>&lt;/a> and provides the following functions:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Generate(context.Context, secrets.ConfigInterface, ...GenerateOption) (*corev1.Secret, error)&lt;/code>&lt;/p>
&lt;p>This method either retrieves the current secret for the given configuration or it (re)generates it in case the configuration changed, the signing CA changed (for certificate secrets), or when proactive rotation was triggered.
If the configuration describes a certificate authority secret then this method automatically generates a bundle secret containing the current and potentially the old certificate.&lt;br>
Available &lt;code>GenerateOption&lt;/code>s:&lt;/p>
&lt;ul>
&lt;li>&lt;code>SignedByCA(string)&lt;/code>: This is only valid for certificate secrets and automatically retrieves the correct certificate authority in order to sign the provided server or client certificate.&lt;/li>
&lt;li>&lt;code>Persist()&lt;/code>: This marks the secret such that it gets persisted in the &lt;code>ShootState&lt;/code> resource in the garden cluster. Consequently, it should only be used for secrets related to a shoot cluster.&lt;/li>
&lt;li>&lt;code>Rotate(rotationStrategy)&lt;/code>: This specifies the strategy in case this secret is to be rotated or regenerated (either &lt;code>InPlace&lt;/code> which immediately forgets about the old secret, or &lt;code>KeepOld&lt;/code> which keeps the old secret in the system).&lt;/li>
&lt;li>&lt;code>IgnoreOldSecrets()&lt;/code>: This specifies whether old secrets should be considered and loaded (which is done by default). It should be used when old secrets are no longer important and can be &amp;ldquo;forgotten&amp;rdquo; (e.g. in &lt;a href="https://gardener.cloud/docs/gardener/proposals/18-shoot-ca-rotation/#rotation-sequence-for-cluster-and-client-ca">&amp;ldquo;phase 2&amp;rdquo; (&lt;code>t2&lt;/code>) of the CA certificate rotation&lt;/a>).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Get(string, ...GetOption) (*corev1.Secret, bool)&lt;/code>&lt;/p>
&lt;p>This method retrieves the current secret for the given name.
In case the secret in question is a certificate authority secret then it retrieves the bundle secret by default.
It is important that this method only knows about secrets for which there were prior &lt;code>Generate&lt;/code> calls.&lt;br>
Available &lt;code>GetOption&lt;/code>s:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Bundle&lt;/code> (default): This retrieves the bundle secret.&lt;/li>
&lt;li>&lt;code>Current&lt;/code>: This retrieves the current secret.&lt;/li>
&lt;li>&lt;code>Old&lt;/code>: This retrieves the old secret.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Cleanup(context.Context) error&lt;/code>&lt;/p>
&lt;p>This method deletes secrets which are no longer required.
No longer required secrets are those still existing in the system which weren&amp;rsquo;t detected by prior &lt;code>Generate&lt;/code> calls.
Consequently, only call &lt;code>Cleanup&lt;/code> after you have executed &lt;code>Generate&lt;/code> calls for all desired secrets.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Some exemplary usages would look as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">secret, err := k.secretsManager.Generate(
ctx,
&amp;amp;secrets.CertificateSecretConfig{
Name: &lt;span style="color:#a31515">&amp;#34;my-server-secret&amp;#34;&lt;/span>,
CommonName: &lt;span style="color:#a31515">&amp;#34;server-abc&amp;#34;&lt;/span>,
DNSNames: []&lt;span style="color:#2b91af">string&lt;/span>{&lt;span style="color:#a31515">&amp;#34;first-name&amp;#34;&lt;/span>, &lt;span style="color:#a31515">&amp;#34;second-name&amp;#34;&lt;/span>},
CertType: secrets.ServerCert,
SkipPublishingCACertificate: &lt;span style="color:#00f">true&lt;/span>,
},
secretsmanager.SignedByCA(&lt;span style="color:#a31515">&amp;#34;my-ca&amp;#34;&lt;/span>),
secretsmanager.Persist(),
secretsmanager.Rotate(secretsmanager.InPlace),
)
&lt;span style="color:#00f">if&lt;/span> err != &lt;span style="color:#00f">nil&lt;/span> {
&lt;span style="color:#00f">return&lt;/span> err
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As explained above, the caller does not need to care about the rotation or the persistence of this secret - all of these concerns are handled by the secrets manager.&lt;/p>
&lt;p>In case a CA certificate is needed by some component then it can be retrieved as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">caSecret, found := k.secretsManager.Get(&lt;span style="color:#a31515">&amp;#34;my-ca&amp;#34;&lt;/span>)
&lt;span style="color:#00f">if&lt;/span> err != &lt;span style="color:#00f">nil&lt;/span> {
&lt;span style="color:#00f">return&lt;/span> fmt.Errorf(&lt;span style="color:#a31515">&amp;#34;secret my-ca not found&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As explained above, this returns the bundle secret for the CA &lt;code>my-ca&lt;/code> which might potentially contain both the current and the old CA (in case of rotation/regeneration).&lt;/p>
&lt;h2 id="reusing-the-secretsmanager-in-other-components">Reusing the SecretsManager in Other Components&lt;/h2>
&lt;p>While the &lt;code>SecretsManager&lt;/code> is primarily used by gardenlet, it can be reused by other components (e.g. extensions) as well for managing secrets that are specific to the component or extension. For example, provider extensions might use their own &lt;code>SecretsManager&lt;/code> instance for managing the serving certificate of &lt;code>cloud-controller-manager&lt;/code>.&lt;/p>
&lt;p>External components that want to reuse the &lt;code>SecretsManager&lt;/code> should consider the following aspects:&lt;/p>
&lt;ul>
&lt;li>On initialization of a &lt;code>SecretsManager&lt;/code>, pass an &lt;code>identity&lt;/code> specific to the component, for example the extension name (gardenlet uses &lt;code>gardenlet&lt;/code> as the &lt;code>SecretsManager&lt;/code>&amp;rsquo;s identity).
The given identity is added as a value for the &lt;code>manager-identity&lt;/code> label on managed &lt;code>Secret&lt;/code>s.
This label is used by the &lt;code>Cleanup&lt;/code> function to select only those &lt;code>Secret&lt;/code>s that are actually managed by the particular &lt;code>SecretManager&lt;/code> instance. This is done to prevent removing still needed &lt;code>Secret&lt;/code>s that are managed by other instances.&lt;/li>
&lt;li>Generate dedicated CAs for signing certificates instead of depending on CAs managed by gardenlet.&lt;/li>
&lt;li>Names of &lt;code>Secret&lt;/code>s managed by external &lt;code>SecretsManager&lt;/code> instances must not conflict with &lt;code>Secret&lt;/code> names from other instances (e.g. gardenlet).&lt;/li>
&lt;li>For CAs that should be rotated in lock-step with the Shoot CAs managed by gardenlet, components need to pass information about the last rotation initiation time and the current rotation phase to the &lt;code>SecretsManager&lt;/code> upon initialization.
The relevant information can be retrieved from the &lt;code>Cluster&lt;/code> resource under &lt;code>.spec.shoot.status.credentials.rotation.certificateAuthorities&lt;/code>.&lt;/li>
&lt;li>Independent of the specific identity, secrets marked with the &lt;code>Persist&lt;/code> option are automatically saved in the &lt;code>ShootState&lt;/code> resource by gardenlet and are also restored by gardenlet on Control Plane Migration to the new Seed.&lt;/li>
&lt;/ul>
&lt;h2 id="implementation-details">Implementation Details&lt;/h2>
&lt;p>The source of truth for the secrets manager is the list of &lt;code>Secret&lt;/code>s in the Kubernetes cluster it acts upon (typically, the seed cluster).
The persisted secrets in the &lt;code>ShootState&lt;/code> are only used if and only if the shoot is in the &lt;code>Restore&lt;/code> phase - in this case all secrets are just synced to the seed cluster so that they can be picked up by the secrets manager.&lt;/p>
&lt;p>In order to prevent kubelets from unneeded watches (thus, causing some significant traffic against the &lt;code>kube-apiserver&lt;/code>), the &lt;code>Secret&lt;/code>s are marked as immutable.
Consequently, they have a unique, deterministic name which is computed as follows:&lt;/p>
&lt;ul>
&lt;li>For CA secrets, the name is just exactly the name specified in the configuration (e.g., &lt;code>ca&lt;/code>). This is for backwards-compatibility and will be dropped in a future release once all components depending on the static name have been adapted.&lt;/li>
&lt;li>For all other secrets, the name specified in the configuration is used as prefix followed by an 8-digit hash. This hash is computed out of the checksum of the secret configuration and the checksum of the certificate of the signing CA (only for certificate configurations).&lt;/li>
&lt;/ul>
&lt;p>In all cases, the name of the secrets is suffixed with a 5-digit hash computed out of the time when the rotation for this secret was last started.&lt;/p></description></item><item><title>Docs: Seed Network Policies</title><link>https://gardener.cloud/docs/gardener/development/seed_network_policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/seed_network_policies/</guid><description>
&lt;h1 id="network-policies-in-the-seed-cluster">Network Policies in the Seed Cluster&lt;/h1>
&lt;p>This document describes the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/">Kubernetes network policies&lt;/a> deployed by Gardener into the Seed cluster.
For network policies deployed into the Shoot &lt;code>kube-system&lt;/code> namespace, please see the &lt;a href="https://gardener.cloud/docs/gardener/usage/shoot_network_policies/">usage section&lt;/a>.&lt;/p>
&lt;p>Network policies deployed by Gardener have names and annotations describing their purpose, so this document does only highlight a subset of the policies in detail.&lt;/p>
&lt;h2 id="network-policies-in-the-shoot-namespace-in-the-seed">Network policies in the Shoot namespace in the Seed&lt;/h2>
&lt;p>The network policies in the Shoot namespace in the Seed can roughly be grouped into policies required for the control plane components and for logging &amp;amp; monitoring.&lt;/p>
&lt;p>The network policy &lt;code>deny-all&lt;/code> plays a special role. This policy &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/#default-deny-all-ingress-and-all-egress-traffic">denies all ingress and egress traffic&lt;/a> from each pod in the Shoot namespace.
So per default, a pod running in the control plane cannot talk to any other pod in the whole Seed cluster.
This means the pod needs to have labels matching to appropriate network policies allowing it to talk to exactly the components required to execute its desired functionality.
&lt;a href="#implications-for-gardener-extensions">This has also implications for Gardener extensions&lt;/a> that need to deploy additional components into the &lt;code>Shoot's&lt;/code> control plane.&lt;/p>
&lt;h3 id="network-policies-for-control-plane-components">Network Policies for Control Plane Components&lt;/h3>
&lt;p>This section highlights a selection of network policies that exist in the Shoot namespace in the Seed cluster.
In general, the control plane components serve different purposes and thus need access to different pods and network ranges.&lt;/p>
&lt;p>In contrast to other network policies, the policy &lt;code>allow-to-shoot-networks&lt;/code> is tailored to the individual Shoot cluster,
because it is based on the network configuration in the Shoot manifest.
It allows pods with the label &lt;code>networking.gardener.cloud/to-shoot-networks=allowed&lt;/code> to access pods in the Shoot pod,
service and node CIDR range. This is used by the Shoot API Server and the prometheus pods to communicate over VPN/proxy with pods in the Shoot cluster.&lt;/p>
&lt;p>The policy &lt;code>allow-to-blocked-cidrs&lt;/code> allows pods with the label &lt;code>networking.gardener.cloud/to-blocked-cidrs=allowed&lt;/code> to access IPs that are explicitly blocked for all control planes in a Seed cluster (configurable via &lt;code>spec.networks.blockCIDRS&lt;/code>).
This is used for instance to block the cloud provider&amp;rsquo;s metadata service.&lt;/p>
&lt;p>Another network policy to be highlighted is &lt;code>allow-to-seed-apiserver&lt;/code>.
Some components need access to the Seed API Server. This can be allowed by labeling the pod with &lt;code>networking.gardener.cloud/to-seed-apiserver=allowed&lt;/code>.
This policy allows exactly the IPs of the &lt;code>kube-apiserver&lt;/code> of the Seed.
While all other policies have a static set of permissions (do not change during the lifecycle of the Shoot), the policy &lt;code>allow-to-seed-apiserver&lt;/code> is reconciled to reflect the endpoints in the &lt;code>default&lt;/code> namespace.
This is required because endpoint IPs are not necessarily stable (think of scaling the Seed API Server pods or hibernating the Seed cluster (acting as a managed seed) in a local development environment).&lt;/p>
&lt;p>Furthermore, the following network policies exist in the Shoot namespace.
These policies are the same for every Shoot control plane.&lt;/p>
&lt;pre>&lt;code>NAME POD-SELECTOR
# Pods that need to access the Shoot API server. Used by all Kubernetes control plane components.
allow-to-shoot-apiserver networking.gardener.cloud/to-shoot-apiserver=allowed
# allows access to kube-dns/core-dns pods for DNS queries
allow-to-dns networking.gardener.cloud/to-dns=allowed
# allows access to private IP address ranges
allow-to-private-networks networking.gardener.cloud/to-private-networks=allowed
# allows access to all but private IP address ranges
allow-to-public-networks networking.gardener.cloud/to-public-networks=allowed
# allows Ingress to etcd pods from the Shoot's Kubernetes API Server
allow-etcd app=etcd-statefulset,garden.sapcloud.io/role=controlplane
# used by the Shoot API server to allows ingress from pods labeled
# with'networking.gardener.cloud/to-shoot-apiserver=allowed', from Prometheus, and allows Egress to etcd pods
allow-kube-apiserver app=kubernetes,gardener.cloud/role=controlplane,role=apiserver
&lt;/code>&lt;/pre>&lt;h3 id="network-policies-for-logging--monitoring">Network policies for Logging &amp;amp; Monitoring&lt;/h3>
&lt;p>Gardener currently introduces a logging stack based on &lt;a href="https://github.com/grafana/loki">Loki&lt;/a>. So this section is subject to change.
Please checkout &lt;a href="https://www.youtube.com/watch?v=345b8xCcB-U&amp;amp;t=1166s">the Community Meeting for more information&lt;/a>.&lt;/p>
&lt;p>These are the logging and monitoring related network policies:&lt;/p>
&lt;pre>&lt;code>NAME POD-SELECTOR
allow-from-prometheus networking.gardener.cloud/from-prometheus=allowed
allow-grafana component=grafana,gardener.cloud/role=monitoring
allow-prometheus app=prometheus,gardener.cloud/role=monitoring,role=monitoring
allow-to-aggregate-prometheus networking.gardener.cloud/to-aggregate-prometheus=allowed
allow-to-loki networking.gardener.cloud/to-loki=allowed
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s take for instance a look at the network policy &lt;code>from-prometheus&lt;/code>.
As part of the shoot reconciliation flow, Gardener deploys a shoot-specific Prometheus into the shoot namespace.
Each pod that should be scraped for metrics must be labeled with &lt;code>networking.gardener.cloud/from-prometheus=allowed&lt;/code> to allow incoming network requests by the prometheus pod.
Most components of the Shoot cluster&amp;rsquo;s control plane expose metrics and are therefore labeled appropriately.&lt;/p>
&lt;h3 id="implications-for-gardener-extensions">Implications for Gardener Extensions&lt;/h3>
&lt;p>Gardener extensions sometimes need to deploy additional components into the Shoot namespace in the Seed hosting the control plane.
For example the Gardener extension &lt;a href="https://github.com/gardener/gardener-extension-provider-aws">provider-aws&lt;/a> deploys the &lt;code>MachineControllerManager&lt;/code> into the Shoot namespace, that is ultimately responsible to create the VMs with the cloud provider AWS.&lt;/p>
&lt;p>Every Shoot namespace in the Seed contains the network policy &lt;code>deny-all&lt;/code>.
This requires a pod deployed by a Gardener extension to have labels from network policies, that exist in the Shoot namespace, that allow the required network ranges.&lt;/p>
&lt;p>Additionally, extensions could also deploy their own network policies. This is used e.g by the Gardener extension &lt;a href="https://github.com/gardener/gardener-extension-provider-aws">provider-aws&lt;/a>
to serve &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/">Admission Webhooks&lt;/a> for the Shoot API server that need to be reachable from within the Shoot namespace.&lt;/p>
&lt;p>The pod can use an arbitrary combination of network policies.&lt;/p>
&lt;h2 id="network-policies-in-the-garden-namespace">Network policies in the &lt;code>garden&lt;/code> namespace&lt;/h2>
&lt;p>The network policies in the &lt;code>garden&lt;/code> namespace are, with a few exceptions (e.g Kubernetes control plane specific policies), the same as in the Shoot namespaces.
For your reference, these are all the deployed network policies.&lt;/p>
&lt;pre>&lt;code>NAME POD-SELECTOR
allow-fluentbit app=fluent-bit,gardener.cloud/role=logging,role=logging
allow-from-aggregate-prometheus networking.gardener.cloud/from-aggregate-prometheus=allowed
allow-to-aggregate-prometheus networking.gardener.cloud/to-aggregate-prometheus=allowed
allow-to-all-shoot-apiservers networking.gardener.cloud/to-all-shoot-apiservers=allowed
allow-to-blocked-cidrs networking.gardener.cloud/to-blocked-cidrs=allowed
allow-to-dns networking.gardener.cloud/to-dns=allowed
allow-to-loki networking.gardener.cloud/to-loki=allowed
allow-to-private-networks networking.gardener.cloud/to-private-networks=allowed
allow-to-public-networks networking.gardener.cloud/to-public-networks=allowed
allow-to-seed-apiserver networking.gardener.cloud/to-seed-apiserver=allowed
deny-all networking.gardener.cloud/to-all=disallowed
&lt;/code>&lt;/pre>&lt;p>This section describes the network policies that are unique to the &lt;code>garden&lt;/code> namespace.&lt;/p>
&lt;p>The network policy &lt;code>allow-to-all-shoot-apiservers&lt;/code> allows pods to access every &lt;code>Shoot&lt;/code> API server in the &lt;code>Seed&lt;/code>.
This is for instance used by the &lt;a href="https://github.com/gardener/dependency-watchdog">dependency watchdog&lt;/a> to regularly check
the health of all the Shoot API servers.&lt;/p>
&lt;p>&lt;a href="https://gardener.cloud/docs/gardener/extensions/logging-and-monitoring/#monitoring">Gardener deploys a central Prometheus instance&lt;/a> in the &lt;code>garden&lt;/code> namespace that fetches metrics and data from all seed cluster nodes and all seed cluster pods.
The network policies &lt;code>allow-to-aggregate-prometheus&lt;/code> and &lt;code>allow-from-aggregate-prometheus&lt;/code> allow traffic from and to this prometheus instance.&lt;/p>
&lt;p>Worth mentioning is, that the network policy &lt;code>allow-to-shoot-networks&lt;/code> does not exist in the &lt;code>garden&lt;/code> namespace. This is to forbid Gardener system components to talk to workload deployed in the Shoot VPC.&lt;/p></description></item><item><title>Docs: Testing</title><link>https://gardener.cloud/docs/gardener/development/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/testing/</guid><description>
&lt;h1 id="testing">Testing&lt;/h1>
&lt;h2 id="unit-tests">Unit Tests&lt;/h2>
&lt;p>We follow the BDD-style testing principles and are leveraging the &lt;a href="https://onsi.github.io/ginkgo/">Ginkgo&lt;/a> framework along with &lt;a href="http://onsi.github.io/gomega/">Gomega&lt;/a> as matcher library. In order to execute the existing tests, you can use&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make test &lt;span style="color:#008000"># runs tests&lt;/span>
make verify &lt;span style="color:#008000"># runs static code checks and tests (unit and integration)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is an additional command for analyzing the code coverage of the tests. Ginkgo will generate standard Go cover profiles which will be translated into an HTML file by the &lt;a href="https://blog.golang.org/cover">Go Cover Tool&lt;/a>. Another command helps you to clean up the filesystem from the temporary cover profile files and the HTML report:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make test-cov
open gardener.coverage.html
make test-cov-clean
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="integration-tests-envtests">Integration Tests (envtests)&lt;/h2>
&lt;p>Integration tests in Gardener use the &lt;code>sigs.k8s.io/controller-runtime/pkg/envtest&lt;/code> package.
It sets up a temporary control plane (etcd + kube-apiserver) and runs the test against it.
The &lt;code>test-integration&lt;/code> make rule prepares the environment automatically by downloading the respective binaries (if not yet present) and sets the necessary environment variables.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make test-integration
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to run a specific set of integration tests, you can also execute them using &lt;code>./hack/test-integration.sh&lt;/code> directly instead of using the &lt;code>test-integration&lt;/code> rule. For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./hack/test-integration.sh ./test/integration/resourcemanager/tokenrequestor
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The script takes care of preparing the environment for you.
If you want to execute the test suites directly via &lt;code>go test&lt;/code> or &lt;code>ginkgo&lt;/code>, you have to point the &lt;code>KUBEBUILDER_ASSETS&lt;/code> environment variable to the path that contains the etcd and kube-apiserver binaries. Alternatively, you can install the binaries to &lt;code>/usr/local/kubebuilder/bin&lt;/code>.&lt;/p>
&lt;h3 id="debugging-integration-tests">Debugging Integration Tests&lt;/h3>
&lt;p>You can configure envtest to use an existing cluster instead of starting a temporary control plane for your test.
This can be helpful for debugging integration tests, because you can easily inspect what is going on in your test cluster.
For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make kind-up
export KUBECONFIG=$PWD/example/gardener-local/kind/kubeconfig
export USE_EXISTING_CLUSTER=true
&lt;span style="color:#008000"># run test with verbose output&lt;/span>
./hack/test-integration.sh -v ./test/integration/resourcemanager/health -ginkgo.v
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="end-to-end-tests-using-provider-local">End-to-end Tests (using provider-local)&lt;/h2>
&lt;p>We run a suite of e2e tests on every pull request and periodically on the &lt;code>master&lt;/code> branch.
It uses a &lt;a href="https://kind.sigs.k8s.io/">KinD cluster&lt;/a> and &lt;a href="https://skaffold.dev/">skaffold&lt;/a> to boostrap a full installation of Gardener based on the current revision, including &lt;a href="https://gardener.cloud/docs/gardener/extensions/provider-local/">provider-local&lt;/a>.
This allows us to run e2e tests in an isolated test environment and fully locally without any infrastructure interaction.
The tests perform a set of operations on Shoot clusters, e.g. creating, deleting, hibernating and waking up.&lt;/p>
&lt;p>These tests are executed in our prow instance at &lt;a href="https://prow.gardener.cloud/">prow.gardener.cloud&lt;/a>, see &lt;a href="https://github.com/gardener/ci-infra/blob/e324cb79c39c013d7f253c33690b7fcc92c001d8/config/jobs/gardener/gardener-e2e-kind.yaml">job definition&lt;/a> and &lt;a href="https://prow.gardener.cloud/?repo=gardener%2Fgardener&amp;amp;job=*gardener-e2e-kind">job history&lt;/a>.&lt;/p>
&lt;p>You can also run these tests on your development machine, using the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make kind-up
export KUBECONFIG=$PWD/example/gardener-local/kind/kubeconfig
make gardener-up
make test-e2e-local &lt;span style="color:#008000"># alternatively: make test-e2e-local-fast&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to run a specific set of e2e test cases, you can also execute them using &lt;code>./hack/test-e2e-local.sh&lt;/code> directly in combination with &lt;a href="https://onsi.github.io/ginkgo/#spec-labels">ginkgo label filters&lt;/a>. For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./hack/test-e2e-local.sh --label-filter &lt;span style="color:#a31515">&amp;#34;Shoot &amp;amp;&amp;amp; ca-rotation&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Also see: &lt;a href="https://gardener.cloud/docs/gardener/development/getting_started_locally/">developing Gardener locally&lt;/a> and &lt;a href="https://gardener.cloud/docs/gardener/deployment/getting_started_locally/">deploying Gardener locally&lt;/a>.&lt;/p>
&lt;h2 id="test-machinery-tests">Test Machinery Tests&lt;/h2>
&lt;p>Please see &lt;a href="https://gardener.cloud/docs/gardener/development/testmachinery_tests/">Test Machinery Tests&lt;/a>.&lt;/p></description></item><item><title>Docs: Testmachinery Tests</title><link>https://gardener.cloud/docs/gardener/development/testmachinery_tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/development/testmachinery_tests/</guid><description>
&lt;h1 id="test-machinery-tests">Test Machinery Tests&lt;/h1>
&lt;p>In order to automatically qualify Gardener releases, we execute a set of end-to-end tests using &lt;a href="https://github.com/gardener/test-infra">Test Machinery&lt;/a>.
This requires a full Gardener installation including infrastructure extensions as well as a setup of Test Machinery itself.
These tests operate on Shoot clusters across different Cloud Providers, using different supported Kubernetes versions and various configuration options (huge test matrix).&lt;/p>
&lt;p>This manual gives an overview about test machinery tests in Gardener.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#structure">Structure&lt;/a>&lt;/li>
&lt;li>&lt;a href="#add-a-new-test">Add a new test&lt;/a>&lt;/li>
&lt;li>&lt;a href="#test-labels">Test Labels&lt;/a>&lt;/li>
&lt;li>&lt;a href="#framework">Framework&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="structure">Structure&lt;/h2>
&lt;p>Gardener test machinery tests are split into two test suites that can be found under &lt;a href="https://github.com/gardener/gardener/tree/master/test/testmachinery/suites">&lt;code>test/testmachinery/suites&lt;/code>&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>The &lt;strong>Gardener Test Suite&lt;/strong> contains all tests that only require a running gardener instance.&lt;/li>
&lt;li>The &lt;strong>Shoot Test Suite&lt;/strong> contains all tests that require a predefined running shoot cluster.&lt;/li>
&lt;/ul>
&lt;p>The corresponding tests of a test suite are defined in the import statement of the suite definition see &lt;a href="https://github.com/gardener/gardener/blob/master/test/testmachinery/suites/shoot/run_suite_test.go">&lt;code>shoot/run_suite_test.go&lt;/code>&lt;/a>
and their source code can be found under &lt;a href="https://github.com/gardener/gardener/tree/master/test/testmachinery">&lt;code>test/testmachinery&lt;/code>&lt;/a>&lt;/p>
&lt;p>The &lt;code>test&lt;/code> directory is structured as follows:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">test
├── e2e # end-to-end tests (using provider-local)
│ └── shoot
├── framework # helper code shared across integration, e2e and testmachinery tests
├── integration # integration tests (envtests)
│ ├── controllermanager
│ ├── envtest
│ ├── resourcemanager
│ ├── scheduler
│ ├── seedadmissioncontroller
│ ├── shootmaintenance
│ └── ...
└── testmachinery # test machinery tests
├── gardener # actual test cases imported by suites/gardener
│ └── security
├── plants
├── shoots # actual test cases imported by suites/shoot
│ ├── applications
│ ├── care
│ ├── logging
│ ├── operatingsystem
│ ├── operations
│ └── vpntunnel
├── suites # suites that run agains a running garden or shoot cluster
│ ├── gardener
│ └── shoot
└── system # suites that are used for building a full test flow
├── complete_reconcile
├── managed_seed_creation
├── managed_seed_deletion
├── shoot_cp_migration
├── shoot_creation
├── shoot_deletion
├── shoot_hibernation
├── shoot_hibernation_wakeup
└── shoot_update
&lt;/code>&lt;/pre>&lt;p>A suite can be executed by running the suite definition with ginkgo&amp;rsquo;s &lt;code>focus&lt;/code> and &lt;code>skip&lt;/code> flags
to control the execution of specific labeled test. See example below:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">go test -timeout=0 -mod=vendor ./test/testmachinery/suites/shoot \
--v -ginkgo.v -ginkgo.progress -ginkgo.no-color \
--report-file=/tmp/report.json \ # write elasticsearch formatted output to a file
--disable-dump=false \ # disables dumping of teh current state if a test fails
-kubecfg=/path/to/gardener/kubeconfig \
-shoot-name=&amp;lt;shoot-name&amp;gt; \ # Name of the shoot to test
-project-namespace=&amp;lt;gardener project namespace&amp;gt; \ # Name of the gardener project the test shoot resides
-ginkgo.focus=&amp;quot;\[RELEASE\]&amp;quot; \ # Run all tests that are tagged as release
-ginkgo.skip=&amp;quot;\[SERIAL\]|\[DISRUPTIVE\]&amp;quot; # Exclude all tests that are tagged SERIAL or DISRUPTIVE
&lt;/code>&lt;/pre>&lt;h2 id="add-a-new-test">Add a new test&lt;/h2>
&lt;p>To add a new test the framework requires the following steps (step 1. and 2. can be skipped if the test is added to an existing package):&lt;/p>
&lt;ol>
&lt;li>Create a new test file e.g. &lt;code>test/testmachinery/shoot/security/my-sec-test.go&lt;/code>&lt;/li>
&lt;li>Import the test into the appropriate test suite (gardener or shoot): &lt;code>import _ &amp;quot;github.com/gardener/gardener/test/testmachinery/shoot/security&amp;quot;&lt;/code>&lt;/li>
&lt;li>Define your test with the testframework. The framework will automatically add its initialization, cleanup and dump functions.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#00f">var&lt;/span> _ = ginkgo.Describe(&lt;span style="color:#a31515">&amp;#34;my suite&amp;#34;&lt;/span>, &lt;span style="color:#00f">func&lt;/span>(){
f := framework.NewShootFramework(&lt;span style="color:#00f">nil&lt;/span>)
f.Beta().CIt(&lt;span style="color:#a31515">&amp;#34;my first test&amp;#34;&lt;/span>, &lt;span style="color:#00f">func&lt;/span>(ctx context.Context) {
f.ShootClient.Get(xx)
&lt;span style="color:#008000">// testing ...
&lt;/span>&lt;span style="color:#008000">&lt;/span> })
})
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The newly created test can be tested by focusing the test with the default ginkgo focus &lt;code>f.Beta().FCIt(&amp;quot;my first test&amp;quot;, func(ctx context.Context)&lt;/code>
and run the shoot test suite with:&lt;/p>
&lt;pre>&lt;code>go test -timeout=0 -mod=vendor ./test/testmachinery/suites/shoot \
--v -ginkgo.v -ginkgo.progress -ginkgo.no-color \
--report-file=/tmp/report.json \ # write elasticsearch formatted output to a file
--disable-dump=false \ # disables dumping of the current state if a test fails
-kubecfg=/path/to/gardener/kubeconfig \
-shoot-name=&amp;lt;shoot-name&amp;gt; \ # Name of the shoot to test
-project-namespace=&amp;lt;gardener project namespace&amp;gt; \
-fenced=&amp;lt;true|false&amp;gt; # Tested shoot is running in a fenced environment and cannot be reached by gardener
&lt;/code>&lt;/pre>&lt;p>or for the gardener suite with:&lt;/p>
&lt;pre>&lt;code>go test -timeout=0 -mod=vendor ./test/testmachinery/suites/gardener \
--v -ginkgo.v -ginkgo.progress -ginkgo.no-color \
--report-file=/tmp/report.json \ # write elasticsearch formatted output to a file
--disable-dump=false \ # disables dumping of the current state if a test fails
-kubecfg=/path/to/gardener/kubeconfig \
-project-namespace=&amp;lt;gardener project namespace&amp;gt;
&lt;/code>&lt;/pre>&lt;p>⚠️ Make sure that you do not commit any focused specs as this feature is only intended for local development! Ginkgo will fail the test suite if there are any focused specs.&lt;/p>
&lt;p>Alternatively, a test can be triggered by specifying a ginkgo focus regex with the name of the test e.g.&lt;/p>
&lt;pre>&lt;code>go test -timeout=0 -mod=vendor ./test/testmachinery/suites/gardener \
--v -ginkgo.v -ginkgo.progress -ginkgo.no-color \
--report-file=/tmp/report.json \ # write elasticsearch formatted output to a file
-kubecfg=/path/to/gardener/kubeconfig \
-project-namespace=&amp;lt;gardener project namespace&amp;gt; \
-ginkgo.focus=&amp;quot;my first test&amp;quot; # regex to match test cases
&lt;/code>&lt;/pre>&lt;h2 id="test-labels">Test Labels&lt;/h2>
&lt;p>Every test should be labeled by using the predefined labels available with every framework to have consistent labeling across
all test machinery tests.&lt;/p>
&lt;p>The labels are applied to every new &lt;code>It()/CIt()&lt;/code> definition by:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">f := framework.NewCommonFramework()
f.Default().Serial().It(&lt;span style="color:#a31515">&amp;#34;my test&amp;#34;&lt;/span>) =&amp;gt; &lt;span style="color:#a31515">&amp;#34;[DEFAULT] [SERIAL] my test&amp;#34;&lt;/span>
f := framework.NewShootFramework()
f.Default().Serial().It(&lt;span style="color:#a31515">&amp;#34;my test&amp;#34;&lt;/span>) =&amp;gt; &lt;span style="color:#a31515">&amp;#34;[DEFAULT] [SERIAL] [SHOOT] my test&amp;#34;&lt;/span>
f := framework.NewGardenerFramework()
f.Default().Serial().It(&lt;span style="color:#a31515">&amp;#34;my test&amp;#34;&lt;/span>) =&amp;gt; &lt;span style="color:#a31515">&amp;#34;[DEFAULT] [GARDENER] [SERIAL] my test&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Labels:&lt;/p>
&lt;ul>
&lt;li>&lt;em>Beta&lt;/em>: Newly created tests with no experience on stableness should be first labeled as beta tests.
They should be watched (and probably improved) until stable enough to be promoted to &lt;em>Default&lt;/em>.&lt;/li>
&lt;li>&lt;em>Default&lt;/em>: Tests that were &lt;em>Beta&lt;/em> before and proved to be stable are promoted to &lt;em>Default&lt;/em> eventually.
&lt;em>Default&lt;/em> tests run more often, produce alerts and are &lt;em>considered&lt;/em> during the release decision although they don&amp;rsquo;t necessarily block a release.&lt;/li>
&lt;li>&lt;em>Release&lt;/em>: Test are release relevant. A failing &lt;em>Release&lt;/em> test blocks the release pipeline.
Therefore these tests need to be stable. Only tests proven to be stable will eventually be promoted to &lt;em>Release&lt;/em>.&lt;/li>
&lt;/ul>
&lt;p>Behavior Labels:&lt;/p>
&lt;ul>
&lt;li>&lt;em>Serial&lt;/em>: The test should always be executed in serial with no other tests running as it may impact other tests.&lt;/li>
&lt;li>&lt;em>Destructive&lt;/em>: The test is destructive. Which means that is runs with no other tests and may break gardener or the shoot.
Only create such tests if really necessary as the execution will be expensive (neither gardener nor the shoot can be reused in this case for other tests).&lt;/li>
&lt;/ul>
&lt;h2 id="framework">Framework&lt;/h2>
&lt;p>The framework directory contains all the necessary functions / utilities for running test machinery tests.
For example, there are methods for creation/deletion of shoots, waiting for shoot deletion/creation, downloading/installing/deploying helm charts, logging, etc.&lt;/p>
&lt;p>The framework itself consists of 3 different framework that expect different prerequisites and offer context specific functionality.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CommonFramework&lt;/strong>: The common framework is the base framework that handles logging and setup of commonly needed resources like helm.
It also contains common functions for interacting with kubernetes clusters like &lt;code>Waiting for resources to be ready&lt;/code> or &lt;code>Exec into a running pod&lt;/code>.&lt;/li>
&lt;li>&lt;strong>GardenerFramework&lt;/strong> contains all functions of the common framework and expects a running gardener instance with the provided gardener kubeconfig and a project namespace.
It also contains functions to interact with gardener like &lt;code>Waiting for a shoot to be reconciled&lt;/code> or &lt;code>Patch a shoot&lt;/code> or &lt;code>Get a seed&lt;/code>.&lt;/li>
&lt;li>&lt;strong>ShootFramework&lt;/strong>: contains all functions of the common and the gardener framework.
It expects a running shoot cluster defined by the shoot&amp;rsquo;s name and namespace(project namespace).
This framework contains functions to directly interact with the specific shoot.&lt;/li>
&lt;/ul>
&lt;p>The whole framework also includes commonly used checks, ginkgo wrapper, etc. as well as commonly used tests.
Theses common application tests (like the guestbook test) can be used within multiple tests to have a default application (with ingress, deployment, stateful backend) to test external factors.&lt;/p>
&lt;p>&lt;strong>Config&lt;/strong>&lt;/p>
&lt;p>Every framework commandline flag can also be defined by a configuration file (the value of the configuration file is only used if flag is not specified by commandline).
The test suite searches for a configuration file (yaml is preferred) if the command line flag &lt;code>--config=/path/to/config/file&lt;/code> is provided.
A framework can be defined in the configuration file by just using the flag name as root key e.g.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">verbose: debug
kubecfg: /kubeconfig/path
project-namespace: garden-it
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Report&lt;/strong>&lt;/p>
&lt;p>The framework automatically writes the default ginkgo default report to stdout and a specifically structured elastichsearch bulk report file to a specified location.
The elastichsearch bulk report will write one json document per testcase and injects metadata of the whole testsuite.
An example document for one test case would look like the following document:&lt;/p>
&lt;pre>&lt;code>{
&amp;quot;suite&amp;quot;: {
&amp;quot;name&amp;quot;: &amp;quot;Shoot Test Suite&amp;quot;,
&amp;quot;phase&amp;quot;: &amp;quot;Succeeded&amp;quot;,
&amp;quot;tests&amp;quot;: 3,
&amp;quot;failures&amp;quot;: 1,
&amp;quot;errors&amp;quot;: 0,
&amp;quot;time&amp;quot;: 87.427
},
&amp;quot;name&amp;quot;: &amp;quot;Shoot application testing [DEFAULT] [RELEASE] [SHOOT] should download shoot kubeconfig successfully&amp;quot;,
&amp;quot;shortName&amp;quot;: &amp;quot;should download shoot kubeconfig successfully&amp;quot;,
&amp;quot;labels&amp;quot;: [
&amp;quot;DEFAULT&amp;quot;,
&amp;quot;RELEASE&amp;quot;,
&amp;quot;SHOOT&amp;quot;
],
&amp;quot;phase&amp;quot;: &amp;quot;Succeeded&amp;quot;,
&amp;quot;time&amp;quot;: 0.724512057
}
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Resources&lt;/strong>&lt;/p>
&lt;p>The resources directory contains all the templates, helm config files (e.g., repositories.yaml, charts, and cache index which are downloaded upon the start of the test), shoot configs, etc.&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">resources
├── charts
├── repository
│   └── repositories.yaml
└── templates
├── guestbook-app.yaml.tpl
└── logger-app.yaml.tpl
&lt;/code>&lt;/pre>&lt;p>There are two special directories that are dynamically filled with the correct test files:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>charts:&lt;/strong> the charts will be downloaded and saved in this directory&lt;/li>
&lt;li>&lt;strong>repository&lt;/strong> contains the repository.yaml file that the target helm repos will be read from and the cache where the &lt;code>stable-index.yaml&lt;/code> file will be created&lt;/li>
&lt;/ul>
&lt;h3 id="system-tests">System Tests&lt;/h3>
&lt;p>This directory contains the system tests that have a special meaning for the testmachinery with their own Test Definition.
Currently these system tests consists of:&lt;/p>
&lt;ul>
&lt;li>Shoot creation&lt;/li>
&lt;li>Shoot deletion&lt;/li>
&lt;li>Shoot Kubernetes update&lt;/li>
&lt;li>Gardener Full reconcile check&lt;/li>
&lt;/ul>
&lt;h4 id="shoot-creation-test">Shoot Creation test&lt;/h4>
&lt;p>Create Shoot test is meant to test shoot creation.&lt;/p>
&lt;p>&lt;strong>Example Run&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">go test -mod=vendor -timeout=0 ./test/testmachinery/system/shoot_creation \
--v -ginkgo.v -ginkgo.progress \
-kubecfg=$HOME/.kube/config \
-shoot-name=$SHOOT_NAME \
-cloud-profile=$CLOUDPROFILE \
-seed=$SEED \
-secret-binding=$SECRET_BINDING \
-provider-type=$PROVIDER_TYPE \
-region=$REGION \
-k8s-version=$K8S_VERSION \
-project-namespace=$PROJECT_NAMESPACE \
-annotations=$SHOOT_ANNOTATIONS \
-infrastructure-provider-config-filepath=$INFRASTRUCTURE_PROVIDER_CONFIG_FILEPATH \
-controlplane-provider-config-filepath=$CONTROLPLANE_PROVIDER_CONFIG_FILEPATH \
-workers-config-filepath=$$WORKERS_CONFIG_FILEPATH \
-worker-zone=$ZONE \
-networking-pods=$NETWORKING_PODS \
-networking-services=$NETWORKING_SERVICES \
-networking-nodes=$NETWORKING_NODES \
-start-hibernated=$START_HIBERNATED
&lt;/code>&lt;/pre>&lt;h4 id="shoot-deletion-test">Shoot Deletion test&lt;/h4>
&lt;p>Delete Shoot test is meant to test the deletion of a shoot.&lt;/p>
&lt;p>&lt;strong>Example Run&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">go test -mod=vendor -timeout=0 -ginkgo.v -ginkgo.progress \
./test/testmachinery/system/shoot_deletion \
-kubecfg=$HOME/.kube/config \
-shoot-name=$SHOOT_NAME \
-project-namespace=$PROJECT_NAMESPACE
&lt;/code>&lt;/pre>&lt;h4 id="shoot-update-test">Shoot Update test&lt;/h4>
&lt;p>The Update Shoot test is meant to test the kubernetes version update of a existing shoot.
If no specific version is provided the next patch version is automatically selected.
If there is no available newer version this test is a noop.&lt;/p>
&lt;p>&lt;strong>Example Run&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">go test -mod=vendor -timeout=0 ./test/testmachinery/system/shoot_update \
--v -ginkgo.v -ginkgo.progress \
-kubecfg=$HOME/.kube/config \
-shoot-name=$SHOOT_NAME \
-project-namespace=$PROJECT_NAMESPACE \
-version=$K8S_VERSION
&lt;/code>&lt;/pre>&lt;h4 id="gardener-full-reconcile-test">Gardener Full Reconcile test&lt;/h4>
&lt;p>The Gardener Full Reconcile test is meant to test if all shoots of a gardener instance are successfully reconciled.&lt;/p>
&lt;p>&lt;strong>Example Run&lt;/strong>&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">go test -mod=vendor -timeout=0 ./test/testmachinery/system/complete_reconcile \
--v -ginkgo.v -ginkgo.progress \
-kubecfg=$HOME/.kube/config \
-project-namespace=$PROJECT_NAMESPACE \
-gardenerVersion=$GARDENER_VERSION # needed to validate the last acted gardener version of a shoot
&lt;/code>&lt;/pre></description></item></channel></rss>