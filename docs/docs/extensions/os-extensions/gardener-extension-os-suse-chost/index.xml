<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener â€“ SUSE CHost OS</title><link>https://gardener.cloud/docs/extensions/os-extensions/gardener-extension-os-suse-chost/</link><description>Recent content in SUSE CHost OS on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/extensions/os-extensions/gardener-extension-os-suse-chost/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Usage As End User</title><link>https://gardener.cloud/docs/extensions/os-extensions/gardener-extension-os-suse-chost/docs/usage-as-end-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/os-extensions/gardener-extension-os-suse-chost/docs/usage-as-end-user/</guid><description>
&lt;h1 id="using-the-suse-chost-extension-with-gardener-as-end-user">Using the SuSE CHost extension with Gardener as end-user&lt;/h1>
&lt;p>The &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-shoot.yaml">&lt;code>core.gardener.cloud/v1beta1.Shoot&lt;/code> resource&lt;/a> declares a few fields that must be considered when this OS extension is used.&lt;/p>
&lt;p>In this document we describe how this configuration looks like and under which circumstances your attention may be required.&lt;/p>
&lt;h2 id="aws-vpc-settings-for-suse-chost-workers">AWS VPC settings for SuSE CHost workers&lt;/h2>
&lt;p>Gardener allows you to create SuSE CHost based worker nodes by:&lt;/p>
&lt;ol>
&lt;li>Using a Gardener managed VPC&lt;/li>
&lt;li>Reusing a VPC that already exists (VPC &lt;code>id&lt;/code> specified in &lt;a href="https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-aws/docs/usage-as-end-user/#infrastructureconfig">InfrastructureConfig&lt;/a>]&lt;/li>
&lt;/ol>
&lt;p>If the second option applies to your use-case please make sure that your VPC has enabled &lt;strong>DNS Support&lt;/strong>. Otherwise SuSE CHost based nodes aren&amp;rsquo;t able to join or operate in your cluster properly.&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html">DNS&lt;/a>&lt;/strong> settings (required):&lt;/p>
&lt;ul>
&lt;li>&lt;code>enableDnsHostnames&lt;/code>: true&lt;/li>
&lt;li>&lt;code>enableDnsSupport&lt;/code>: true&lt;/li>
&lt;/ul>
&lt;h2 id="support-for-vsmp-memoryone">Support for vSMP MemoryOne&lt;/h2>
&lt;p>This extension controller is also capable of generating user-data for the &lt;a href="https://www.scalemp.com/products/vsmp-memoryone/">vSMP MemoryOne&lt;/a> operating system in conjunction with SuSE CHost.
It reacts on the &lt;code>memoryone-chost&lt;/code> extension type.
Additionally, it allows certain customizations with the following configuration:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: memoryone-chost.os.extensions.gardener.cloud/v1alpha1
kind: OperatingSystemConfiguration
memoryTopology: &lt;span style="color:#a31515">&amp;#34;3&amp;#34;&lt;/span>
systemMemory: &lt;span style="color:#a31515">&amp;#34;7x&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>The &lt;code>memoryTopology&lt;/code> field controls the &lt;code>mem_topology&lt;/code> setting. If it&amp;rsquo;s not provided then it will default to &lt;code>2&lt;/code>.&lt;/li>
&lt;li>The &lt;code>systemMemory&lt;/code> field controls the &lt;code>system_memory&lt;/code> setting. If it&amp;rsquo;s not provided then it defaults to &lt;code>6x&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Please note that it was only e2e-tested on AWS.
Additionally, you need a snapshot ID of a SuSE CHost/CHost volume (see below how to create it).&lt;/p>
&lt;p>An exemplary worker pool configuration inside a &lt;code>Shoot&lt;/code> resource using for the vSMP MemoryOne operating system would look as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: Shoot
metadata:
name: vsmp-memoryone
namespace: garden-foo
spec:
...
workers:
- name: cpu-worker3
minimum: 1
maximum: 1
maxSurge: 1
maxUnavailable: 0
machine:
image:
name: memoryone-chost
version: 9.5.195
providerConfig:
apiVersion: memoryone-chost.os.extensions.gardener.cloud/v1alpha1
kind: OperatingSystemConfiguration
memoryTopology: &lt;span style="color:#a31515">&amp;#34;2&amp;#34;&lt;/span>
systemMemory: &lt;span style="color:#a31515">&amp;#34;6x&amp;#34;&lt;/span>
type: c5d.metal
volume:
size: 20Gi
type: gp2
dataVolumes:
- name: chost
size: 50Gi
type: gp2
providerConfig:
apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1
kind: WorkerConfig
dataVolumes:
- name: chost
snapshotID: snap-123456
zones:
- eu-central-1b
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please note that vSMP MemoryOne only works for EC2 bare-metal instance types such as &lt;code>M5d&lt;/code>, &lt;code>R5&lt;/code>, &lt;code>C5&lt;/code>, &lt;code>C5d&lt;/code>, etc. - please consult &lt;a href="https://aws.amazon.com/ec2/instance-types/">the EC2 instance types overview page&lt;/a> and the documentation of vSMP MemoryOne to find out whether the instance type in question is eligible.&lt;/p>
&lt;h3 id="generating-an-aws-snapshot-id-for-the-chostchost-operating-system">Generating an AWS snapshot ID for the CHost/CHost operating system&lt;/h3>
&lt;p>The following script will help to generate the snapshot ID on AWS.
It runs in the region that is selected in your &lt;code>$HOME/.aws/config&lt;/code> file.
Consequently, if you want to generate the snapshot in multiple regions, you have to run in multiple times after configuring the respective region using &lt;code>aws configure&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ami=&lt;span style="color:#a31515">&amp;#34;ami-1234&amp;#34;&lt;/span> &lt;span style="color:#008000">#Replace the ami with the intended one. &lt;/span>
name=&lt;span style="color:#a31515">`&lt;/span>aws ec2 describe-images --image-ids $ami --query=&lt;span style="color:#a31515">&amp;#34;Images[].Name&amp;#34;&lt;/span> --output=text&lt;span style="color:#a31515">`&lt;/span>
cur=&lt;span style="color:#a31515">`&lt;/span>aws ec2 describe-snapshots --filter=&lt;span style="color:#a31515">&amp;#34;Name=description,Values=snap-&lt;/span>$name&lt;span style="color:#a31515">&amp;#34;&lt;/span> --query=&lt;span style="color:#a31515">&amp;#34;Snapshots[].Description&amp;#34;&lt;/span> --output=text&lt;span style="color:#a31515">`&lt;/span>
&lt;span style="color:#00f">if&lt;/span> [ -n &lt;span style="color:#a31515">&amp;#34;&lt;/span>$cur&lt;span style="color:#a31515">&amp;#34;&lt;/span> ]; &lt;span style="color:#00f">then&lt;/span>
echo &lt;span style="color:#a31515">&amp;#34;AMI &lt;/span>$name&lt;span style="color:#a31515"> exists as snapshot &lt;/span>$cur&lt;span style="color:#a31515">&amp;#34;&lt;/span>
&lt;span style="color:#00f">continue&lt;/span>
&lt;span style="color:#00f">fi&lt;/span>
echo &lt;span style="color:#a31515">&amp;#34;AMI &lt;/span>$name&lt;span style="color:#a31515"> ... creating private snapshot&amp;#34;&lt;/span>
inst=&lt;span style="color:#a31515">`&lt;/span>aws ec2 run-instances --instance-type t3.nano --image-id $ami --query &lt;span style="color:#a31515">&amp;#39;Instances[0].InstanceId&amp;#39;&lt;/span> --output=text --subnet-id subnet-1234 --tag-specifications &lt;span style="color:#a31515">&amp;#39;ResourceType=instance,Tags=[{Key=scalemp-test,Value=scalemp-test}]&amp;#39;&lt;/span>&lt;span style="color:#a31515">`&lt;/span> &lt;span style="color:#008000">#Replace the subnet-id with the intended one.&lt;/span>
aws ec2 wait instance-running --instance-ids $inst
vol=&lt;span style="color:#a31515">`&lt;/span>aws ec2 describe-instances --instance-ids $inst --query &lt;span style="color:#a31515">&amp;#34;Reservations[].Instances[].BlockDeviceMappings[0].Ebs.VolumeId&amp;#34;&lt;/span> --output=text&lt;span style="color:#a31515">`&lt;/span>
snap=&lt;span style="color:#a31515">`&lt;/span>aws ec2 create-snapshot --description &lt;span style="color:#a31515">&amp;#34;snap-&lt;/span>$name&lt;span style="color:#a31515">&amp;#34;&lt;/span> --volume-id $vol --query=&lt;span style="color:#a31515">&amp;#39;SnapshotId&amp;#39;&lt;/span> --tag-specifications &lt;span style="color:#a31515">&amp;#34;ResourceType=snapshot,Tags=[{Key=Name,Value=\&amp;#34;&lt;/span>$name&lt;span style="color:#a31515">\&amp;#34;}]&amp;#34;&lt;/span> --output=text&lt;span style="color:#a31515">`&lt;/span>
aws ec2 wait snapshot-completed --snapshot-ids $snap
aws ec2 terminate-instances --instance-id $inst &amp;gt; /dev/null
echo $snap
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>