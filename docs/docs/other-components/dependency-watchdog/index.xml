<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dependency Watchdog on Gardener</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/</link><description>Recent content in Dependency Watchdog on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/other-components/dependency-watchdog/index.xml" rel="self" type="application/rss+xml"/><item><title>Configure</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/deployment/configure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/dependency-watchdog/deployment/configure/</guid><description>&lt;h1 id="configure-dependency-watchdog-components">Configure Dependency Watchdog Components&lt;a class="td-heading-self-link" href="#configure-dependency-watchdog-components" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;h2 id="prober">Prober&lt;a class="td-heading-self-link" href="#prober" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>Dependency watchdog prober command takes command-line-flags which are meant to fine-tune the prober. In addition a &lt;code>ConfigMap&lt;/code> is also mounted to the container which provides tuning knobs for the all probes that the prober starts.&lt;/p>
&lt;h3 id="command-line-arguments">Command line arguments&lt;a class="td-heading-self-link" href="#command-line-arguments" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;p>Prober can be configured via the following flags:&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Flag Name&lt;/th>
 &lt;th>Type&lt;/th>
 &lt;th>Required&lt;/th>
 &lt;th>Default Value&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>kube-api-burst&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>10&lt;/td>
 &lt;td>Burst to use while talking with kubernetes API server. The number must be &amp;gt;= 0. If it is 0 then a default value of 10 will be used&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>kube-api-qps&lt;/td>
 &lt;td>float&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>5.0&lt;/td>
 &lt;td>Maximum QPS (queries per second) allowed when talking with kubernetes API server. The number must be &amp;gt;= 0. If it is 0 then a default value of 5.0 will be used&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>concurrent-reconciles&lt;/td>
 &lt;td>int&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>1&lt;/td>
 &lt;td>Maximum number of concurrent reconciles&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>config-file&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>Yes&lt;/td>
 &lt;td>NA&lt;/td>
 &lt;td>Path of the config file containing the configuration to be used for all probes&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>metrics-bind-addr&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>&amp;ldquo;:9643&amp;rdquo;&lt;/td>
 &lt;td>The TCP address that the controller should bind to for serving prometheus metrics&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>health-bind-addr&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>&amp;ldquo;:9644&amp;rdquo;&lt;/td>
 &lt;td>The TCP address that the controller should bind to for serving health probes&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>enable-leader-election&lt;/td>
 &lt;td>bool&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>false&lt;/td>
 &lt;td>In case prober deployment has more than 1 replica for high availability, then it will be setup in a active-passive mode. Out of many replicas one will become the leader and the rest will be passive followers waiting to acquire leadership in case the leader dies.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>leader-election-namespace&lt;/td>
 &lt;td>string&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>&amp;ldquo;garden&amp;rdquo;&lt;/td>
 &lt;td>Namespace in which leader election resource will be created. It should be the same namespace where DWD pods are deployed&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>leader-elect-lease-duration&lt;/td>
 &lt;td>time.Duration&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>15s&lt;/td>
 &lt;td>The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate. This is only applicable if leader election is enabled.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>leader-elect-renew-deadline&lt;/td>
 &lt;td>time.Duration&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>10s&lt;/td>
 &lt;td>The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration. This is only applicable if leader election is enabled.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>leader-elect-retry-period&lt;/td>
 &lt;td>time.Duration&lt;/td>
 &lt;td>No&lt;/td>
 &lt;td>2s&lt;/td>
 &lt;td>The duration the clients should wait between attempting acquisition and renewal of a leadership. This is only applicable if leader election is enabled.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>You can view an example kubernetes prober &lt;a href="https://github.com/gardener/dependency-watchdog/blob/master/example/03-dwd-prober-deployment.yaml">deployment&lt;/a> YAML to see how these command line args are configured.&lt;/p></description></item><item><title>Contribution</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/contribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/dependency-watchdog/contribution/</guid><description>&lt;h1 id="how-to-contribute">How to contribute?&lt;a class="td-heading-self-link" href="#how-to-contribute" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;p>Contributions are always welcome!&lt;/p>
&lt;p>In order to contribute ensure that you have the development environment setup and you familiarize yourself with required steps to build, verify-quality and test.&lt;/p>
&lt;h2 id="setting-up-development-environment">Setting up development environment&lt;a class="td-heading-self-link" href="#setting-up-development-environment" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;h3 id="installing-go">Installing Go&lt;a class="td-heading-self-link" href="#installing-go" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;p>Minimum Golang version required: &lt;code>1.18&lt;/code>.
On MacOS run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For other OS, follow the &lt;a href="https://go.dev/doc/install">installation instructions&lt;/a>.&lt;/p>
&lt;h3 id="installing-git">Installing Git&lt;a class="td-heading-self-link" href="#installing-git" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;p>Git is used as version control for dependency-watchdog. On MacOS run:&lt;/p></description></item><item><title>Dwd Using Local Garden</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/setup/dwd-using-local-garden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/dependency-watchdog/setup/dwd-using-local-garden/</guid><description>&lt;h1 id="dependency-watchdog-with-local-garden-cluster">Dependency Watchdog with Local Garden Cluster&lt;a class="td-heading-self-link" href="#dependency-watchdog-with-local-garden-cluster" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;h2 id="setting-up-local-garden-cluster">Setting up Local Garden cluster&lt;a class="td-heading-self-link" href="#setting-up-local-garden-cluster" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>A convenient way to test local dependency-watchdog changes is to use a local garden cluster.
To setup a local garden cluster you can follow the &lt;a href="https://gardener.cloud/docs/gardener/deployment/getting_started_locally/">setup-guide&lt;/a>.&lt;/p>
&lt;h2 id="dependency-watchdog-resources">Dependency Watchdog resources&lt;a class="td-heading-self-link" href="#dependency-watchdog-resources" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>As part of the local garden installation, a &lt;code>local&lt;/code> seed will be available.&lt;/p>
&lt;h3 id="dependency-watchdog-resources-created-in-the-seed">Dependency Watchdog resources created in the seed&lt;a class="td-heading-self-link" href="#dependency-watchdog-resources-created-in-the-seed" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;h4 id="namespaced-resources">Namespaced resources&lt;a class="td-heading-self-link" href="#namespaced-resources" aria-label="Heading self-link">&lt;/a>&lt;/h4>&lt;p>In the &lt;code>garden&lt;/code> namespace of the seed cluster, following resources will be created:&lt;/p></description></item><item><title>Monitor</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/deployment/monitor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/dependency-watchdog/deployment/monitor/</guid><description>&lt;h1 id="monitoring">Monitoring&lt;a class="td-heading-self-link" href="#monitoring" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;h2 id="work-in-progress">&lt;em>Work In Progress&lt;/em>&lt;a class="td-heading-self-link" href="#work-in-progress" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>We will be introducing metrics for &lt;code>Dependency-Watchdog-Prober&lt;/code> and &lt;code>Dependency-Watchdog-Weeder&lt;/code>. These metrics will be pushed to prometheus. Once that is completed we will provide details on all the metrics that will be supported here.&lt;/p></description></item><item><title>Prober</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/concepts/prober/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/dependency-watchdog/concepts/prober/</guid><description>&lt;h1 id="prober">Prober&lt;a class="td-heading-self-link" href="#prober" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>Prober starts asynchronous and periodic probes for every shoot cluster. The first probe is the api-server probe which checks the reachability of the API Server from the control plane. The second probe is the lease probe which is done after the api server probe is successful and checks if the number of expired node leases is below a certain threshold.
If the lease probe fails, it will scale down the dependent kubernetes resources. Once the connectivity to &lt;code>kube-apiserver&lt;/code> is reestablished and the number of expired node leases are within the accepted threshold, the prober will then proactively scale up the dependent kubernetes resources it had scaled down earlier. The failure threshold fraction for lease probe
and dependent kubernetes resources are defined in &lt;a href="https://github.com/gardener/dependency-watchdog/blob/master/example/01-dwd-prober-configmap.yaml">configuration&lt;/a> that is passed to the prober.&lt;/p></description></item><item><title>Testing</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/dependency-watchdog/testing/</guid><description>&lt;h1 id="testing-strategy-and-developer-guideline">Testing Strategy and Developer Guideline&lt;a class="td-heading-self-link" href="#testing-strategy-and-developer-guideline" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;p>Intent of this document is to introduce you (the developer) to the following:&lt;/p>
&lt;ul>
&lt;li>Category of tests that exists.&lt;/li>
&lt;li>Libraries that are used to write tests.&lt;/li>
&lt;li>Best practices to write tests that are correct, stable, fast and maintainable.&lt;/li>
&lt;li>How to run each category of tests.&lt;/li>
&lt;/ul>
&lt;p>For any new contributions &lt;strong>tests are a strict requirement&lt;/strong>. &lt;code>Boy Scouts Rule&lt;/code> is followed: If you touch a code for which either no tests exist or coverage is insufficient then it is expected that you will add relevant tests.&lt;/p></description></item><item><title>Weeder</title><link>https://gardener.cloud/docs/other-components/dependency-watchdog/concepts/weeder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/dependency-watchdog/concepts/weeder/</guid><description>&lt;h1 id="weeder">Weeder&lt;a class="td-heading-self-link" href="#weeder" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;h2 id="overview">Overview&lt;a class="td-heading-self-link" href="#overview" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>Weeder watches for an update to service endpoints and on receiving such an event it will create a time-bound watch for all configured dependent pods that need to be actively recovered in case they have not yet recovered from &lt;code>CrashLoopBackoff&lt;/code> state. In a nutshell it accelerates recovery of pods when an upstream service recovers.&lt;/p>
&lt;p>An interference in automatic recovery for dependent pods is required because kubernetes pod restarts a container with an exponential backoff when the pod is in &lt;code>CrashLoopBackOff&lt;/code> state. This backoff could become quite large if the service stays down for long. Presence of weeder would not let that happen as it&amp;rsquo;ll restart the pod.&lt;/p></description></item></channel></rss>