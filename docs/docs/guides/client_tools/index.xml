<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Set Up Client Tools</title><link>https://gardener.cloud/docs/guides/client_tools/</link><description>Recent content in Set Up Client Tools on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/guides/client_tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Automated Deployment</title><link>https://gardener.cloud/docs/guides/client_tools/kubectl-apiserver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/guides/client_tools/kubectl-apiserver/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>With kubectl you can easily deploy an image from your local environment.&lt;/p>
&lt;p>However, what if you want to use a automated deployment script on a CI server (e.g. Jenkins), but don&amp;rsquo;t want to store
the KUBECONFIG on that server?&lt;/p>
&lt;p>You can use kubectl and connect to the API-server of your cluster.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Create a service account user&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl create serviceaccount deploy-user -n default
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Bind a role to the newly created serviceuser&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>!!! Warning !!!&lt;/strong> In this example the preconfigured role &lt;code>edit&lt;/code> and the namespace &lt;code>default&lt;/code> is being used, please adjust the role to a more strict scope! see &lt;a href="https://kubernetes.io/docs/admin/authorization/rbac/">https://kubernetes.io/docs/admin/authorization/rbac/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>kubectl create rolebinding deploy-default-role --clusterrole=edit --serviceaccount=default:deploy-user --namespace=default
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Get the URL of your API-server&lt;/p>
&lt;pre tabindex="0">&lt;code>APISERVER=$(kubectl config view | grep server | cut -f 2- -d &amp;#34;:&amp;#34; | tr -d &amp;#34; &amp;#34;)
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Get the service account&lt;/p>
&lt;pre tabindex="0">&lt;code>SERVICEACCOUNT=$(kubectl get serviceaccount deploy-user -n default -o=jsonpath={.secrets[0].name})
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Generate a token for the serviceaccount&lt;/p>
&lt;pre tabindex="0">&lt;code>TOKEN=$(kubectl get secret -n default $SERVICEACCOUNT -o=jsonpath={.data.token} | base64 -D)
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>You can deploy your app without setting the kubeconfig locally, you just need to pass the environment variables (e.g. store them in the Jenkins credentials store)&lt;/p>
&lt;pre tabindex="0">&lt;code>kubectl --server=${APIServer} --token=${TOKEN} --insecure-skip-tls-verify=true apply --filename myapp.yaml
&lt;/code>&lt;/pre></description></item><item><title>Docs: Kubeconfig Context as bash Prompt</title><link>https://gardener.cloud/docs/guides/client_tools/bash_kubeconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/guides/client_tools/bash_kubeconfig/</guid><description>
&lt;p>Use the Kubernetes command-line tool, &lt;em>kubectl&lt;/em>, to deploy and manage applications on Kubernetes.
Using kubectl, you can inspect cluster resources; create, delete, and update components&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/howto-kubeconfig-bash_5d5422.gif" alt="port-forward">&lt;/p>
&lt;p>By default, the kubectl configuration is located at &lt;code>~/.kube/config&lt;/code>.&lt;/p>
&lt;p>Suppose you have two clusters, one for development work and one for scratch work.&lt;/p>
&lt;p>How to handle this easily without copying the used configuration always to the right place?&lt;/p>
&lt;h2 id="export-the-kubeconfig-enviroment-variable">Export the KUBECONFIG enviroment variable&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>bash$ export KUBECONFIG=&amp;lt;PATH-TO-M&amp;gt;-CONFIG&amp;gt;/kubeconfig-dev.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>How to determine which cluster is used by the kubectl command?&lt;/p>
&lt;h2 id="determine-active-cluster">Determine active cluster&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>bash$ kubectl cluster-info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Kubernetes master is running at https://api.dev.garden.shoot.canary.k8s-hana.ondemand.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KubeDNS is running at https://api.dev.garden.shoot.canary.k8s-hana.ondemand.com/api/v1/proxy/namespaces/kube-system/services/kube-dns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>To further debug and diagnose cluster problems, use &lt;span style="color:#a31515">&amp;#39;kubectl cluster-info dump&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bash$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="display-cluster-in-the-bash---linux-and-alike">Display cluster in the bash - Linux and alike&lt;/h2>
&lt;p>I found this tip on Stackoverflow and find it worth to be added here.
Edit your &lt;code>~/.bash_profile&lt;/code> and add the following code snippet to show the current k8s
context in the shell&amp;rsquo;s prompt.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>prompt_k8s(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k8s_current_context=&lt;span style="color:#00f">$(&lt;/span>kubectl config current-context 2&amp;gt; /dev/null&lt;span style="color:#00f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">if&lt;/span> [[ $? -eq 0 ]] ; &lt;span style="color:#00f">then&lt;/span> echo -e &lt;span style="color:#a31515">&amp;#34;(&lt;/span>&lt;span style="color:#a31515">${&lt;/span>k8s_current_context&lt;span style="color:#a31515">}&lt;/span>&lt;span style="color:#a31515">) &amp;#34;&lt;/span>; &lt;span style="color:#00f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PS1+=&lt;span style="color:#a31515">&amp;#39;$(prompt_k8s)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After this your bash command prompt contains the active KUBECONFIG context and you always know
which cluster is active - &lt;em>develop&lt;/em> or &lt;em>production&lt;/em>.&lt;/p>
&lt;p>e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>bash$ export KUBECONFIG=/Users/d023280/Documents/workspace/gardener-ui/kubeconfig_gardendev.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bash (garden_dev)$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note the &lt;strong>(garden_dev)&lt;/strong> prefix in the bash command prompt.&lt;/p>
&lt;p>&lt;strong>This helps immensely to avoid thoughtless mistakes.&lt;/strong>&lt;/p>
&lt;h2 id="display-cluster-in-the-powershell---windows">Display cluster in the PowerShell - Windows&lt;/h2>
&lt;p>Display current k8s cluster in the title of PowerShell window.&lt;/p>
&lt;p>Create a &lt;a href="https://superuser.com/a/1045659">profile&lt;/a> file for your shell under &lt;code>%UserProfile%\Documents\Windows­PowerShell\Microsoft.PowerShell_profile.ps1&lt;/code>&lt;/p>
&lt;p>Copy following code to &lt;code>Microsoft.PowerShell_profile.ps1&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">function&lt;/span> prompt_k8s {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $k8s_current_context = (kubectl config current-context) | Out-String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">if&lt;/span>($?) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">return&lt;/span> $k8s_current_context
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;span style="color:#00f">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">return&lt;/span> &lt;span style="color:#a31515">&amp;#34;No K8S contenxt found&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $host.ui.rawui.WindowTitle = prompt_k8s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://gardener.cloud/__resources/howto-bash_kubeconfig_powershell_be60c7.png" alt="port-forward">&lt;/p>
&lt;p>If you want to switch to different cluster, you can set &lt;code>KUBECONFIG&lt;/code> to new value, and re-run the file &lt;code>Microsoft.PowerShell_profile.ps1&lt;/code>&lt;/p></description></item><item><title>Docs: Organizing Access Using kubeconfig Files</title><link>https://gardener.cloud/docs/guides/client_tools/working-with-kubeconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/guides/client_tools/working-with-kubeconfig/</guid><description>
&lt;h1 id="organizing-access-using-kubeconfig-files">Organizing Access Using kubeconfig Files&lt;/h1>
&lt;p>The kubectl command-line tool uses &lt;code>kubeconfig&lt;/code> files to find the information it needs to choose a cluster and
communicate with the API server of a cluster.&lt;/p>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>If you&amp;rsquo;ve become aware of a security breach that affects you, you may want to revoke or cycle credentials
in case anything was leaked. However, this is not possible with the initial or master &lt;code>kubeconfig&lt;/code> from your
cluster.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/teaser_775456.svg" alt="teaser">&lt;/p>
&lt;h2 id="pitfall">Pitfall&lt;/h2>
&lt;p>Never distribute the &lt;code>kubeconfig&lt;/code>, which you can download directly within the Gardener dashboard, for a productive cluster.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/kubeconfig-initial_32df26.png" alt="kubeconfig-dont">&lt;/p>
&lt;h2 id="create-a-custom-kubeconfig-file-for-each-user">Create a Custom kubeconfig File for Each User&lt;/h2>
&lt;p>Create a separate &lt;code>kubeconfig&lt;/code> for each user. One of the big advantages is, that you can revoke them and control
the permissions better. A limitation to single namespaces is also possible here.&lt;/p>
&lt;p>The script creates a new &lt;code>ServiceAccount&lt;/code> with read privileges in the whole cluster (Secrets are excluded).
To run the script &lt;a href="https://stedolan.github.io/jq/">jq&lt;/a>, a lightweight and flexible command-line JSON processor, must
be installed.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">if&lt;/span> [[ -z &lt;span style="color:#a31515">&amp;#34;&lt;/span>$1&lt;span style="color:#a31515">&amp;#34;&lt;/span> ]] ;&lt;span style="color:#00f">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#a31515">&amp;#34;usage: &lt;/span>$0&lt;span style="color:#a31515"> &amp;lt;username&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user=$1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl create sa &lt;span style="color:#a31515">${&lt;/span>user&lt;span style="color:#a31515">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>secret=&lt;span style="color:#00f">$(&lt;/span>kubectl get sa &lt;span style="color:#a31515">${&lt;/span>user&lt;span style="color:#a31515">}&lt;/span> -o json | jq -r .secrets[].name&lt;span style="color:#00f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl get secret &lt;span style="color:#a31515">${&lt;/span>secret&lt;span style="color:#a31515">}&lt;/span> -o json | jq -r &lt;span style="color:#a31515">&amp;#39;.data[&amp;#34;ca.crt&amp;#34;]&amp;#39;&lt;/span> | base64 -D &amp;gt; ca.crt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user_token=&lt;span style="color:#00f">$(&lt;/span>kubectl get secret &lt;span style="color:#a31515">${&lt;/span>secret&lt;span style="color:#a31515">}&lt;/span> -o json | jq -r &lt;span style="color:#a31515">&amp;#39;.data[&amp;#34;token&amp;#34;]&amp;#39;&lt;/span> | base64 -D&lt;span style="color:#00f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c=&lt;span style="color:#a31515">`&lt;/span>kubectl config current-context&lt;span style="color:#a31515">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cluster_name=&lt;span style="color:#a31515">`&lt;/span>kubectl config get-contexts $c | awk &lt;span style="color:#a31515">&amp;#39;{print $3}&amp;#39;&lt;/span> | tail -n 1&lt;span style="color:#a31515">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>endpoint=&lt;span style="color:#a31515">`&lt;/span>kubectl config view -o jsonpath=&lt;span style="color:#a31515">&amp;#34;{.clusters[?(@.name == \&amp;#34;&lt;/span>&lt;span style="color:#a31515">${&lt;/span>cluster_name&lt;span style="color:#a31515">}&lt;/span>&lt;span style="color:#a31515">\&amp;#34;)].cluster.server}&amp;#34;&lt;/span>&lt;span style="color:#a31515">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Set up the config&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KUBECONFIG=k8s-&lt;span style="color:#a31515">${&lt;/span>user&lt;span style="color:#a31515">}&lt;/span>-conf kubectl config set-cluster &lt;span style="color:#a31515">${&lt;/span>cluster_name&lt;span style="color:#a31515">}&lt;/span> &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --embed-certs=true &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --server=&lt;span style="color:#a31515">${&lt;/span>endpoint&lt;span style="color:#a31515">}&lt;/span> &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --certificate-authority=./ca.crt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KUBECONFIG=k8s-&lt;span style="color:#a31515">${&lt;/span>user&lt;span style="color:#a31515">}&lt;/span>-conf kubectl config set-credentials &lt;span style="color:#a31515">${&lt;/span>user&lt;span style="color:#a31515">}&lt;/span>-&lt;span style="color:#a31515">${&lt;/span>cluster_name#cluster-&lt;span style="color:#a31515">}&lt;/span> --token=&lt;span style="color:#a31515">${&lt;/span>user_token&lt;span style="color:#a31515">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KUBECONFIG=k8s-&lt;span style="color:#a31515">${&lt;/span>user&lt;span style="color:#a31515">}&lt;/span>-conf kubectl config set-context &lt;span style="color:#a31515">${&lt;/span>user&lt;span style="color:#a31515">}&lt;/span>-&lt;span style="color:#a31515">${&lt;/span>cluster_name#cluster-&lt;span style="color:#a31515">}&lt;/span> &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --cluster=&lt;span style="color:#a31515">${&lt;/span>cluster_name&lt;span style="color:#a31515">}&lt;/span> &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --user=&lt;span style="color:#a31515">${&lt;/span>user&lt;span style="color:#a31515">}&lt;/span>-&lt;span style="color:#a31515">${&lt;/span>cluster_name#cluster-&lt;span style="color:#a31515">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KUBECONFIG=k8s-&lt;span style="color:#a31515">${&lt;/span>user&lt;span style="color:#a31515">}&lt;/span>-conf kubectl config use-context &lt;span style="color:#a31515">${&lt;/span>user&lt;span style="color:#a31515">}&lt;/span>-&lt;span style="color:#a31515">${&lt;/span>cluster_name#cluster-&lt;span style="color:#a31515">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat &lt;span style="color:#a31515">&amp;lt;&amp;lt;EOF | kubectl create -f -
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">apiVersion: rbac.authorization.k8s.io/v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">kind: ClusterRoleBinding
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> name: view-${user}-global
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">subjects:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">- kind: ServiceAccount
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> name: ${user}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> namespace: default
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">roleRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> kind: ClusterRole
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> name: view
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> apiGroup: rbac.authorization.k8s.io
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#a31515">&amp;#34;done! Test with: &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#a31515">&amp;#34;export KUBECONFIG=k8s-&lt;/span>&lt;span style="color:#a31515">${&lt;/span>user&lt;span style="color:#a31515">}&lt;/span>&lt;span style="color:#a31515">-conf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#a31515">&amp;#34;kubectl get pods&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If &lt;strong>edit&lt;/strong> or &lt;strong>admin&lt;/strong> rights are to be assigned, the &lt;code>ClusterRoleBinding&lt;/code> must be adapted in the &lt;code>roleRef&lt;/code> section
with the roles listed below.&lt;/p>
&lt;p>Furthermore, you can restrict this to a single namespace by not creating a &lt;code>ClusterRoleBinding&lt;/code> but only a &lt;code>RoleBinding&lt;/code>
within the desired namespace.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Default ClusterRole&lt;/th>
&lt;th>Default ClusterRoleBinding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>cluster-admin&lt;/td>
&lt;td>system:masters group&lt;/td>
&lt;td>Allows super-user access to perform any action on any resource. When used in a ClusterRoleBinding, it gives full control over every resource in the cluster and in all namespaces. When used in a RoleBinding, it gives full control over every resource in the rolebinding&amp;rsquo;s namespace, including the namespace itself.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>admin&lt;/td>
&lt;td>None&lt;/td>
&lt;td>Allows admin access, intended to be granted within a namespace using a RoleBinding. If used in a RoleBinding, allows read/write access to most resources in a namespace, including the ability to create roles and rolebindings within the namespace. It does not allow write access to resource quota or to the namespace itself.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>edit&lt;/td>
&lt;td>None&lt;/td>
&lt;td>Allows read/write access to most objects in a namespace. It does not allow viewing or modifying roles or rolebindings.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>view&lt;/td>
&lt;td>None&lt;/td>
&lt;td>Allows read-only access to see most objects in a namespace. It does not allow viewing roles or rolebindings. It does not allow viewing secrets, since those are escalating.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Use a Helm Chart to Deploy an Application or Service</title><link>https://gardener.cloud/docs/guides/client_tools/helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/guides/client_tools/helm/</guid><description>
&lt;p>Basically, &lt;a href="https://helm.sh/docs/topics/charts/">Helm Charts&lt;/a> can be installed as described e.g. in the Helm
&lt;a href="https://helm.sh/docs/intro/quickstart/">QuickStart Guide&lt;/a>. However, our clusters come with
&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/">RBAC&lt;/a> enabled by default, hence Helm must be installed as follows:&lt;/p>
&lt;h2 id="create-a-service-account">Create a Service Account&lt;/h2>
&lt;p>Create a service account via the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>cat &lt;span style="color:#a31515">&amp;lt;&amp;lt;EOF | kubectl create -f -
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">apiVersion: v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">kind: ServiceAccount
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> name: helm
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> namespace: kube-system
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">---
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">apiVersion: rbac.authorization.k8s.io/v1beta1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">kind: ClusterRoleBinding
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> name: helm
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">roleRef:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> apiGroup: rbac.authorization.k8s.io
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> kind: ClusterRole
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> name: cluster-admin
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">subjects:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> - kind: ServiceAccount
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> name: helm
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> namespace: kube-system
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="initialize-helm">Initialize Helm&lt;/h2>
&lt;p>Initialise Helm via &lt;code>helm init --service-account helm&lt;/code>. You can now use &lt;code>helm&lt;/code>.&lt;/p>
&lt;h2 id="in-case-of-failure">In case of failure&lt;/h2>
&lt;p>In case you have already executed &lt;code>helm init&lt;/code>, but without the above service account, you will get the following error:
&lt;code>Error: User &amp;quot;system:serviceaccount:kube-system:default&amp;quot; cannot list configmaps in the namespace &amp;quot;kube-system&amp;quot;. (get configmaps)&lt;/code> (e.g. when you run &lt;code>helm list&lt;/code>). You will now need to delete the Tiller deployment (Helm backend
implicitly deployed to the Kubernetes cluster when you call &lt;code>helm init&lt;/code>) as well as the local Helm files (usually
&lt;code>$HELM_HOME&lt;/code> is set to &lt;code>~/.helm&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>kubectl delete deployment tiller-deploy --namespace=kube-system
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl delete service tiller-deploy --namespace=kube-system
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf ~/.helm/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now follow the instructions above. For more details see this
&lt;a href="https://github.com/kubernetes/helm/issues/2687">Kubernetes Helm issue #2687&lt;/a>.&lt;/p></description></item></channel></rss>