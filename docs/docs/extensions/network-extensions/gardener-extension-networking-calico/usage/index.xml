<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Usage</title><link>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/usage/</link><description>Recent content in Usage on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/usage/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Shoot Overlay Network</title><link>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/usage/shoot_overlay_network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/usage/shoot_overlay_network/</guid><description>
&lt;h1 id="enable--disable-overlay-network-for-shoots-with-calico">Enable / disable overlay network for shoots with Calico&lt;/h1>
&lt;p>Gardener can be used with or without the overlay network.&lt;/p>
&lt;p>Starting versions:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-gcp/releases/tag/v1.25.0">provider-gcp@v1.25.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-alicloud/releases/tag/v1.43.0">provider-alicloud@v1.43.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/releases/tag/v1.38.2">provider-aws@v1.38.2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-openstack/releases/tag/v1.30.0">provider-openstack@v1.30.0&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The default configuration of shoot clusters is without overlay network.&lt;/p>
&lt;h2 id="understanding-overlay-network">Understanding overlay network&lt;/h2>
&lt;p>The Overlay networking permits the routing of packets between multiples pods located on multiple nodes, even if the pod and the node network are not the same.&lt;/p>
&lt;p>This is done through the encapsulation of pod packets in the node network so that the routing can be done as usual. We use &lt;code>ipip&lt;/code> encapsulation with calico in case the overlay network is enabled. This (simply put) sends an IP packet as workload in another IP packet.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/Overlay-Network.drawio_ebaafc.png" alt="">&lt;/p>
&lt;p>In order to simplify the troubleshooting of problems and reduce the latency of packets traveling between nodes, the overlay network is disabled by default as stated above for all new clusters.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/No-Overlay-Network.drawio_db83e3.png" alt="">&lt;/p>
&lt;p>This means that the routing is done directly through the VPC routing table. Basically, when a new node is created, it is assigned a slice (usually a /24) of the pod network. All future pods in that node are going to be in this slice. Then, the cloud-controller-manager updates the cloud provider router to add the new route (all packets within the network slice as destination should go to that node).&lt;/p>
&lt;p>This has the advantage of:&lt;/p>
&lt;ul>
&lt;li>Doing less work for the node as encapsulation takes some CPU cycles.&lt;/li>
&lt;li>The maximum transmission unit (MTU) is slightly bigger resulting in slightly better performance, i.e. potentially more workload bytes per packet.&lt;/li>
&lt;li>More direct and simpler setup, which makes the problems much easier to troubleshoot.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>In the case where multiple shoots are in the same VPC and the overlay network is disabled, if the pod&amp;rsquo;s network is not configured properly, there is a very strong chance that some pod IP address might overlap, which is going to cause all sorts of funny problems.&lt;/strong> So, if someone asks you how to avoid that, they need to make sure that the podCIDRs for each shoot &lt;strong>do not overlap with each other&lt;/strong>.&lt;/p>
&lt;h2 id="enabling-the-overlay-network">Enabling the overlay network&lt;/h2>
&lt;p>In certain cases, the overlay network might be preferable if, for example, the customer wants to create multiple clusters in the same VPC without ensuring there&amp;rsquo;s no overlap between the pod networks.&lt;/p>
&lt;p>To enable the overlay network, add the following to the shoot&amp;rsquo;s YAML:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networking:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: calico
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: calico.networking.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: NetworkConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> overlay:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="disabling-the-overlay-network">Disabling the overlay network&lt;/h2>
&lt;p>Inversely, here is how to disable the overlay network:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networking:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: calico
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: calico.networking.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: NetworkConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> overlay:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="color:#00f">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="how-to-know-if-a-cluster-is-using-overlay-or-not">How to know if a cluster is using overlay or not?&lt;/h2>
&lt;p>You can look at any of the old nodes. If there are &lt;code>tunl0&lt;/code> devices at least at some point in time the overlay network was used.
Another way is to look into the Network object in the shoot&amp;rsquo;s control plane namespace on the seed (see example above).&lt;/p>
&lt;h2 id="do-we-have-some-documentation-somewhere-on-how-to-do-the-migration">Do we have some documentation somewhere on how to do the migration?&lt;/h2>
&lt;p>No, not yet. The migration from no overlay to overlay is fairly simply by just setting the configuration as specified above. The other way is more complicated as the Network configuration needs to be changed AND the local routes need to be cleaned.
Unfortunately, the change will be rolled out slowly (one calico-node at a time). Hence, it implies some network outages during the migration.&lt;/p>
&lt;h2 id="aws-implementation">AWS implementation&lt;/h2>
&lt;p>On AWS, it is not possible to use the cloud-controller-manager for managing the routes as it does not support multiple route tables, which Gardener creates. Therefore, a custom controller is created to manage the routes.&lt;/p></description></item><item><title>Docs: Usage</title><link>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/usage/usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/usage/usage/</guid><description>
&lt;h1 id="using-the-networking-calico-extension-with-gardener-as-end-user">Using the Networking Calico extension with Gardener as end-user&lt;/h1>
&lt;p>The &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-shoot.yaml">&lt;code>core.gardener.cloud/v1beta1.Shoot&lt;/code> resource&lt;/a> declares a &lt;code>networking&lt;/code> field that is meant to contain network-specific configuration.&lt;/p>
&lt;p>In this document we are describing how this configuration looks like for Calico and provide an example &lt;code>Shoot&lt;/code> manifest with minimal configuration that you can use to create a cluster.&lt;/p>
&lt;h2 id="calico-typha">Calico Typha&lt;/h2>
&lt;p>Calico Typha is an optional component of Project Calico designed to offload the Kubernetes API server. The Typha daemon sits between the datastore (such as the Kubernetes API server which is the one used by Gardener managed Kubernetes) and many instances of Felix. Typha’s main purpose is to increase scale by reducing each node’s impact on the datastore. You can opt-out Typha via &lt;code>.spec.networking.providerConfig.typha.enabled=false&lt;/code> of your Shoot manifest. By default the Typha is enabled.&lt;/p>
&lt;h2 id="ebpf-dataplane">EBPF Dataplane&lt;/h2>
&lt;p>Calico can be run in ebpf dataplane mode. This has several benefits, calico scales to higher troughput, uses less cpu per GBit and has native support for kubernetes services (without needing kube-proxy).
To switch to a pure ebpf dataplane it is recommended to run without an overlay network. The following configuration can be used to run without an overlay and without kube-proxy.&lt;/p>
&lt;p>An example ebpf dataplane &lt;code>NetworkingConfig&lt;/code> manifest:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: calico.networking.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: NetworkConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ebpfDataplane:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>overlay:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="color:#00f">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To disable kube-proxy set the enabled field to false in the shoot manifest.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: ebpf-shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubeProxy:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="color:#00f">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="know-limitations-of-the-ebpf-dataplane">Know limitations of the EBPF Dataplane&lt;/h3>
&lt;p>Please note that the default settings for calico&amp;rsquo;s ebpf dataplane may interfere with
&lt;a href="https://learn.microsoft.com/en-us/azure/virtual-network/accelerated-networking-overview">accelerated networking in azure&lt;/a>
rendering nodes with accelerated networking unusable in the network. The reason for this is that calico does not ignore
the accelerated networking interface &lt;code>enP...&lt;/code> as it should, but applies its ebpf programs to it. A simple mitigation for
this is to adapt the &lt;code>FelixConfiguration&lt;/code> &lt;code>default&lt;/code> and ensure that the &lt;code>bpfDataIfacePattern&lt;/code> does not include &lt;code>enP...&lt;/code>.
Per default &lt;code>bpfDataIfacePattern&lt;/code> is not set. The default value for this option can be found
&lt;a href="https://github.com/projectcalico/calico/blob/3f7fe4d290541bbdd73c97bdc89a29a29855a48a/felix/config/config_params.go#L180">here&lt;/a>.
For example, you could apply the following change:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ kubectl edit felixconfiguration default
...
apiVersion: crd.projectcalico.org/v1
kind: FelixConfiguration
metadata:
...
name: default
...
spec:
bpfDataIfacePattern: ^((en|wl|ww|sl|ib)[opsx].*|(eth|wlan|wwan).*|tunl0$|vxlan.calico$|wireguard.cali$|wg-v6.cali$)
...
&lt;/code>&lt;/pre>&lt;h2 id="example-networkingconfig-manifest">Example &lt;code>NetworkingConfig&lt;/code> manifest&lt;/h2>
&lt;p>An example &lt;code>NetworkingConfig&lt;/code> for the Calico extension looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: calico.networking.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: NetworkConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ipam:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: host-local
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: usePodCIDR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vethMTU: 1440
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>typha:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>overlay:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="example-shoot-manifest">Example &lt;code>Shoot&lt;/code> manifest&lt;/h2>
&lt;p>Please find below an example &lt;code>Shoot&lt;/code> manifest with calico networking configratations:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: johndoe-azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudProfileName: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: westeurope
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretBindingName: core-azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> provider:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: azure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> infrastructureConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vnet:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: 10.250.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workers: 10.250.0.0/19
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zoned: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> controlPlaneConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: ControlPlaneConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: worker-xoluy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machine:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: Standard_D4_v3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minimum: 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maximum: 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volume:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size: 50Gi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: Standard_LRS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zones:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#a31515">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#a31515">&amp;#34;2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networking:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: calico
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodes: 10.250.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: calico.networking.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: NetworkConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ipam:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: host-local
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vethMTU: 1440
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> overlay:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> typha:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="color:#00f">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> version: 1.24.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maintenance:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> autoUpdate:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetesVersion: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineImageVersion: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> addons:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetesDashboard:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nginxIngress:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="known-limitations-in-conjunction-with-nodelocaldns">Known Limitations in conjunction with &lt;code>NodeLocalDNS&lt;/code>&lt;/h2>
&lt;p>If &lt;a href="https://gardener.cloud/docs/gardener/usage/node-local-dns/">&lt;code>NodeLocalDNS&lt;/code>&lt;/a> is active in a shoot cluster, which uses calico as CNI without overlay network, it may be impossible to block DNS traffic to the cluster DNS server via network policy. This is due to &lt;code>FELIX_CHAININSERTMODE&lt;/code> being set to &lt;code>APPEND&lt;/code> instead of &lt;code>INSERT&lt;/code> in case SNAT is being applied to requests to the infrastructure DNS server. In this scenario the &lt;code>iptables&lt;/code> rules of &lt;code>NodeLocalDNS&lt;/code> already accept the traffic before the network policies are checked.&lt;/p>
&lt;p>This only applies to traffic directed to &lt;code>NodeLocalDNS&lt;/code>. If blocking of all DNS traffic is desired via network policy the pod &lt;code>dnsPolicy&lt;/code> should be changed to &lt;code>Default&lt;/code> so that the cluster DNS is not used. Alternatives are usage of overlay network or disabling of &lt;code>NodeLocalDNS&lt;/code>.&lt;/p></description></item></channel></rss>