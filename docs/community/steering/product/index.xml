<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Product Steering on Gardener</title><link>https://gardener.cloud/community/steering/product/</link><description>Recent content in Product Steering on Gardener</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Mon, 17 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://gardener.cloud/community/steering/product/index.xml" rel="self" type="application/rss+xml"/><item><title>2025-03: Scaling Recommender</title><link>https://gardener.cloud/community/steering/product/2025-03-scaling-recommender/</link><pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate><guid>https://gardener.cloud/community/steering/product/2025-03-scaling-recommender/</guid><description>&lt;ul>
&lt;li>
&lt;p>✍🏻 &lt;strong>Author(s):&lt;/strong> &lt;a href="https://github.com/unmarshall">@unmarshall&lt;/a> (Madhav Bhargava)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>🗓️ &lt;strong>Presentation:&lt;/strong> 2025-03-17, 10:00 - 11:00 CET&lt;/p>
&lt;/li>
&lt;li>
&lt;p>🎥 &lt;strong>Recording:&lt;/strong> &lt;a href="https://youtu.be/u4-fWwKITuM">click here&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;details closed>&lt;summary>📝 &lt;b>Meeting Minutes&lt;/b>&lt;/summary>
&lt;ul>
&lt;li>Madhav (and Tarun on CA inefficiencies) presented the recommender proposal.&lt;/li>
&lt;li>Questions were raised about what issues could realistically be changed upstream (if the committers would approve) and what cannot be changed (fundamental issues).&lt;/li>
&lt;li>One fundamental issue is that CA looks only at one node group at a time and therefore only considers filtering, never scoring (there is nothing to score since only nodes in one node group are analyzed). Consequently, all follow-up issues cannot be addressed either, like zone imbalance or sub-optimal recommendations.&lt;/li>
&lt;li>The concern was raised that while the recommender is being developed, the community will progress and implement, e.g., resource reservations. However, feedback is not all positive/this proposal is critised to not solve the complex requirements for modern GPU workloads and pod-(gang-)scheduling. Also, because the suggested recommender will directly leverage the kube-scheduler, there will be reduced (sometimes no) need to duplicate this kind of logic in the recommender – for this feature or new upcoming features.&lt;/li>
&lt;li>The concern was raised that virtualizing the API server and ETCD may require significant effort and whether we can contribute upstream changes to the kube-scheduler so that it returns recommendations instead. However, it seems unlikely to achieve that because it would complicate the kube-scheduler further (mixing in recommendations), make available the machine options to pick from (today, it only knows of/looks at existing nodes), and break the one-pod-at-a-time scheduling principle it follows today (CA and the recommender need to look at all pending pods to make a sensible recommendation). Furthermore, virtualizing the API server and ETCD is probably not much work (as seen in the PoC) because we need to implement “only” the kube-scheduler required API surface and hold the data in memory. CA went another way, but in the end, the data is held also there in memory.&lt;/li>
&lt;li>The proposal was made to present the scaling recommender in SIG Auto-Scaling to get feedback on whether the proposal makes sense, independent of whether anyone but us wants to implement it.&lt;/li>
&lt;/ul>
&lt;/details>
&lt;/li>
&lt;li>
&lt;p>👨‍⚖️ &lt;strong>Decisions:&lt;/strong>&lt;/p></description></item></channel></rss>