<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on Gardener</title><link>https://gardener.cloud/docs/getting-started/</link><description>Recent content in Getting Started on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Gardener</title><link>https://gardener.cloud/docs/getting-started/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/introduction/</guid><description>&lt;h2 id="problem-space">Problem Space&lt;/h2>
&lt;p>Let&amp;rsquo;s discuss the problem space first. Why does anyone need something like Gardener?&lt;/p>
&lt;h3 id="running-software">Running Software&lt;/h3>
&lt;p>The starting point is this rather simple question: Why would you want to run some software?&lt;/p>
&lt;p>Typically, software is run with a purpose and not just for the sake of running it. Whether it is a digital ledger, a company&amp;rsquo;s inventory or a blog - software provides a service to its user.&lt;/p>
&lt;p>Which brings us to the way this software is being consumed. Traditionally, software has been shipped on physical / digital media to the customer or end user. There, someone had to install, configure, and operate it. In recent times, the pattern has shifted. More and more solutions are operated by the vendor or a hosting partner and sold as a service ready to be used.&lt;/p></description></item><item><title>Architecture</title><link>https://gardener.cloud/docs/getting-started/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/architecture/</guid><description>&lt;h2 id="kubeception">Kubeception&lt;/h2>
&lt;p>Kubeception - Kubernetes in Kubernetes in Kubernetes&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/docs/getting-started/images/kubeception.gif" alt="kubeception">&lt;/p>
&lt;p>In the classic setup, there is a dedicated host / VM to host the master components / control plane of a Kubernetes cluster. However, these are just normal programs that can easily be put into containers. Once in containers, Kubernetes Deployments and StatefulSets (for the etcd) can be made to watch over them. And by putting all that into a separate, dedicated Kubernetes cluster you get Kubernetes on Kubernetes, aka Kubeception (named after the famous movie Inception with Leonardo DiCaprio).&lt;/p></description></item><item><title>Gardener Projects</title><link>https://gardener.cloud/docs/getting-started/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/project/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/docs/getting-started/images/overview.png" alt="overview">&lt;/p>
&lt;p>Gardener is all about Kubernetes clusters, which we call shoots. However, Gardener also does user management, delicate permission management and offers technical accounts to integrate its services into other infrastructures. It allows you to create several quotas and it needs credentials to connect to cloud providers. All of these are arranged in multiple fully contained projects, each of which belongs to a dedicated user and / or group.&lt;/p></description></item><item><title>Gardener Shoots</title><link>https://gardener.cloud/docs/getting-started/shoots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/shoots/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;img src="https://gardener.cloud/docs/getting-started/images/k8s-cluster.png" alt="k8s-cluster">&lt;/p>
&lt;p>A Kubernetes cluster consists of a control plane and a data plane. The data plane runs the actual containers on worker nodes (which translate to physical or virtual machines). For the control and data plane to work together properly, lots of components need matching configuration.&lt;/p>
&lt;p>Some configurations are standardized but some are also very specific to the needs of a cluster&amp;rsquo;s user / workload. Ideally, you want a properly configured cluster with the possibility to fine-tune some settings.&lt;/p></description></item><item><title>Control Plane Components</title><link>https://gardener.cloud/docs/getting-started/ca-components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/ca-components/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>A cluster has a data plane and a control plane. The data plane is like a space station. It has certain components which keep everyone / everything alive and can operate autonomously to a certain extent. However, without mission control (and the occasional delivery of supplies) it cannot share information or receive new instructions.&lt;/p>
&lt;p>So let&amp;rsquo;s see what the mission control (control plane) of a Kubernetes cluster looks like.&lt;/p></description></item><item><title>Shoot Lifecycle</title><link>https://gardener.cloud/docs/getting-started/lifecycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/lifecycle/</guid><description>&lt;h2 id="reconciliation-in-kubernetes-and-gardener">Reconciliation in Kubernetes and Gardener&lt;/h2>
&lt;p>The starting point of all reconciliation cycles is the constant observation of both the desired and actual state. A component would analyze any differences between the two states and try to converge the actual towards the desired state using appropriate actions. Typically, a component is responsible for a single resource type but it also watches others that have an implication on it.&lt;/p>
&lt;p>As an example, the Kubernetes controller for ReplicaSets will watch pods belonging to it in order to ensure that the specified replica count is fulfilled. If one pod gets deleted, the controller will create a new pod to enforce the desired over the actual state.&lt;/p></description></item><item><title>Common Pitfalls</title><link>https://gardener.cloud/docs/getting-started/common-pitfalls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/getting-started/common-pitfalls/</guid><description>&lt;h2 id="architecture">Architecture&lt;/h2>
&lt;h3 id="containers-will-not-fix-a-broken-architecture">Containers will NOT fix a broken architecture!&lt;/h3>
&lt;p>&lt;img src="https://gardener.cloud/docs/getting-started/images/microservices.png" alt="microservices">&lt;/p>
&lt;p>Running a highly distributed system has advantages, but of course, those come at a cost. In order to succeed, one would need:&lt;/p>
&lt;ul>
&lt;li>Logging&lt;/li>
&lt;li>Tracing&lt;/li>
&lt;li>No singleton&lt;/li>
&lt;li>Tolerance to failure of individual instances&lt;/li>
&lt;li>Automated config / change management&lt;/li>
&lt;li>Kubernetes knowledge&lt;/li>
&lt;/ul>
&lt;h2 id="scalability">Scalability&lt;/h2>
&lt;p>Most scalability dimensions are interconnected with others. If a cluster grows beyond reasonable defaults, it can still function very well. But tuning it comes at the cost of time and can influence stability negatively.&lt;/p></description></item></channel></rss>