<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Provider GCP</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/</link><description>Recent content in Provider GCP on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Deployment</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/docs/deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/docs/deployment/</guid><description>
&lt;h1 id="deployment-of-the-gcp-provider-extension">Deployment of the GCP provider extension&lt;/h1>
&lt;p>&lt;strong>Disclaimer:&lt;/strong> This document is NOT a step by step installation guide for the GCP provider extension and only contains some configuration specifics regarding the installation of different components via the helm charts residing in the GCP provider extension &lt;a href="https://github.com/gardener/gardener-extension-provider-gcp">repository&lt;/a>.&lt;/p>
&lt;h2 id="gardener-extension-admission-gcp">gardener-extension-admission-gcp&lt;/h2>
&lt;h3 id="authentication-against-the-garden-cluster">Authentication against the Garden cluster&lt;/h3>
&lt;p>There are several authentication possibilities depending on whether or not &lt;a href="https://github.com/gardener/garden-setup#concept-the-virtual-cluster">the concept of &lt;em>Virtual Garden&lt;/em>&lt;/a> is used.&lt;/p>
&lt;h4 id="virtual-garden-is-not-used-ie-the-runtime-garden-cluster-is-also-the-target-garden-cluster">&lt;em>Virtual Garden&lt;/em> is not used, i.e., the &lt;code>runtime&lt;/code> Garden cluster is also the &lt;code>target&lt;/code> Garden cluster.&lt;/h4>
&lt;p>&lt;strong>Automounted Service Account Token&lt;/strong>
The easiest way to deploy the &lt;code>gardener-extension-admission-gcp&lt;/code> component will be to not provide &lt;code>kubeconfig&lt;/code> at all. This way in-cluster configuration and an automounted service account token will be used. The drawback of this approach is that the automounted token will not be automatically rotated.&lt;/p>
&lt;p>&lt;strong>Service Account Token Volume Projection&lt;/strong>
Another solution will be to use &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#service-account-token-volume-projection">Service Account Token Volume Projection&lt;/a> combined with a &lt;code>kubeconfig&lt;/code> referencing a token file (see example below).&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: v1
kind: Config
clusters:
- cluster:
certificate-authority-data: &amp;lt;CA-DATA&amp;gt;
server: https://default.kubernetes.svc.cluster.local
name: garden
contexts:
- context:
cluster: garden
user: garden
name: garden
current-context: garden
users:
- name: garden
user:
tokenFile: /var/run/secrets/projected/serviceaccount/token
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will allow for automatic rotation of the service account token by the &lt;code>kubelet&lt;/code>. The configuration can be achieved by setting both &lt;code>.Values.global.serviceAccountTokenVolumeProjection.enabled: true&lt;/code> and &lt;code>.Values.global.kubeconfig&lt;/code> in the respective chart&amp;rsquo;s &lt;code>values.yaml&lt;/code> file.&lt;/p>
&lt;h4 id="virtual-garden-is-used-ie-the-runtime-garden-cluster-is-different-from-the-target-garden-cluster">&lt;em>Virtual Garden&lt;/em> is used, i.e., the &lt;code>runtime&lt;/code> Garden cluster is different from the &lt;code>target&lt;/code> Garden cluster.&lt;/h4>
&lt;p>&lt;strong>Service Account&lt;/strong>
The easiest way to setup the authentication will be to create a service account and the respective roles will be bound to this service account in the &lt;code>target&lt;/code> cluster. Then use the generated service account token and craft a &lt;code>kubeconfig&lt;/code> which will be used by the workload in the &lt;code>runtime&lt;/code> cluster. This approach does not provide a solution for the rotation of the service account token. However, this setup can be achieved by setting &lt;code>.Values.global.virtualGarden.enabled: true&lt;/code> and following these steps:&lt;/p>
&lt;ol>
&lt;li>Deploy the &lt;code>application&lt;/code> part of the charts in the &lt;code>target&lt;/code> cluster.&lt;/li>
&lt;li>Get the service account token and craft the &lt;code>kubeconfig&lt;/code>.&lt;/li>
&lt;li>Set the crafted &lt;code>kubeconfig&lt;/code> and deploy the &lt;code>runtime&lt;/code> part of the charts in the &lt;code>runtime&lt;/code> cluster.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Client Certificate&lt;/strong>
Another solution will be to bind the roles in the &lt;code>target&lt;/code> cluster to a &lt;code>User&lt;/code> subject instead of a service account and use a client certificate for authentication. This approach does not provide a solution for the client certificate rotation. However, this setup can be achieved by setting both &lt;code>.Values.global.virtualGarden.enabled: true&lt;/code> and &lt;code>.Values.global.virtualGarden.user.name&lt;/code>, then following these steps:&lt;/p>
&lt;ol>
&lt;li>Generate a client certificate for the &lt;code>target&lt;/code> cluster for the respective user.&lt;/li>
&lt;li>Deploy the &lt;code>application&lt;/code> part of the charts in the &lt;code>target&lt;/code> cluster.&lt;/li>
&lt;li>Craft a &lt;code>kubeconfig&lt;/code> using the already generated client certificate.&lt;/li>
&lt;li>Set the crafted &lt;code>kubeconfig&lt;/code> and deploy the &lt;code>runtime&lt;/code> part of the charts in the &lt;code>runtime&lt;/code> cluster.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Projected Service Account Token&lt;/strong>
This approach requires an already deployed and configured &lt;a href="https://github.com/gardener/oidc-webhook-authenticator">oidc-webhook-authenticator&lt;/a> for the &lt;code>target&lt;/code> cluster. Also the &lt;code>runtime&lt;/code> cluster should be registered as a trusted identity provider in the &lt;code>target&lt;/code> cluster. Then projected service accounts tokens from the &lt;code>runtime&lt;/code> cluster can be used to authenticate against the &lt;code>target&lt;/code> cluster. The needed steps are as follows:&lt;/p>
&lt;ol>
&lt;li>Deploy &lt;a href="https://github.com/gardener/oidc-webhook-authenticator">OWA&lt;/a> and establish the needed trust.&lt;/li>
&lt;li>Set &lt;code>.Values.global.virtualGarden.enabled: true&lt;/code> and &lt;code>.Values.global.virtualGarden.user.name&lt;/code>. &lt;strong>Note:&lt;/strong> username value will depend on the trust configuration, e.g., &lt;code>&amp;lt;prefix&amp;gt;:system:serviceaccount:&amp;lt;namespace&amp;gt;:&amp;lt;serviceaccount&amp;gt;&lt;/code>&lt;/li>
&lt;li>Set &lt;code>.Values.global.serviceAccountTokenVolumeProjection.enabled: true&lt;/code> and &lt;code>.Values.global.serviceAccountTokenVolumeProjection.audience&lt;/code>. &lt;strong>Note:&lt;/strong> audience value will depend on the trust configuration, e.g., &lt;code>&amp;lt;cliend-id-from-trust-config&amp;gt;&lt;/code>.&lt;/li>
&lt;li>Craft a kubeconfig (see example below).&lt;/li>
&lt;li>Deploy the &lt;code>application&lt;/code> part of the charts in the &lt;code>target&lt;/code> cluster.&lt;/li>
&lt;li>Deploy the &lt;code>runtime&lt;/code> part of the charts in the &lt;code>runtime&lt;/code> cluster.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: v1
kind: Config
clusters:
- cluster:
certificate-authority-data: &amp;lt;CA-DATA&amp;gt;
server: https://virtual-garden.api
name: virtual-garden
contexts:
- context:
cluster: virtual-garden
user: virtual-garden
name: virtual-garden
current-context: virtual-garden
users:
- name: virtual-garden
user:
tokenFile: /var/run/secrets/projected/serviceaccount/token
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Local Setup</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/docs/local-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/docs/local-setup/</guid><description>
&lt;h3 id="admission-gcp">admission-gcp&lt;/h3>
&lt;p>&lt;code>admission-gcp&lt;/code> is an admission webhook server which is responsible for the validation of the cloud provider (GCP in this case) specific fields and resources. The Gardener API server is cloud provider agnostic and it wouldn&amp;rsquo;t be able to perform similar validation.&lt;/p>
&lt;p>Follow the steps below to run the admission webhook server locally.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Start the Gardener API server.&lt;/p>
&lt;p>For details, check the Gardener &lt;a href="https://gardener.cloud/docs/gardener/development/local_setup/">local setup&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start the webhook server&lt;/p>
&lt;p>Make sure that the &lt;code>KUBECONFIG&lt;/code> environment variable is pointing to the local garden cluster.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">make start-admission
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Setup the &lt;code>ValidatingWebhookConfiguration&lt;/code>.&lt;/p>
&lt;p>&lt;code>hack/dev-setup-admission-gcp.sh&lt;/code> will configure the webhook Service which will allow the kube-apiserver of your local cluster to reach the webhook server. It will also apply the &lt;code>ValidatingWebhookConfiguration&lt;/code> manifest.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">./hack/dev-setup-admission-gcp.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>You are now ready to experiment with the &lt;code>admission-gcp&lt;/code> webhook server locally.&lt;/p></description></item><item><title>Docs: Usage As End User</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/docs/usage-as-end-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/docs/usage-as-end-user/</guid><description>
&lt;h1 id="using-the-gcp-provider-extension-with-gardener-as-end-user">Using the GCP provider extension with Gardener as end-user&lt;/h1>
&lt;p>The &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-shoot.yaml">&lt;code>core.gardener.cloud/v1beta1.Shoot&lt;/code> resource&lt;/a> declares a few fields that are meant to contain provider-specific configuration.&lt;/p>
&lt;p>This document describes the configurable options for GCP and provides an example &lt;code>Shoot&lt;/code> manifest with minimal configuration that can be used to create a GCP cluster (modulo the landscape-specific information like cloud profile names, secret binding names, etc.).&lt;/p>
&lt;h2 id="gcp-provider-credentials">GCP Provider Credentials&lt;/h2>
&lt;p>In order for Gardener to create a Kubernetes cluster using GCP infrastructure components, a Shoot has to provide credentials with sufficient permissions to the desired GCP project.
Every shoot cluster references a &lt;code>SecretBinding&lt;/code> which itself references a &lt;code>Secret&lt;/code>, and this &lt;code>Secret&lt;/code> contains the provider credentials of the GCP project.
The &lt;code>SecretBinding&lt;/code> is configurable in the &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-shoot.yaml">Shoot cluster&lt;/a> with the field &lt;code>secretBindingName&lt;/code>.&lt;/p>
&lt;p>The required credentials for the GCP project are a &lt;a href="https://cloud.google.com/iam/docs/service-accounts#service_account_keys">Service Account Key&lt;/a> to authenticate as a &lt;a href="https://cloud.google.com/compute/docs/access/service-accounts">GCP Service Account&lt;/a>.
A service account is a special account that can be used by services and applications to interact with Google Cloud Platform APIs.
Applications can use service account credentials to authorize themselves to a set of APIs and perform actions within the permissions granted to the service account.&lt;/p>
&lt;p>Make sure to &lt;a href="https://cloud.google.com/service-usage/docs/enable-disable">enable the Google Identity and Access Management (IAM) API&lt;/a>.
&lt;a href="https://cloud.google.com/iam/docs/creating-managing-service-accounts">Create a Service Account&lt;/a> that shall be used for the Shoot cluster.
&lt;a href="https://cloud.google.com/iam/docs/granting-changing-revoking-access">Grant at least the following IAM roles&lt;/a> to the Service Account.&lt;/p>
&lt;ul>
&lt;li>Service Account Admin&lt;/li>
&lt;li>Service Account Token Creator&lt;/li>
&lt;li>Service Account User&lt;/li>
&lt;li>Compute Admin&lt;/li>
&lt;/ul>
&lt;p>Create a &lt;a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys">JSON Service Account key&lt;/a> for the Service Account.
Provide it in the &lt;code>Secret&lt;/code> (base64 encoded for field &lt;code>serviceaccount.json&lt;/code>), that is being referenced by the &lt;code>SecretBinding&lt;/code> in the Shoot cluster configuration.&lt;/p>
&lt;p>This &lt;code>Secret&lt;/code> must look as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: v1
kind: Secret
metadata:
name: core-gcp
namespace: garden-dev
type: Opaque
data:
serviceaccount.json: base64(serviceaccount-json)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>⚠️ Depending on your API usage it can be problematic to reuse the same Service Account Key for different Shoot clusters due to rate limits.
Please consider spreading your Shoots over multiple Service Accounts on different GCP projects if you are hitting those limits, see &lt;a href="https://cloud.google.com/compute/docs/api-rate-limits">https://cloud.google.com/compute/docs/api-rate-limits&lt;/a>.&lt;/p>
&lt;h2 id="infrastructureconfig">&lt;code>InfrastructureConfig&lt;/code>&lt;/h2>
&lt;p>The infrastructure configuration mainly describes how the network layout looks like in order to create the shoot worker nodes in a later step, thus, prepares everything relevant to create VMs, load balancers, volumes, etc.&lt;/p>
&lt;p>An example &lt;code>InfrastructureConfig&lt;/code> for the GCP extension looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1
kind: InfrastructureConfig
networks:
&lt;span style="color:#008000"># vpc:&lt;/span>
&lt;span style="color:#008000"># name: my-vpc&lt;/span>
&lt;span style="color:#008000"># cloudRouter:&lt;/span>
&lt;span style="color:#008000"># name: my-cloudrouter&lt;/span>
workers: 10.250.0.0/16
&lt;span style="color:#008000"># internal: 10.251.0.0/16&lt;/span>
&lt;span style="color:#008000"># cloudNAT:&lt;/span>
&lt;span style="color:#008000"># minPortsPerVM: 2048&lt;/span>
&lt;span style="color:#008000"># natIPNames:&lt;/span>
&lt;span style="color:#008000"># - name: manualnat1&lt;/span>
&lt;span style="color:#008000"># - name: manualnat2&lt;/span>
&lt;span style="color:#008000"># flowLogs:&lt;/span>
&lt;span style="color:#008000"># aggregationInterval: INTERVAL_5_SEC&lt;/span>
&lt;span style="color:#008000"># flowSampling: 0.2&lt;/span>
&lt;span style="color:#008000"># metadata: INCLUDE_ALL_METADATA&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>networks.vpc&lt;/code> section describes whether you want to create the shoot cluster in an already existing VPC or whether to create a new one:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>If &lt;code>networks.vpc.name&lt;/code> is given then you have to specify the VPC name of the existing VPC that was created by other means (manually, other tooling, &amp;hellip;).
If you want to get a fresh VPC for the shoot then just omit the &lt;code>networks.vpc&lt;/code> field.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If a VPC name is not given then we will create the cloud router + NAT gateway to ensure that worker nodes don&amp;rsquo;t get external IPs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If a VPC name is given then a cloud router name must also be given, failure to do so would result in validation errors
and possibly clusters without egress connectivity.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>networks.workers&lt;/code> section describes the CIDR for a subnet that is used for all shoot worker nodes, i.e., VMs which later run your applications.&lt;/p>
&lt;p>The &lt;code>networks.internal&lt;/code> section is optional and can describe a CIDR for a subnet that is used for &lt;a href="https://cloud.google.com/load-balancing/docs/internal/">internal load balancers&lt;/a>,&lt;/p>
&lt;p>The &lt;code>networks.cloudNAT.minPortsPerVM&lt;/code> is optional and is used to define the &lt;a href="https://cloud.google.com/nat/docs/overview#number_of_nat_ports_and_connections">minimum number of ports allocated to a VM for the CloudNAT&lt;/a>&lt;/p>
&lt;p>The &lt;code>networks.cloudNAT.natIPNames&lt;/code> is optional and is used to specify the names of the manual ip addresses which should be used by the nat gateway&lt;/p>
&lt;p>The specified CIDR ranges must be contained in the VPC CIDR specified above, or the VPC CIDR of your already existing VPC.
You can freely choose these CIDRs and it is your responsibility to properly design the network layout to suit your needs.&lt;/p>
&lt;p>The &lt;code>networks.flowLogs&lt;/code> section describes the configuration for the VPC flow logs. In order to enable the VPC flow logs at least one of the following parameters needs to be specified in the flow log section:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>networks.flowLogs.aggregationInterval&lt;/code> an optional parameter describing the aggregation interval for collecting flow logs. For more details, see &lt;a href="https://www.terraform.io/docs/providers/google/r/compute_subnetwork.html#aggregation_interval">aggregation_interval reference&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>networks.flowLogs.flowSampling&lt;/code> an optional parameter describing the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. For more details, see &lt;a href="https://www.terraform.io/docs/providers/google/r/compute_subnetwork.html#flow_sampling">flow_sampling reference&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>networks.flowLogs.metadata&lt;/code> an optional parameter describing whether metadata fields should be added to the reported VPC flow logs. For more details, see &lt;a href="https://www.terraform.io/docs/providers/google/r/compute_subnetwork.html#metadata">metadata reference&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Apart from the VPC and the subnets the GCP extension will also create a dedicated service account for this shoot, and firewall rules.&lt;/p>
&lt;h2 id="controlplaneconfig">&lt;code>ControlPlaneConfig&lt;/code>&lt;/h2>
&lt;p>The control plane configuration mainly contains values for the GCP-specific control plane components.
Today, the only component deployed by the GCP extension is the &lt;code>cloud-controller-manager&lt;/code>.&lt;/p>
&lt;p>An example &lt;code>ControlPlaneConfig&lt;/code> for the GCP extension looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1
kind: ControlPlaneConfig
zone: europe-west1-b
cloudControllerManager:
featureGates:
CustomResourceValidation: &lt;span style="color:#00f">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>zone&lt;/code> field tells the cloud-controller-manager in which zone it should mainly operate.
You can still create clusters in multiple availability zones, however, the cloud-controller-manager requires one &amp;ldquo;main&amp;rdquo; zone.
⚠️ You always have to specify this field!&lt;/p>
&lt;p>The &lt;code>cloudControllerManager.featureGates&lt;/code> contains a map of explicitly enabled or disabled feature gates.
For production usage it&amp;rsquo;s not recommend to use this field at all as you can enable alpha features or disable beta/stable features, potentially impacting the cluster stability.
If you don&amp;rsquo;t want to configure anything for the &lt;code>cloudControllerManager&lt;/code> simply omit the key in the YAML specification.&lt;/p>
&lt;h2 id="workerconfig">WorkerConfig&lt;/h2>
&lt;p>Multiple zones can be configured for a worker group of a GCP Shoot. The minimum number of machines in every worker group should be equal to or greater than the number of zones configured for that worker-group.&lt;/p>
&lt;blockquote>
&lt;p>The predicate is - A worker group with N zones configured should have minimum N machines.&lt;/p>
&lt;/blockquote>
&lt;p>⚠️ This is important because, as of today, Cluster Autoscaler does not support scale-from-zero on GCP.&lt;/p>
&lt;p>The following YAML is a snippet of a &lt;code>Shoot&lt;/code> resource:&lt;/p>
&lt;pre>&lt;code>workers:
- name: worker-vezh0
machine:
type: n1-standard-2
image:
name: gardenlinux
version: 318.8.0
maximum: 6
minimum: 2 # the value should be equal to or greater than the number of zones
maxSurge: 1
maxUnavailable: 0
volume:
type: pd-standard
size: 50Gi
zones:
- europe-west1-c
- europe-west1-d
systemComponents:
allow: true
&lt;/code>&lt;/pre>&lt;p>The worker configuration contains:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Local SSD interface for the additional volumes attached to GCP worker machines.&lt;/p>
&lt;p>If you attach the disk with &lt;code>SCRATCH&lt;/code> type, either an &lt;code>NVMe&lt;/code> interface or a &lt;code>SCSI&lt;/code> interface must be specified.
It is only meaningful to provide this volume interface if only &lt;code>SCRATCH&lt;/code> data volumes are used.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Service Account with their specified scopes, authorized for this worker.&lt;/p>
&lt;p>Service accounts created in advance that generate access tokens that can be accessed through the metadata server and used to authenticate applications on the instance.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>An example &lt;code>WorkerConfig&lt;/code> for the GCP looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1
kind: WorkerConfig
volume:
interface: NVME
serviceAccount:
email: foo@bar.com
scopes:
- https://www.googleapis.com/auth/cloud-platform
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="example-shoot-manifest">Example &lt;code>Shoot&lt;/code> manifest&lt;/h2>
&lt;p>Please find below an example &lt;code>Shoot&lt;/code> manifest:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1alpha1
kind: Shoot
metadata:
name: johndoe-gcp
namespace: garden-dev
spec:
cloudProfileName: gcp
region: europe-west1
secretBindingName: core-gcp
provider:
type: gcp
infrastructureConfig:
apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1
kind: InfrastructureConfig
networks:
workers: 10.250.0.0/16
controlPlaneConfig:
apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1
kind: ControlPlaneConfig
zone: europe-west1-b
workers:
- name: worker-xoluy
machine:
type: n1-standard-4
minimum: 2
maximum: 2
volume:
size: 50Gi
type: pd-standard
zones:
- europe-west1-b
networking:
nodes: 10.250.0.0/16
type: calico
kubernetes:
version: 1.16.1
maintenance:
autoUpdate:
kubernetesVersion: &lt;span style="color:#00f">true&lt;/span>
machineImageVersion: &lt;span style="color:#00f">true&lt;/span>
addons:
kubernetes-dashboard:
enabled: &lt;span style="color:#00f">true&lt;/span>
nginx-ingress:
enabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="csi-volume-provisioners">CSI volume provisioners&lt;/h2>
&lt;p>Every GCP shoot cluster that has at least Kubernetes v1.18 will be deployed with the GCP PD CSI driver.
It is compatible with the legacy in-tree volume provisioner that was deprecated by the Kubernetes community and will be removed in future versions of Kubernetes.
End-users might want to update their custom &lt;code>StorageClass&lt;/code>es to the new &lt;code>pd.csi.storage.gke.io&lt;/code> provisioner.
Shoot clusters with Kubernetes v1.17 or less will use the in-tree &lt;code>kubernetes.io/gce-pd&lt;/code> volume provisioner in the kube-controller-manager and the kubelet.&lt;/p>
&lt;h2 id="kubernetes-versions-per-worker-pool">Kubernetes Versions per Worker Pool&lt;/h2>
&lt;p>This extension supports &lt;code>gardener/gardener&lt;/code>&amp;rsquo;s &lt;code>WorkerPoolKubernetesVersion&lt;/code> feature gate, i.e., having &lt;a href="https://github.com/gardener/gardener/blob/8a9c88866ec5fce59b5acf57d4227eeeb73669d7/example/90-shoot.yaml#L69-L70">worker pools with overridden Kubernetes versions&lt;/a> since &lt;code>gardener-extension-provider-gcp@v1.21&lt;/code>.
Note that this feature is only usable for &lt;code>Shoot&lt;/code>s whose &lt;code>.spec.kubernetes.version&lt;/code> is greater or equal than the CSI migration version (&lt;code>1.18&lt;/code>).&lt;/p></description></item><item><title>Docs: Usage As Operator</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/docs/usage-as-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-gcp/docs/usage-as-operator/</guid><description>
&lt;h1 id="using-the-gcp-provider-extension-with-gardener-as-operator">Using the GCP provider extension with Gardener as operator&lt;/h1>
&lt;p>The &lt;a href="https://github.com/gardener/gardener/blob/master/example/30-cloudprofile.yaml">&lt;code>core.gardener.cloud/v1beta1.CloudProfile&lt;/code> resource&lt;/a> declares a &lt;code>providerConfig&lt;/code> field that is meant to contain provider-specific configuration.
The &lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">&lt;code>core.gardener.cloud/v1beta1.Seed&lt;/code> resource&lt;/a> is structured similarly.
Additionally, it allows configuring settings for the backups of the main etcds' data of shoot clusters control planes running in this seed cluster.&lt;/p>
&lt;p>This document explains the necessary configuration for this provider extension.&lt;/p>
&lt;h2 id="cloudprofile-resource">&lt;code>CloudProfile&lt;/code> resource&lt;/h2>
&lt;p>This section describes, how the configuration for &lt;code>CloudProfile&lt;/code>s looks like for GCP by providing an example &lt;code>CloudProfile&lt;/code> manifest with minimal configuration that can be used to allow the creation of GCP shoot clusters.&lt;/p>
&lt;h3 id="cloudprofileconfig">&lt;code>CloudProfileConfig&lt;/code>&lt;/h3>
&lt;p>The cloud profile configuration contains information about the real machine image IDs in the GCP environment (image URLs).
You have to map every version that you specify in &lt;code>.spec.machineImages[].versions&lt;/code> here such that the GCP extension knows the image URL for every version you want to offer.&lt;/p>
&lt;p>An example &lt;code>CloudProfileConfig&lt;/code> for the GCP extension looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1
kind: CloudProfileConfig
machineImages:
- name: coreos
versions:
- version: 2135.6.0
image: projects/coreos-cloud/global/images/coreos-stable-2135-6-0-v20190801
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="example-cloudprofile-manifest">Example &lt;code>CloudProfile&lt;/code> manifest&lt;/h3>
&lt;p>If you want to allow that shoots can create VMs with local SSDs volumes then you have to specify the type of the disk with &lt;code>SCRATCH&lt;/code> in the &lt;code>.spec.volumeTypes[]&lt;/code> list.
Please find below an example &lt;code>CloudProfile&lt;/code> manifest:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: CloudProfile
metadata:
name: gcp
spec:
type: gcp
kubernetes:
versions:
- version: 1.16.1
- version: 1.16.0
expirationDate: &lt;span style="color:#a31515">&amp;#34;2020-04-05T01:02:03Z&amp;#34;&lt;/span>
machineImages:
- name: coreos
versions:
- version: 2135.6.0
machineTypes:
- name: n1-standard-4
cpu: &lt;span style="color:#a31515">&amp;#34;4&amp;#34;&lt;/span>
gpu: &lt;span style="color:#a31515">&amp;#34;0&amp;#34;&lt;/span>
memory: 15Gi
volumeTypes:
- name: pd-standard
class: standard
- name: pd-ssd
class: premium
- name: SCRATCH
class: standard
regions:
- region: europe-west1
names:
- europe-west1-b
- europe-west1-c
- europe-west1-d
providerConfig:
apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1
kind: CloudProfileConfig
machineImages:
- name: coreos
versions:
- version: 2135.6.0
image: projects/coreos-cloud/global/images/coreos-stable-2135-6-0-v20190801
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="seed-resource">&lt;code>Seed&lt;/code> resource&lt;/h2>
&lt;p>This provider extension does not support any provider configuration for the &lt;code>Seed&lt;/code>&amp;rsquo;s &lt;code>.spec.provider.providerConfig&lt;/code> field.
However, it supports to managing of backup infrastructure, i.e., you can specify a configuration for the &lt;code>.spec.backup&lt;/code> field.&lt;/p>
&lt;h3 id="backup-configuration">Backup configuration&lt;/h3>
&lt;p>A Seed of type &lt;code>gcp&lt;/code> can be configured to perform backups for the main etcds' of the shoot clusters control planes using Google Cloud Storage buckets.&lt;/p>
&lt;p>The location/region where the backups will be stored defaults to the region of the Seed (&lt;code>spec.provider.region&lt;/code>), but can also be explicitly configured via the field &lt;code>spec.backup.region&lt;/code>.
The region of the backup can be different from where the seed cluster is running.
However, usually it makes sense to pick the same region for the backup bucket as used for the Seed cluster.&lt;/p>
&lt;p>Please find below an example &lt;code>Seed&lt;/code> manifest (partly) that configures backups using Google Cloud Storage buckets.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">---
apiVersion: core.gardener.cloud/v1beta1
kind: Seed
metadata:
name: my-seed
spec:
provider:
type: gcp
region: europe-west1
backup:
provider: gcp
region: europe-west1 &lt;span style="color:#008000"># default region&lt;/span>
secretRef:
name: backup-credentials
namespace: garden
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>An example of the referenced secret containing the credentials for the GCP Cloud storage can be found in the &lt;a href="https://github.com/gardener/gardener-extension-provider-gcp/blob/master/example/30-etcd-backup-secret.yaml">example folder&lt;/a>.&lt;/p>
&lt;h4 id="permissions-for-gcp-cloud-storage">Permissions for GCP Cloud Storage&lt;/h4>
&lt;p>Please make sure the service account associated with the provided credentials has the following IAM roles.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cloud.google.com/storage/docs/access-control/iam-roles">Storage Admin&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>