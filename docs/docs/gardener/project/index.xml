<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener â€“ Project</title><link>https://gardener.cloud/docs/gardener/project/</link><description>Recent content in Project on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/gardener/project/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: NamespacedCloudProfiles</title><link>https://gardener.cloud/docs/gardener/project/namespaced-cloud-profiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/project/namespaced-cloud-profiles/</guid><description>
&lt;h1 id="namespacedcloudprofiles">&lt;code>NamespacedCloudProfile&lt;/code>s&lt;/h1>
&lt;p>&lt;code>NamespacedCloudProfile&lt;/code>s are resources in Gardener that allow project-level customization of &lt;code>CloudProfile&lt;/code>s.
They enable project administrators to create and manage cloud profiles specific to their projects and reduce the operational burden on central Gardener operators.
As opposed to &lt;code>CloudProfile&lt;/code>s, &lt;code>NamespacedCloudProfile&lt;/code>s are namespaced and thus limit configuration options for &lt;code>Shoot&lt;/code>s, such as special machine types, to the associated project only.
These profiles inherit from a parent &lt;code>CloudProfile&lt;/code> and can override or extend certain fields while maintaining backward compatibility.&lt;/p>
&lt;p>Project viewers have the permission to see &lt;code>NamespacedCloudProfile&lt;/code>s associated with a particular project.
Project administrators can generally create, edit, or delete &lt;code>NamespacedCloudProfile&lt;/code>s but with some exceptions (see the &lt;a href="https://gardener.cloud/docs/gardener/project/namespaced-cloud-profiles/#field-modification-restrictions">restrictions&lt;/a> outlined below).&lt;/p>
&lt;p>When creating or updating a &lt;code>Shoot&lt;/code>, the cloud profile reference can be set to point to a &lt;code>NamespacedCloudProfile&lt;/code>, allowing for more granular and project-specific configurations.
The modification of a &lt;code>Shoot&lt;/code>&amp;rsquo;s cloud profile reference is restricted to switching from a &lt;code>CloudProfile&lt;/code> to a descendant &lt;code>NamespacedCloudProfile&lt;/code>.
Changing the reference from one &lt;code>NamespacedCloudProfile&lt;/code> to another &lt;code>NamespacedCloudProfile&lt;/code> or even to another &lt;code>CloudProfile&lt;/code> is not allowed.&lt;/p>
&lt;p>The usage of &lt;code>NamespacedCloudProfile&lt;/code>s is currently subject to an alpha feature gate and is not enabled by default.
It requires the enabled provider extensions to support the feature as well.
The feature gate can be enabled by passing the &lt;code>--feature-gates=NamespacedCloudProfiles=true&lt;/code> flag to the Gardener API server.&lt;/p>
&lt;p>Please see &lt;a href="https://github.com/gardener/gardener/blob/master/example/35-namespacedcloudprofile.yaml">this&lt;/a> example manifest and &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/25-namespaced-cloud-profiles.md">GEP-25&lt;/a> for additional information.&lt;/p>
&lt;h2 id="field-modification-restrictions">Field Modification Restrictions&lt;/h2>
&lt;p>In order to make changes to specific fields in the &lt;code>NamespacedCloudProfile&lt;/code>, a user must be granted custom RBAC verbs.
Modifications of these fields need to be performed with caution and might require additional validation steps or accompanying changes.
By default, only landscape operators have the permission to change these fields, as they are usually able to judge the implications.&lt;/p>
&lt;p>Changing the following fields require the corresponding custom verbs:&lt;/p>
&lt;ul>
&lt;li>For changing the &lt;code>.spec.kubernetes&lt;/code> field, the custom verb &lt;code>modify-spec-kubernetes&lt;/code> is required.&lt;/li>
&lt;li>For changing the &lt;code>.spec.machineImages&lt;/code> field, the custom verb &lt;code>modify-spec-machineimages&lt;/code> is required.&lt;/li>
&lt;li>For changing the &lt;code>.spec.providerConfig&lt;/code> field, the custom verb &lt;code>modify-spec-providerconfig&lt;/code> is required.&lt;/li>
&lt;/ul>
&lt;p>The assignment of these custom verbs can be achieved by creating a &lt;code>ClusterRole&lt;/code> and a &lt;code>RoleBinding&lt;/code> like in the following example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: rbac.authorization.k8s.io/v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: ClusterRole
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: namespacedcloudprofile-kubernetes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rules:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- apiGroups: [&lt;span style="color:#a31515">&amp;#34;core.gardener.cloud&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resources: [&lt;span style="color:#a31515">&amp;#34;namespacedcloudprofiles&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> verbs: [&lt;span style="color:#a31515">&amp;#34;modify-spec-kubernetes&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: rbac.authorization.k8s.io/v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: RoleBinding
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: edit-kubernetes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>roleRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiGroup: rbac.authorization.k8s.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: ClusterRole
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: namespacedcloudprofile-kubernetes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>subjects:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- apiGroup: rbac.authorization.k8s.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: User
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: alice.doe@example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Projects</title><link>https://gardener.cloud/docs/gardener/project/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/project/projects/</guid><description>
&lt;h1 id="projects">Projects&lt;/h1>
&lt;p>The Gardener API server supports a cluster-scoped &lt;code>Project&lt;/code> resource which is used for data isolation between individual Gardener consumers. For example, each development team has its own project to manage its own shoot clusters.&lt;/p>
&lt;p>Each &lt;code>Project&lt;/code> is backed by a Kubernetes &lt;code>Namespace&lt;/code> that contains the actual related Kubernetes resources, like &lt;code>Secret&lt;/code>s or &lt;code>Shoot&lt;/code>s.&lt;/p>
&lt;p>&lt;strong>Example resource:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Project
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> description: &lt;span style="color:#a31515">&amp;#34;This is my first project&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: &lt;span style="color:#a31515">&amp;#34;Experimenting with Gardener&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> owner:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiGroup: rbac.authorization.k8s.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: User
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: john.doe@example.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> members:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - apiGroup: rbac.authorization.k8s.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: User
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: alice.doe@example.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> role: admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># roles:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># - viewer &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># - uam&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># - serviceaccountmanager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># - extension:foo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - apiGroup: rbac.authorization.k8s.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: User
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: bob.doe@example.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> role: viewer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># tolerations:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># defaults:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># - key: &amp;lt;some-key&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># whitelist:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># - key: &amp;lt;some-key&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.spec.namespace&lt;/code> field is optional and is initialized if unset.
The name of the resulting namespace will be determined based on the &lt;code>Project&lt;/code> name and UID, e.g., &lt;code>garden-dev-5aef3&lt;/code>.
It&amp;rsquo;s also possible to adopt existing namespaces by labeling them &lt;code>gardener.cloud/role=project&lt;/code> and &lt;code>project.gardener.cloud/name=dev&lt;/code> beforehand (otherwise, they cannot be adopted).&lt;/p>
&lt;p>When deleting a Project resource, the corresponding namespace is also deleted.
To keep a namespace after project deletion, an administrator/operator (not Project members!) can annotate the project-namespace with &lt;code>namespace.gardener.cloud/keep-after-project-deletion&lt;/code>.&lt;/p>
&lt;p>The &lt;code>spec.description&lt;/code> and &lt;code>.spec.purpose&lt;/code> fields can be used to describe to fellow team members and Gardener operators what this project is used for.&lt;/p>
&lt;p>Each project has one dedicated owner, configured in &lt;code>.spec.owner&lt;/code> using the &lt;code>rbac.authorization.k8s.io/v1.Subject&lt;/code> type.
The owner is the main contact person for Gardener operators.
Please note that the &lt;code>.spec.owner&lt;/code> field is deprecated and will be removed in future API versions in favor of the &lt;code>owner&lt;/code> role, see below.&lt;/p>
&lt;p>The list of members (again a list in &lt;code>.spec.members[]&lt;/code> using the &lt;code>rbac.authorization.k8s.io/v1.Subject&lt;/code> type) contains all the people that are associated with the project in any way.
Each project member must have at least one role (currently described in &lt;code>.spec.members[].role&lt;/code>, additional roles can be added to &lt;code>.spec.members[].roles[]&lt;/code>). The following roles exist:&lt;/p>
&lt;ul>
&lt;li>&lt;code>admin&lt;/code>: This allows to fully manage resources inside the project (e.g., secrets, shoots, configmaps, and similar). Mind that the &lt;code>admin&lt;/code> role has read only access to service accounts.&lt;/li>
&lt;li>&lt;code>serviceaccountmanager&lt;/code>: This allows to fully manage service accounts inside the project namespace and request tokens for them. The permissions of the created service accounts are instead managed by the &lt;code>admin&lt;/code> role. Please refer to &lt;a href="https://gardener.cloud/docs/gardener/project/service-account-manager/">Service Account Manager&lt;/a>.&lt;/li>
&lt;li>&lt;code>uam&lt;/code>: This allows to add/modify/remove human users or groups to/from the project member list.&lt;/li>
&lt;li>&lt;code>viewer&lt;/code>: This allows to read all resources inside the project except secrets.&lt;/li>
&lt;li>&lt;code>owner&lt;/code>: This combines the &lt;code>admin&lt;/code>, &lt;code>uam&lt;/code>, and &lt;code>serviceaccountmanager&lt;/code> roles.&lt;/li>
&lt;li>Extension roles (prefixed with &lt;code>extension:&lt;/code>): Please refer to &lt;a href="https://gardener.cloud/docs/gardener/extensions/project-roles/">Extending Project Roles&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>The &lt;a href="https://gardener.cloud/docs/gardener/concepts/controller-manager/#project-controller">project controller&lt;/a> inside the Gardener Controller Manager is managing RBAC resources that grant the described privileges to the respective members.&lt;/p>
&lt;p>There are three central &lt;code>ClusterRole&lt;/code>s &lt;code>gardener.cloud:system:project-member&lt;/code>, &lt;code>gardener.cloud:system:project-viewer&lt;/code>, and &lt;code>gardener.cloud:system:project-serviceaccountmanager&lt;/code> that grant the permissions for namespaced resources (e.g., &lt;code>Secret&lt;/code>s, &lt;code>Shoot&lt;/code>s, &lt;code>ServiceAccount&lt;/code>s).
Via referring &lt;code>RoleBinding&lt;/code>s created in the respective namespace the project members get bound to these &lt;code>ClusterRole&lt;/code>s and, thus, the needed permissions.
There are also project-specific &lt;code>ClusterRole&lt;/code>s granting the permissions for cluster-scoped resources, e.g., the &lt;code>Namespace&lt;/code> or &lt;code>Project&lt;/code> itself.&lt;br>
For each role, the following &lt;code>ClusterRole&lt;/code>s, &lt;code>ClusterRoleBinding&lt;/code>s, and &lt;code>RoleBinding&lt;/code>s are created:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Role&lt;/th>
&lt;th>&lt;code>ClusterRole&lt;/code>&lt;/th>
&lt;th>&lt;code>ClusterRoleBinding&lt;/code>&lt;/th>
&lt;th>&lt;code>RoleBinding&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>admin&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-member:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-member:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-member&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>serviceaccountmanager&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-serviceaccountmanager&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>uam&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-uam:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-uam:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>viewer&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-viewer:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-viewer:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project-viewer&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>owner&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:system:project:&amp;lt;projectName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>extension:*&lt;/code>&lt;/td>
&lt;td>&lt;code>gardener.cloud:extension:project:&amp;lt;projectName&amp;gt;:&amp;lt;extensionRoleName&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;code>gardener.cloud:extension:project:&amp;lt;projectName&amp;gt;:&amp;lt;extensionRoleName&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="user-access-management">User Access Management&lt;/h2>
&lt;p>For &lt;code>Project&lt;/code>s created before Gardener v1.8, all admins were allowed to manage other members.
Beginning with v1.8, the new &lt;code>uam&lt;/code> role is being introduced.
It is backed by the &lt;code>manage-members&lt;/code> custom RBAC verb which allows to add/modify/remove human users or groups to/from the project member list.
Human users are subjects with &lt;code>kind=User&lt;/code> and &lt;code>name!=system:serviceaccount:*&lt;/code>, and groups are subjects with &lt;code>kind=Group&lt;/code>.
The management of service account subjects (&lt;code>kind=ServiceAccount&lt;/code> or &lt;code>name=system:serviceaccount:*&lt;/code>) is not controlled via the &lt;code>uam&lt;/code> custom verb but with the standard &lt;code>update&lt;/code>/&lt;code>patch&lt;/code> verbs for projects.&lt;/p>
&lt;p>All newly created projects will only bind the owner to the &lt;code>uam&lt;/code> role.
The owner can still grant the &lt;code>uam&lt;/code> role to other members if desired.
For projects created before Gardener v1.8, the Gardener Controller Manager will migrate all projects to also assign the &lt;code>uam&lt;/code> role to all &lt;code>admin&lt;/code> members (to not break existing use-cases). The corresponding migration logic is present in Gardener Controller Manager from v1.8 to v1.13.
The project owner can gradually remove these roles if desired.&lt;/p>
&lt;h2 id="stale-projects">Stale Projects&lt;/h2>
&lt;p>When a project is not actively used for some period of time, it is marked as &amp;ldquo;stale&amp;rdquo;. This is done by a controller called &lt;a href="https://gardener.cloud/docs/gardener/concepts/controller-manager/#stale-projects-reconciler">&amp;ldquo;Stale Projects Reconciler&amp;rdquo;&lt;/a>. Once the project is marked as stale, there is a time frame in which if not used it will be deleted by that controller.&lt;/p>
&lt;h2 id="four-eyes-principle-for-resource-deletion">Four-Eyes-Principle For Resource Deletion&lt;/h2>
&lt;p>In order to delete a &lt;code>Shoot&lt;/code>, the deletion must be confirmed upfront with the &lt;code>confirmation.gardener.cloud/deletion=true&lt;/code> annotation.
Without this annotation being set, &lt;code>gardener-apiserver&lt;/code> denies any DELETE request.
Still, users sometimes accidentally shot themselves in the foot, meaning that they accidentally deleted a &lt;code>Shoot&lt;/code> despite the confirmation requirement.&lt;/p>
&lt;p>To prevent that (or make it harder, at least), the &lt;code>Project&lt;/code> can be configured to apply the dual approval concept for &lt;code>Shoot&lt;/code> deletion.
This means that the subject confirming the deletion must not be the same as the subject sending the DELETE request.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dualApprovalForDeletion:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - resource: shoots
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selector:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matchLabels: {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> includeServiceAccounts: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>[!NOTE]
As of today, &lt;code>core.gardener.cloud/v1beta1.Shoot&lt;/code> is the only resource for which this concept is implemented.&lt;/p>
&lt;/blockquote>
&lt;p>As usual, &lt;code>.spec.dualApprovalForDeletion[].selector.matchLabels={}&lt;/code> matches all resources, &lt;code>.spec.dualApprovalForDeletion[].selector.matchLabels=null&lt;/code> matches none at all.
It can also be decided to specify an individual label selector if this concept shall only apply to a subset of the &lt;code>Shoot&lt;/code>s in the project (e.g., CI/development clusters shall be excluded).&lt;/p>
&lt;p>The &lt;code>includeServiceAccounts&lt;/code> (default: &lt;code>true&lt;/code>) controls whether the concept also applies when the &lt;code>Shoot&lt;/code> deletion confirmation and actual deletion is triggered via &lt;code>ServiceAccount&lt;/code>s.
This is to prevent that CI jobs have to follow this concept as well, adding additional complexity/overhead.
Alternatively, you could also use two &lt;code>ServiceAccount&lt;/code>s, one for confirming the deletion, and another one for actually sending the DELETE request, if desired.&lt;/p>
&lt;blockquote>
&lt;p>[!IMPORTANT]
Project members can still change the labels of &lt;code>Shoot&lt;/code>s (or the selector itself) to circumvent the dual approval concept.
This concern is intentionally excluded/ignored for now since the principle is not a &amp;ldquo;security feature&amp;rdquo; but shall just help preventing &lt;em>accidental&lt;/em> deletion.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Service Account Manager</title><link>https://gardener.cloud/docs/gardener/project/service-account-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/project/service-account-manager/</guid><description>
&lt;h1 id="service-account-manager">Service Account Manager&lt;/h1>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>With Gardener &lt;code>v1.47&lt;/code>, a new role called &lt;code>serviceaccountmanager&lt;/code> was introduced. This role allows to fully manage &lt;code>ServiceAccount&lt;/code>&amp;rsquo;s in the project namespace and request tokens for them. This is the preferred way of managing the access to a project namespace, as it aims to replace the usage of the default &lt;code>ServiceAccount&lt;/code> secrets that will no longer be generated automatically.&lt;/p>
&lt;h2 id="actions">Actions&lt;/h2>
&lt;p>Once assigned the &lt;code>serviceaccountmanager&lt;/code> role, a user can create/update/delete &lt;code>ServiceAccount&lt;/code>s in the project namespace.&lt;/p>
&lt;h3 id="create-a-service-account">Create a Service Account&lt;/h3>
&lt;p>In order to create a &lt;code>ServiceAccount&lt;/code> named &amp;ldquo;robot-user&amp;rdquo;, run the following &lt;code>kubectl&lt;/code> command:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">kubectl -n project-abc create sa robot-user
&lt;/code>&lt;/pre>&lt;h3 id="request-a-token-for-a-service-account">Request a Token for a Service Account&lt;/h3>
&lt;p>A token for the &amp;ldquo;robot-user&amp;rdquo; &lt;code>ServiceAccount&lt;/code> can be requested via the &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/token-request-v1/">TokenRequest API&lt;/a> in several ways:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl -n project-abc create token robot-user --duration=3600s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>directly calling the Kubernetes HTTP API&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -X POST https://api.gardener/api/v1/namespaces/project-abc/serviceaccounts/robot-user/token &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> -H &lt;span style="color:#a31515">&amp;#34;Authorization: Bearer &amp;lt;auth-token&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> -H &lt;span style="color:#a31515">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> -d &lt;span style="color:#a31515">&amp;#39;{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> &amp;#34;apiVersion&amp;#34;: &amp;#34;authentication.k8s.io/v1&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> &amp;#34;kind&amp;#34;: &amp;#34;TokenRequest&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> &amp;#34;spec&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> &amp;#34;expirationSeconds&amp;#34;: 3600
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> }&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Mind that the returned token is not stored within the Kubernetes cluster, will be valid for &lt;code>3600&lt;/code> seconds, and will be invalidated if the &amp;ldquo;robot-user&amp;rdquo; &lt;code>ServiceAccount&lt;/code> is deleted. Although &lt;code>expirationSeconds&lt;/code> can be modified depending on the needs, the returned token&amp;rsquo;s validity will not exceed the configured &lt;code>service-account-max-token-expiration&lt;/code> duration for the garden cluster. It is advised that the actual &lt;code>expirationTimestamp&lt;/code> is verified so that expectations are met. This can be done by asserting the &lt;code>expirationTimestamp&lt;/code> in the &lt;code>TokenRequestStatus&lt;/code> or the &lt;code>exp&lt;/code> claim in the token itself.&lt;/p>
&lt;h3 id="delete-a-service-account">Delete a Service Account&lt;/h3>
&lt;p>In order to delete the &lt;code>ServiceAccount&lt;/code> named &amp;ldquo;robot-user&amp;rdquo;, run the following &lt;code>kubectl&lt;/code> command:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">kubectl -n project-abc delete sa robot-user
&lt;/code>&lt;/pre>&lt;p>This will invalidate all existing tokens for the &amp;ldquo;robot-user&amp;rdquo; &lt;code>ServiceAccount&lt;/code>.&lt;/p></description></item></channel></rss>