<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Other Components</title><link>https://gardener.cloud/docs/other-components/</link><description>Recent content in Other Components on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/other-components/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: ETCD Druid</title><link>https://gardener.cloud/docs/other-components/etcd-druid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/</guid><description>
&lt;h1 id="etcd-druid">ETCD Druid&lt;/h1>
&lt;p>&lt;a href="https://concourse.ci.gardener.cloud/teams/gardener/pipelines/etcd-druid-master/jobs/master-head-update-job">&lt;img src="https://concourse.ci.gardener.cloud/api/v1/teams/gardener/pipelines/etcd-druid-master/jobs/master-head-update-job/badge" alt="CI Build status">&lt;/a>
&lt;a href="https://goreportcard.com/report/github.com/gardener/etcd-druid">&lt;img src="https://goreportcard.com/badge/github.com/gardener/gardener" alt="Go Report Card">&lt;/a>&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>&lt;a href="https://github.com/etcd-io/etcd">Etcd&lt;/a> in the control plane of Kubernetes clusters which are managed by Gardener is deployed as a StatefulSet. The statefulset has replica of a pod containing two containers namely, etcd and &lt;a href="https://github.com/gardener/etcd-backup-restore">backup-restore&lt;/a>. The etcd container calls components in etcd-backup-restore via REST api to perform data validation before etcd is started. If this validation fails etcd data is restored from the latest snapshot stored in the cloud-provider&amp;rsquo;s object store. Once etcd has started, the etcd-backup-restore periodically creates full and delta snapshots. It also performs defragmentation of etcd data periodically.&lt;/p>
&lt;p>The etcd-backup-restore needs as input the cloud-provider information comprising of security credentials to access the object store, the object store bucket name and prefix for the directory used to store snapshots. Currently, for operations like migration and validation, the bash script has to be updated to initiate the operation.&lt;/p>
&lt;h2 id="goals">Goals&lt;/h2>
&lt;ul>
&lt;li>Deploy etcd and etcd-backup-restore using an etcd CRD.&lt;/li>
&lt;li>Support more than one etcd replica.&lt;/li>
&lt;li>Perform scheduled snapshots.&lt;/li>
&lt;li>Support operations such as restores, defragmentation and scaling with zero-downtime.&lt;/li>
&lt;li>Handle cloud-provider specific operation logic.&lt;/li>
&lt;li>Trigger a full backup on request before volume deletion.&lt;/li>
&lt;li>Offline compaction of full and delta snapshots stored in object store.&lt;/li>
&lt;/ul>
&lt;h2 id="proposal">Proposal&lt;/h2>
&lt;p>The existing method of deploying etcd and backup-sidecar as a StatefulSet alleviates the pain of ensuring the pods are live and ready after node crashes. However, deploying etcd as a Statefulset introduces a plethora of challenges. The etcd controller should be smart enough to handle etcd statefulsets taking into account limitations imposed by statefulsets. The controller shall update the status regarding how to target the K8s objects it has created. This field in the status can be leveraged by &lt;code>HVPA&lt;/code> to scale etcd resources eventually.&lt;/p>
&lt;h2 id="crd-specification">CRD specification&lt;/h2>
&lt;p>The etcd CRD should contain the information required to create the etcd and backup-restore sidecar in a pod/statefulset.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">---
apiVersion: druid.gardener.cloud/v1alpha1
kind: Etcd
metadata:
finalizers:
- druid.gardener.cloud/etcd
name: test
namespace: demo
spec:
annotations:
app: etcd-statefulset
garden.sapcloud.io/role: controlplane
networking.gardener.cloud/to-dns: allowed
networking.gardener.cloud/to-private-networks: allowed
networking.gardener.cloud/to-public-networks: allowed
role: test
backup:
deltaSnapshotMemoryLimit: 1Gi
deltaSnapshotPeriod: 300s
fullSnapshotSchedule: 0 &lt;span style="color:#00f">*/24&lt;/span> * * *
garbageCollectionPeriod: 43200s
garbageCollectionPolicy: Exponential
imageRepository: eu.gcr.io/gardener-project/gardener/etcdbrctl
imageVersion: v0.12.0
port: 8080
resources:
limits:
cpu: 500m
memory: 2Gi
requests:
cpu: 23m
memory: 128Mi
snapstoreTempDir: /var/etcd/data/temp
etcd:
Quota: 8Gi
clientPort: 2379
defragmentationSchedule: 0 &lt;span style="color:#00f">*/24&lt;/span> * * *
enableTLS: &lt;span style="color:#00f">false&lt;/span>
imageRepository: eu.gcr.io/gardener-project/gardener/etcd
imageVersion: v3.4.13-bootstrap
initialClusterState: new
initialClusterToken: new
metrics: basic
pullPolicy: IfNotPresent
resources:
limits:
cpu: 2500m
memory: 4Gi
requests:
cpu: 500m
memory: 1000Mi
serverPort: 2380
storageCapacity: 80Gi
storageClass: gardener.cloud-fast
sharedConfig:
autoCompactionMode: periodic
autoCompactionRetention: 30m
labels:
app: etcd-statefulset
garden.sapcloud.io/role: controlplane
networking.gardener.cloud/to-dns: allowed
networking.gardener.cloud/to-private-networks: allowed
networking.gardener.cloud/to-public-networks: allowed
role: test
pvcRetentionPolicy: DeleteAll
replicas: 1
storageCapacity: 80Gi
storageClass: gardener.cloud-fast
store:
storageContainer: test
storageProvider: S3
storePrefix: etcd-test
storeSecret: etcd-backup
tlsClientSecret: etcd-client-tls
tlsServerSecret: etcd-server-tls
status:
etcd:
apiVersion: apps/v1
kind: StatefulSet
name: etcd-test
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="implementation-agenda">Implementation Agenda&lt;/h2>
&lt;p>As first step implement defragmentation during maintenance windows. Subsequently, we will add zero-downtime upgrades and defragmentation.&lt;/p>
&lt;h2 id="workflow">Workflow&lt;/h2>
&lt;h3 id="deployment-workflow">Deployment workflow&lt;/h3>
&lt;p>&lt;img src="https://gardener.cloud/__resources/controller_6d5b8f.png" alt="controller-diagram">&lt;/p>
&lt;h3 id="defragmentation-workflow">Defragmentation workflow&lt;/h3>
&lt;p>&lt;img src="https://gardener.cloud/__resources/defrag_da50bf.png" alt="defrag-diagram">&lt;/p></description></item><item><title>Docs: Machine Controller Manager</title><link>https://gardener.cloud/docs/other-components/machine-controller-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/machine-controller-manager/</guid><description>
&lt;h1 id="machine-controller-manager">machine-controller-manager&lt;/h1>
&lt;p>&lt;a href="https://concourse.ci.gardener.cloud/teams/gardener/pipelines/machine-controller-manager-master/jobs/master-head-update-job">&lt;img src="https://concourse.ci.gardener.cloud/api/v1/teams/gardener/pipelines/machine-controller-manager-master/jobs/master-head-update-job/badge" alt="CI Build status">&lt;/a>
&lt;a href="https://goreportcard.com/report/github.com/gardener/machine-controller-manager">&lt;img src="https://goreportcard.com/badge/github.com/gardener/machine-controller-manager" alt="Go Report Card">&lt;/a>&lt;/p>
&lt;p>⚠️ We are in the progress of migrating and deprecating all the in-tree providers to OOT. Please avoid making any new feature enhancements to the intree providers. Kindly make it on the &lt;a href="https://github.com/gardener/?q=machine-controller-manager-provider&amp;amp;type=&amp;amp;language=">OOT providers available here&lt;/a>. More details on adding &lt;a href="https://gardener.cloud/docs/other-components/machine-controller-manager/docs/development/cp_support_new/">new OOT providers can be found here&lt;/a>.&lt;/p>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;p>Machine Controller Manager aka MCM is a group of cooperative controllers that manage the lifecycle of the worker machines. It is inspired by the design of Kube Controller Manager in which various sub controllers manage their respective Kubernetes Clients. MCM gives you the following benefits:&lt;/p>
&lt;ul>
&lt;li>seamlessly manage machines/nodes with a declarative API (of course, across different cloud providers)&lt;/li>
&lt;li>integrate generically with the cluster autoscaler&lt;/li>
&lt;li>plugin with tools such as the node-problem-detector&lt;/li>
&lt;li>transport the immutability design principle to machine/nodes&lt;/li>
&lt;li>implement e.g. rolling upgrades of machines/nodes&lt;/li>
&lt;/ul>
&lt;p>MCM supports following providers. These provider code is maintained externally (out-of-tree), and the links for the same are linked below:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-alicloud">Alicloud&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-aws">AWS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-azure">Azure&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-equinix-metal">Equinix Metal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-gcp">GCP&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-kubevirt">KubeVirt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/metal-stack/machine-controller-manager-provider-metal">Metal Stack&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-openstack">Openstack&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-vsphere">V Sphere&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/machine-controller-manager-provider-yandex">Yandex&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>It can easily be extended to support other cloud providers as well.&lt;/p>
&lt;p>Example of managing machine:&lt;/p>
&lt;pre>&lt;code>kubectl create/get/delete machine vm1
&lt;/code>&lt;/pre>&lt;h2 id="key-terminologies">Key terminologies&lt;/h2>
&lt;p>Nodes/Machines/VMs are different terminologies used to represent similar things. We use these terms in the following way&lt;/p>
&lt;ol>
&lt;li>VM: A virtual machine running on any cloud provider. It could also refer to a physical machine (PM) in case of a bare metal setup.&lt;/li>
&lt;li>Node: Native kubernetes node objects. The objects you get to see when you do a &lt;em>&amp;ldquo;kubectl get nodes&amp;rdquo;&lt;/em>. Although nodes can be either physical/virtual machines, for the purposes of our discussions it refers to a VM.&lt;/li>
&lt;li>Machine: A VM that is provisioned/managed by the Machine Controller Manager.&lt;/li>
&lt;/ol>
&lt;h1 id="design-of-machine-controller-manager">Design of Machine Controller Manager&lt;/h1>
&lt;p>The design of the Machine Controller Manager is influenced by the Kube Controller Manager, where-in multiple sub-controllers are used to manage the Kubernetes clients.&lt;/p>
&lt;h2 id="design-principles">Design Principles&lt;/h2>
&lt;p>It&amp;rsquo;s designed to run in the master plane of a Kubernetes cluster. It follows the best principles and practices of writing controllers, including, but not limited to:&lt;/p>
&lt;ul>
&lt;li>Reusing code from kube-controller-manager&lt;/li>
&lt;li>leader election to allow HA deployments of the controller&lt;/li>
&lt;li>&lt;code>workqueues&lt;/code> and multiple thread-workers&lt;/li>
&lt;li>&lt;code>SharedInformers&lt;/code> that limit to minimum network calls, de-serialization and provide helpful create/update/delete events for resources&lt;/li>
&lt;li>rate-limiting to allow back-off in case of network outages and general instability of other cluster components&lt;/li>
&lt;li>sending events to respected resources for easy debugging and overview&lt;/li>
&lt;li>Prometheus metrics, health and (optional) profiling endpoints&lt;/li>
&lt;/ul>
&lt;h2 id="objects-of-machine-controller-manager">Objects of Machine Controller Manager&lt;/h2>
&lt;p>Machine Controller Manager reconciles a set of Custom Resources namely &lt;code>MachineDeployment&lt;/code>, &lt;code>MachineSet&lt;/code> and &lt;code>Machines&lt;/code> which are managed &amp;amp; monitored by their controllers MachineDeployment Controller, MachineSet Controller, Machine Controller respectively along with another cooperative controller called the Safety Controller.&lt;/p>
&lt;p>Machine Controller Manager makes use of 4 CRD objects and 1 Kubernetes secret object to manage machines. They are as follows:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Custom ResourceObject&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>MachineClass&lt;/code>&lt;/td>
&lt;td>A &lt;code>MachineClass&lt;/code> represents a template that contains cloud provider specific details used to create machines.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Machine&lt;/code>&lt;/td>
&lt;td>A &lt;code>Machine&lt;/code> represents a VM which is backed by the cloud provider.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>MachineSet&lt;/code>&lt;/td>
&lt;td>A &lt;code>MachineSet&lt;/code> ensures that the specified number of &lt;code>Machine&lt;/code> replicas are running at a given point of time.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>MachineDeployment&lt;/code>&lt;/td>
&lt;td>A &lt;code>MachineDeployment&lt;/code> provides a declarative update for &lt;code>MachineSet&lt;/code> and &lt;code>Machines&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Secret&lt;/code>&lt;/td>
&lt;td>A &lt;code>Secret&lt;/code> here is a Kubernetes secret that stores cloudconfig (initialization scripts used to create VMs) and cloud specific credentials.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>See &lt;a href="https://gardener.cloud/docs/other-components/machine-controller-manager/docs/docs/apis/">here&lt;/a> for CRD API Documentation&lt;/p>
&lt;h2 id="components-of-machine-controller-manager">Components of Machine Controller Manager&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Controller&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>MachineDeployment controller&lt;/td>
&lt;td>Machine Deployment controller reconciles the &lt;code>MachineDeployment&lt;/code> objects and manages the lifecycle of &lt;code>MachineSet&lt;/code> objects. &lt;code>MachineDeployment&lt;/code> consumes provider specific &lt;code>MachineClass` in its &lt;code>spec.template.spec&lt;/code> which is the template of the VM spec that would be spawned on the cloud by MCM.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MachineSet controller&lt;/td>
&lt;td>MachineSet controller reconciles the &lt;code>MachineSet&lt;/code> objects and manages the lifecycle of &lt;code>Machine&lt;/code> objects.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Safety controller&lt;/td>
&lt;td>There is a Safety Controller responsible for handling the unidentified or unknown behaviours from the cloud providers. Safety Controller:
&lt;ul>
&lt;li>
freezes the MachineDeployment controller and MachineSet controller if the number of &lt;code>Machine&lt;/code> objects goes beyond a certain threshold on top of &lt;code>Spec.replicas&lt;/code>. It can be configured by the flag &lt;code>--safety-up&lt;/code> or &lt;code>--safety-down&lt;/code> and also &lt;code>--machine-safety-overshooting-period`&lt;/code>.
&lt;/li>
&lt;li>
freezes the functionality of the MCM if either of the &lt;code>target-apiserver&lt;/code> or the &lt;code>control-apiserver&lt;/code> is not reachable.
&lt;/li>
&lt;li>
unfreezes the MCM automatically once situation is resolved to normal. A &lt;code>freeze&lt;/code> label is applied on &lt;code>MachineDeployment&lt;/code>/&lt;code>MachineSet&lt;/code> to enforce the freeze condition.
&lt;/li>
&lt;/ul>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Along with the above Custom Controllers and Resources, MCM requires the &lt;code>MachineClass&lt;/code> to use K8s &lt;code>Secret&lt;/code> that stores cloudconfig (initialization scripts used to create VMs) and cloud specific credentials. All these controllers work in an co-operative manner. They form a parent-child relationship with &lt;code>MachineDeployment&lt;/code> Controller being the grandparent, &lt;code>MachineSet&lt;/code> Controller being the parent, and &lt;code>Machine&lt;/code> Controller being the child.&lt;/p>
&lt;h2 id="development">Development&lt;/h2>
&lt;p>To start using or developing the Machine Controller Manager, see the documentation in the &lt;code>/docs&lt;/code> repository, please &lt;a href="https://gardener.cloud/docs/other-components/machine-controller-manager/docs/">find the index here&lt;/a>.&lt;/p>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;p>An FAQ is available &lt;a href="https://gardener.cloud/docs/other-components/machine-controller-manager/docs/faq/">here&lt;/a>&lt;/p>
&lt;h2 id="cluster-api-implementation">Cluster-api Implementation&lt;/h2>
&lt;ul>
&lt;li>&lt;code>cluster-api&lt;/code> branch of machine-controller-manager implements the machine-api aspect of the &lt;a href="https://github.com/kubernetes-sigs/cluster-api">cluster-api project&lt;/a>.&lt;/li>
&lt;li>Link: &lt;a href="https://github.com/gardener/machine-controller-manager/tree/cluster-api">https://github.com/gardener/machine-controller-manager/tree/cluster-api&lt;/a>&lt;/li>
&lt;li>Once cluster-api project gets stable, we may make &lt;code>master&lt;/code> branch of MCM as well cluster-api compliant, with well-defined migration notes.&lt;/li>
&lt;/ul></description></item></channel></rss>