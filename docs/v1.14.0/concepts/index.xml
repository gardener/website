<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concepts on Gardener</title><link>https://gardener.cloud/v1.14.0/concepts/</link><description>Recent content in Concepts on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/v1.14.0/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Backup and Restore</title><link>https://gardener.cloud/v1.14.0/concepts/backup-restore/backup-restore/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/backup-restore/backup-restore/</guid><description>Backup and restore Kubernetes uses Etcd as the key-value store for its resource definitions. Gardener supports the backup and restore of etcd. It is the responsibility of the shoot owners to backup the workload data.
Gardener uses etcd-backup-restore component to backup the etcd backing the Shoot cluster regularly and restore in case of disaster. It is deployed as sidecar via etcd-druid. This doc mainly focuses on the backup and restore configuration used by Gardener when deploying these components.</description></item><item><title>Automatic Deployment of Gardenlets</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/deploy_gardenlet_automatically/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/deploy_gardenlet_automatically/</guid><description>Automatic Deployment of Gardenlets The gardenlet can automatically deploy itself into shoot clusters, and register this cluster as a seed cluster. These clusters are called &amp;ldquo;managed seeds&amp;rdquo; (aka &amp;ldquo;shooted seeds&amp;rdquo;). This procedure is the preferred way to add additional seed clusters, because shoot clusters already come with production-grade qualities that are also demanded for seed clusters.
Prerequisites The only prerequisite is to register an initial cluster as a seed cluster that has already a gardenlet deployed:</description></item><item><title>Deploy a Gardenlet Manually</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/deploy_gardenlet_manually/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/deploy_gardenlet_manually/</guid><description>Deploy a Gardenlet Manually Manually deploying a gardenlet is required in the following cases:
The Kubernetes cluster to be registered as a seed cluster has no public endpoint, because it is behind a firewall. The gardenlet must then be deployed into the cluster itself.
The Kubernetes cluster to be registered as a seed cluster is managed externally (the Kubernetes cluster is not a shoot cluster, so Automatic Deployment of Gardenlets cannot be used).</description></item><item><title>Deploying Gardenlets</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/deploy_gardenlet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/deploy_gardenlet/</guid><description>Deploying Gardenlets Gardenlets act as decentral &amp;ldquo;agents&amp;rdquo; to manage shoot clusters of a seed cluster.
To support scaleability in an automated way, gardenlets are deployed automatically. However, you can still deploy gardenlets manually to be more flexible, for example, when shoot clusters that need to be managed by Gardener are behind a firewall. The gardenlet only requires network connectivity from the gardenlet to the Garden cluster (not the other way round), so it can be used to register Kubernetes clusters with no public endpoint.</description></item><item><title>Deploying the Gardener into a Kubernetes cluster</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/setup_gardener/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/setup_gardener/</guid><description>Deploying the Gardener into a Kubernetes cluster Similar to Kubernetes, Gardener consists out of control plane components (Gardener API server, Gardener controller manager, Gardener scheduler), and an agent component (Gardenlet). The control plane is deployed in the so-called garden cluster while the agent is installed into every seed cluster. Please note that it is possible to use the garden cluster as seed cluster by simply deploying the Gardenlet into it.</description></item><item><title>Deploying the previous Gardener versions and a Seed into an AKS cluster</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/aks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/aks/</guid><description>Deploying the previous Gardener versions and a Seed into an AKS cluster This document demonstrates how to install Gardener into an existing AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the same cluster for the sake of simplicity .
Please note that this document is to provide you an example installation and is not to be used in a production environment since there are some certificates hardcoded, non-HA and non-TLS-enabled etcd setup.</description></item><item><title>Feature Gates</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/feature_gates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/feature_gates/</guid><description>Feature Gates in Gardener This page contains an overview of the various feature gates an administrator can specify on different Gardener components.
Overview Feature gates are a set of key=value pairs that describe Gardener features. You can turn these features on or off using the a component configuration file for a specific component.
Each Gardener component lets you enable or disable a set of feature gates that are relevant to that component.</description></item><item><title>Image Vector</title><link>https://gardener.cloud/v1.14.0/concepts/deployment/image_vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/deployment/image_vector/</guid><description>Image Vector The Gardenlet is deploying several different container images into the seed and the shoot clusters. The image repositories and tags are defined in a central image vector file. Obviously, the image versions defined there must fit together with the deployment manifests (e.g., some command-line flags do only exist in certain versions).
Example images:- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.0&amp;#34;version:1.11.x- name:pause-containersourceRepository:github.com/kubernetes/kubernetes/blob/master/build/pause/Dockerfilerepository:gcr.io/google_containers/pause-amd64tag:&amp;#34;3.1&amp;#34;version:&amp;#34;&amp;gt;= 1.12&amp;#34;...That means that the Gardenlet will use the pause-container in with tag 3.0 for all seed/shoot clusters with Kubernetes version 1.</description></item><item><title>Machine Controller Manager</title><link>https://gardener.cloud/v1.14.0/concepts/mcm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/v1.14.0/concepts/mcm/</guid><description>machine-controller-manager
:warning: We are in the progress of migrating and deprecating all the in-tree providers to OOT. Please avoid making any new feature enhancements to the intree providers. Kindly make it on the OOT providers available here. More details on adding new OOT providers can be found here.
Machine Controller Manager (MCM) manages VMs as another kubernetes custom resource. It provides a declarative way to manage VMs.
MCM supports following providers.</description></item></channel></rss>