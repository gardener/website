<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener â€“ Install Gardener</title><link>https://gardener.cloud/docs/guides/install_gardener/</link><description>Recent content in Install Gardener on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/guides/install_gardener/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Hardening the Gardener Community Setup</title><link>https://gardener.cloud/docs/guides/install_gardener/secure-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/guides/install_gardener/secure-setup/</guid><description>
&lt;h1 id="hardening-the-gardener-community-setup">Hardening the Gardener Community Setup&lt;/h1>
&lt;h2 id="context">Context&lt;/h2>
&lt;p>Gardener stakeholders in the Open Source community usually use the &lt;a href="https://github.com/gardener/landscape-setup">Gardener Setup Scripts&lt;/a>, to create a Garden cluster based on Kubernetes v1.9 which then can be used to create Shoot clusters based on Kubernetes v1.10, v1.11 and v1.12. Shoot clusters can play the following roles in a Gardener landscape:&lt;/p>
&lt;ul>
&lt;li>Seed cluster&lt;/li>
&lt;li>Shoot cluster&lt;/li>
&lt;/ul>
&lt;p>As Alban Crequy from Kinvolk has recommended in his recent Gardener blog &lt;a href="https://gardener.cloud/docs/guides/applications/insecure-configuration/">Auditing Kubernetes for Secure Setup&lt;/a> the Gardener Team at SAP has applied several means to harden the Gardener landscapes at SAP.&lt;/p>
&lt;h2 id="recommendations">Recommendations&lt;/h2>
&lt;h3 id="mitigation-for-gardener-cve-2018-2475">Mitigation for Gardener CVE-2018-2475&lt;/h3>
&lt;p>The following recommendations describe how you can harden your Gardener Community Setup by adding a Seed cluster hardened with network policies.&lt;/p>
&lt;ul>
&lt;li>Use the Gardener Setup Scripts to create a Garden cluster in a dedicated IaaS account&lt;/li>
&lt;li>Create a Shoot cluster in a different IaaS account&lt;/li>
&lt;li>As a precaution you should not deploy the Kubernetes dashboard on this Shoot cluster&lt;/li>
&lt;li>Register this newly created Shoot cluster as a Seed cluster in the Gardener&lt;/li>
&lt;li>End user Shoot clusters can then be created using this newly created Seed cluster (which in turn is a Shoot cluster).&lt;/li>
&lt;/ul>
&lt;p>A tutorial on how to create a shooted seed cluster can be found &lt;a href="https://gardener.cloud/docs/guides/install_gardener/setup-seed/">here&lt;/a>.&lt;/p>
&lt;p>The rational behind this activity is, that Calico network policies harden this Seed cluster but the community installer uses Flannel which does not offer these features for the Garden cluster.&lt;/p>
&lt;p>When you have added a hardened Seed cluster you are expected not be vulnerable to the Gardener &lt;a href="https://groups.google.com/forum/#!topic/gardener/Pom2Y70cDpw">CVE-2018-2475&lt;/a> anymore.&lt;/p>
&lt;h3 id="mitigation-for-kubernetes-cve-2018-1002105">Mitigation for Kubernetes CVE-2018-1002105&lt;/h3>
&lt;p>In addition when you follow the recommendations in the &lt;a href="https://groups.google.com/forum/#!topic/gardener/2icxEz0RAK4">recent Gardener Security Announcement&lt;/a> you are expected not be vulnerable to the Kubernetes CVE-2018-1002105 with your hardened Gardener Community Setup.&lt;/p>
&lt;h2 id="alternative-approach">Alternative Approach&lt;/h2>
&lt;p>For this alternative approach there is no Gardener blog available, it is not part of the Gardener Setup Scripts, but it was tested by the Gardener Team at SAP. Use GKE to host a Garden cluster based on Kubernetes v1.10, v1.11 and v1.12 (without the Kubernetes dashboard) in a dedicated GCP account. If you do this by your own, please ensure that the network policies are turned on, which might not be the case by default. Then you can apply the security configuration which Alban Crequy from Kinvolk has recommended in his &lt;a href="https://gardener.cloud/docs/guides/applications/insecure-configuration/">blog&lt;/a> directly in the Garden cluster and create Shoot clusters from there in a different IaaS account.&lt;/p></description></item><item><title>Docs: Manually Adding a Node to an Existing Cluster</title><link>https://gardener.cloud/docs/guides/install_gardener/add-node-to-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/guides/install_gardener/add-node-to-cluster/</guid><description>
&lt;h1 id="manually-adding-a-node-to-an-existing-cluster">Manually adding a node to an existing cluster&lt;/h1>
&lt;p>Gardener has an excellent ability to &lt;a href="https://gardener.cloud/blog/2021-01/00/machine-controller-manager/">automatically scale machines&lt;/a> for the cluster. From the point of view
of scalability, there is no need for manual intervention.&lt;/p>
&lt;p>This tutorial is useful for those end-users who need specifically configured nodes, which are not yet supported
by Gardener. For example: an end-user who wants some workload that requires &lt;code>runnc&lt;/code> instead of &lt;code>runc&lt;/code> as container
runtime.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/teaser_eb7b15.svg" alt="teaser">&lt;/p>
&lt;h2 id="disclaimer">Disclaimer&lt;/h2>
&lt;blockquote>
&lt;p>Here we will look at the steps on how to add a node to an existing cluster without the support of Gardener.
Such a node will not be managed by Gardener, and if it goes down for any reason, Gardener will not be
responsible to replace it.&lt;/p>
&lt;/blockquote>
&lt;h2 id="how">How&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Create a new instance in the same VPC/network as other machines in the cluster. You should be able to ssh into the machine. So save its private key, and assign a public IP to it. If adding a public IP is not preferred, then ssh into any other machine in the cluster, and then ssh from there into the new machine using its private key.&lt;/p>
&lt;p>To ssh into a machine which is already in the cluster, use the steps defined &lt;a href="https://gardener.cloud/docs/guides/monitoring_and_troubleshooting/shell-to-node/" title="ssh-into-node">here&lt;/a>.&lt;/p>
&lt;p>Attach the same IAM role to the new machine which is attached to the existing machines in the cluster. This is required by kubelet in the new machine so that it can contact the cloud provider to query the node&amp;rsquo;s name.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On the new machine, create file &lt;code>/var/lib/kubelet/kubeconfig-bootstrap&lt;/code> with the following content:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>current-context: kubelet-bootstrap@default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusters:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- cluster:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> certificate-authority-data: &amp;lt;CA Certificate&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server: &amp;lt;Server&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>contexts:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- context:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cluster: default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user: kubelet-bootstrap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: kubelet-bootstrap@default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>users:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- name: kubelet-bootstrap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> as-user-extra: {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> token: &amp;lt;Token&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>ssh into an existing node, and run these commands to get the values of &lt;CA Certificate> and &lt;Server> to be replaced in above file:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&amp;lt;Servr&amp;gt;&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> /opt/bin/hyperkube kubectl &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --kubeconfig /var/lib/kubelet/kubeconfig-real &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> config view &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> -o go-template=&lt;span style="color:#a31515">&amp;#39;{{index .clusters 0 &amp;#34;cluster&amp;#34; &amp;#34;server&amp;#34;}}&amp;#39;&lt;/span> &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --raw
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&amp;lt;CA Certificate&amp;gt;&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/opt/bin/hyperkube kubectl &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --kubeconfig /var/lib/kubelet/kubeconfig-real &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> config view &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> -o go-template=&lt;span style="color:#a31515">&amp;#39;{{index .clusters 0 &amp;#34;cluster&amp;#34; &amp;#34;certificate-authority-data&amp;#34;}}&amp;#39;&lt;/span> &lt;span style="color:#a31515">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">&lt;/span> --raw
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>
&lt;p>&amp;lt;Token&amp;gt;&lt;br>
The kubelet on the new machine needs a bootstrap token to authenticate with the kube-apiserver when adding itself to the cluster. Kube-apiserver uses a secret in the &lt;code>kube-system&lt;/code> namespace to authenticate this token. This token is valid for 90 minutes from the time of creation, and the corresponding secret captures this detail in its &lt;code>.data.expiration&lt;/code> field. The name of this secret is of the format &lt;code>bootstrap-token-*&lt;/code>. Gardener takes care of creating new bootstrap tokens, and the corresponding secrets.
To get an unexpired token, find the secrets with the name format &lt;code>bootstrap-token-*&lt;/code> in the &lt;code>kube-system&lt;/code> namespace in the cluster, and pick the one with minimum age. Eg. &lt;code>bootstrap-token-abcdef&lt;/code>.&lt;br>
Run these commands to get the token:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> tokenid=&lt;span style="color:#00f">$(&lt;/span>kubectl get secret bootstrap-token-abcdef -n kube-system -o go-template=&lt;span style="color:#a31515">&amp;#39;{{index .data &amp;#34;token-id&amp;#34;}}&amp;#39;&lt;/span> | base64 --decode&lt;span style="color:#00f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tokensecret=&lt;span style="color:#00f">$(&lt;/span>kubectl get secret bootstrap-token-abcdef -n kube-system -o go-template=&lt;span style="color:#a31515">&amp;#39;{{index .data &amp;#34;token-secret&amp;#34;}}&amp;#39;&lt;/span> | base64 --decode&lt;span style="color:#00f">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo $tokenid.$tokensecret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The value of $TOKEN will be &lt;code>tokenid.tokensecret&lt;/code>. Replace $TOKEN in above file with this value&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Copy contents of the files - &lt;code>/var/lib/kubelet/config/kubelet&lt;/code>, &lt;code>/var/lib/kubelet/ca.crt&lt;/code> and &lt;code>/etc/systemd/system/kubelet.service&lt;/code> - from an existing node to the new node&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run the following command in the new node to start the kubelet:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl enable kubelet &amp;amp;&amp;amp; systemctl start kubelet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The new node should be added to the existing cluster within a couple of minutes.&lt;/p></description></item><item><title>Docs: Setting Up a Seed Cluster</title><link>https://gardener.cloud/docs/guides/install_gardener/setup-seed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/guides/install_gardener/setup-seed/</guid><description>
&lt;h1 id="the-seed-cluster">The Seed Cluster&lt;/h1>
&lt;p>The &lt;a href="https://github.com/gardener/landscape-setup-template">landscape-setup-template&lt;/a> is meant to provide an as-simple-as-possible Gardener installation. Therefore it just registers the cluster where the Gardener is deployed on as a seed cluster. While this is easy, it might be insecure. Clusters created with Kubify don&amp;rsquo;t have network policies, for example. See &lt;a href="https://gardener.cloud/docs/guides/install_gardener/secure-setup/">Hardening the Gardener Community Setup&lt;/a> for more information.&lt;/p>
&lt;p>To have network policies on the seed cluster and avoid having the seed on the same cluster as the Gardener, the easiest option is probably to simply create a shoot and then register that shoot as seed. This way you can also leverage other advantages of shooted clusters for your seed, e.g. autoscaling.&lt;/p>
&lt;h2 id="setting-up-the-shoot">Setting up the Shoot&lt;/h2>
&lt;p>The first step is to create a shoot cluster. Unfortunately, the Gardener dashboard currently does not allow to change the CIDRs for the created shoot clusters, and your shoots won&amp;rsquo;t work if they have overlapping CIDR ranges with their corresponding seed cluster. So either your seed cluster is deployed with different CIDRs - not using the dashboard, but &lt;code>kubectl apply&lt;/code> and a yaml file - or all of your shoots on that seed need to be created this way. In order to be able to use the dashboard for the shoots, it makes sense to create the seed with different CIDRs.&lt;/p>
&lt;p>So, create yourself a shoot with modified CIDRs. You can find templates for the shoot manifest &lt;a href="https://github.com/gardener/gardener/tree/master/example">here&lt;/a>. You could, for example, change the CIDRs to this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> internal:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 10.254.112.0/22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodes: 10.254.0.0/19
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pods: 10.255.0.0/17
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 10.254.96.0/22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> services: 10.255.128.0/17
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vpc:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: 10.254.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 10.254.0.0/19
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Also make sure that your new seed cluster has enough resources for the expected number of shoots.&lt;/p>
&lt;h2 id="registering-the-shoot-as-seed">Registering the Shoot as Seed&lt;/h2>
&lt;p>The seed itself is a Kubernetes resource that can be deployed via a yaml file, but it has some dependencies. You can find templated versions of these files in the &lt;a href="https://github.com/gardener/landscape-setup/tree/0.5.0/components/seed-config">seed-config component&lt;/a> of the landscape-setup-template project. If you have set up your Gardener using this project, there should also be rendered versions of these files in the &lt;code>state/seed-config/&lt;/code> directory of your landscape folder (they are probably easier to work with). Examples for all these files can also be found in the aforementioned example folder in the Gardener repo.&lt;/p>
&lt;h3 id="1-seed-namespace">1. Seed Namespace&lt;/h3>
&lt;p>First, you should create a namespace for your new seed and everything that belongs to it. This is not necessary, but it will keep your cluster organized. For this example, the namespace will be called &lt;code>seed-test&lt;/code>.&lt;/p>
&lt;h3 id="2-cloud-provider-secret">2. Cloud Provider Secret&lt;/h3>
&lt;p>The Gardener needs to create resources on the seed and thus needs a kubeconfig for it. It is provided with the cloud provider secret (below is an example for AWS).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: test-seed-secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: seed-test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudprofile.garden.sapcloud.io/name: aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: Opaque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> accessKeyID: &amp;lt;base64-encoded AWS access key&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretAccessKey: &amp;lt;base64-encoded AWS secret key&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubeconfig: &amp;lt;base64-encoded kubeconfig&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Deploy the secret into your seed namespace. Apart from the kubeconfig, also infrastructure credentials are required. They will only be used for the etcd backup, so in case for AWS, S3 privileges should be sufficient.&lt;/p>
&lt;h3 id="3-secretbinding-for-cloud-provider-secret">3. Secretbinding for Cloud Provider Secret&lt;/h3>
&lt;p>Create a secretbinding for your cloud provider secret:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: SecretBinding
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: test-seed-secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: seed-test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudprofile.garden.sapcloud.io/name: aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: test-seed-secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># namespace: only required if in different namespace than referenced secret&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>quotas: []
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can give it the same name as the referenced secret.&lt;/p>
&lt;h3 id="4-cloudprofile">4. Cloudprofile&lt;/h3>
&lt;p>The cloudprofile contains the information which shoots can be created with this seed. You could create a new cloudprofile, but you can also just reference the existing cloudprofile if you don&amp;rsquo;t want to change anything.&lt;/p>
&lt;h3 id="5-seed">5. Seed&lt;/h3>
&lt;p>Now the seed resource can be created. Choose a name, reference cloudprofile and secretbinding, fill in your ingress domain, and set the CIDRs to the same values as in the underlying shoot cluster.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Seed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: aws-secure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> provider:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: test-seed-secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: seed-test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dns:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ingressDomain: ingress.&amp;lt;your cluster domain&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodes: 10.254.0.0/19
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pods: 10.255.0.0/17
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> services: 10.255.128.0/17
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="6-hide-original-seed">6. Hide Original Seed&lt;/h3>
&lt;p>In the dashboard, it is not possible to select the seed for a shoot (it is possible when deploying the shoot using a yaml file, however). Since both seeds probably reference the same cloudprofile, the Gardener will try to distribute the shoots equally among both seeds.&lt;/p>
&lt;p>To solve this problem, edit the original seed and set its &lt;code>spec.visible&lt;/code> field to &lt;code>false&lt;/code>. This will prevent the Gardener from choosing this seed, so now all shoots created via the dashboard should have their control plane on the new, more secure seed.&lt;/p></description></item></channel></rss>