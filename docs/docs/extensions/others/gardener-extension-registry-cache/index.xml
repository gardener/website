<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Registry Cache on Gardener</title><link>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/</link><description>Recent content in Registry Cache on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuring the Registry Cache Extension</title><link>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/registry-cache/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/registry-cache/configuration/</guid><description>&lt;h1 id="configuring-the-registry-cache-extension">Configuring the Registry Cache Extension&lt;a class="td-heading-self-link" href="#configuring-the-registry-cache-extension" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;h3 id="use-case">Use Case&lt;a class="td-heading-self-link" href="#use-case" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;p>For a Shoot cluster, the containerd daemon of every Node goes to the internet and fetches an image that it doesn&amp;rsquo;t have locally in the Node&amp;rsquo;s image cache. New Nodes are often created due to events such as auto-scaling (scale up), rolling update, or replacement of unhealthy Node. Such a new Node would need to pull all of the images of the Pods running on it from the internet because the Node&amp;rsquo;s cache is initially empty. Pulling an image from a registry produces network traffic and registry costs. To avoid these network traffic and registry costs, you can use the registry-cache extension to run a registry as pull-through cache.&lt;/p></description></item><item><title>Configuring the Registry Mirror Extension</title><link>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/registry-mirror/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/registry-mirror/configuration/</guid><description>&lt;h1 id="configuring-the-registry-mirror-extension">Configuring the Registry Mirror Extension&lt;a class="td-heading-self-link" href="#configuring-the-registry-mirror-extension" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;h3 id="use-case">Use Case&lt;a class="td-heading-self-link" href="#use-case" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;p>containerd allows registry mirrors to be configured. Use cases are:&lt;/p>
&lt;ul>
&lt;li>Usage of public mirror(s) - for example, circumvent issues with the upstream registry such as rate limiting, outages, and others.&lt;/li>
&lt;li>Usage of private mirror(s) - for example, reduce network costs by using a private mirror running in the same network.&lt;/li>
&lt;/ul>
&lt;h3 id="solution">Solution&lt;a class="td-heading-self-link" href="#solution" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;p>The registry-mirror extension allows the registry mirror configuration to be configured via the Shoot spec directly.&lt;/p></description></item><item><title>Deploying Registry Cache Extension in Gardener's Local Setup with Provider Extensions</title><link>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/getting-started-remotely/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/getting-started-remotely/</guid><description>&lt;h1 id="deploying-registry-cache-extension-in-gardeners-local-setup-with-provider-extensions">Deploying Registry Cache Extension in Gardener&amp;rsquo;s Local Setup with Provider Extensions&lt;a class="td-heading-self-link" href="#deploying-registry-cache-extension-in-gardeners-local-setup-with-provider-extensions" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;ul>
&lt;li>Make sure that you have a running local Gardener setup with enabled provider extensions. The steps to complete this can be found in the &lt;a href="https://gardener.cloud/docs/gardener/deployment/getting_started_locally_with_extensions/">Deploying Gardener Locally and Enabling Provider-Extensions&lt;/a> guide.&lt;/li>
&lt;/ul>
&lt;h2 id="setting-up-the-registry-cache-extension">Setting up the Registry Cache Extension&lt;a class="td-heading-self-link" href="#setting-up-the-registry-cache-extension" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>Make sure that your &lt;code>KUBECONFIG&lt;/code> environment variable is targeting the local Gardener cluster.&lt;/p>
&lt;p>The location of the Gardener project from the Gardener setup step is expected to be under the same root (e.g. &lt;code>~/go/src/github.com/gardener/&lt;/code>). If this is not the case, the location of Gardener project should be specified in &lt;code>GARDENER_REPO_ROOT&lt;/code> environment variable:&lt;/p></description></item><item><title>Deploying Registry Cache Extension Locally</title><link>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/getting-started-locally/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/getting-started-locally/</guid><description>&lt;h1 id="deploying-registry-cache-extension-locally">Deploying Registry Cache Extension Locally&lt;a class="td-heading-self-link" href="#deploying-registry-cache-extension-locally" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;h2 id="prerequisites">Prerequisites&lt;a class="td-heading-self-link" href="#prerequisites" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;ul>
&lt;li>Make sure that you have a running local Gardener setup. The steps to complete this can be found in the &lt;a href="https://gardener.cloud/docs/gardener/deployment/getting_started_locally/">Deploying Gardener Locally guide&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="setting-up-the-registry-cache-extension">Setting up the Registry Cache Extension&lt;a class="td-heading-self-link" href="#setting-up-the-registry-cache-extension" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>Make sure that your &lt;code>KUBECONFIG&lt;/code> environment variable is targeting the local Gardener cluster. When this is ensured, run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make extension-up
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The corresponding make target will build the extension image, load it into the kind cluster Nodes, and deploy the registry-cache ControllerDeployment and ControllerRegistration resources. The container image in the ControllerDeployment will be the image that was build and loaded into the kind cluster Nodes.&lt;/p></description></item><item><title>Developer Docs for Gardener Extension Registry Cache</title><link>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/extension-registry-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/extension-registry-cache/</guid><description>&lt;h1 id="developer-docs-for-gardener-extension-registry-cache">Developer Docs for Gardener Extension Registry Cache&lt;a class="td-heading-self-link" href="#developer-docs-for-gardener-extension-registry-cache" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;p>This document outlines how Shoot reconciliation and deletion works for a Shoot with the registry-cache extension enabled.&lt;/p>
&lt;h2 id="shoot-reconciliation">Shoot Reconciliation&lt;a class="td-heading-self-link" href="#shoot-reconciliation" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>This section outlines how the reconciliation works for a Shoot with the registry-cache extension enabled.&lt;/p>
&lt;h3 id="extension-enablement--reconciliation">Extension Enablement / Reconciliation&lt;a class="td-heading-self-link" href="#extension-enablement--reconciliation" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;p>This section outlines how the extension enablement/reconciliation works, e.g., the extension has been added to the Shoot spec.&lt;/p>
&lt;ol>
&lt;li>As part of the Shoot reconciliation flow, the gardenlet deploys the &lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/extension/">Extension&lt;/a> resource.&lt;/li>
&lt;li>The registry-cache extension reconciles the Extension resource. &lt;a href="https://github.com/gardener/gardener-extension-registry-cache/blob/main/pkg/controller/cache/actuator.go">pkg/controller/cache/actuator.go&lt;/a> contains the implementation of the &lt;a href="https://github.com/gardener/gardener/blob/v1.88.0/extensions/pkg/controller/extension/actuator.go">extension.Actuator&lt;/a> interface. The reconciliation of an Extension of type &lt;code>registry-cache&lt;/code> consists of the following steps:
&lt;ol>
&lt;li>The registry-cache extension deploys resources to the Shoot cluster via ManagedResource. For every configured upstream, it creates a StatefulSet (with PVC), Service, and other resources.&lt;/li>
&lt;li>It lists all Services from the &lt;code>kube-system&lt;/code> namespace that have the &lt;code>upstream-host&lt;/code> label. It will return an error (and retry in exponential backoff) until the Services count matches the configured registries count.&lt;/li>
&lt;li>When there is a Service created for each configured upstream registry, the registry-cache extension populates the Extension resource status. In the Extension status, for each upstream, it maintains an endpoint (in the format &lt;code>http://&amp;lt;cluster-ip&amp;gt;:5000&lt;/code>) which can be used to access the registry cache from within the Shoot cluster. &lt;code>&amp;lt;cluster-ip&amp;gt;&lt;/code> is the cluster IP of the registry cache Service. The cluster IP of a Service is assigned by the Kubernetes API server on Service creation.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>As part of the Shoot reconciliation flow, the gardenlet deploys the &lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/operatingsystemconfig/">OperatingSystemConfig&lt;/a> resource.&lt;/li>
&lt;li>The registry-cache extension serves a webhook that mutates the OperatingSystemConfig resource for Shoots having the registry-cache extension enabled (the corresponding namespace gets labeled by the gardenlet with &lt;code>extensions.gardener.cloud/registry-cache=true&lt;/code>). &lt;a href="https://github.com/gardener/gardener-extension-registry-cache/blob/main/pkg/webhook/cache/ensurer.go">pkg/webhook/cache/ensurer.go&lt;/a> contains an implementation of the &lt;a href="https://github.com/gardener/gardener/blob/v1.88.0/extensions/pkg/webhook/controlplane/genericmutator/mutator.go">genericmutator.Ensurer&lt;/a> interface.
&lt;ol>
&lt;li>The webhook appends or updates &lt;code>RegistryConfig&lt;/code> entries in the &lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/operatingsystemconfig/#cri-support">OperatingSystemConfig CRI&lt;/a> configuration that corresponds to configured registry caches in the Shoot. The &lt;code>RegistryConfig&lt;/code> readiness probe is enabled so that &lt;a href="https://gardener.cloud/docs/gardener/concepts/node-agent/">gardener-node-agent&lt;/a> creates a &lt;code>hosts.toml&lt;/code> containerd registry configuration file when all &lt;code>RegistryConfig&lt;/code> hosts are reachable.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="extension-disablement">Extension Disablement&lt;a class="td-heading-self-link" href="#extension-disablement" aria-label="Heading self-link">&lt;/a>&lt;/h3>&lt;p>This section outlines how the extension disablement works, i.e., the extension has to be removed from the Shoot spec.&lt;/p></description></item><item><title>How to provide credentials for upstream registry?</title><link>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/registry-cache/upstream-credentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/registry-cache/upstream-credentials/</guid><description>&lt;h1 id="how-to-provide-credentials-for-upstream-registry">How to provide credentials for upstream registry?&lt;a class="td-heading-self-link" href="#how-to-provide-credentials-for-upstream-registry" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;p>In Kubernetes, to pull images from private container image registries you either have to specify an image pull Secret (see &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/">Pull an Image from a Private Registry&lt;/a>) or you have to configure the kubelet to dynamically retrieve credentials using a credential provider plugin (see &lt;a href="https://kubernetes.io/docs/tasks/administer-cluster/kubelet-credential-provider/">Configure a kubelet image credential provider&lt;/a>). When pulling an image, the kubelet is providing the credentials to the CRI implementation. The CRI implementation uses the provided credentials against the upstream registry to pull the image.&lt;/p></description></item><item><title>Observability</title><link>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/registry-cache/observability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/others/gardener-extension-registry-cache/registry-cache/observability/</guid><description>&lt;h1 id="registry-cache-observability">Registry Cache Observability&lt;a class="td-heading-self-link" href="#registry-cache-observability" aria-label="Heading self-link">&lt;/a>&lt;/h1>&lt;p>The &lt;code>registry-cache&lt;/code> extension exposes metrics for the registry caches running in the Shoot cluster so that they can be easily viewed by cluster owners and operators in the Shoot&amp;rsquo;s Prometheus and Plutono instances. The exposed monitoring data provides an overview of the performance of the pull-through caches, including hit rate and network traffic data.&lt;/p>
&lt;h2 id="metrics">Metrics&lt;a class="td-heading-self-link" href="#metrics" aria-label="Heading self-link">&lt;/a>&lt;/h2>&lt;p>A registry cache serves &lt;a href="https://github.com/distribution/distribution/blob/v3.0.0/registry/proxy/proxymetrics.go#L12-L21">several metrics&lt;/a>. The metrics are scraped by the &lt;a href="https://gardener.cloud/docs/gardener/monitoring/#shoot-prometheus">Shoot&amp;rsquo;s Prometheus instance&lt;/a>.&lt;/p></description></item></channel></rss>