<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Code</title><link>https://gardener.cloud/contribute/code/</link><description>Recent content in Code on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/contribute/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: CI/CD</title><link>https://gardener.cloud/docs/contribute/10_code/14_cicd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/10_code/14_cicd/</guid><description>
&lt;h1 id="cicd">CI/CD&lt;/h1>
&lt;p>As an execution environment for CI/CD workloads, we use &lt;a href="https://concourse-ci.org">Concourse&lt;/a>.
We however abstract from the underlying &amp;ldquo;build executor&amp;rdquo; and instead offer a
&lt;code>Pipeline Definition Contract&lt;/code>, through which components declare their build pipelines as
required.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/overview_63fb18.png" alt="Overview">&lt;/p>
&lt;p>In order to run continuous delivery workloads for all components contributing to the
&lt;a href="https://github.com/gardener">Gardener&lt;/a> project, we operate a central service.&lt;/p>
&lt;p>Typical workloads encompass the execution of tests and builds of a variety of technologies,
as well as building and publishing container images, typically containing build results.&lt;/p>
&lt;p>We are building our CI/CD offering around some principles:&lt;/p>
&lt;ul>
&lt;li>&lt;em>container-native&lt;/em> - each workload is executed within a container environment. Components may customise used container images&lt;/li>
&lt;li>&lt;em>automation&lt;/em> - pipelines are generated without manual interaction&lt;/li>
&lt;li>&lt;em>self-service&lt;/em> - components customise their pipelines by changing their sources&lt;/li>
&lt;li>&lt;em>standardisation&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Learn more on our: &lt;a href="https://gardener.github.io/cc-utils/">Build Pipeline Reference Manual&lt;/a>&lt;/strong>&lt;/p></description></item><item><title>Docs: Configuration and Usage</title><link>https://gardener.cloud/docs/contribute/10_code/15_conf_secrets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/10_code/15_conf_secrets/</guid><description>
&lt;h1 id="gardener-configuration-and-usage">Gardener Configuration and Usage&lt;/h1>
&lt;p>Gardener automates the full lifecycle of Kubernetes clusters as a service.
Additionally, it has several extension points allowing external controllers to plug-in to the lifecycle.
As a consequence, there are several configuration options for the various custom resources that are partially required.&lt;/p>
&lt;p>This document describes the&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#configuration-and-usage-of-gardener-as-operatoradministrator">configuration and usage of Gardener as operator/administrator&lt;/a>.&lt;/li>
&lt;li>&lt;a href="#configuration-and-usage-of-gardener-as-end-userstakeholdercustomer">configuration and usage of Gardener as end-user/stakeholder/customer&lt;/a>.&lt;/li>
&lt;/ol>
&lt;h2 id="configuration-and-usage-of-gardener-as-operatoradministrator">Configuration and Usage of Gardener as Operator/Administrator&lt;/h2>
&lt;p>When we use the terms &amp;ldquo;operator/administrator&amp;rdquo; we refer to both the people deploying and operating Gardener.
Gardener consists out of four components:&lt;/p>
&lt;ol>
&lt;li>&lt;code>gardener-apiserver&lt;/code>, a Kubernetes-native API extension that serves custom resources in the Kubernetes-style (like &lt;code>Seed&lt;/code>s and &lt;code>Shoot&lt;/code>s), and a component that contains multiple admission plugins.&lt;/li>
&lt;li>&lt;code>gardener-controller-manager&lt;/code>, a component consisting out of multiple controllers that implement reconciliation and deletion flows for some of the custom resources (e.g., it contains the logic for maintaining &lt;code>Shoot&lt;/code>s, reconciling &lt;code>Plant&lt;/code>s, etc.).&lt;/li>
&lt;li>&lt;code>gardener-scheduler&lt;/code>, a component that assigns newly created &lt;code>Shoot&lt;/code> clusters to appropriate &lt;code>Seed&lt;/code> clusters.&lt;/li>
&lt;li>&lt;code>gardenlet&lt;/code>, a component running in seed clusters and consisting out of multiple controllers that implement reconciliation and deletion flows for some of the custom resources (e.g., it contains the logic for reconciliation and deletion of &lt;code>Shoot&lt;/code>s).&lt;/li>
&lt;/ol>
&lt;p>Each of these components have various configuration options.
The &lt;code>gardener-apiserver&lt;/code> uses the standard API server library maintained by the Kubernetes community, and as such it mainly supports command line flags.
The two other components are using so-called componentconfig files that describe their configuration in a Kubernetes-style versioned object.&lt;/p>
&lt;h3 id="configuration-file-for-gardener-controller-manager">Configuration file for Gardener controller manager&lt;/h3>
&lt;p>The Gardener controller manager does only support one command line flag which should be a path to a valid controller-manager configuration file.
Please take a look at &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/usage/../../example/20-componentconfig-gardener-controller-manager.yaml">this&lt;/a> example configuration.&lt;/p>
&lt;h3 id="configuration-file-for-gardener-scheduler">Configuration file for Gardener scheduler&lt;/h3>
&lt;p>The Gardener scheduler also only supports one command line flag which should be a path to a valid scheduler configuration file.
Please take a look at &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/usage/../../example/20-componentconfig-gardener-scheduler.yaml">this&lt;/a> example configuration.
Information about the concepts of the Gardener scheduler can be found &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/usage/../concepts/scheduler.md">here&lt;/a>&lt;/p>
&lt;h3 id="configuration-file-for-gardenlet">Configuration file for Gardenlet&lt;/h3>
&lt;p>The Gardenlet also only supports one command line flag which should be a path to a valid gardenlet configuration file.
Please take a look at &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/usage/../../example/20-componentconfig-gardenlet.yaml">this&lt;/a> example configuration.
Information about the concepts of the Gardenlet can be found &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/usage/../concepts/gardenlet.md">here&lt;/a>&lt;/p>
&lt;h3 id="system-configuration">System configuration&lt;/h3>
&lt;p>After successful deployment of the four components you need to setup the system.
Let&amp;rsquo;s first focus on some &amp;ldquo;static&amp;rdquo; configuration.
When the &lt;code>gardenlet&lt;/code> starts it scans the &lt;code>garden&lt;/code> namespace of the garden cluster for &lt;code>Secret&lt;/code>s that have influence on its reconciliation loops, mainly the &lt;code>Shoot&lt;/code> reconciliation:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Internal domain secret&lt;/strong>, contains the DNS provider credentials (having appropriate privileges) which will be used to create/delete so-called &amp;ldquo;internal&amp;rdquo; DNS records for the Shoot clusters, please see &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/usage/../../example/10-secret-internal-domain.yaml">this&lt;/a> for an example.&lt;/p>
&lt;ul>
&lt;li>This secret is used in order to establish a stable endpoint for shoot clusters which is used internally by all control plane components.&lt;/li>
&lt;li>The DNS records are normal DNS records but called &amp;ldquo;internal&amp;rdquo; in our scenario because only the kubeconfigs for the control plane components use this endpoint when talking to the shoot clusters.&lt;/li>
&lt;li>It is forbidden to change the internal domain secret if there are existing shoot clusters.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Default domain secrets&lt;/strong> (optional), contain the DNS provider credentials (having appropriate privileges) which will be used to create/delete DNS records for a default domain for shoots (e.g., &lt;code>example.com&lt;/code>), please see &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/usage/../../example/10-secret-default-domain.yaml">this&lt;/a> for an example.&lt;/p>
&lt;ul>
&lt;li>Not every end-user/stakeholder/customer has its own domain, however, Gardener needs to create a DNS record for every shoot cluster.&lt;/li>
&lt;li>As landscape operator you might want to define a default domain owned and controlled by you that is used for all shoot clusters that don&amp;rsquo;t specify their own domain.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>:warning: Please note that the mentioned domain secrets are only needed if you have at least one seed cluster that is not tainted with &lt;code>seed.gardener.cloud/disable-dns&lt;/code>.
Seeds with this taint don&amp;rsquo;t create any DNS records for shoots scheduled on it, hence, if you only have such seeds, you don&amp;rsquo;t need to create the domain secrets.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Alerting secrets&lt;/strong> (optional), contain the alerting configuration and credentials for the &lt;a href="https://prometheus.io/docs/alerting/alertmanager/">AlertManager&lt;/a> to send email alerts. It is also possible to configure the monitoring stack to send alerts to an AlertManager not deployed by Gardener to handle alerting. Please see &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/usage/../../example/10-secret-alerting.yaml">this&lt;/a> for an example.&lt;/p>
&lt;ul>
&lt;li>If email alerting is configured:
&lt;ul>
&lt;li>An AlertManager is deployed into each seed cluster that handles the alerting for all shoots on the seed cluster.&lt;/li>
&lt;li>Gardener will inject the SMTP credentials into the configuration of the AlertManager.&lt;/li>
&lt;li>The AlertManager will send emails to the configured email address in case any alerts are firing.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If an external AlertManager is configured:
&lt;ul>
&lt;li>Each shoot has a &lt;a href="https://prometheus.io/docs/introduction/overview/">Prometheus&lt;/a> responsible for monitoring components and sending out alerts. The alerts will be sent to a URL configured in the alerting secret.&lt;/li>
&lt;li>This external AlertManager is not managed by Gardener and can be configured however the operator sees fit.&lt;/li>
&lt;li>Supported authentication types are no authentication, basic, or mutual TLS.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>OpenVPN Diffie-Hellmann Key secret&lt;/strong> (optional), contains the self-generated Diffie-Hellmann key used by OpenVPN in your landscape, please see &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/usage/../../example/10-secret-openvpn-diffie-hellman.yaml">this&lt;/a> for an example.&lt;/p>
&lt;ul>
&lt;li>If you don&amp;rsquo;t specify a custom key then a default key is used, but for productive landscapes it&amp;rsquo;s recommend to create a landscape-specific key and define it.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Global monitoring secrets&lt;/strong> (optional), contains basic authentication credentials for the Prometheus aggregating metrics for all clusters.&lt;/p>
&lt;ul>
&lt;li>These secrets are synced to each seed cluster and used to gain access to the aggregate monitoring components.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Apart from this &amp;ldquo;static&amp;rdquo; configuration there are several custom resources extending the Kubernetes API and used by Gardener.
As an operator/administrator you have to configure some of them to make the system work.&lt;/p>
&lt;h3 id="configuration-and-usage-of-gardener-as-end-userstakeholdercustomer">Configuration and Usage of Gardener as End-User/Stakeholder/Customer&lt;/h3>
&lt;p>As an end-user/stakeholder/customer you are using a Gardener landscape that has been setup for you by another team.
You don&amp;rsquo;t need to care about how Gardener itself has to be configured or how it has to be deployed.
Take a look at &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/usage/../concepts/apiserver.md">this document&lt;/a> - it describes which resources are offered by Gardener.
You may want to have a more detailed look for &lt;code>Project&lt;/code>s, &lt;code>SecretBinding&lt;/code>s, &lt;code>Shoot&lt;/code>s, &lt;code>Plant&lt;/code>s, and &lt;code>(Cluster)OpenIDConnectPreset&lt;/code>s.&lt;/p></description></item><item><title>Docs: Contribution Guide</title><link>https://gardener.cloud/docs/contribute/10_code/10-contribution_guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/10_code/10-contribution_guide/</guid><description>
&lt;h1 id="contributing-to-gardener">Contributing to Gardener&lt;/h1>
&lt;h2 id="code-of-conduct">Code of conduct&lt;/h2>
&lt;p>All members of the Gardener community must abide by the
&lt;a href="https://github.com/cncf/foundation/blob/master/code-of-conduct.md">CNCF Code of Conduct&lt;/a>.
Only by respecting each other can we develop a productive, collaborative community.
Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting &lt;a href="mailto:gardener.opensource@sap.com">gardener.opensource@sap.com&lt;/a> and/or a Gardener project maintainer.&lt;/p>
&lt;h2 id="contributing">Contributing&lt;/h2>
&lt;p>Gardener uses GitHub to manage reviews of pull requests.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>If you are a new contributor see: &lt;a href="#steps-to-contribute">Steps to Contribute&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you have a trivial fix or improvement, go ahead and create a pull request,
addressing (with &lt;code>@...&lt;/code>) a suitable maintainer of this repository (see
&lt;a href="https://github.com/gardener/gardener/blob/master/CODEOWNERS">CODEOWNERS&lt;/a> of the
repository you want to contribute to) in the description of the pull request.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you plan to do something more involved, first discuss your ideas
on our &lt;a href="https://groups.google.com/forum/?fromgroups#!forum/gardener">mailing list&lt;/a>.
This will avoid unnecessary work and surely give you and us a good deal
of inspiration.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Relevant coding style guidelines are the &lt;a href="https://github.com/golang/go/wiki/CodeReviewComments">Go Code Review
Comments&lt;/a>
and the &lt;em>Formatting and style&lt;/em> section of Peter Bourgon&amp;rsquo;s &lt;a href="http://peter.bourgon.org/go-in-production/#formatting-and-style">Go: Best
Practices for Production
Environments&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="steps-to-contribute">Steps to Contribute&lt;/h2>
&lt;p>Should you wish to work on an issue, please claim it first by commenting on the GitHub issue that you want to work on it. This is to prevent duplicated efforts from contributors on the same issue.&lt;/p>
&lt;p>If you have questions about one of the issues, with or without the tag, please comment on them and one of the maintainers will clarify it.&lt;/p>
&lt;p>We kindly ask you to follow the &lt;a href="#Pull-Request-Checklist">Pull Request Checklist&lt;/a> to ensure reviews can happen accordingly.&lt;/p>
&lt;h2 id="contributing-code">Contributing Code&lt;/h2>
&lt;p>You are welcome to contribute code to Gardener in order to fix a bug or to implement a new feature.&lt;/p>
&lt;p>The following rules govern code contributions:&lt;/p>
&lt;ul>
&lt;li>Contributions must be licensed under the &lt;a href="http://www.apache.org/licenses/LICENSE-2.0">Apache 2.0 License&lt;/a>&lt;/li>
&lt;li>You need to sign the &lt;a href="#developer-certificate-of-origin">Developer Certificate of Origin&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="contributing-documentation">Contributing Documentation&lt;/h2>
&lt;p>You are welcome to contribute documentation to Gardener.&lt;/p>
&lt;p>The following rules govern documentation contributions:&lt;/p>
&lt;ul>
&lt;li>Contributions must be licensed under the &lt;a href="https://creativecommons.org/licenses/by/4.0/legalcode">Creative Commons Attribution 4.0 International License&lt;/a>&lt;/li>
&lt;li>You need to sign the &lt;a href="#developer-certificate-of-origin">Developer Certificate of Origin&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="developer-certificate-of-origin">Developer Certificate of Origin&lt;/h2>
&lt;p>Due to legal reasons, contributors will be asked to accept a Developer Certificate of Origin (DCO) before they submit the first pull request to this projects, this happens in an automated fashion during the submission process. We use &lt;a href="https://developercertificate.org/">the standard DCO text of the Linux Foundation&lt;/a>.&lt;/p>
&lt;h2 id="pull-request-checklist">Pull Request Checklist&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Branch from the master branch and, if needed, rebase to the current master branch before submitting your pull request. If it doesn&amp;rsquo;t merge cleanly with master you may be asked to rebase your changes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Commits should be as small as possible, while ensuring that each commit is correct independently (i.e., each commit should compile and pass tests).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Test your changes as thoroughly as possible before your commit them. Preferably, automate your test by unit / integration (e.g. &lt;a href="https://github.com/gardener/gardener/blob/master/docs/testing/integration_tests.md">Gardener integration testing&lt;/a>) tests. If tested manually, provide information about the test scope in the PR description (e.g. “Test passed: Upgrade K8s version from 1.14.5 to 1.15.2 on AWS, Azure, GCP, Alicloud, Openstack.”).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create &lt;em>Work In Progress [WIP]&lt;/em> pull requests only if you need a clarification or an explicit review before you can continue your work item.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If your patch is not getting reviewed or you need a specific person to review it, you can @-reply a reviewer asking for a review in the pull request or a comment, or you can ask for a review on our &lt;a href="https://groups.google.com/forum/?fromgroups#!forum/gardener">mailing list&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Post review:&lt;/p>
&lt;ul>
&lt;li>If a review requires you to change your commit(s), please test the changes again.&lt;/li>
&lt;li>Amend the affected commit(s) and force push onto your branch.&lt;/li>
&lt;li>Set respective comments in your GitHub review to resolved.&lt;/li>
&lt;li>Create a general PR comment to notify the reviewers that your amendments are ready for another round of review.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="issues-and-planning">Issues and Planning&lt;/h2>
&lt;p>We use GitHub issues to track bugs and enhancement requests. Please provide as much context as possible when you open an issue. The information you provide must be comprehensive enough to reproduce that issue for the assignee. Therefore, contributors may use but aren&amp;rsquo;t restricted to the issue template provided by the Gardener maintainers.&lt;/p>
&lt;p>ZenHub is used for planning:&lt;/p>
&lt;ul>
&lt;li>Install the &lt;a href="https://chrome.google.com/webstore/detail/zenhub-for-github/ogcgkffhplmphkaahpmffcafajaocjbd">ZenHub Chrome plugin&lt;/a>&lt;/li>
&lt;li>Login to &lt;a href="https://www.zenhub.com/">ZenHub&lt;/a>&lt;/li>
&lt;li>Open the &lt;a href="https://app.zenhub.com/workspace/o/gardener/gardener">Gardener ZenHub workspace&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="security-release-process">Security Release Process&lt;/h2>
&lt;p>See &lt;a href="https://gardener.cloud/docs/contribute/10_code/12-security_guide">Security Release Process&lt;/a>&lt;/p>
&lt;h2 id="community">Community&lt;/h2>
&lt;h3 id="slack-channel">Slack Channel&lt;/h3>
&lt;p>&lt;a href="https://kubernetes.slack.com/messages/gardener">#gardener&lt;/a>, sign up &lt;a href="http://slack.k8s.io/">here&lt;/a>&lt;/p>
&lt;h3 id="mailing-list">Mailing List&lt;/h3>
&lt;p>&lt;a href="https://groups.google.com/forum/?fromgroups#!forum/gardener">gardener@googlegroups.com&lt;/a>&lt;/p>
&lt;p>The mailing list is hosted through Google Groups. To receive the lists' emails, &lt;a href="https://support.google.com/groups/answer/1067205">join&lt;/a> the group, as you would any other Google Group.&lt;/p>
&lt;h3 id="twitter">Twitter&lt;/h3>
&lt;p>Follow &lt;a href="https://twitter.com/GardenerProject">@GardenerProject&lt;/a> on Twitter. Please mention @GardenerProject
in your own posts about Gardener.&lt;/p>
&lt;h3 id="accessing-community-documents">Accessing community documents&lt;/h3>
&lt;p>In order to foster real time collaboration there are working documents and notes that are taken in Google Docs,
and then transferred to this repository if appropriate.&lt;/p>
&lt;p>To gain edit access for these documents, you must subscribe to the
&lt;a href="https://groups.google.com/forum/?fromgroups#!forum/gardener">gardener mailing list&lt;/a>,
as these documents are shared automatically with anyone who subscribes to that list.&lt;/p>
&lt;h3 id="weekly-meeting">Weekly Meeting&lt;/h3>
&lt;p>We have a PUBLIC and RECORDED bi-weekly meeting. We meet every other Thursday at &lt;a href="https://www.google.de/search?q=10+CET+to+local+time">10:00 CET&lt;/a> over Zoom. Find recordings in the &lt;a href="https://www.youtube.com/channel/UCwUhwKFREV8Su0gwAJQX7tw/videos">Gardener Youtube channel&lt;/a>. Let us know if you want to participate and live in a timezone which isn&amp;rsquo;t compatible with 10:00 CET.&lt;/p>
&lt;p>See the meeting calendar on the web at &lt;a href="https://calendar.google.com/calendar/embed?src=gardener.cloud.community%40gmail.com">calendar.google.com&lt;/a>, or paste this &lt;a href="https://calendar.google.com/calendar/ical/gardener.cloud.community%40gmail.com/public/basic.ics">iCal url&lt;/a> into any iCal client.&lt;/p>
&lt;p>If you have a topic you&amp;rsquo;d like to present or would like to see discussed, please propose a specific date on the &lt;a href="https://docs.google.com/document/d/1314v8ziVNQPjdBrWp-Y4BYrTDlv7dq2cWDFIa9SMaP4">Gardener Community Meeting Agenda&lt;/a>. Find minutes in the same document. Please upload slides or other documents you presented to the
&lt;a href="https://drive.google.com/drive/u/0/folders/1myXFoaFL_9fYJdUwnZcIXMBpx3dynhM8">Gardener Community Meeting folder&lt;/a>. Subscribe to the &lt;a href="https://groups.google.com/forum/?fromgroups#!forum/gardener">gardener mailing list&lt;/a> to get edit permissions.&lt;/p></description></item><item><title>Docs: Dependencies</title><link>https://gardener.cloud/docs/contribute/10_code/20_dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/10_code/20_dependencies/</guid><description>
&lt;h1 id="testing">Testing&lt;/h1>
&lt;p>We follow the BDD-style testing principles and are leveraging the &lt;a href="https://onsi.github.io/ginkgo/">Ginkgo&lt;/a> framework along with &lt;a href="http://onsi.github.io/gomega/">Gomega&lt;/a> as matcher library. In order to execute the existing tests, you can use&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">make &lt;span class="nb">test&lt;/span> &lt;span class="c1"># runs tests&lt;/span>
make verify &lt;span class="c1"># runs static code checks and test&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is an additional command for analyzing the code coverage of the tests. Ginkgo will generate standard Golang cover profiles which will be translated into a HTML file by the &lt;a href="https://blog.golang.org/cover">Go Cover Tool&lt;/a>. Another command helps you to clean up the filesystem from the temporary cover profile files and the HTML report:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">make test-cov
open gardener.coverage.html
make test-cov-clean
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sigsk8siocontroller-runtime-env-test">sigs.k8s.io/controller-runtime env test&lt;/h3>
&lt;p>Some of the integration tests in Gardener are using the &lt;code>sigs.k8s.io/controller-runtime/pkg/envtest&lt;/code> package.
It sets up a temporary control plane (etcd + kube-apiserver) against the integration tests can run.
The &lt;code>test&lt;/code> and &lt;code>test-cov&lt;/code> rules in the &lt;code>Makefile&lt;/code> prepare this env test automatically by downloading the respective binaries (if not yet present) and set the necessary environment variables.&lt;/p>
&lt;p>You can also run &lt;code>go test&lt;/code> or &lt;code>ginkgo&lt;/code> without the &lt;code>test&lt;/code>/&lt;code>test-cov&lt;/code> rules.
In this case you have to set the &lt;code>KUBEBUILDER_ASSETS&lt;/code> environment variable to the path that contains the etcd + kube-apiserver binaries or you need to have the binaries pre-installed under &lt;code>/usr/local/kubebuilder/bin&lt;/code>.&lt;/p>
&lt;h2 id="dependency-management">Dependency Management&lt;/h2>
&lt;p>We are using &lt;a href="https://github.com/golang/go/wiki/Modules">go modules&lt;/a> for depedency management.
In order to add a new package dependency to the project, you can perform &lt;code>go get &amp;lt;PACKAGE&amp;gt;@&amp;lt;VERSION&amp;gt;&lt;/code> or edit the &lt;code>go.mod&lt;/code> file and append the package along with the version you want to use.&lt;/p>
&lt;h3 id="updating-dependencies">Updating Dependencies&lt;/h3>
&lt;p>The &lt;code>Makefile&lt;/code> contains a rule called &lt;code>revendor&lt;/code> which performs &lt;code>go mod vendor&lt;/code> and &lt;code>go mod tidy&lt;/code>.
&lt;code>go mod vendor&lt;/code> resets the main module&amp;rsquo;s vendor directory to include all packages needed to build and test all the main module&amp;rsquo;s packages. It does not include test code for vendored packages.
&lt;code>go mod tidy&lt;/code> makes sure go.mod matches the source code in the module. It adds any missing modules necessary to build the current module&amp;rsquo;s packages and dependencies, and it removes unused modules that don&amp;rsquo;t provide any relevant packages.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">make revendor
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The dependencies are installed into the &lt;code>vendor&lt;/code> folder which &lt;strong>should be added&lt;/strong> to the VCS.&lt;/p>
&lt;p>:warning: Make sure that you test the code after you have updated the dependencies!&lt;/p></description></item><item><title>Docs: Deploy into a Cluster</title><link>https://gardener.cloud/docs/contribute/10_code/27_deploy_into_cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/10_code/27_deploy_into_cluster/</guid><description>
&lt;h1 id="deploying-the-gardener-into-a-kubernetes-cluster">Deploying the Gardener into a Kubernetes cluster&lt;/h1>
&lt;p>Similar to Kubernetes, Gardener consists out of control plane components (Gardener API server, Gardener controller manager, Gardener scheduler), and an agent component (Gardenlet).
The control plane is deployed in the so-called garden cluster while the agent is installed into every seed cluster.
Please note that it is possible to use the garden cluster as seed cluster by simply deploying the Gardenlet into it.&lt;/p>
&lt;p>We are providing &lt;a href="https://github.com/gardener/gardener/tree/master/charts/gardener">Helm charts&lt;/a> in order to manage the various resources of the components.
Please always make sure that you use the Helm chart version that matches the Gardener version you want to deploy.&lt;/p>
&lt;h2 id="deploying-the-gardener-control-plane-api-server-controller-manager-scheduler">Deploying the Gardener control plane (API server, controller manager, scheduler)&lt;/h2>
&lt;p>The &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/deployment/../../charts/gardener/controlplane/values.yaml">configuration values&lt;/a> depict the various options to configure the different components.
Please consult &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/deployment/../usage/configuration.md">this document&lt;/a> to get a detailed explanation of what can be configured for which component.
Also note that all resources and deployments need to be created in the &lt;code>garden&lt;/code> namespace (not overrideable).&lt;/p>
&lt;p>After preparing your values in a separate &lt;code>controlplane-values.yaml&lt;/code> file, you can run the following command against your garden cluster:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">helm install charts/gardener/controlplane &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --namespace garden &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -f controlplane-values.yaml &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --wait
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploying-gardener-extensions">Deploying Gardener extensions&lt;/h2>
&lt;p>Gardener is an extensible system that does not contain the logic for provider-specific things like DNS management, cloud infrastructures, network plugins, operating system configs, and many more.&lt;/p>
&lt;p>You have to install extension controllers for these parts.
Please consult &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/deployment/../extensions/overview.md">the documentation regarding extensions&lt;/a> to get more information.&lt;/p>
&lt;h2 id="deploying-the-gardener-agent-gardenlet">Deploying the Gardener agent (Gardenlet)&lt;/h2>
&lt;p>The Gardenlet requires a bootstrap token as well as a bootstrap kubeconfig in order to properly register itself with the Gardener control plane.&lt;/p>
&lt;p>The &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/deployment/../../charts/gardener/gardenlet/values.yaml">configuration values&lt;/a> depict the various options to configure it.
Please consult &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/deployment/../concepts/gardenlet.md#component-configuration">this document&lt;/a> to get a detailed explanation of what can be configured.&lt;/p>
&lt;p>Prepare your values in a separate &lt;code>gardenlet-values.yaml&lt;/code> file:&lt;/p>
&lt;ol>
&lt;li>Create a bootstrap token secret in the &lt;code>kube-system&lt;/code> namespace of the garden cluster (see &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/">this&lt;/a> and &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-tls-bootstrapping/#bootstrap-tokens">this&lt;/a>).&lt;/li>
&lt;li>Create a bootstrap kubeconfig containing this token:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Config&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">current-context&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-bootstrap@default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">clusters&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">cluster&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">certificate-authority-data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;ca-of-garden-cluster&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://&amp;lt;endpoint-of-garden-cluster&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">contexts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">context&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cluster&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-bootstrap&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-bootstrap@default&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">users&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-bootstrap&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;bootstrap-token&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Provide this bootstrap kubeconfig together with a desired name and namespace to the Gardenlet Helm chart values &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/deployment/../../charts/gardener/gardenlet/values.yaml#L31-L35">here&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">gardenClientConnection&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">bootstrapKubeconfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-kubeconfig-bootstrap&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kubeconfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;bootstrap-kubeconfig&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Define a name and namespace where the Gardenlet shall store the real kubeconfig it creates during the bootstrap process &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/deployment/../../charts/gardener/gardenlet/values.yaml#L31-L35">here&lt;/a>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">gardenClientConnection&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kubeconfigSecret&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gardenlet-kubeconfig&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Define either &lt;code>seedSelector&lt;/code> or &lt;code>seedConfig&lt;/code> (see &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/deployment/../concepts/gardenlet.md#seed-config-vs-seed-selector">this document&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Now you are ready to deploy the Helm chart:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">helm install charts/gardener/gardenlet &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --namespace garden &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --name gardenlet &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -f gardenlet-values.yaml &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --wait
&lt;/code>&lt;/pre>&lt;/div>&lt;p>:warning: A current prerequisite of Kubernetes clusters that are used as seeds is to have a pre-deployed &lt;code>nginx-ingress-controller&lt;/code> to make the Gardener work properly.
Moreover, there should exist a DNS record &lt;code>*.ingress.&amp;lt;SEED-CLUSTER-DOMAIN&amp;gt;&lt;/code> where &lt;code>&amp;lt;SEED-CLUSTER-DOMAIN&amp;gt;&lt;/code> is the value of the &lt;code>.dns.ingressDomain&lt;/code> field of &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/deployment/../../example/50-seed.yaml">a Seed cluster resource&lt;/a> (or the &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/deployment/../../example/20-componentconfig-gardenlet.yaml#L84-L85">respective Gardenlet configuration&lt;/a>).&lt;/p></description></item><item><title>Docs: Deploy into AKS</title><link>https://gardener.cloud/docs/contribute/10_code/30_deploy_seed_into_aks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/10_code/30_deploy_seed_into_aks/</guid><description>
&lt;h1 id="deploying-the-previous-gardener-versions-and-a-seed-into-an-aks-cluster">Deploying the previous Gardener versions and a Seed into an AKS cluster&lt;/h1>
&lt;p>This document demonstrates how to install Gardener into an existing
AKS cluster. We&amp;rsquo;ll use a single cluster to host both Gardener and a Seed to the
same cluster for the sake of simplicity .&lt;/p>
&lt;p>Please note that this document is to provide you an example
installation and is not to be used in a production environment since
there are some certificates hardcoded, non-HA and non-TLS-enabled etcd
setup.&lt;/p>
&lt;h1 id="high-level-overview">High Level Overview&lt;/h1>
&lt;p>In this example we&amp;rsquo;ll follow these steps to create a Seed cluster on AKS:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#deploying-the-gardener-and-a-seed-into-an-aks-cluster">Deploying the Gardener and a Seed into an AKS cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="#high-level-overview">High Level Overview&lt;/a>&lt;/li>
&lt;li>&lt;a href="#prerequisites">Prerequisites&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#aws-credentials-for-route-53-hosted-zone">AWS credentials for Route 53 Hosted Zone&lt;/a>&lt;/li>
&lt;li>&lt;a href="#deploy-aks-cluster">Deploy AKS cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#initialize-helm-on-the-cluster">Initialize Helm on the Cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="#deploy-stablenginx-ingress-chart-to-aks">Deploy stable/nginx-ingress chart to AKS&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-wildcard-dns-record-for-the-ingress">Create wildcard DNS record for the ingress&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#create-azure-service-principle-to-get-azure-credentials">Create Azure Service Principle to get Azure credentials&lt;/a>&lt;/li>
&lt;li>&lt;a href="#install-gardenctl">Install gardenctl&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#install-gardener">Install Gardener&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#create-garden-namespace">Create garden namespace&lt;/a>&lt;/li>
&lt;li>&lt;a href="#deploy-etcd">Deploy etcd&lt;/a>&lt;/li>
&lt;li>&lt;a href="#deploy-gardener-helm-chart">Deploy Gardener Helm Chart&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#create-a-cloudprofile">Create a CloudProfile&lt;/a>&lt;/li>
&lt;li>&lt;a href="#define-seed-cluster-in-gardener">Define Seed cluster in Gardener&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#create-the-seed-resource-definition-with-its-secret">Create the Seed resource definition with its Secret&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#create-a-shoot-cluster">Create a Shoot cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#create-a-project-namespace-for-shoots">Create a Project (namespace) for Shoots&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-a-secretbinding-and-related-secret">Create a SecretBinding and related Secret&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-the-shoot-resource">Create the Shoot resource&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#cluster-resources-after-shoot-is-created">Cluster Resources After Shoot is Created&lt;/a>&lt;/li>
&lt;li>&lt;a href="#troubleshooting-shoot-creation-issues">Troubleshooting Shoot Creation Issues&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#access-shoot-cluster">Access Shoot cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="#delete-shoot-cluster">Delete Shoot cluster&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="prerequisites">Prerequisites&lt;/h1>
&lt;p>Summary of prerequisites:&lt;/p>
&lt;ul>
&lt;li>An Azure AKS cluster with:
&lt;ul>
&lt;li>Helm initialized,&lt;/li>
&lt;li>an ingress controller deployed,&lt;/li>
&lt;li>a wildcard DNS record pointing the ingress,&lt;/li>
&lt;li>&lt;code>az&lt;/code> command line client configured for Azure subscription,&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>An Azure service principle to provide Azure credentials to Gardener,&lt;/li>
&lt;li>A Route53 Hosted Zone and AWS account credentials with permissions on that Route53 Zone,
&lt;ul>
&lt;li>&lt;code>aws&lt;/code> command line client configured for this account,&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>gardenctl&lt;/code> command line client configured for the AKS cluster&amp;rsquo;s kubeconfig&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>: Gardener doesn&amp;rsquo;t have support for Azure DNS yet (see
&lt;a href="https://github.com/gardener/gardener/issues/494">#494&lt;/a>). So, we use a Route53 Hosted Zone
even if we are deploying on Azure.&lt;/p>
&lt;h2 id="aws-credentials-for-route-53-hosted-zone">AWS credentials for Route 53 Hosted Zone&lt;/h2>
&lt;p>You need to provide credentials for AWS with permission to access Route53
Hosted Zone. In this example we&amp;rsquo;ll assume your domain for the Hosted
Zone is &lt;code>.your.domain.here&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">HOSTED_ZONE_ID= # place your AWS Route53 hostedZoneID here
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create an AWS user, define policy to allow permission for the Hosted
Zone and note the &lt;code>hostedZoneID&lt;/code>, &lt;code>accessKeyID&lt;/code> and &lt;code>secretAccessKey&lt;/code>
for later use.&lt;/p>
&lt;h2 id="deploy-aks-cluster">Deploy AKS cluster&lt;/h2>
&lt;p>Here you can find a summary for creating an AKS cluster, if you already
have one, skip this step.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">az group create --name garden-1 --location eastus
az aks create --resource-group garden-1 --name garden-1 \
--kubernetes-version 1.11.5 \
--node-count 2 --node-vm-size Standard_DS4_v2 \
--generate-ssh-keys
az aks get-credentials --resource-group garden-1 --name garden-1 --admin
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="initialize-helm-on-the-cluster">Initialize Helm on the Cluster&lt;/h3>
&lt;p>Since RBAC is enabled by default we need to deploy helm with an RBAC config.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f https://raw.githubusercontent.com/Azure/helm-charts/master/docs/prerequisities/helm-rbac-config.yaml
helm init --service-account tiller
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="deploy-stablenginx-ingress-chart-to-aks">Deploy stable/nginx-ingress chart to AKS&lt;/h3>
&lt;p>At the moment the &lt;code>Ingress&lt;/code> resources created by the Gardener are
expecting the nginx-ingress style annotations to work.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">helm upgrade --install \
--namespace kube-system \
nginx-ingress stable/nginx-ingress
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="create-wildcard-dns-record-for-the-ingress">Create wildcard DNS record for the ingress&lt;/h3>
&lt;p>You need to pick a wildcard subdomain matching your Route53 Hosted
Zone here. This ingress wildcard record is supposed to be part of the Seed
cluster rather than Gardener cluster, in our example we&amp;rsquo;ll use
&lt;code>*.seed-1.your.domain.here&lt;/code>.&lt;/p>
&lt;p>Assuming you have the AWS cli for your Route53 Hosted Zone is
configured on your local, here we&amp;rsquo;ll create the wildcard DNS record
using the &lt;a href="https://github.com/wallix/awless#readme">&lt;code>awless&lt;/code>&lt;/a>. You can also use the AWS
console or any other tool of your choice to create the wildcard
record:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">HOSTED_ZONE_DOMAIN=$(aws route53 get-hosted-zone --id /hostedzone/${HOSTED_ZONE_ID:?&amp;#34;HOSTED_ZONE_ID is missing&amp;#34;} --query &amp;#39;HostedZone.Name&amp;#39; --output text)
INGRESS_DOMAIN=&amp;#34;seed-1.${HOSTED_ZONE_DOMAIN%%.}&amp;#34;
# Get LB IP address from `kubectl -n kube-system get svc shared-ingress-nginx-ingress-controller`
LB_IP=$(kubectl -n kube-system get svc nginx-ingress-controller --template &amp;#39;{{(index .status.loadBalancer.ingress 0).ip}}&amp;#39;)
awless create record \
zone=$HOSTED_ZONE_ID \
name=&amp;#34;*.$INGRESS_DOMAIN&amp;#34; \
value=$LB_IP \
type=A \
ttl=300
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-azure-service-principle-to-get-azure-credentials">Create Azure Service Principle to get Azure credentials&lt;/h2>
&lt;p>We need &lt;code>client_id&lt;/code> and &lt;code>client_secret&lt;/code> to allow Gardener to reach
Azure services, we can generate a pair by creating a Service Principle
on Azure:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ az ad sp create-for-rbac --role=&amp;#34;Contributor&amp;#34;
Retrying role assignment creation: 1/36
{
&amp;#34;appId&amp;#34;: &amp;#34;xxxxxx-xxx-xxxx-xxx-xxxxx&amp;#34;, #az_client_id
&amp;#34;displayName&amp;#34;: &amp;#34;azure-cli-2018-05-23-16-15-49&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;http://azure-cli-2018-05-23-16-15-49&amp;#34;,
&amp;#34;password&amp;#34;: &amp;#34;xxxxxx-xxx-xxxx-xxx-xxxxx&amp;#34;, #az_client_secret
&amp;#34;tenant&amp;#34;: &amp;#34;xxxxxx-xxx-xxxx-xxx-xxxxx&amp;#34; #az_tenant_id
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s define some env variables for later use&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">CLIENT_ID= # place your Azure Service Principal appId
CLIENT_SECRET= # place your Azure Service Principal password here
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="install-gardenctl">Install gardenctl&lt;/h2>
&lt;p>In this example we&amp;rsquo;ll be using &lt;code>gardenctl&lt;/code> to interact with
Gardener. You can install &lt;code>gardenctl&lt;/code> following instruction in its
repo: &lt;a href="https://github.com/gardener/gardenctl">https://github.com/gardener/gardenctl&lt;/a>&lt;/p>
&lt;p>Here is a sample configuration for gardenctl:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ cat ~/.garden/config
gardenClusters:
- name: dev
kubeConfig: ~/.kube/config
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="install-gardener">Install Gardener&lt;/h1>
&lt;h2 id="create-garden-namespace">Create garden namespace&lt;/h2>
&lt;p>This is where we deploy Gardener components.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/00-namespace-garden.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploy-etcd">Deploy etcd&lt;/h2>
&lt;p>Since Gardener is an extension API Server, it can share the etcd
backing native Kubernetes cluster&amp;rsquo;s API Server, and hence explicit etcd
installation is optional. But in our case we have no access to the
control plane components of the AKS cluster and we have to deploy our
own etcd ourselves for Gardener. Lets deploy an etcd using the
&lt;a href="https://github.com/gardener/etcd-backup-restore">gardener/etcd-backup-restore&lt;/a>
project, which is also used by the Gardener for Shoot control plane.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># pull the etcd-backup-restore
git clone https://github.com/gardener/etcd-backup-restore.git
# deploy etcd
helm upgrade --install \
--namespace garden \
etcd etcd-backup-restore/chart \
--set tls=
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: This etcd installation doesn&amp;rsquo;t provide HA. But etcd will be
auto recovered by the Deployment. This could be sufficient for some
deployments but may not be suitable for production usage. Also note
that this etcd is not deployed with TLS enabled and doesn&amp;rsquo;t use
certificates for authentication.&lt;/p>
&lt;p>Check etcd pod&amp;rsquo;s health, it should have &lt;code>READY:2/2&lt;/code> and &lt;code>STATUS:Running&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubectl -n garden get pods
NAME READY STATUS RESTARTS AGE
etcd-for-test-0 2/2 Running 0 1m
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deploy-gardener-helm-chart">Deploy Gardener Helm Chart&lt;/h2>
&lt;p>Check (current releases)[https://github.com/gardener/gardener/releases] and
pick a suitable one to install.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">GARDENER_RELEASE=0.17.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>gardener-controller-manager will need to maintain some DNS records for Seed.
So, you need to provide Route53 credentials in the values.yaml file:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>global.controller.internalDomain.hostedZoneID&lt;/strong>&lt;/li>
&lt;li>&lt;strong>global.controller.internalDomain.domain&lt;/strong>: Here pick a subdomain for your
Gardener to maintain DNS records for your Shoot clusters. This domain has
to be within your Route53 Hosted Zone. e.g. &lt;code>garden-1.your.domain.here&lt;/code>&lt;/li>
&lt;li>&lt;strong>global.controller.internalDomain.credentials&lt;/strong>&lt;/li>
&lt;li>&lt;strong>global.controller.internalDomain.secretAccessKey&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">HOSTED_ZONE_DOMAIN=$(
aws route53 get-hosted-zone \
--id /hostedzone/${HOSTED_ZONE_ID:?&amp;#34;HOSTED_ZONE_ID is missing&amp;#34;} \
--query &amp;#39;HostedZone.Name&amp;#39; \
--output text)
HOSTED_ZONE_DOMAIN=${HOSTED_ZONE_DOMAIN%%.}
GARDENER_DOMAIN=&amp;#34;garden-1.${HOSTED_ZONE_DOMAIN}&amp;#34;
ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
cat &amp;lt;&amp;lt;EOF &amp;gt; gardener-values.yaml
global:
apiserver:
image:
tag: ${GARDENER_RELEASE:?&amp;#34;GARDENER_RELEASE is missing&amp;#34;}
etcd:
servers: http://etcd-for-test-client:2379
useSidecar: false
controller:
image:
tag: ${GARDENER_RELEASE:?&amp;#34;GARDENER_RELEASE is missing&amp;#34;}
internalDomain:
provider: aws-route53
hostedZoneID: ${HOSTED_ZONE_ID}
domain: ${HOSTED_ZONE_DOMAIN}
credentials:
AWS_ACCESS_KEY_ID: ${ACCESS_KEY_ID}
AWS_SECRET_ACCESS_KEY: ${SECRET_ACCESS_KEY}
EOF
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After creating the &lt;code>gardener-values.yaml&lt;/code> file, since chart definition in
master branch can have breaking changes after the release, checkout the
gardener tag for that release, and run:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">git checkout ${GARDENER_RELEASE:?&amp;#34;GARDENER_RELEASE is missing&amp;#34;}
helm upgrade --install \
--namespace garden \
garden charts/gardener \
-f charts/gardener/local-values.yaml \
-f gardener-values.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Validate the Gardener is deployed:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">helm status garden # Wait for `STATUS: DEPLOYED`
kubectl -n garden get deploy,pod -l app=gardener
# Better if you leave two terminals open in for below commands, and
# keep an eye on whats going on behind the scenes as you create/delete
# Gardener specific resources (Seed, CloudProfile, SecretBinding, Shoot).
kubectl -n garden logs -f deployment/gardener-apiserver # confirm no issues
kubectl -n garden logs -f deployment/gardener-controller-manager # confirm no issues, except some &amp;#34;Failed to list *v1beta1...&amp;#34; messages
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: This is not meant to be used in production. You may not want
to use &lt;code>apiserver.insecureSkipTLSVerify=true&lt;/code>, the hardcoded apiserver
certificates, and insecure (non-tls enabled) etcd. But for the sake of
keeping this example simple you can just keep those values as they
are.&lt;/p>
&lt;h1 id="create-a-cloudprofile">Create a CloudProfile&lt;/h1>
&lt;p>We need to create a CloudProfile to be referred from the Shoot
(&lt;a href="https://github.com/gardener/gardener/blob/master/example/30-cloudprofile.yaml">&lt;code>example/30-cloudprofile.yaml&lt;/code>&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/30-cloudprofile.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Validate that CloudProfile is created:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl describe -f example/30-cloudprofile.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="define-seed-cluster-in-gardener">Define Seed cluster in Gardener&lt;/h1>
&lt;p>In our setup we&amp;rsquo;ll use the cluster for Gardener also as a Seed, this
saves us from creating a new Kubernetes cluster. But you can also
create an explicit cluster for the Seed. Seed cluster can also be
placed into any other cloud provider or on prem. But keep in mind that
below steps may differ if you use a different cluster for seed.&lt;/p>
&lt;p>Currently, a Seed cluster is just a Kubeconfig for the Gardener. The
seed cluster could have been created by any tool, Gardener only cares
about having a valid Kubeconfig to talk to its API.&lt;/p>
&lt;h2 id="create-the-seed-resource-definition-with-its-secret">Create the Seed resource definition with its Secret&lt;/h2>
&lt;p>Lets start with the required seed secret first. Here we need to
provide it&amp;rsquo;s cloud provider credentials and kubeconfig in the seed
secret. Update
&lt;a href="https://github.com/gardener/gardener/blob/master/example/40-secret-seed.yaml">&lt;code>example/40-secret-seed.yaml&lt;/code>&lt;/a>
and place the secrets for your environment:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>data.subscriptionID&lt;/strong>: you can learn this one with &lt;code>az account show&lt;/code>&lt;/li>
&lt;li>&lt;strong>data.tenantID&lt;/strong>: from &lt;code>az ad sp create-for-rbac&lt;/code> output as you can see above&lt;/li>
&lt;li>&lt;strong>data.clientID&lt;/strong>: from &lt;code>az ad sp create-for-rbac&lt;/code> output as you can see above&lt;/li>
&lt;li>&lt;strong>data.clientSecret&lt;/strong>: from &lt;code>az ad sp create-for-rbac&lt;/code> output as you can see above&lt;/li>
&lt;li>&lt;strong>data.kubeconfig&lt;/strong>: you can get this one with &lt;code>az aks get-credentials --resource-group garden-1 --name garden-1 -f - | base64&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>: All of the above values must be base64 encoded. If you skip this it will hurt you later.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">SUBSCRIPTION_ID=$(az account list -o json | jq -r &amp;#39;.[] | select(.isDefault == true) | .id&amp;#39;)
TENANT_ID=$(az account show -o tsv --query &amp;#39;tenantId&amp;#39;)
KUBECONFIG_FOR_SEED_CLUSTER=$(az aks get-credentials --resource-group garden-1 --name garden-1 -f -)
sed -i \
-e &amp;#34;s@base64(uuid-of-subscription)@$(echo $SUBSCRIPTION_ID | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(uuid-of-tenant)@$(echo &amp;#34;$TENANT_ID&amp;#34; | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(uuid-of-client)@$(echo &amp;#34;${CLIENT_ID:?&amp;#34;CLIENT_ID is missing&amp;#34;}&amp;#34; | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(client-secret)@$(echo &amp;#34;${CLIENT_SECRET:?&amp;#34;CLIENT_SECRET is missing&amp;#34;}&amp;#34; | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(kubeconfig-for-seed-cluster)@$(echo &amp;#34;$KUBECONFIG_FOR_SEED_CLUSTER&amp;#34; | base64 -w 0)@&amp;#34; \
example/40-secret-seed.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After updating the fields, create the Seed secret:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/40-secret-seed.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Before creating Seed, we need to update the
&lt;a href="https://github.com/gardener/gardener/blob/master/example/50-seed.yaml">&lt;code>example/50-seed.yaml&lt;/code>&lt;/a> file and
update:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>spec.networks&lt;/strong>: IP ranges used in your AKS cluster.&lt;/li>
&lt;li>&lt;strong>spec.ingressDomain&lt;/strong>: Place here the wildcard domain you have for
the ingress controller (we created this record in prerequisites).
Gardener doesn&amp;rsquo;t create this DNS records but assumes its created
ahead of time, Seed clusters are not provisioned by Gardener.&lt;/li>
&lt;li>&lt;strong>spec.cloud.region&lt;/strong>: &lt;code>eastus&lt;/code> (the region of the existing AKS cluster)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">HOSTED_ZONE_DOMAIN=$(aws route53 get-hosted-zone --id /hostedzone/${HOSTED_ZONE_ID:?&amp;#34;HOSTED_ZONE_ID is missing&amp;#34;} --query &amp;#39;HostedZone.Name&amp;#39; --output text)
INGRESS_DOMAIN=&amp;#34;seed-1.${HOSTED_ZONE_DOMAIN%%.}&amp;#34;
# discover AKS CIDRs
NODE_CIDR=$(az network vnet list -g MC_garden-1_garden-1_eastus -o json | jq -r &amp;#39;.[] | .subnets[] | .addressPrefix&amp;#39;)
POD_CIDR=$(kubectl -n kube-system get daemonset/kube-proxy -o yaml | grep cluster-cidr= | grep -v annotations | cut -d = -f2)
SERVICE_CIDR=10.0.0.0/16 # This one is hardcoded for now, not easy to discover
sed -i \
-e &amp;#34;s/ingressDomain: dev.azure.seed.example.com/ingressDomain: $INGRESS_DOMAIN/&amp;#34; \
-e &amp;#34;s/region: westeurope/region: eastus/&amp;#34; \
-e &amp;#34;s@nodes: 10.240.0.0/16@nodes: $NODE_CIDR@&amp;#34; \
-e &amp;#34;s@pods: 10.241.128.0/17@pods: $POD_CIDR@&amp;#34; \
-e &amp;#34;s@services: 10.241.0.0/17@services: $SERVICE_CIDR@&amp;#34; \
example/50-seed.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we are ready to create the seed:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/50-seed.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check the logs in gardener-controller-manager and also wait for seed
to be &lt;code>Ready: True&lt;/code>. This means gardener-controller-manager is able to
reach the Seed cluster with the credentials you provide.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ gardenctl target garden dev
KUBECONFIG=/Users/user/.kube/config
$ kubectl get seed azure
NAME CLOUDPROFILE REGION INGRESS DOMAIN AVAILABLE AGE
azure azure eastus seed-1.your.domain.here True 1m
$ gardenctl ls seeds
seeds:
- seed: azure
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If something goes wrong verify that you provided right credentials,
and base64 encoded strings of those in the secret. Also check the
status field in the Seed resource and gardener-controller-manager
logs:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubectl get seed azure -o json | jq .status
{
&amp;#34;conditions&amp;#34;: [
{
&amp;#34;lastTransitionTime&amp;#34;: &amp;#34;2018-05-31T14:56:49Z&amp;#34;,
&amp;#34;message&amp;#34;: &amp;#34;all checks passed&amp;#34;,
&amp;#34;reason&amp;#34;: &amp;#34;Passed&amp;#34;,
&amp;#34;status&amp;#34;: &amp;#34;True&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;Available&amp;#34;
}
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="create-a-shoot-cluster">Create a Shoot cluster&lt;/h1>
&lt;h2 id="create-a-project-namespace-for-shoots">Create a Project (namespace) for Shoots&lt;/h2>
&lt;p>In this step we create a namespace in Gardener cluster to keep Shoot
resource definitions. A &lt;code>project&lt;/code> in Gardener terminology is simply a
namespace that holds group of Shoots, during this example we&amp;rsquo;ll deploy
a single Shoot. (Mind the extra labels defined in
&lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/deployment/../../example/00-namespace-garden-dev.yaml">example/00-namespace-garden-dev.yaml&lt;/a>).&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/05-project-dev.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can check the projects via &lt;code>gardenctl&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ gardenctl target garden dev
$ kubectl get project dev
NAME NAMESPACE STATUS OWNER CREATOR AGE
dev garden-dev Ready john.doe@example.com client 1m
$ kubectl get ns garden-dev
NAME STATUS AGE
garden-dev Active 1m
$ gardenctl ls projects
projects:
- project: garden-dev
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-a-secretbinding-and-related-secret">Create a SecretBinding and related Secret&lt;/h2>
&lt;p>We&amp;rsquo;ll use same Azure credentials with
&lt;a href="https://github.com/gardener/gardener/blob/master/example/40-secret-seed.yaml">&lt;code>example/40-secret-seed.yaml&lt;/code>&lt;/a>,
this is due to the fact that we use the same Azure Subscription for
the Shoot and Seed clusters. Differently from the Seed secret, in this
one we don&amp;rsquo;t need to provide &lt;code>kubeconfig&lt;/code> since the Shoot cluster will
be provisioned by Gardener, and we need to provide credentials for
Route53 DNS records management.&lt;/p>
&lt;p>Update
&lt;a href="https://github.com/gardener/gardener/blob/master/example/70-secret-provider.yaml">&lt;code>example/70-secret-provider.yaml&lt;/code>&lt;/a>
and place the secrets for your environment:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>data.subscriptionID&lt;/strong>: you can learn this one with &lt;code>az account show&lt;/code>&lt;/li>
&lt;li>&lt;strong>data.tenantID&lt;/strong>: from &lt;code>az ad sp create-for-rbac&lt;/code> output as you can see above&lt;/li>
&lt;li>&lt;strong>data.clientID&lt;/strong>: from &lt;code>az ad sp create-for-rbac&lt;/code> output as you can see above&lt;/li>
&lt;li>&lt;strong>data.clientSecret&lt;/strong>: from &lt;code>az ad sp create-for-rbac&lt;/code> output as you can see above&lt;/li>
&lt;li>&lt;strong>data.accessKeyID&lt;/strong>: You need to add this field for Route53 records to be updated.&lt;/li>
&lt;li>&lt;strong>data.secretAccessKey&lt;/strong>: You need to add this field for Route53 records to be updated.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note&lt;/strong>: All of the above values must be base64 encoded. If you skip this it will hurt you later.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">SUBSCRIPTION_ID=$(az account list -o json | jq -r &amp;#39;.[] | select(.isDefault == true) | .id&amp;#39;)
TENANT_ID=$(az account show -o tsv --query &amp;#39;tenantId&amp;#39;)
ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
sed -i \
-e &amp;#34;s@base64(uuid-of-subscription)@$(echo $SUBSCRIPTION_ID | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(uuid-of-tenant)@$(echo &amp;#34;$TENANT_ID&amp;#34; | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(uuid-of-client)@$(echo &amp;#34;${CLIENT_ID:?&amp;#34;CLIENT_ID is missing&amp;#34;}&amp;#34; | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;s@base64(client-secret)@$(echo &amp;#34;${CLIENT_SECRET:?&amp;#34;CLIENT_SECRET is missing&amp;#34;}&amp;#34; | tr -d &amp;#39;\n&amp;#39; | base64)@&amp;#34; \
-e &amp;#34;\$a\ \ accessKeyID: $(echo $ACCESS_KEY_ID | tr -d &amp;#39;\n&amp;#39; | base64 )&amp;#34; \
-e &amp;#34;\$a\ \ secretAccessKey: $(echo $SECRET_ACCESS_KEY | tr -d &amp;#39;\n&amp;#39; | base64 )&amp;#34; \
example/70-secret-provider.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After updating the fields, create the cloud provider secret:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/70-secret-provider.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And create the SecretBinding resource to allow Gardener use that
secret
(&lt;a href="https://github.com/gardener/gardener/blob/master/example/80-secretbinding.yaml">&lt;code>example/80-secretbinding.yaml&lt;/code>&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">sed -i \
-e &amp;#39;s/# namespace: .*/ namespace: garden-dev/&amp;#39; \
example/80-secretbinding.yaml
kubectl apply -f example/80-secretbinding.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check the logs in gardener-controller-manager, there should not be any
problems reported.&lt;/p>
&lt;h2 id="create-the-shoot-resource">Create the Shoot resource&lt;/h2>
&lt;p>Update the fields in &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-shoot.yaml">&lt;code>example/90-shoot.yaml&lt;/code>&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>spec.cloud.region&lt;/strong>: &lt;code>eastus&lt;/code> (this must match the seed cluster&amp;rsquo;s region)&lt;/li>
&lt;li>&lt;strong>spec.dns.domain&lt;/strong>: This is used to specify the base domain for
your api (and other in the future) endpoint(s). For example when
&lt;code>johndoe-azure.garden-dev.your.domain.here&lt;/code> is used as a value, then your
apiserver is available at &lt;code>api.johndoe-azure.garden-dev.your.domain.here&lt;/code>&lt;/li>
&lt;li>&lt;strong>spec.dns.hostedZoneID&lt;/strong>: This field doesn&amp;rsquo;t exist in the example
you need to add this field and place the Route53 Hosted Zone ID.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">HOSTED_ZONE_DOMAIN=$(aws route53 get-hosted-zone --id /hostedzone/${HOSTED_ZONE_ID:?&amp;#34;HOSTED_ZONE_ID is missing&amp;#34;} --query &amp;#39;HostedZone.Name&amp;#39; --output text)
SHOOT_DOMAIN=&amp;#34;johndoe-azure.garden-dev.${HOSTED_ZONE_DOMAIN%%.}&amp;#34;
KUBE_LEGO_EMAIL=$(git config user.email)
sed -i \
-e &amp;#34;s/region: westeurope/region: eastus/&amp;#34; \
-e &amp;#34;s/domain: johndoe-azure.garden-dev.example.com/domain: $SHOOT_DOMAIN/&amp;#34; \
-e &amp;#34;/domain:/a\ \ \ \ hostedZoneID: $HOSTED_ZONE_ID&amp;#34; \
-e &amp;#34;s/email: john.doe@example.com/email: $KUBE_LEGO_EMAIL/&amp;#34; \
example/90-shoot.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And let&amp;rsquo;s create the Shoot resource:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl apply -f example/90-shoot.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After creating the Shoot resource, gardener-controller-manager will
pick it up and start provisioning the Shoot cluster.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ kubectl get -f example/90-shoot.yaml
NAME CLOUDPROFILE VERSION SEED DOMAIN OPERATION PROGRESS APISERVER CONTROL NODES SYSTEM AGE
johndoe-azure azure 1.12.3 azure johndoe-azure.garden-dev.your.domain.here Processing 15 &amp;lt;unknown&amp;gt; &amp;lt;unknown&amp;gt; &amp;lt;unknown&amp;gt; &amp;lt;unknown&amp;gt; 16s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Follow the logs in your console with gardener-controller-manager,
starting like below you&amp;rsquo;ll see plenty of &lt;code>Waiting&lt;/code> and &lt;code>Executing&lt;/code>,
etc. logs and many tasks will keep repeating:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">time=&amp;#34;2018-06-09T07:35:45Z&amp;#34; level=info msg=&amp;#34;[SHOOT RECONCILE] garden-dev/johndoe-azure&amp;#34;
time=&amp;#34;2018-06-09T07:35:46Z&amp;#34; level=info msg=&amp;#34;Starting flow Shoot cluster creation&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:46Z&amp;#34; level=info msg=&amp;#34;Executing (*Botanist).botanist.Shoot.Components.DNS.External{Provider/Entry}.Deploy&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:46Z&amp;#34; level=info msg=&amp;#34;Executing (*Botanist).DeployNamespace&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:46Z&amp;#34; level=info msg=&amp;#34;Executing (*Botanist).DeployKubeAPIServerService&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:46Z&amp;#34; level=info msg=&amp;#34;Executing (*Botanist).DeployBackupNamespaceFromShoot&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:46Z&amp;#34; level=info msg=&amp;#34;Waiting for Terraform validation Pod &amp;#39;johndoe-azure.external-dns.tf-pod-d8f66&amp;#39; to be completed...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:51Z&amp;#34; level=info msg=&amp;#34;Waiting for Terraform validation Pod &amp;#39;johndoe-azure.external-dns.tf-pod-d8f66&amp;#39; to be completed...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:51Z&amp;#34; level=info msg=&amp;#34;Executing (*Botanist).MoveBackupTerraformResources&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:52Z&amp;#34; level=info msg=&amp;#34;Executing (*Botanist).WaitUntilKubeAPIServerServiceIsReady&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:52Z&amp;#34; level=info msg=&amp;#34;Waiting until the kube-apiserver service is ready...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:52Z&amp;#34; level=info msg=&amp;#34;Waiting until the backup-infrastructure has been reconciled in the Garden cluster...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:56Z&amp;#34; level=info msg=&amp;#34;Waiting for Terraform validation Pod &amp;#39;johndoe-azure.external-dns.tf-pod-d8f66&amp;#39; to be completed...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:57Z&amp;#34; level=info msg=&amp;#34;Waiting until the kube-apiserver service is ready...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:35:57Z&amp;#34; level=info msg=&amp;#34;Waiting until the backup-infrastructure has been reconciled in the Garden cluster...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:36:01Z&amp;#34; level=info msg=&amp;#34;Waiting for Terraform validation Pod &amp;#39;johndoe-azure.external-dns.tf-pod-d8f66&amp;#39; to be completed...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:36:02Z&amp;#34; level=info msg=&amp;#34;Waiting until the kube-apiserver service is ready...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
time=&amp;#34;2018-06-09T07:36:02Z&amp;#34; level=info msg=&amp;#34;Waiting until the backup-infrastructure has been reconciled in the Garden cluster...&amp;#34; opid=VIBBBGFx shoot=garden-dev/johndoe-azure
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this stage you should be waiting for a while until the Shoot
cluster is provisioned and initial resources are deployed.&lt;/p>
&lt;p>During the provisioning you can also check output of these commands to
have a better understanding about what&amp;rsquo;s going on in the seed cluster:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ gardenctl ls shoots
projects:
- project: garden-dev
shoots:
- johndoe-azure
$ gardenctl ls issues
issues:
- project: garden-dev
seed: azure
shoot: johndoe-azure
health: Unknown
status:
lastOperation:
description: Executing DeployKubeAddonManager, ReconcileMachines.
lastUpdateTime: 2018-06-09 08:40:20 +0100 IST
progress: 74
state: Processing
type: Create
$ kubectl -n garden-dev get shoot johndoe-azure
NAMESPACE NAME SEED DOMAIN VERSION CONTROL NODES SYSTEM LATEST
garden-dev johndoe-azure azure johndoe-azure.garden-dev.your.domain.here 1.10.1 True True True Succeeded
$ kubectl -n garden-dev describe shoot johndoe-azure
...
Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Normal Reconciling 1h gardener-controller-manager [BrXWiztO] Reconciling Shoot cluster state
Normal Reconciling 59m gardener-controller-manager [rBFsfwU5] Reconciling Shoot cluster state
Normal Reconciling 59m gardener-controller-manager [2HAbm45D] Reconciling Shoot cluster state
Normal Reconciling 48m gardener-controller-manager [S1QA0ksz] Reconciling Shoot cluster state
Normal Reconciling 47m gardener-controller-manager [lvcSKy1Q] Reconciling Shoot cluster state
Normal Reconciling 47m gardener-controller-manager [MddMyk8W] Reconciling Shoot cluster state
Normal Reconciling 47m gardener-controller-manager [XDAAWABd] Reconciling Shoot cluster state
Normal Reconciling 46m gardener-controller-manager [6HYH9Psz] Reconciling Shoot cluster state
Normal Reconciling 46m gardener-controller-manager [rhL38ym4] Reconciling Shoot cluster state
Normal Reconciling 35m gardener-controller-manager [BOt4Nvso] Reconciling Shoot cluster state
Normal Reconciling 35m gardener-controller-manager [JPtmXmxD] Reconciling Shoot cluster state
Normal Reconciling 34m gardener-controller-manager [ldHsVA6G] Reconciling Shoot cluster state
Normal Reconciled 31m gardener-controller-manager [ldHsVA6G] Reconciled Shoot cluster state
Normal Reconciling 26m gardener-controller-manager [yBh2IBOF] Reconciling Shoot cluster state
Normal Reconciled 24m gardener-controller-manager [yBh2IBOF] Reconciled Shoot cluster state
Normal Reconciling 16m gardener-controller-manager [bqmFtHUA] Reconciling Shoot cluster state
Normal Reconciled 14m gardener-controller-manager [bqmFtHUA] Reconciled Shoot cluster state
Normal Reconciling 6m gardener-controller-manager [7QgHE5CH] Reconciling Shoot cluster state
Normal Reconciled 3m gardener-controller-manager [7QgHE5CH] Reconciled Shoot cluster state
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check Shoot cluster:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ gardenctl target garden dev
KUBECONFIG=/Users/user/.kube/config
$ gardenctl target project garden-dev
$ gardenctl target shoot johndoe-azure
KUBECONFIG=/Users/user/.garden/cache/projects/garden-dev/johndoe-azure/kubeconfig.yaml
$ gardenctl kubectl cluster-info
Kubernetes master is running at https://api.johndoe-azure.garden-dev.your.domain.here
CoreDNS is running at https://api.johndoe-azure.garden-dev.your.domain.here/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
kubernetes-dashboard is running at https://api.johndoe-azure.garden-dev.your.domain.here/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy
To further debug and diagnose cluster problems, use &amp;#39;kubectl cluster-info dump&amp;#39;.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cluster-resources-after-shoot-is-created">Cluster Resources After Shoot is Created&lt;/h3>
&lt;p>After the Shoot has been created the summary of the resources in the
AKS cluster handled by Gardener will be something like this:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">non-namespaced resources
CloudProfile: azure
Project: dev
Namespace: garden-dev
Seed: azure # cloud.profile:azure, cloud.region:eastus, secretRef.name:seed-azure, secretRef.namespace: garden
Namespace: garden
Secret: seed-azure # aks credentials, kubeconfig
# No other resources with any kind handled by Gardener
# Gardener components as well lives in this namespace
Namespace: garden-dev # maps to &amp;#34;project:dev&amp;#34; in Gardener
Secret: core-azure # credentials for aks + aws (for route53)
SecretBinding: core-azure # secretRef.name:core-azure
Shoot: johndoe-azure # seed:azure, secretBindingRef.name:core-azure
Namespace: shoot--dev--johndoe-azure
# These are automatically created once Shoot resource is created
AzureMachineClass: shoot--dev--johndoe-azure-cpu-worker-8506a
MachineDeployment: shoot--dev--johndoe-azure-cpu-worker
MachineSet: shoot--dev--johndoe-azure-cpu-worker-849bbbf75
Machine: shoot--dev--johndoe-azure-cpu-worker-849bbbf75-b42vh
BackupInfra: shoot--dev--johndoe-azure--c1b3b # seed:azure, shootUID: shoot.status.UID.
# Many other resources created as part of shoot cluster,
# but only above ones are handled by Gardener
Namespace: backup--shoot--dev--johndoe-azure--c1b3b
# Secrets and configMap having info related to backup infrastructure
# are created by Gardener.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="troubleshooting-shoot-creation-issues">Troubleshooting Shoot Creation Issues&lt;/h3>
&lt;p>For any issue happening during Shoot provisioning, you can consult the
gardener-controller-manager logs, or the state in the shoot resource,
&lt;code>gardenctl&lt;/code> also provides a command to check Shoot cluster states:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># check gardener-controller-manager logs
kubectl -n garden logs -f deployment/gardener-controller-manager
# kubectl describe can provide you a human readable output of
# same information in below gardenctl command.
kubectl -n garden-dev describe shoot johndoe-azure
# also try cheking the machine-controller-manager logs of the shoot
kubectl logs -n shoot--dev--johndoe-azure deployment/machine-controller-manager
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With &lt;code>gardenctl&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ gardenctl ls issues
issues:
- project: garden-dev
seed: azure
shoot:
health: Ready
status: johndoe-azure
lastError: &amp;#34;Failed to reconcile Shoot cluster state: Errors occurred during flow
execution: &amp;#39;(*Botanist).Shoot.Components.DNS.External{Provider/Entry}.Destroy&amp;#39; returned &amp;#39;Terraform execution
...
lastOperation:
description: &amp;#34;Failed to reconcile Shoot cluster state: Errors occurred during
flow execution: &amp;#39;(*Botanist).Shoot.Components.DNS.External{Provider/Entry}.Destroy&amp;#39; returned &amp;#39;Terraform
...
lastUpdateTime: 2018-06-03 09:48:00 +0100 IST
progress: 100
state: Failed
type: Reconcile
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="access-shoot-cluster">Access Shoot cluster&lt;/h1>
&lt;p>The &lt;code>gardenctl&lt;/code> tool provides a convenient wrapper to operate on both
cluster and cloud providers, here are some commands you can run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># select target shoot cluster
gardenctl ls gardens
gardenctl target garden dev
gardenctl ls projects
gardenctl target shoot johndoe-azure
# issue Azure client (az) commands on target shoot
gardenctl az aks list
# issue kubectl commands on target shoot
gardenctl kubectl -- version --short # &amp;#39;--&amp;#39; is required if you want to
# pass any args starting with &amp;#39;-&amp;#39;
# open prometheus, alertmanager, grafana without having to find
# the user/pass for each
gardenctl show prometheus
gardenctl show grafana
gardenctl show alertmanager
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Easiest way to obtain &lt;code>kubeconfig&lt;/code> of the shoot cluster:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">$ gardenctl target shoot johndoe-azure
KUBECONFIG=/Users/user/.garden/cache/projects/garden-dev/johndoe-azure/kubeconfig.yaml
$ export KUBECONFIG=/Users/user/.garden/cache/projects/garden-dev/johndoe-azure/kubeconfig.yaml
$ # From now on your local kubectl will be operating on target shoot
$ kubectl cluster-info # will show your shoot cluster info
$ unset KUBECONFIG # reset to your default kubectl
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The shoot cluster&amp;rsquo;s kubeconfig is being kept in a secret in the
project namespace:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">kubectl -n shoot--dev--johndoe-azure get secret kubecfg -o jsonpath=&amp;#39;{.data.kubeconfig}&amp;#39; | base64 -D &amp;gt; /tmp/johndoe-azure-kubeconfig.yaml
export KUBECONFIG=/tmp/johndoe-azure-kubeconfig.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="delete-shoot-cluster">Delete Shoot cluster&lt;/h1>
&lt;p>Deleting a Shoot cluster is not straight forward, and this is to
protect users from undesired/accidental cluster deletion. One has to
place some special annotations to get a Shoot cluster removed. We use
the &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/deployment/../../hack/usage/delete">hack/usage/delete&lt;/a> script for this purpose.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">hack/delete shoot johndoe-azure garden-dev
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Environment</title><link>https://gardener.cloud/docs/contribute/10_code/13_env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/10_code/13_env/</guid><description>
&lt;h1 id="preparing-the-setup">Preparing the Setup&lt;/h1>
&lt;p>Conceptually, all Gardener components are designated to run inside as a Pod inside a Kubernetes cluster.
The API server extends the Kubernetes API via the user-aggregated API server concepts.
However, if you want to develop it, you may want to work locally with the Gardener without building a Docker image and deploying it to a cluster each and every time.
That means that the Gardener runs outside a Kubernetes cluster which requires providing a &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/authenticate-across-clusters-kubeconfig/">Kubeconfig&lt;/a> in your local filesystem and point the Gardener to it when starting it (see below).&lt;/p>
&lt;p>Further details could be found in&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/">Principles of Kubernetes&lt;/a>, and its &lt;a href="https://kubernetes.io/docs/concepts/overview/components/">components&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes/community/tree/master/contributors/devel">Kubernetes Development Guide&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/documentation/wiki/Architecture.md">Architecture of Gardener&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>This setup is based on &lt;a href="https://github.com/kubernetes/minikube">minikube&lt;/a>, a Kubernetes cluster running on a single node. Docker for Desktop and &lt;a href="https://github.com/kubernetes-sigs/kind">kind&lt;/a> are also supported.&lt;/p>
&lt;h2 id="installing-golang-environment">Installing Golang environment&lt;/h2>
&lt;p>Install latest version of Golang. For MacOS you could use &lt;a href="https://brew.sh/">Homebrew&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">brew install golang
&lt;/code>&lt;/pre>&lt;/div>&lt;p>For other OS, please check &lt;a href="https://golang.org/doc/install">Go installation documentation&lt;/a>.&lt;/p>
&lt;h2 id="installing-kubectl-and-helm">Installing kubectl and helm&lt;/h2>
&lt;p>As already mentioned in the introduction, the communication with the Gardener happens via the Kubernetes (Garden) cluster it is targeting. To interact with that cluster, you need to install &lt;code>kubectl&lt;/code>. Please make sure that the version of &lt;code>kubectl&lt;/code> is at least &lt;code>v1.11.x&lt;/code>.&lt;/p>
&lt;p>On MacOS run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">brew install kubernetes-cli
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please check the &lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/">kubectl installation documentation&lt;/a> for other OS.&lt;/p>
&lt;p>You may also need to develop Helm charts or interact with Tiller using the &lt;a href="https://github.com/kubernetes/helm">Helm&lt;/a> CLI:&lt;/p>
&lt;p>On MacOS run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">brew install kubernetes-helm
&lt;/code>&lt;/pre>&lt;/div>&lt;p>On other OS please check the &lt;a href="https://github.com/helm/helm/blob/main/README.md#install">Helm installation documentation&lt;/a>.&lt;/p>
&lt;h2 id="installing-git">Installing git&lt;/h2>
&lt;p>We use &lt;code>git&lt;/code> as VCS which you need to install.&lt;/p>
&lt;p>On MacOS run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">brew install git
&lt;/code>&lt;/pre>&lt;/div>&lt;p>On other OS, please check the &lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">Git installation documentation&lt;/a>.&lt;/p>
&lt;h2 id="installing-openvpn">Installing openvpn&lt;/h2>
&lt;p>We use &lt;code>OpenVPN&lt;/code> to establish network connectivity from the control plane running in the Seed cluster to the Shoot&amp;rsquo;s worker nodes running in private networks.
To harden the security we need to generate another secret to encrypt the network traffic (&lt;a href="https://openvpn.net/index.php/open-source/documentation/howto.html#security">details&lt;/a>).
Please install the &lt;code>openvpn&lt;/code> binary. On MacOS run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">brew install openvpn
&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>brew --prefix openvpn&lt;span class="k">)&lt;/span>/sbin:&lt;span class="nv">$PATH&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>On other OS, please check the &lt;a href="https://openvpn.net/index.php/open-source/downloads.html">OpenVPN downloads page&lt;/a>.&lt;/p>
&lt;h2 id="installing-minikube">Installing Minikube&lt;/h2>
&lt;p>You&amp;rsquo;ll need to have &lt;a href="https://github.com/kubernetes/minikube#installation">minikube&lt;/a> installed and running.&lt;/p>
&lt;blockquote>
&lt;p>Note: Gardener is working only with self-contained kubeconfig files because of &lt;a href="https://banzaicloud.com/blog/kubeconfig-security/">security issue&lt;/a>. You can configure your minikube to create self-contained kubeconfig files via:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">minikube config &lt;span class="nb">set&lt;/span> embed-certs &lt;span class="nb">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Alternatively, you can also install Docker for Desktop and &lt;a href="https://github.com/kubernetes-sigs/kind">kind&lt;/a>.&lt;/p>
&lt;p>In case you want to use the &amp;ldquo;Docker for Mac Kubernetes&amp;rdquo; or if you want to build Docker images for the Gardener you have to install Docker itself. On MacOS, please use &lt;a href="https://docs.docker.com/docker-for-mac/">Docker for MacOS&lt;/a> which can be downloaded &lt;a href="https://download.docker.com/mac/stable/Docker.dmg">here&lt;/a>.&lt;/p>
&lt;p>On other OS, please check the &lt;a href="https://docs.docker.com/install/">Docker installation documentation&lt;/a>.&lt;/p>
&lt;h2 id="installing-iproute2">Installing iproute2&lt;/h2>
&lt;p>&lt;code>iproute2&lt;/code> provides a collection of utilities for network administration and configuration.&lt;/p>
&lt;p>On MacOS run&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">brew install iproute2mac
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installing-yaml2json-and-jq">Installing yaml2json and jq&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">go get -u github.com/bronze1man/yaml2json
brew install jq
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="macos-only-install-gnu-core-utilities">[MacOS only] Install GNU core utilities&lt;/h2>
&lt;p>When running on MacOS you have to install the GNU core utilities:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">brew install coreutils gnu-sed
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will create symbolic links for the GNU utilities with &lt;code>g&lt;/code> prefix in &lt;code>/usr/local/bin&lt;/code>, e.g., &lt;code>gsed&lt;/code> or &lt;code>gbase64&lt;/code>. To allow using them without the &lt;code>g&lt;/code> prefix please put &lt;code>/usr/local/opt/coreutils/libexec/gnubin&lt;/code> at the beginning of your &lt;code>PATH&lt;/code> environment variable, e.g., &lt;code>export PATH=/usr/local/opt/coreutils/libexec/gnubin:$PATH&lt;/code>.&lt;/p>
&lt;h2 id="windows-wsl2">[Windows] WSL2&lt;/h2>
&lt;p>Apart from Linux distributions and MacOS, the local gardener setup can also run on the Windows Subsystem for Linux 2.&lt;/p>
&lt;p>While WSL1, plain docker for windows and various Linux distributions and local Kubernetes environments may be supported, this setup was verified with:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-index">WSL2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/docker-for-windows/wsl/">Docker Desktop WSL2 Engine&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ubuntu.com/blog/ubuntu-on-wsl-2-is-generally-available">Ubuntu 18.04 LTS on WSL2&lt;/a>&lt;/li>
&lt;li>Nodeless local garden (see below)&lt;/li>
&lt;/ul>
&lt;p>The Gardener repository and all the above-mentioned tools (git, golang, kubectl, &amp;hellip;) should be installed in your WSL2 distro, according to the distribution-specific Linux installation instructions.&lt;/p>
&lt;h2 id="optional-installing-gcloud-sdk">[Optional] Installing gcloud SDK&lt;/h2>
&lt;p>In case you have to create a new release or a new hotfix of the Gardener you have to push the resulting Docker image into a Docker registry. Currently, we are using the Google Container Registry (this could change in the future). Please follow the official &lt;a href="https://cloud.google.com/sdk/downloads">installation instructions from Google&lt;/a>.&lt;/p>
&lt;h2 id="local-gardener-setup">Local Gardener setup&lt;/h2>
&lt;p>This setup is only meant to be used for developing purposes, which means that only the control plane of the Gardener cluster is running on your machine.&lt;/p>
&lt;h3 id="get-the-sources">Get the sources&lt;/h3>
&lt;p>Clone the repository from GitHub.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git clone git@github.com:gardener/gardener.git
&lt;span class="nb">cd&lt;/span> gardener
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="start-the-gardener">Start the Gardener&lt;/h3>
&lt;p>:warning: Before you start developing, please ensure to comply with the following requirements:&lt;/p>
&lt;ol>
&lt;li>You have understood the &lt;a href="https://kubernetes.io/docs/concepts/">principles of Kubernetes&lt;/a>, and its &lt;a href="https://kubernetes.io/docs/concepts/overview/components/">components&lt;/a>, what their purpose is and how they interact with each other.&lt;/li>
&lt;li>You have understood the &lt;a href="https://github.com/gardener/documentation/wiki/Architecture.md">architecture of Gardener&lt;/a>, and what the various clusters are used for.&lt;/li>
&lt;/ol>
&lt;h4 id="start-a-local-kubernetes-cluster">Start a local kubernetes cluster&lt;/h4>
&lt;p>For the development of Gardener you need some kind of Kubernetes cluster, which can be used as a &amp;ldquo;garden&amp;rdquo; cluster.
I.e. you need a Kubernetes API server on which you can register a &lt;code>APIService&lt;/code> Gardener&amp;rsquo;s own Extension API Server.&lt;br>
For this you can use a standard tool from the community to setup a local cluster like minikube, kind or the Kubernetes Cluster feature in Docker for Desktop.&lt;/p>
&lt;p>However, if you develop and run Gardener&amp;rsquo;s components locally, you don&amp;rsquo;t actually a fully fledged Kubernetes Cluster,
i.e. you don&amp;rsquo;t actually need to run Pods on it. If you want to use a more lightweight approach for development purposes,
you can use the &amp;ldquo;nodeless Garden cluster setup&amp;rdquo; residing in &lt;code>hack/local-garden&lt;/code>. This is the easiest way to get your
Gardener development setup up and running.&lt;/p>
&lt;p>&lt;strong>Using the nodeless cluster setup&lt;/strong>&lt;/p>
&lt;p>Setting up a local nodeless Garden cluster is quite simple. The only prerequisite is a running docker daemon.
Just use the provided Makefile rules to start your local Garden:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">make local-garden-up
&lt;span class="o">[&lt;/span>...&lt;span class="o">]&lt;/span>
Starting gardener-dev kube-etcd cluster..!
Starting gardener-dev kube-apiserver..!
Starting gardener-dev kube-controller-manager..!
Starting gardener-dev gardener-etcd cluster..!
namespace/garden created
clusterrole.rbac.authorization.k8s.io/gardener.cloud:admin created
clusterrolebinding.rbac.authorization.k8s.io/front-proxy-client created
&lt;span class="o">[&lt;/span>...&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will start all minimally required components of a Kubernetes cluster (&lt;code>etcd&lt;/code>, &lt;code>kube-apiserver&lt;/code>, &lt;code>kube-controller-manager&lt;/code>)
and an &lt;code>etcd&lt;/code> Instance for the &lt;code>gardener-apiserver&lt;/code> as Docker containers.&lt;/p>
&lt;p>To tear down the local Garden cluster and remove the Docker containers, simply run:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">make local-garden-down
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Using minikube&lt;/strong>&lt;/p>
&lt;p>Alternatively, spin up a cluster with minikube with this command:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">minikube start --embed-certs &lt;span class="c1"># `--embed-certs` can be omitted if minikube has already been set to create self-contained kubeconfig files.&lt;/span>
😄 minikube v1.8.2 on Darwin 10.15.3
🔥 Creating virtualbox VM &lt;span class="o">(&lt;/span>&lt;span class="nv">CPUs&lt;/span>&lt;span class="o">=&lt;/span>2, &lt;span class="nv">Memory&lt;/span>&lt;span class="o">=&lt;/span>2048MB, &lt;span class="nv">Disk&lt;/span>&lt;span class="o">=&lt;/span>20000MB&lt;span class="o">)&lt;/span> ...
&lt;span class="o">[&lt;/span>...&lt;span class="o">]&lt;/span>
🏄 Done! Thank you &lt;span class="k">for&lt;/span> using minikube!
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="prepare-the-gardener">Prepare the Gardener&lt;/h4>
&lt;p>Now, that you have started your local cluster, we can go ahead and register the Gardener API Server.
Just point your &lt;code>KUBECONFIG&lt;/code> environment variable to the local cluster you created in the previous step and run:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">make dev-setup
Found Minikube ...
namespace/garden created
namespace/garden-dev created
deployment.apps/etcd created
service/etcd created
service/gardener-apiserver created
service/gardener-controller-manager created
endpoints/gardener-apiserver created
endpoints/gardener-controller-manager created
apiservice.apiregistration.k8s.io/v1alpha1.core.gardener.cloud created
apiservice.apiregistration.k8s.io/v1beta1.core.gardener.cloud created
validatingwebhookconfiguration.admissionregistration.k8s.io/gardener-controller-manager created
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Optionally, you can switch off the &lt;code>Logging&lt;/code> feature gate of Gardenlet to save resources:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sed -i -e &lt;span class="s1">&amp;#39;s/Logging: true/Logging: false/g&amp;#39;&lt;/span> dev/20-componentconfig-gardenlet.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Gardener exposes the API servers of Shoot clusters via Kubernetes services of type &lt;code>LoadBalancer&lt;/code>.
In order to establish stable endpoints (robust against changes of the load balancer address), it creates DNS records pointing to these load balancer addresses. They are used internally and by all cluster components to communicate.
You need to have control over a domain (or subdomain) for which these records will be created.
Please provide an &lt;em>internal domain secret&lt;/em> (see &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/development/../../example/10-secret-internal-domain.yaml">this&lt;/a> for an example) which contains credentials with the proper privileges. Further information can be found &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/development/../usage/configuration.md">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">kubectl apply -f example/10-secret-internal-domain-unmanaged.yaml
secret/internal-domain-unmanaged created
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="run-the-gardener">Run the Gardener&lt;/h4>
&lt;p>Next, run the Gardener API Server, the Gardener Controller Manager (optionally), the Gardener Scheduler (optionally), and the Gardenlet in different terminal windows/panes using rules in the &lt;code>Makefile&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">make start-apiserver
Found Minikube ...
I0306 15:23:51.044421 &lt;span class="m">74536&lt;/span> plugins.go:84&lt;span class="o">]&lt;/span> Registered admission plugin &lt;span class="s2">&amp;#34;ResourceReferenceManager&amp;#34;&lt;/span>
I0306 15:23:51.044523 &lt;span class="m">74536&lt;/span> plugins.go:84&lt;span class="o">]&lt;/span> Registered admission plugin &lt;span class="s2">&amp;#34;DeletionConfirmation&amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span>...&lt;span class="o">]&lt;/span>
I0306 15:23:51.626836 &lt;span class="m">74536&lt;/span> secure_serving.go:116&lt;span class="o">]&lt;/span> Serving securely on &lt;span class="o">[&lt;/span>::&lt;span class="o">]&lt;/span>:8443
&lt;span class="o">[&lt;/span>...&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Optional) Now you are ready to launch the Gardener Controller Manager.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">make start-controller-manager
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-03-06T15:24:17+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Starting Gardener controller manager...&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-03-06T15:24:17+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Feature Gates: &amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-03-06T15:24:17+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Starting HTTP server on 0.0.0.0:2718&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-03-06T15:24:17+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Acquired leadership, starting controllers.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Starting HTTPS server on 0.0.0.0:2719&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Found internal domain secret internal-domain-unmanaged for domain nip.io.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Successfully bootstrapped the Garden cluster.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Gardener controller manager (version 1.0.0-dev) initialized.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;ControllerRegistration controller initialized.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;SecretBinding controller initialized.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Project controller initialized.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Quota controller initialized.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-03-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;CloudProfile controller initialized.&amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span>...&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Optional) Now you are ready to launch the Gardener Scheduler.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">make start-scheduler
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-05-02T16:31:50+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Starting Gardener scheduler ...&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-05-02T16:31:50+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Starting HTTP server on 0.0.0.0:10251&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-05-02T16:31:50+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Acquired leadership, starting scheduler.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-05-02T16:31:50+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Gardener scheduler initialized (with Strategy: SameRegion)&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-05-02T16:31:50+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Scheduler controller initialized.&amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span>...&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(Optional) Now you are ready to launch the Gardenlet.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">make start-gardenlet
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-11-06T15:24:17+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Starting Gardenlet...&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-11-06T15:24:17+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Feature Gates: HVPA=true, Logging=true&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-11-06T15:24:17+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Acquired leadership, starting controllers.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-11-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Found internal domain secret internal-domain-unmanaged for domain nip.io.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-11-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Gardenlet (version 1.0.0-dev) initialized.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-11-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;ControllerInstallation controller initialized.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-11-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Shoot controller initialized.&amp;#34;&lt;/span>
&lt;span class="nv">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;2019-11-06T15:24:18+02:00&amp;#34;&lt;/span> &lt;span class="nv">level&lt;/span>&lt;span class="o">=&lt;/span>info &lt;span class="nv">msg&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Seed controller initialized.&amp;#34;&lt;/span>
&lt;span class="o">[&lt;/span>...&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>:warning: The Gardenlet will handle all your seeds for this development scenario, although, for productive usage it is recommended to run it once per seed, see &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/development/../concepts/gardenlet.md">this document&lt;/a> for more information.
See the &lt;a href="#appendix">Appendix&lt;/a> on how to configure the Seed clusters for the local development scenario.&lt;/p>
&lt;p>Please checkout the &lt;a href="https://github.com/gardener/gem">Gardener Extensions Manager&lt;/a> to install extension controllers - make sure that you install all of them required for your local development.
Also, please refer to &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/development/../extensions/controllerregistration.md">this document&lt;/a> for further information about how extensions are registered in case you want to use other versions than the latest releases.&lt;/p>
&lt;p>The Gardener should now be ready to operate on Shoot resources. You can use&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">kubectl get shoots
No resources found.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>to operate against your local running Gardener API Server.&lt;/p>
&lt;blockquote>
&lt;p>Note: It may take several seconds until the &lt;code>minikube&lt;/code> cluster recognizes that the Gardener API server has been started and is available. &lt;code>No resources found&lt;/code> is the expected result of our initial development setup.&lt;/p>
&lt;/blockquote>
&lt;h4 id="limitations-of-local-development-setup">Limitations of local development setup&lt;/h4>
&lt;p>You can run Gardener (API server, controller manager, scheduler, gardenlet) against any local Kubernetes cluster, however, your seed and shoot clusters must be deployed to a &amp;ldquo;real&amp;rdquo; provider.
Currently, it is not possible to run Gardener entirely isolated from any cloud provider.
We are planning to support a setup that can run completely locally (see &lt;a href="https://github.com/gardener/gardener-extension-provider-mock">this for details&lt;/a>), however, it does not yet exist.
This means that - after you have setup Gardener - you need to register an external seed cluster (e.g., one created in AWS).
Only after that step you can start creating shoot clusters with your locally running Gardener.&lt;/p>
&lt;p>Some time ago, we had a local setup based on VirtualBox/Vagrant.
However, as we have progressed with the &lt;a href="https://github.com/gardener/gardener/issues/308">Extensibility epic&lt;/a> we noticed that this implementation/setup does no longer fit into how we envision external providers to be.
Moreover, it hid too many things and came with a bunch of limitations, making the development scenario too &amp;ldquo;artificial&amp;rdquo;:&lt;/p>
&lt;ul>
&lt;li>No integration with machine-controller-manager.&lt;/li>
&lt;li>The Shoot API Server is exposed via a NodePort. In a cloud setup a LoadBalancer would be used.&lt;/li>
&lt;li>It was not possible to create Shoot clusters consisting of more than one worker node. Cluster auto-scaling therefore is not supported.&lt;/li>
&lt;li>It was not possible to create two or more Shoot clusters in parallel.&lt;/li>
&lt;li>The communication between the Seed and the Shoot Clusters uses VPN tunnel. In this setup tunnels are not needed since all components run on localhost.&lt;/li>
&lt;/ul>
&lt;h2 id="additional-information">Additional information&lt;/h2>
&lt;p>To make sure that a specific Seed cluster will be chosen, specify the &lt;code>.spec.seedName&lt;/code> field (see &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/development/../../example/90-shoot.yaml#L265-L266">here&lt;/a> for an example Shoot manifest).&lt;/p>
&lt;p>Please take a look at the &lt;a href="https://github.com/gardener/gardener/tree/master/example">example manifests folder&lt;/a> to see which resource objects you need to install into your Garden cluster.&lt;/p>
&lt;h1 id="appendix">Appendix&lt;/h1>
&lt;h2 id="configure-seed-clusters-for-local-development">Configure Seed clusters for local development&lt;/h2>
&lt;p>When using the Gardenlet in a local development scenario with &lt;code>make start-gardenlet&lt;/code> then the Gardenlet component configuration is setup with a &lt;a href="https://raw.githubusercontent.com/gardener/gardener/master/docs/development/../concepts/gardenlet.md#seed-config-vs-seed-selector">seed selector&lt;/a> that targets all available Seed clusters.
However, a &lt;code>Seed&lt;/code> resource needs to be configured to allow being reconciled by a Gardenlet which such a configuration.&lt;/p>
&lt;p>When deploying the Gardenlet to reconcile only one Seed cluster (using component configuration &lt;code>.seedConfig&lt;/code>),
the Gardenlet either needs to be supplied with a kubeconfig for the particular Seed cluster, or acquires one via bootstrapping.
Having said that, if the Gardenlet is configured to manage multiple Seed clusters based on a label selector, it needs to fetch the kubeconfig of each Seed cluster at runtime from somewhere.
That is why the &lt;code>Seed&lt;/code> resource needs to be configured with an additional secret reference that contains the kubeconfig of the Seed cluster.&lt;/p>
&lt;p>Create a secret containing the base64 encoded kubeconfig of the Seed cluster (the scope of the permissions should be identical to the kubeconfig that the Gardenlet creates during bootstrapping - for now, &lt;code>cluster-admin&lt;/code> privileges are recommended).&lt;/p>
&lt;p>Create the secret in the Garden cluster:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sweet-seed&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Opaque&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">kubeconfig&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;base64-seed-kubeconfig&amp;gt;.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Adjust the &lt;code>Seed&lt;/code> resource to reference the secret in &lt;code>spec.secretRef&lt;/code> like so:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">core.gardener.cloud/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Seed&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-sweet-seed&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">secretRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sweet-seed&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">garden&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Process</title><link>https://gardener.cloud/docs/contribute/10_code/37_process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/10_code/37_process/</guid><description>
&lt;h1 id="creating-a-new-feature">Creating a new Feature&lt;/h1>
&lt;p>If you want to contribute to the Gardener, please do that always on a dedicated branch on your own fork named after the purpose of the code changes, for example &lt;code>feature/helm-integration&lt;/code>.
Please do not forget to rebase your branch &lt;strong>regularly&lt;/strong>.&lt;/p>
&lt;p>If you have finished your work, please create a pull request &lt;strong>based on &lt;code>master&lt;/code>&lt;/strong>. It will be reviewed and merged if no further changes are requested from you.&lt;/p>
&lt;p>:warning: Please ensure that your modifications pass the lint checks, formatting checks, static code checks, and unit tests by executing&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">make verify
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please do not file your pull request unless you receive a successful response from here!&lt;/p>
&lt;h2 id="creating-a-new-release">Creating a new Release&lt;/h2>
&lt;p>Please refer to the &lt;a href="https://gardener.cloud/docs/contribute/10_code/10-contribution_guide">Gardener contributor guide&lt;/a>.&lt;/p></description></item><item><title>Docs: Repositories</title><link>https://gardener.cloud/docs/contribute/10_code/40_repositories/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/10_code/40_repositories/</guid><description/></item><item><title>Docs: Security Release Process</title><link>https://gardener.cloud/docs/contribute/10_code/12-security_guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/contribute/10_code/12-security_guide/</guid><description>
&lt;h1 id="gardener-security-release-process">Gardener Security Release Process&lt;/h1>
&lt;p>Gardener is a growing community of volunteers and users. The Gardener community has adopted this security disclosure and response policy to ensure we responsibly handle critical issues.&lt;/p>
&lt;h2 id="gardener-security-team">Gardener Security Team&lt;/h2>
&lt;p>Security vulnerabilities should be handled quickly and sometimes privately. The primary goal of this process is to reduce the total time users are vulnerable to publicly known exploits.
The Gardener Security Team is responsible for organizing the entire response including internal communication and external disclosure but will need help from relevant developers and release managers to successfully run this process. The initial Gardener Security Team will consist of the following volunteers:&lt;/p>
&lt;ul>
&lt;li>Olaf Beier, (&lt;strong>&lt;a href="https://github.com/olafbeier">@olafbeier&lt;/a>&lt;/strong>)&lt;/li>
&lt;li>Vasu Chandrasekhara, (&lt;strong>&lt;a href="https://github.com/vasu1124">@vasu1124&lt;/a>&lt;/strong>)&lt;/li>
&lt;li>Alban Crequy, (&lt;strong>&lt;a href="https://github.com/alban">@alban&lt;/a>&lt;/strong>)&lt;/li>
&lt;li>Norbert Hamann, (&lt;strong>&lt;a href="https://github.com/norberthamann">@norberthamann&lt;/a>&lt;/strong>)&lt;/li>
&lt;li>Claudia Hölters, (&lt;strong>&lt;a href="https://github.com/hoeltcl">@hoeltcl&lt;/a>&lt;/strong>)&lt;/li>
&lt;li>Oliver Kling, (&lt;strong>&lt;a href="https://github.com/oliverkling">@oliverkling&lt;/a>&lt;/strong>)&lt;/li>
&lt;li>Vedran Lerenc, (&lt;strong>&lt;a href="https://github.com/vlerenc">@vlerenc&lt;/a>&lt;/strong>)&lt;/li>
&lt;li>Dirk Marwinski, (&lt;strong>&lt;a href="https://github.com/marwinski">@marwinski&lt;/a>&lt;/strong>)&lt;/li>
&lt;li>Michael Schubert, (&lt;strong>&lt;a href="https://github.com/schu">@schu&lt;/a>&lt;/strong>)&lt;/li>
&lt;li>Matthias Sohn, (&lt;strong>&lt;a href="https://github.com/msohn">@msohn&lt;/a>&lt;/strong>)&lt;/li>
&lt;li>Frederik Thormaehlen, (&lt;strong>&lt;a href="https://github.com/ThormaehlenFred">@ThormaehlenFred&lt;/a>&lt;/strong>)&lt;/li>
&lt;li>Christian Cwienk (&lt;strong>&lt;a href="https://github.com/ccwienk">@ccwienk&lt;/a>&lt;/strong>)&lt;/li>
&lt;/ul>
&lt;h2 id="disclosures">Disclosures&lt;/h2>
&lt;h3 id="private-disclosure-processes">Private Disclosure Processes&lt;/h3>
&lt;p>The Gardener community asks that all suspected vulnerabilities be privately and responsibly disclosed. If you&amp;rsquo;ve found a vulnerability or a potential vulnerability in Gardener please let us know by writing an e-mail to &lt;a href="mailto:secure@sap.com">secure@sap.com&lt;/a>. We&amp;rsquo;ll send a confirmation e-mail to acknowledge your report, and we&amp;rsquo;ll send an additional e-mail when we&amp;rsquo;ve identified the issue positively or negatively.&lt;/p>
&lt;h3 id="public-disclosure-processes">Public Disclosure Processes&lt;/h3>
&lt;p>If you know of a publicly disclosed vulnerability please IMMEDIATELY e-mail to &lt;a href="mailto:secure@sap.com">secure@sap.com&lt;/a> to inform the Gardener Security Team about the vulnerability so they may start the patch, release, and communication process.&lt;/p>
&lt;p>If possible the Gardener Security Team will ask the person making the public report if the issue can be handled via a &lt;a href="#private-disclosure-process">private disclosure process&lt;/a> (for example if the full exploit details have not yet been published). If the reporter denies the request for private disclosure, the Gardener Security Team will move swiftly with the fix and release process. In extreme cases GitHub can be asked to delete the issue but this generally isn&amp;rsquo;t necessary and is unlikely to make a public disclosure less damaging.&lt;/p>
&lt;h2 id="patch-release-and-public-communication">Patch, Release, and Public Communication&lt;/h2>
&lt;p>For each vulnerability a member of the Gardener Security Team will volunteer to lead coordination with the &amp;ldquo;Fix Team&amp;rdquo; and is responsible for sending disclosure e-mails to the rest of the community. This lead will be referred to as the &amp;ldquo;Fix Lead.&amp;rdquo; The role of the Fix Lead should rotate round-robin across the Gardener Security Team. Note that given the current size of the Gardener community it is likely that the Gardener Security Team is the same as the &amp;ldquo;Fix team.&amp;rdquo; (I.e., all maintainers). The Gardener Security Team may decide to bring in additional contributors for added expertise depending on the area of the code that contains the vulnerability. All of the time lines below are suggestions and assume a private disclosure. The Fix Lead drives the schedule using his best judgment based on severity and development time. If the Fix Lead is dealing with a public disclosure all time lines become ASAP (assuming the vulnerability has a CVSS score &amp;gt;= 7; see below). If the fix relies on another upstream project&amp;rsquo;s disclosure time line, that will adjust the process as well. We will work with the upstream project to fit their time line and best protect our users.&lt;/p>
&lt;h3 id="fix-team-organization">Fix Team Organization&lt;/h3>
&lt;p>The Fix Lead will work quickly to identify relevant engineers from the affected projects and packages and CC those engineers into the disclosure thread. These selected developers are the Fix Team.
The Fix Lead will give the Fix Team access to a private security repository to develop the fix.&lt;/p>
&lt;h3 id="fix-development-process">Fix Development Process&lt;/h3>
&lt;p>The Fix Lead and the Fix Team will create a &lt;a href="https://www.first.org/cvss/specification-document">CVSS&lt;/a> using the &lt;a href="https://www.first.org/cvss/calculator/3.0">CVSS Calculator&lt;/a>. The Fix Lead makes the final call on the calculated CVSS; it is better to move quickly than make the CVSS perfect.
The Fix Team will notify the Fix Lead that work on the fix branch is complete once there are LGTMs on all commits in the private repository from one or more maintainers.
If the CVSS score is under 7.0 (a &lt;a href="https://www.first.org/cvss/specification-document#i5">medium severity score&lt;/a>) the Fix Team can decide to slow the release process down in the face of holidays, developer bandwidth, etc. These decisions must be discussed on the private &lt;a href="#communication-channel">Gardener Security mailing list&lt;/a>.&lt;/p>
&lt;h3 id="fix-disclosure-process">Fix Disclosure Process&lt;/h3>
&lt;p>With the fix development underway, the Fix Lead needs to come up with an overall communication plan for the wider community. This Disclosure process should begin after the Fix Team has developed a Fix or mitigation so that a realistic time line can be communicated to users. The Fix Lead will inform the &lt;a href="#communication-channel">Gardener mailing list&lt;/a> that a security vulnerability has been disclosed and that a fix will be made available in the future on a certain release date. The Fix Lead will include any mitigating steps users can take until a fix is available. The communication to Gardener users should be actionable. They should know when to block time to apply patches, understand exact mitigation steps, etc.&lt;/p>
&lt;h3 id="fix-release-day">Fix Release Day&lt;/h3>
&lt;p>The Release Managers will ensure all the binaries are built, publicly available, and functional before the Release Date.
The Release Managers will create a new patch release branch from the latest patch release tag + the fix from the security branch. As a practical example if v0.12.0 is the latest patch release in gardener.git a new branch will be created called v0.12.1 which includes only patches required to fix the issue.
The Fix Lead will cherry-pick the patches onto the master branch and all relevant release branches. The Fix Team will &lt;a href="https://github.com/lgtmco/lgtm">LGTM&lt;/a> and merge.
The Release Managers will merge these PRs as quickly as possible. Changes shouldn&amp;rsquo;t be made to the commits even for a typo in the CHANGELOG as this will change the git sha of the already built and commits leading to confusion and potentially conflicts as the fix is cherry-picked around branches.
The Fix Lead will request a CVE from the SAP Product Security Response Team via email to &lt;a href="mailto:cna@sap.com">cna@sap.com&lt;/a> with all the relevant information (description, potential impact, affected version, fixed version, CVSS v3 base score and supporting documentation for the CVSS score) for every vulnerability. The Fix Lead will inform the &lt;a href="#communication-channel">Gardener mailing list&lt;/a> and announce the new releases, the CVE number (if available), the location of the binaries, and the relevant merged PRs to get wide distribution and user action.&lt;/p>
&lt;p>As much as possible this e-mail should be actionable and include links how to apply the fix to users environments; this can include links to external distributor documentation. The recommended target time is 4pm UTC on a non-Friday weekday. This means the announcement will be seen morning Pacific, early evening Europe, and late evening Asia.
The Fix Lead will remove the Fix Team from the private security repository.&lt;/p>
&lt;h3 id="retrospective">Retrospective&lt;/h3>
&lt;p>These steps should be completed after the Release Date. The retrospective process &lt;a href="https://landing.google.com/sre/book/chapters/postmortem-culture.html">should be blameless&lt;/a>.&lt;/p>
&lt;p>The Fix Lead will send a retrospective of the process to the &lt;a href="#communication-channel">Gardener mailing list&lt;/a> including details on everyone involved, the time line of the process, links to relevant PRs that introduced the issue, if relevant, and any critiques of the response and release process.
The Release Managers and Fix Team are also encouraged to send their own feedback on the process to the &lt;a href="#communication-channel">Gardener mailing list&lt;/a>. Honest critique is the only way we are going to get good at this as a community.&lt;/p>
&lt;h3 id="communication-channel">Communication Channel&lt;/h3>
&lt;p>The &lt;a href="#private-disclosure-process">private&lt;/a> or &lt;a href="#public-disclosure-process">public disclosure process&lt;/a> should be triggered exclusively by writing an e-mail to &lt;a href="mailto:secure@sap.com">secure@sap.com&lt;/a>.&lt;/p>
&lt;p>Gardener security announcements will be communicated by the Fix Lead sending an e-mail to the &lt;a href="https://groups.google.com/forum/#!forum/gardener">Gardener mailing list&lt;/a> (reachable via &lt;a href="mailto:gardener@googlegroups.com">gardener@googlegroups.com&lt;/a>) as well as posting a link in the &lt;a href="https://kubernetes.slack.com/messages/CB57N0BFG/details/">Gardener Slack channel&lt;/a>. Public discussions about Gardener security announcements and retrospectives, will primarily happen in the Gardener mailing list. Thus Gardener community members who are interested in participating in discussions related to the Gardener Security Release Process are encouraged to join the Gardener mailing list (&lt;a href="https://support.google.com/groups/answer/1067205?hl=en">how to find and join a group&lt;/a>)&lt;/p>
&lt;p>The members of the &lt;a href="#gardener-security-team">Gardener Security Team&lt;/a> are subscribed to the private &lt;a href="https://groups.google.com/forum/#!forum/gardener-security">Gardener Security mailing list&lt;/a> (reachable via &lt;a href="mailto:gardener-security@googlegroups.com">gardener-security@googlegroups.com&lt;/a>).&lt;/p></description></item></channel></rss>