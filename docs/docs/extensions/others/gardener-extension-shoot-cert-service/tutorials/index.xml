<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener â€“ Tutorials</title><link>https://gardener.cloud/docs/extensions/others/gardener-extension-shoot-cert-service/tutorials/</link><description>Recent content in Tutorials on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/extensions/others/gardener-extension-shoot-cert-service/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Gardener yourself a Shoot with Istio, custom Domains, and Certificates</title><link>https://gardener.cloud/docs/extensions/others/gardener-extension-shoot-cert-service/tutorials/tutorial-custom-domain-with-istio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/others/gardener-extension-shoot-cert-service/tutorials/tutorial-custom-domain-with-istio/</guid><description>
&lt;p>As we ramp up more and more friends of Gardener, I thought it worthwile to explore and write a tutorial about how to simply&lt;/p>
&lt;ul>
&lt;li>create a Gardener managed Kubernetes Cluster (Shoot) via kubectl,&lt;/li>
&lt;li>install Istio as a preferred, production ready Ingress/Service Mesh (instead of the Nginx Ingress addon),&lt;/li>
&lt;li>attach your own custom domain to be managed by Gardener,&lt;/li>
&lt;li>combine everything with certificates from Let&amp;rsquo;s Encrypt.&lt;/li>
&lt;/ul>
&lt;p>Here are some pre-pointers that you will need to go deeper:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gardener.cloud/docs/guides/administer-shoots/create-delete-shoot/">CRUD Gardener Shoot&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/external-dns-management/blob/master/README.md">DNS Management&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/cert-management/blob/master/README.md">Certificate Management&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/extensions/others/gardener-extension-shoot-dns-service/usage/dns_names/">Tutorial Domain Names&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gardener.cloud/docs/extensions/others/gardener-extension-shoot-cert-service/usage/request_cert/">Tutorial Certificates&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Tip&lt;/h4>
If you try my instructions and fail, then read the alternative title of this tutorial as "Shoot yourself in the foot with Gardener, custom Domains, Istio and Certificates".
&lt;/div>
&lt;h2 id="first-things-first">First Things First&lt;/h2>
&lt;p>Login to your Gardener landscape, setup a project with adequate infrastructure credentials and then navigate to your account. Note down the name of your secret. I chose the GCP infrastructure from the vast possible options that my Gardener provides me with, so i had named the secret as &lt;code>shoot-operator-gcp&lt;/code>.&lt;/p>
&lt;p>From the Access widget (leave the default settings) download your personalized &lt;code>kubeconfig&lt;/code> into &lt;code>~/.kube/kubeconfig-garden-myproject&lt;/code>. Follow the instructions to setup &lt;code>kubelogin&lt;/code>:&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/access_0ffd66.png" alt="access">&lt;/p>
&lt;p>For convinience, let us set an alias command with&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>alias kgarden=&lt;span style="color:#a31515">&amp;#34;kubectl --kubeconfig ~/.kube/kubeconfig-garden-myproject.yaml&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>kgarden&lt;/code> now gives you all botanical powers and connects you directly with your Gardener.&lt;/p>
&lt;p>You should now be able to run &lt;code>kgarden get shoots&lt;/code>, automatically get an oidc token, and list already running clusters/shoots.&lt;/p>
&lt;h2 id="prepare-your-custom-domain">Prepare your Custom Domain&lt;/h2>
&lt;p>I am going to use &lt;a href="https://www.cloudflare.com/">Cloud Flare&lt;/a> as programmatic DNS of my custom domain &lt;code>mydomain.io&lt;/code>. Please follow detailed instructions from Cloud Flare on how to delegate your domain (the free account does not support delegating subdomains). Alternatively, AWS Route53 (and most others) support &lt;a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingNewSubdomain.html">delegating subdomains&lt;/a>.&lt;/p>
&lt;p>I needed to follow these &lt;a href="https://github.com/gardener/external-dns-management/blob/master/docs/cloudflare/README.md">instructions&lt;/a> and created the following secret:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: cloudflare-mydomain-io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>type: Opaque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CLOUDFLARE_API_TOKEN: useYOURownDAMITzNDU2Nzg5MDEyMzQ1Njc4OQ==
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Apply this secret into your project with &lt;code>kgarden create -f cloudflare-mydomain-io.yaml&lt;/code>.&lt;/p>
&lt;p>Our &lt;a href="https://github.com/gardener/external-dns-management/">External DNS Manager&lt;/a> also supports Amazon Route53, Google CloudDNS, AliCloud DNS, Azure DNS, or OpenStack Designate. Check it out.&lt;/p>
&lt;h2 id="prepare-gardener-extensions">Prepare Gardener Extensions&lt;/h2>
&lt;p>I now need to prepare the Gardener extensions &lt;code>shoot-dns-service&lt;/code> and &lt;code>shoot-cert-service&lt;/code> and set the parameters accordingly.&lt;/p>
&lt;div class="alert alert-info" role="alert">
Please note, that the availability of Gardener Extensions depends on how your administrator has configured the Gardener landscape. Please contact your Gardener administrator in case you experience any issues during activation.
&lt;/div>
&lt;p>The following snipplet allows Gardener to manage my entire custom domain, whereas with the &lt;code>include:&lt;/code> attribute I restrict all dynamic entries under the subdomain &lt;code>gsicdc.mydomain.io&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> dns:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - domains:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> include:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - gsicdc.mydomain.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> primary: &lt;span style="color:#00f">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretName: cloudflare-mydomain-io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: cloudflare-dns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: shoot-dns-service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The next snipplet allows Gardener to manage certificates automatically from &lt;em>&lt;a href="https://letsencrypt.org/">Let&amp;rsquo;s Encrypt&lt;/a>&lt;/em> on &lt;code>mydomain.io&lt;/code> for me:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> extensions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: shoot-cert-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: service.cert.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> issuers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - email: me@mail.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: mydomain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server: &lt;span style="color:#a31515">&amp;#39;https://acme-v02.api.letsencrypt.org/directory&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - email: me@mail.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: mydomain-staging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server: &lt;span style="color:#a31515">&amp;#39;https://acme-staging-v02.api.letsencrypt.org/directory&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-info" role="alert">
Adjust the snipplets with your parameters (don't forget your email). And please use the mydomain-staging issuer while you are testing and learning. Otherwise, Let's Encrypt will rate limit your frequent requests and you can wait a week until you can continue.
&lt;/div>
&lt;p>References for &lt;a href="https://letsencrypt.org">Let&amp;rsquo;s Encrypt&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://letsencrypt.org/docs/rate-limits/">Rate limit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://letsencrypt.org/docs/staging-environment/">Staging environment&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://letsencrypt.org/docs/challenge-types/">Challenge Types&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://community.letsencrypt.org/t/acme-v2-production-environment-wildcards/55578">Wildcard Certificates&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="create-the-gardener-shoot-cluster">Create the Gardener Shoot Cluster&lt;/h2>
&lt;p>Remember I chose to create the Shoot on GCP, so below is the simplest declarative shoot or cluster order document. Notice that I am referring to the infrastructure credentials with &lt;code>shoot-operator-gcp&lt;/code> and I combined the above snipplets into the yaml file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: gsicdc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dns:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - domains:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> include:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - gsicdc.mydomain.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> primary: &lt;span style="color:#00f">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretName: cloudflare-mydomain-io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: cloudflare-dns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: shoot-dns-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: shoot-cert-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: service.cert.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> issuers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - email: me@mail.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: mydomain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server: &lt;span style="color:#a31515">&amp;#39;https://acme-v02.api.letsencrypt.org/directory&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - email: me@mail.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: mydomain-staging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> server: &lt;span style="color:#a31515">&amp;#39;https://acme-staging-v02.api.letsencrypt.org/directory&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudProfileName: gcp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetes:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> allowPrivilegedContainers: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> version: 1.24.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maintenance:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> autoUpdate:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kubernetesVersion: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> machineImageVersion: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networking:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodes: 10.250.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pods: 100.96.0.0/11
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> services: 100.64.0.0/13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: calico
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> provider:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> controlPlaneConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: ControlPlaneConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zone: europe-west1-d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> infrastructureConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workers: 10.250.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: gcp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - machine:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> image:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: gardenlinux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> version: 576.9.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: n1-standard-2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxSurge: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxUnavailable: 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maximum: 2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minimum: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-workerpool
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> volume:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size: 50Gi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: pd-standard
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zones:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - europe-west1-d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> purpose: testing
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: europe-west1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretBindingName: shoot-operator-gcp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create your cluster and wait for it to be ready (about 5 to 7min).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kgarden create -f gsicdc.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shoot.core.gardener.cloud/gsicdc created
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kgarden get shoot gsicdc --watch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME CLOUDPROFILE VERSION SEED DOMAIN HIBERNATION OPERATION PROGRESS APISERVER CONTROL NODES SYSTEM AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gsicdc gcp 1.24.8 gcp gsicdc.myproject.shoot.devgarden.cloud Awake Processing 38 Progressing Progressing Unknown Unknown 83s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gsicdc gcp 1.24.8 gcp gsicdc.myproject.shoot.devgarden.cloud Awake Succeeded 100 True True True False 6m7s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Get access to your freshly baked cluster and set your &lt;code>KUBECONFIG&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kgarden get secrets gsicdc.kubeconfig -o jsonpath={.data.kubeconfig} | base64 -d &amp;gt;kubeconfig-gsicdc.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ export KUBECONFIG=&lt;span style="color:#00f">$(&lt;/span>pwd&lt;span style="color:#00f">)&lt;/span>/kubeconfig-gsicdc.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl get all
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>service/kubernetes ClusterIP 100.64.0.1 &amp;lt;none&amp;gt; 443/TCP 89m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="install-istio">Install Istio&lt;/h2>
&lt;p>Please follow the Istio installation &lt;a href="https://istio.io/docs/setup/getting-started/">instructions&lt;/a> and download &lt;code>istioctl&lt;/code>. If you are on a Mac, I recommend&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ brew install istioctl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I want to install Istio with a default profile and SDS enabled. Furthermore I pass the following annotations to the service object &lt;code>istio-ingressgateway&lt;/code> in the &lt;code>istio-system&lt;/code> namespace.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> annotations:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cert.gardener.cloud/issuer: mydomain-staging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cert.gardener.cloud/secretname: wildcard-tls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dns.gardener.cloud/class: garden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dns.gardener.cloud/dnsnames: &lt;span style="color:#a31515">&amp;#34;*.gsicdc.mydomain.io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dns.gardener.cloud/ttl: &lt;span style="color:#a31515">&amp;#34;120&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With these annotations three things now happen automagically:&lt;/p>
&lt;ol>
&lt;li>The &lt;a href="https://github.com/gardener/external-dns-management/blob/master/README.md">External DNS Manager&lt;/a>, provided to you as a service (&lt;code>dns.gardener.cloud/class: garden&lt;/code>), picks up the request and creates the wildcard DNS entry &lt;code>*.gsicdc.mydomain.io&lt;/code> with a time to live of 120sec at your DNS provider. My provider Cloud Flare is very very quick (as opposed to some other services). You should be able to verify the entry with &lt;code>dig lovemygardener.gsicdc.mydomain.io&lt;/code> within seconds.&lt;/li>
&lt;li>The &lt;a href="https://github.com/gardener/cert-management/blob/master/README.md">Certificate Management&lt;/a> picks up the request as well and initates a DNS01 protocol exchange with Let&amp;rsquo;s Encrypt; using the staging environment referred to with the issuer behind &lt;code>mydomain-staging&lt;/code>.&lt;/li>
&lt;li>After aproximately 70sec (give and take) you will receive the wildcard certificate in the &lt;code>wildcard-tls&lt;/code> secret in the namespace &lt;code>istio-system&lt;/code>.&lt;/li>
&lt;/ol>
&lt;div class="alert alert-info" role="alert">
Notice, that the namespace for the certificate secret is often the cause of many troubeshooting sessions: the secret must reside in the same namespace of the gateway.
&lt;/div>
&lt;p>Here is the istio-install script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ export domainname=&lt;span style="color:#a31515">&amp;#34;*.gsicdc.mydomain.io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ export issuer=&lt;span style="color:#a31515">&amp;#34;mydomain-staging&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat &lt;span style="color:#a31515">&amp;lt;&amp;lt;EOF | istioctl install -y -f -
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">apiVersion: install.istio.io/v1alpha1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">kind: IstioOperator
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> profile: default
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> components:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> ingressGateways:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> - name: istio-ingressgateway
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> enabled: true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> k8s:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> serviceAnnotations:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> cert.gardener.cloud/issuer: &amp;#34;${issuer}&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> cert.gardener.cloud/secretname: wildcard-tls
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> dns.gardener.cloud/class: garden
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> dns.gardener.cloud/dnsnames: &amp;#34;${domainname}&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515"> dns.gardener.cloud/ttl: &amp;#34;120&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a31515">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Verify that setup is working and that DNS and certificates have been created/delivered:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl -n istio-system describe service istio-ingressgateway
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;snip&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Events:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Type Reason Age From Message
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ---- ------ ---- ---- -------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Normal EnsuringLoadBalancer 58s service-controller Ensuring load balancer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Normal reconcile 58s cert-controller-manager created certificate object istio-system/istio-ingressgateway-service-pwqdm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Normal cert-annotation 58s cert-controller-manager wildcard-tls: cert request is pending
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Normal cert-annotation 54s cert-controller-manager wildcard-tls: certificate pending: certificate requested, preparing/waiting &lt;span style="color:#00f">for&lt;/span> successful DNS01 challenge
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Normal cert-annotation 28s cert-controller-manager wildcard-tls: certificate ready
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Normal EnsuredLoadBalancer 26s service-controller Ensured load balancer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Normal reconcile 26s dns-controller-manager created dns entry object shoot--core--gsicdc/istio-ingressgateway-service-p9qqb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Normal dns-annotation 26s dns-controller-manager *.gsicdc.mydomain.io: dns entry is pending
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Normal dns-annotation 21s (x3 over 21s) dns-controller-manager *.gsicdc.mydomain.io: dns entry active
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ dig lovemygardener.gsicdc.mydomain.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.6 &amp;lt;&amp;lt;&amp;gt;&amp;gt; lovemygardener.gsicdc.mydomain.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;snip&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; ANSWER SECTION:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lovemygardener.gsicdc.mydomain.io. 120 IN A 35.195.120.62
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;snip&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There you have it, the wildcard-tls certificate is ready and the *.gsicdc.mydomain.io dns entry is active. Traffic will be going your way.&lt;/p>
&lt;h2 id="handy-tools-to-install">Handy tools to install&lt;/h2>
&lt;p>Another set of fine tools to use are &lt;a href="https://get-kapp.io/">kapp&lt;/a> (formerly known as k14s), &lt;a href="https://k9scli.io/">k9s&lt;/a> and &lt;a href="https://httpie.org/">HTTPie&lt;/a>. While we are at it, let&amp;rsquo;s install them all. If you are on a Mac, I recommend:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew tap vmware-tanzu/carvel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install ytt kbld kapp kwt imgpkg vendir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install derailed/k9s/k9s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install httpie
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ingress-to-your-service">Ingress to your service&lt;/h2>
&lt;div class="alert alert-info" role="alert">
Networking is a central part of Kubernetes, but it can be challenging to understand exactly how it is expected to work. You should learn about Kubernetes networking, and first try to debug problems yourself. With a solid managed cluster from Gardener, it is always PEBCAK!
&lt;/div>
&lt;p>Kubernetes Ingress is a subject that is evolving to much broader standard. Please watch &lt;a href="https://www.youtube.com/watch?v=cduG0FrjdJA">Evolving the Kubernetes Ingress APIs to GA and Beyond&lt;/a> for a good introduction. In this example, I did not want to use the Kubernetes &lt;code>Ingress&lt;/code> compatibility option of Istio. Instead, I used &lt;code>VirtualService&lt;/code> and &lt;code>Gateway&lt;/code> from the Istio&amp;rsquo;s API group &lt;code>networking.istio.io/v1beta1&lt;/code> directly, and enabled istio-injection generically for the namespace.&lt;/p>
&lt;p>I use &lt;a href="https://httpbin.org/">httpbin&lt;/a> as service that I want to expose to the internet, or where my ingress should be routed to (depends on your point of view, I guess).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Namespace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: production
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> istio-injection: enabled
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: httpbin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: production
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app: httpbin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ports:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: http
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> port: 8000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> targetPort: 80
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selector:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app: httpbin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: apps/v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Deployment
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: httpbin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: production
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> replicas: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selector:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matchLabels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app: httpbin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> labels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> app: httpbin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> containers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - image: docker.io/kennethreitz/httpbin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> imagePullPolicy: IfNotPresent
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: httpbin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ports:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - containerPort: 80
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: networking.istio.io/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Gateway
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: httpbin-gw
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: production
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selector:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> istio: ingressgateway &lt;span style="color:#008000">#! use istio default ingress gateway&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> servers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - port:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> number: 80
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: http
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> protocol: HTTP
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tls:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> httpsRedirect: &lt;span style="color:#00f">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hosts:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#a31515">&amp;#34;httpbin.gsicdc.mydomain.io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - port:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> number: 443
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: https
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> protocol: HTTPS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tls:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mode: SIMPLE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credentialName: wildcard-tls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hosts:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#a31515">&amp;#34;httpbin.gsicdc.mydomain.io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: networking.istio.io/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: VirtualService
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: httpbin-vs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: production
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hosts:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#a31515">&amp;#34;httpbin.gsicdc.mydomain.io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gateways:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - httpbin-gw
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - match:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - uri:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> regex: /.*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> route:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - destination:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> port:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> number: 8000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host: httpbin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let us now deploy the whole package of Kubernetes primitives using &lt;code>kapp&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kapp deploy -a httpbin -f httpbin-kapp.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Target cluster &lt;span style="color:#a31515">&amp;#39;https://api.gsicdc.myproject.shoot.devgarden.cloud&amp;#39;&lt;/span> (nodes: shoot--myproject--gsicdc-my-workerpool-z1-6586c8f6cb-x24kh)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Changes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Namespace Name Kind Conds. Age Op Wait to Rs Ri
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(cluster) production Namespace - - create reconcile - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>production httpbin Deployment - - create reconcile - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^ httpbin Service - - create reconcile - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^ httpbin-gw Gateway - - create reconcile - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^ httpbin-vs VirtualService - - create reconcile - -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Op: 5 create, 0 delete, 0 update, 0 noop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Wait to: 5 reconcile, 0 delete, 0 noop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Continue? [yN]: y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5:36:31PM: ---- applying 1 changes [0/5 &lt;span style="color:#00f">done&lt;/span>] ----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;snip&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5:37:00PM: ok: reconcile deployment/httpbin (apps/v1) namespace: production
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5:37:00PM: ---- applying complete [5/5 &lt;span style="color:#00f">done&lt;/span>] ----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5:37:00PM: ---- waiting complete [5/5 &lt;span style="color:#00f">done&lt;/span>] ----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Succeeded
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s finaly test the service (Of course you can use the browser as well):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ http httpbin.gsicdc.mydomain.io
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HTTP/1.1 301 Moved Permanently
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>content-length: 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>date: Wed, 13 May 2020 21:29:13 GMT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>location: https://httpbin.gsicdc.mydomain.io/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>server: istio-envoy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ curl -k https://httpbin.gsicdc.mydomain.io/ip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a31515">&amp;#34;origin&amp;#34;&lt;/span>: &lt;span style="color:#a31515">&amp;#34;10.250.0.2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Quod erat demonstrandum.
The proof of exchanging the issuer is now left to the reader.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Tip&lt;/h4>
Remember that the certificate is actually not valid because it is issued from the Let's encrypt staging environment. Thus, we needed "curl -k" or "http --verify no".
&lt;/div>
&lt;p>Hint: use the interactive k9s tool.
&lt;img src="https://gardener.cloud/__resources/k9s_97660c.png" alt="k9s">&lt;/p>
&lt;h2 id="cleanup">Cleanup&lt;/h2>
&lt;p>Remove the cloud native application:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kapp ls
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Apps in namespace &lt;span style="color:#a31515">&amp;#39;default&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name Namespaces Lcs Lca
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>httpbin (cluster),production true 17m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kapp delete -a httpbin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Continue? [yN]: y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>11:47:47PM: ---- waiting complete [8/8 &lt;span style="color:#00f">done&lt;/span>] ----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Succeeded
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remove Istio:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ istioctl x uninstall --purge
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusterrole.rbac.authorization.k8s.io &lt;span style="color:#a31515">&amp;#34;prometheus-istio-system&amp;#34;&lt;/span> deleted
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clusterrolebinding.rbac.authorization.k8s.io &lt;span style="color:#a31515">&amp;#34;prometheus-istio-system&amp;#34;&lt;/span> deleted
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Delete your Shoot:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kgarden annotate shoot gsicdc confirmation.gardener.cloud/deletion=true --overwrite
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kgarden delete shoot gsicdc --wait=false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>