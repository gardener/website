<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Development</title><link>https://gardener.cloud/docs/other-components/etcd-backup-restore/development/</link><description>Recent content in Development on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/other-components/etcd-backup-restore/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Local Setup</title><link>https://gardener.cloud/docs/other-components/etcd-backup-restore/development/local_setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-backup-restore/development/local_setup/</guid><description>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>Although the following installation instructions are for Mac OS X, similar alternate commands can be found for any Linux distribution.&lt;/p>
&lt;h3 id="installing-golanghttpsgolangorg-environment">Installing &lt;a href="https://golang.org/">Golang&lt;/a> environment&lt;/h3>
&lt;p>Install the latest version of Golang (at least &lt;code>v1.12&lt;/code> is required). For Mac OS, you may use &lt;a href="https://brew.sh/">Homebrew&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>brew install golang
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For other OSes, please check &lt;a href="https://golang.org/doc/install">Go installation documentation&lt;/a>.&lt;/p>
&lt;p>Make sure to set your &lt;code>$GOPATH&lt;/code> environment variable properly (conventionally, it points to &lt;code>$HOME/go&lt;/code>).&lt;/p>
&lt;p>For your convenience, you can add the &lt;code>bin&lt;/code> directory of the &lt;code>$GOPATH&lt;/code> to your &lt;code>$PATH&lt;/code>: &lt;code>PATH=$PATH:$GOPATH/bin&lt;/code>, but it is not mandatory.&lt;/p>
&lt;h3 id="golinthttpsgithubcomgolanglint">&lt;a href="https://github.com/golang/lint">Golint&lt;/a>&lt;/h3>
&lt;p>In order to perform linting on the Go source code, please install &lt;a href="https://github.com/golang/lint">Golint&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go get -u golang.org/x/lint/golint
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ginkgohttpsonsigithubioginkgo-and-gomegahttpsonsigithubiogomega">&lt;a href="https://onsi.github.io/ginkgo/">Ginkgo&lt;/a> and &lt;a href="https://onsi.github.io/gomega/">Gomega&lt;/a>&lt;/h3>
&lt;p>In order to perform tests on the Go source code, please install &lt;a href="https://onsi.github.io/ginkgo/">Ginkgo&lt;/a> and &lt;a href="http://onsi.github.io/gomega/">Gomega&lt;/a>. Please make yourself familiar with both frameworks and read their introductions after installation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go get -u github.com/onsi/ginkgo/ginkgo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go get -u github.com/onsi/gomega
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="installing-git">Installing &lt;code>git&lt;/code>&lt;/h3>
&lt;p>We use &lt;code>git&lt;/code> as VCS which you would need to install.&lt;/p>
&lt;p>On Mac OS run&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>brew install git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="installing-gcloud-sdk-optional">Installing &lt;code>gcloud&lt;/code> SDK (Optional)&lt;/h3>
&lt;p>In case you have to create a new release or a new hotfix, you have to push the resulting Docker image into a Docker registry. Currently, we use the Google Container Registry (this could change in the future). Please follow the official &lt;a href="https://cloud.google.com/sdk/downloads">installation instructions from Google&lt;/a>.&lt;/p>
&lt;h2 id="build">Build&lt;/h2>
&lt;p>Currently there are no binary builds available, but it is fairly simple to build it by following the steps mentioned below.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>First, you need to create a target folder structure before cloning and building &lt;code>etcdbrctl&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>git clone https://github.com/gardener/etcd-backup-restore.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd etcd-backup-restore
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>To build the binary in local machine environment, use &lt;code>make&lt;/code> target &lt;code>build-local&lt;/code>. It will build the binary &lt;code>etcdbrctl&lt;/code> under &lt;code>bin&lt;/code> directory.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>make build-local
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Next you can make it available to use as shell command by moving the executable to &lt;code>/usr/local/bin&lt;/code>, or by optionally including the &lt;code>bin&lt;/code> directory in your &lt;code>$PATH&lt;/code> environment variable.
You can verify the installation by running following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">$&lt;/span> etcdbrctl -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO[0000] etcd-backup-restore Version: v0.7.0-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO[0000] Git SHA: 38979f0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO[0000] Go Version: go1.12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO[0000] Go OS/Arch: darwin/amd64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>Docs: New Cp Support</title><link>https://gardener.cloud/docs/other-components/etcd-backup-restore/development/new_cp_support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-backup-restore/development/new_cp_support/</guid><description>
&lt;h1 id="adding-support-for-a-new-object-store-provider">Adding support for a new object store provider&lt;/h1>
&lt;p>Currently the code design only allows in-tree support for different providers. Our roadmap includes the change to code design to allow out-of-tree support for different providers. For adding support for a new object store provider, follow the steps described below. Replace &lt;code>provider&lt;/code> with your provider-name.&lt;/p>
&lt;ol>
&lt;li>Add the provider identifier constant in &lt;code>pkg/snapstore/types.go&lt;/code>.&lt;/li>
&lt;li>Add implementation for the &lt;code>SnapStore&lt;/code> from &lt;code>pkg/snapstore/types.go&lt;/code> interface to &lt;code>pkg/snapstore/provider_snapstore.go&lt;/code>.
&lt;ul>
&lt;li>⚠️ Please use environment variable(s) to pass the object store credentials.&lt;/li>
&lt;li>Provide the factory method to create provider implementation object by loading required access credentials from environment variable(s).&lt;/li>
&lt;li>Avoid introducing new command line flags for provider.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Import the required SDK and any other libraries for provider using &lt;code>GO111MODULE=on go get &amp;lt;provider-sdk&amp;gt;&lt;/code>. This will update the dependency in &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/go.mod">go.mod&lt;/a> and &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/go.sum">go.sum&lt;/a>.&lt;/li>
&lt;li>Run &lt;code>make revendor&lt;/code> to download the dependency library to &lt;a href="https://github.com/gardener/etcd-backup-restore/tree/master/vendor">vendor&lt;/a> directory.&lt;/li>
&lt;li>Update the &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/LICENSE.md">LICENSE.md&lt;/a> with license details of newly added dependencies.&lt;/li>
&lt;li>Update the &lt;code>GetSnapstore&lt;/code> method in &lt;code>pkg/snapstore/utils.go&lt;/code> to add a new case in switch block to support creation of the new provider implementation object.&lt;/li>
&lt;li>Add the fake implementation of provider SDK calls under &lt;code>pkg/snapstore/provider_snapstore_test.go&lt;/code> for unit testing the provider implementation.&lt;/li>
&lt;li>Register the provider implementation object for testing at the appropriate place under &lt;code>pkg/snapstore/snapstore_test.go&lt;/code>. This will run generic test against provider implementation.&lt;/li>
&lt;li>Update the &lt;a href="https://gardener.cloud/docs/other-components/etcd-backup-restore/deployment/getting_started/#cloud-provider-credentials">documentation&lt;/a> to provide info about passing provider credentials.&lt;/li>
&lt;li>Update the &lt;a href="https://github.com/gardener/etcd-backup-restore/tree/master/chart/etcd-backup-restore">helm chart&lt;/a> with provider details.
&lt;ul>
&lt;li>Update the &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/chart/etcd-backup-restore/values.yaml">values.yaml&lt;/a> with configuration for provider.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Refer &lt;a href="https://github.com/gardener/etcd-backup-restore/pull/108/commits/9bcd4e0e96f85ce1f356f08c06a2ced293aaf20b">this commit&lt;/a> to for one of the already added provider support.&lt;/li>
&lt;li>Finally test your code using &lt;code>make verify&lt;/code>. And raise a PR for review. 😄&lt;/li>
&lt;/ol></description></item><item><title>Docs: Testing And Dependencies</title><link>https://gardener.cloud/docs/other-components/etcd-backup-restore/development/testing_and_dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-backup-restore/development/testing_and_dependencies/</guid><description>
&lt;h1 id="dependency-management">Dependency management&lt;/h1>
&lt;p>We use go-modules to manage golang dependencies. In order to add a new package dependency to the project, you can perform &lt;code>go get &amp;lt;PACKAGE&amp;gt;@&amp;lt;VERSION&amp;gt;&lt;/code> or edit the &lt;code>go.mod&lt;/code> file and append the package along with the version you want to use.&lt;/p>
&lt;h3 id="updating-dependencies">Updating dependencies&lt;/h3>
&lt;p>The &lt;code>Makefile&lt;/code> contains a rule called &lt;code>revendor&lt;/code> which performs &lt;code>go mod vendor&lt;/code> and &lt;code>go mod tidy&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>go mod vendor&lt;/code> resets the main module&amp;rsquo;s vendor directory to include all packages needed to build and test all the main module&amp;rsquo;s packages. It does not include test code for vendored packages.&lt;/li>
&lt;li>&lt;code>go mod tidy&lt;/code> makes sure go.mod matches the source code in the module.
It adds any missing modules necessary to build the current module&amp;rsquo;s packages and dependencies, and it removes unused modules that don&amp;rsquo;t provide any relevant packages.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>make revendor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The dependencies are installed into the &lt;code>vendor&lt;/code> folder which &lt;strong>should be added&lt;/strong> to the VCS.&lt;/p>
&lt;p>⚠️ Make sure you test the code after you have updated the dependencies!&lt;/p>
&lt;h1 id="testing">Testing&lt;/h1>
&lt;p>This section describes the process to execute tests. For more details about kind of tests that are executed, please refer &lt;a href="https://gardener.cloud/docs/other-components/etcd-backup-restore/development/tests/">test documentation&lt;/a>&lt;/p>
&lt;h3 id="unit-tests">Unit tests&lt;/h3>
&lt;p>We have created &lt;code>make&lt;/code> target &lt;code>verify&lt;/code> which will internally run different rules like &lt;code>fmt&lt;/code> for formatting, &lt;code>lint&lt;/code> for linting check and most importantly &lt;code>test&lt;/code> which will check the code against predefined unit tests. As currently there aren&amp;rsquo;t enough test cases written to cover the entire code, you must check for failure cases manually and include test cases before raising pull request. We will eventually add more test cases for complete code coverage.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>make verify
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, we run tests without computing code coverage. To get the code coverage, you can set the environment variable &lt;code>COVER&lt;/code> to &lt;code>true&lt;/code>. This will log the code coverage percentage at the end of test logs. Also, all cover profile files will be accumulated under &lt;code>test/output/coverprofile.out&lt;/code> directory. You can visualize the exact code coverage by running &lt;code>make show-coverage&lt;/code> after running &lt;code>make verify&lt;/code> with code coverage enabled.&lt;/p>
&lt;h3 id="integration-tests">Integration tests&lt;/h3>
&lt;p>You can also run integration tests for etcd-backup-restore on any given Kubernetes cluster. The test creates namespace &lt;code>integration-test&lt;/code> on the cluster and deploys the &lt;a href="https://github.com/gardener/etcd-backup-restore/tree/master/chart/etcd-backup-restore">etcd-backup-restore helm chart&lt;/a> which in turn deploys the required secrets, configmap, services and finally the statefulset which contains the pod that runs etcd and backup-restore as a sidecar.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>make integration-test-cluster
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>⚠️ Prerequisite for this command is to set the following environment variables:&lt;/p>
&lt;ul>
&lt;li>INTEGRATION_TEST_KUBECONFIG: kubeconfig to the cluster on which you wish to run the test&lt;/li>
&lt;li>ETCD_VERSION: optional, defaults to &lt;code>v3.4.13-bootstrap-1&lt;/code>&lt;/li>
&lt;li>ETCDBR_VERSION: optional, defaults to &lt;code>v0.12.1&lt;/code>&lt;/li>
&lt;li>ACCESS_KEY_ID: S3 credentials&lt;/li>
&lt;li>SECRET_ACCESS_KEY: S3 credentials&lt;/li>
&lt;li>REGION: S3 credentials&lt;/li>
&lt;li>STORAGE_CONTAINER: S3 bucket name&lt;/li>
&lt;/ul>
&lt;p>If you have a working setup of &lt;a href="https://github.com/gardener/test-infra">TestMachinery&lt;/a>, you can run the integration tests on a TM-generated cluster as well.&lt;/p>
&lt;h3 id="performance-regression-tests">Performance regression tests&lt;/h3>
&lt;p>Furthermore, you can check any regression in performance in terms of memory consumption and CPU utilization, bby running the provided performance regression tests.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>make perf-regression-test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>⚠️ Prerequisite for this command is to set the following environment variables:&lt;/p>
&lt;ul>
&lt;li>PERF_TEST_KUBECONFIG: kubeconfig to the cluster on which you wish to run the test&lt;/li>
&lt;li>ETCD_VERSION: optional, defaults to &lt;code>v3.3.17&lt;/code>&lt;/li>
&lt;li>ETCDBR_VERSION: etcd-backup-restore version to test against&lt;/li>
&lt;/ul></description></item><item><title>Docs: Tests</title><link>https://gardener.cloud/docs/other-components/etcd-backup-restore/development/tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-backup-restore/development/tests/</guid><description>
&lt;h1 id="tests">Tests&lt;/h1>
&lt;p>&lt;code>etcd-backup-restore&lt;/code> makes use of three sets of tests - unit tests in each package, integration tests to ensure the working of the overall tool and performance regression tests to check changes in resource consumption between different versions of etcd-backup-restore.&lt;/p>
&lt;h3 id="integration-tests">Integration tests&lt;/h3>
&lt;p>Integration tests include the basic working of:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>snapshotting&lt;/strong>: successfully upload full and delta snapshots to the configured snapstore according to the specified schedule&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>garbage collection&lt;/strong>: garbage-collect old snapshots on the snapstore according to the specified policy&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>defragmentation&lt;/strong>: etcd data should be defragmented periodically to reduce db size&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>http server&lt;/strong>: http endpoints should work as expected:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/snapshot/full&lt;/code>: should take an on-demand full snapshot&lt;/li>
&lt;li>&lt;code>/snapshot/delta&lt;/code>: should take an on-demand delta snapshot&lt;/li>
&lt;li>&lt;code>/snapshot/latest&lt;/code>: should list the latest set of snapshots (full + deltas)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>data validation&lt;/strong>: corrupted etcd data should be marked for deletion and restoration should be triggered&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>restoration&lt;/strong>: etcd data should be restored correctly from latest set of snapshots (full + deltas)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="unit-tests">Unit tests&lt;/h3>
&lt;p>Each package within this repo contains its own set of unit tests to test the functionality of the methods contained within the packages.&lt;/p>
&lt;h3 id="performance-regression-tests">Performance regression tests&lt;/h3>
&lt;p>These tests help check any regression in performance in terms of memory consumption and CPU utilization.&lt;/p></description></item></channel></rss>