<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>To-Do on Gardener</title><link>https://gardener.cloud/docs/other-components/machine-controller-manager/todo/</link><description>Recent content in To-Do on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/other-components/machine-controller-manager/todo/index.xml" rel="self" type="application/rss+xml"/><item><title>Outline</title><link>https://gardener.cloud/docs/other-components/machine-controller-manager/todo/outline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/machine-controller-manager/todo/outline/</guid><description>&lt;h1 id="machine-controller-manager">Machine Controller Manager&lt;/h1>
&lt;p>CORE &amp;ndash; ./machine-controller-manager(provider independent)
Out of tree : Machine controller (provider specific)
MCM is a set controllers:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Machine Deployment Controller&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Machine Set Controller&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Machine Controller&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Machine Safety Controller&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="questions-and-refactoring-suggestions">Questions and refactoring Suggestions&lt;/h2>
&lt;h3 id="refactoring">Refactoring&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Statement&lt;/th>
 &lt;th>FilePath&lt;/th>
 &lt;th>Status&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>ConcurrentNodeSyncs” bad name - nothing to do with node syncs actually. &lt;br /> If its value is ’10’ then it will start 10 goroutines (workers) per resource type (machine, machinist, machinedeployment, provider-specific-class, node - study the different resource types.&lt;/td>
 &lt;td>cmd/machine-controller-manager/app/options/options.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>LeaderElectionConfiguration is very similar to the one present in “client-go/tools/leaderelection/leaderelection.go” - can we simply used the one in client-go instead of defining again?&lt;/td>
 &lt;td>pkg/options/types.go - MachineControllerManagerConfiguration&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Have all userAgents as constant. Right now there is just one.&lt;/td>
 &lt;td>cmd/app/controllermanager.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Shouldn’t run function be defined on MCMServer struct itself?&lt;/td>
 &lt;td>cmd/app/controllermanager.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>clientcmd.BuildConfigFromFlags fallsback to inClusterConfig which will surely not work as that is not the target. Should it not check and exit early?&lt;/td>
 &lt;td>cmd/app/controllermanager.go - run Function&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>A more direct way to create an in cluster config is using &lt;code>k8s.io/client-go/rest&lt;/code> -&amp;gt; rest.InClusterConfig instead of using clientcmd.BuildConfigFromFlags passing empty arguments and depending upon the implementation to fallback to creating a inClusterConfig. If they change the implementation that you get affected.&lt;/td>
 &lt;td>cmd/app/controllermanager.go - run Function&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Introduce a method on MCMServer which gets a target KubeConfig and controlKubeConfig or alternatively which creates respective clients.&lt;/td>
 &lt;td>cmd/app/controllermanager.go - run Function&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Why can’t we use Kubernetes.NewConfigOrDie also for kubeClientControl?&lt;/td>
 &lt;td>cmd/app/controllermanager.go - run Function&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>I do not see any benefit of client builders actually. All you need to do is pass in a config and then directly use client-go functions to create a client.&lt;/td>
 &lt;td>cmd/app/controllermanager.go - run Function&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Function: getAvailableResources - rename this to getApiServerResources&lt;/td>
 &lt;td>cmd/app/controllermanager.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Move the method which waits for API server to up and ready to a separate method which returns a discoveryClient when the API server is ready.&lt;/td>
 &lt;td>cmd/app/controllermanager.go - getAvailableResources function&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Many methods in client-go used are now deprecated. Switch to the ones that are now recommended to be used instead.&lt;/td>
 &lt;td>cmd/app/controllermanager.go - startControllers&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>This method needs a general overhaul&lt;/td>
 &lt;td>cmd/app/controllermanager.go - startControllers&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>If the design is influenced/copied from KCM then its very different. There are different controller structs defined for deployment, replicaset etc which makes the code much more clearer. You can see “kubernetes/cmd/kube-controller-manager/apps.go” and then follow the trail from there. - agreed needs to be changed in future (if time permits)&lt;/td>
 &lt;td>pkg/controller/controller.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>I am not sure why “MachineSetControlInterface”, “RevisionControlInterface”, “MachineControlInterface”, “FakeMachineControl” are defined in this file?&lt;/td>
 &lt;td>pkg/controller/controller_util.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>IsMachineActive&lt;/code> - combine the first 2 conditions into one with OR.&lt;/td>
 &lt;td>pkg/controller/controller_util.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Minor change - correct the comment, first word should always be the method name. Currently none of the comments have correct names.&lt;/td>
 &lt;td>pkg/controller/controller_util.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>There are too many deep copies made. What is the need to make another deep copy in this method? You are not really changing anything here.&lt;/td>
 &lt;td>pkg/controller/deployment.go - updateMachineDeploymentFinalizers&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Why can&amp;rsquo;t these validations be done as part of a validating webhook?&lt;/td>
 &lt;td>pkg/controller/machineset.go - reconcileClusterMachineSet&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Small change to the following &lt;code>if&lt;/code> condition. &lt;code>else if&lt;/code> is not required a simple &lt;code>else&lt;/code> is sufficient. &lt;a href="https://gardener.cloud/docs/other-components/machine-controller-manager/todo/outline/#1.1-code1">Code1&lt;/a>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>pkg/controller/machineset.go - reconcileClusterMachineSet&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Why call these &lt;code>inactiveMachines&lt;/code>, these are live and running and therefore active.&lt;/td>
 &lt;td>pkg/controller/machineset.go - terminateMachines&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="clarification">Clarification&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Statement&lt;/th>
 &lt;th>FilePath&lt;/th>
 &lt;th>Status&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Why are there 2 versions - internal and external versions?&lt;/td>
 &lt;td>General&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Safety controller freezes MCM controllers in the following cases: &lt;br /> * Num replicas go beyond a threshold (above the defined replicas) &lt;br /> * Target API service is not reachable &lt;br /> There seems to be an overlap between DWD and MCM Safety controller. In the meltdown scenario why is MCM being added to DWD, you could have used Safety controller for that.&lt;/td>
 &lt;td>General&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>All machine resources are v1alpha1 - should we not promote it to beta. V1alpha1 has a different semantic and does not give any confidence to the consumers.&lt;/td>
 &lt;td>cmd/app/controllermanager.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Shouldn’t controller manager use context.Context instead of creating a stop channel? - Check if signals (&lt;code>os.Interrupt&lt;/code> and &lt;code>SIGTERM&lt;/code> are handled properly. Do not see code where this is handled currently.)&lt;/td>
 &lt;td>cmd/app/controllermanager.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>What is the rationale behind a timeout of 10s? If the API server is not up, should this not just block as it can anyways not do anything. Also, if there is an error returned then you exit the MCM which does not make much sense actually as it will be started again and you will again do the poll for the API server to come back up. Forcing an exit of MCM will not have any impact on the reachability of the API server in anyway so why exit?&lt;/td>
 &lt;td>cmd/app/controllermanager.go - getAvailableResources&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>There is a very weird check - &lt;code> availableResources[machineGVR] || availableResources[machineSetGVR] || availableResources[machineDeploymentGVR] &lt;/code> &lt;br> Shouldn’t this be conjunction instead of disjunction? &lt;br />* What happens if you do not find one or all of these resources? &lt;br /> Currently an error log is printed and nothing else is done. MCM can be used outside gardener context where consumers can directly create MachineClass and Machine and not create MachineSet / Maching Deployment. There is no distinction made between context (gardener or outside-gardener). &lt;br />&lt;/td>
 &lt;td>cmd/app/controllermanager.go - StartControllers&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Instead of having an empty select {} to block forever, isn’t it better to wait on the stop channel?&lt;/td>
 &lt;td>cmd/app/controllermanager.go - StartControllers&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Do we need provider specific queues and syncs and listers&lt;/td>
 &lt;td>pkg/controller/controller.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Why are resource types prefixed with “Cluster”? - not sure , check PR&lt;/td>
 &lt;td>pkg/controller/controller.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>When will forgetAfterSuccess be false and why? - as per the current code this is never the case. - Himanshu will check&lt;/td>
 &lt;td>cmd/app/controllermanager.go - createWorker&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>What is the use of “ExpectationsInterface” and “UIDTrackingContExpectations”? &lt;br />* All expectations related code should be in its own file “expectations.go” and not in this file.&lt;/td>
 &lt;td>pkg/controller/controller_util.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Why do we not use lister but directly use the controlMachingClient to get the deployment? Is it because you want to avoid any potential delays caused by update of the local cache held by the informer and accessed by the lister? What is the load on API server due to this?&lt;/td>
 &lt;td>pkg/controller/deployment.go - reconcileClusterMachineDeployment&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Why is this conversion needed? &lt;a href="https://gardener.cloud/docs/other-components/machine-controller-manager/todo/outline/#1.2-code2">code2&lt;/a>&lt;/td>
 &lt;td>pkg/controller/deployment.go - reconcileClusterMachineDeployment&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>A deep copy of &lt;code>machineDeployment&lt;/code> is already passed and within the function another deepCopy is made. Any reason for it?&lt;/td>
 &lt;td>pkg/controller/deployment.go - addMachineDeploymentFinalizers&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>What is an &lt;code>Status.ObservedGeneration&lt;/code>? &lt;br /> *&lt;em>Read more about generations and observedGeneration at: &lt;br /> &lt;a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata">https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata&lt;/a> &lt;br />&lt;/em> &lt;a href="https://alenkacz.medium.com/kubernetes-operator-best-practices-implementing-observedgeneration-250728868792">https://alenkacz.medium.com/kubernetes-operator-best-practices-implementing-observedgeneration-250728868792&lt;/a> &lt;br /> Ideally the update to the &lt;code>ObservedGeneration&lt;/code> should only be made after successful reconciliation and not before. I see that this is just copied from &lt;code>deployment_controller.go&lt;/code> as is&lt;/td>
 &lt;td>pkg/controller/deployment.go - reconcileClusterMachineDeployment&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Why and when will a &lt;code>MachineDeployment&lt;/code> be marked as frozen and when will it be un-frozen?&lt;/td>
 &lt;td>pkg/controller/deployment.go - reconcileClusterMachineDeployment&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Shoudn&amp;rsquo;t the validation of the machine deployment be done during the creation via a validating webhook instead of allowing it to be stored in etcd and then failing the validation during sync? I saw the checks and these can be done via validation webhook.&lt;/td>
 &lt;td>pkg/controller/deployment.go - reconcileClusterMachineDeployment&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>RollbackTo has been marked as deprecated. What is the replacement? &lt;a href="https://gardener.cloud/docs/other-components/machine-controller-manager/todo/outline/#1.3-code3">code3&lt;/a>&lt;/td>
 &lt;td>pkg/controller/deployment.go - reconcileClusterMachineDeployment&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>What is the max machineSet deletions that you could process in a single run? The reason for asking this question is that for every machineSetDeletion a new goroutine spawned. &lt;br />* Is the &lt;code>Delete&lt;/code> call a synchrounous call? Which means it blocks till the machineset deletion is triggered which then also deletes the machines (due to cascade-delete and blockOwnerDeletion= true)?&lt;/td>
 &lt;td>pkg/controller/deployment.go - terminateMachineSets&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>If there are validation errors or error when creating label selector then a nil is returned. In the worker reconcile loop if the return value is nil then it will remove it from the queue (forget + done). What is the way to see any errors? Typically when we describe a resource the errors are displayed. Will these be displayed when we discribe a &lt;code>MachineDeployment&lt;/code>?&lt;/td>
 &lt;td>pkg/controller/deployment.go - reconcileClusterMachineSet&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>If an error is returned by &lt;code>updateMachineSetStatus&lt;/code> and it is &lt;code>IsNotFound&lt;/code> error then returning an error will again queue the &lt;code>MachineSet&lt;/code>. Is this desired as &lt;code>IsNotFound&lt;/code> indicates the &lt;code>MachineSet&lt;/code> has been deleted and is no longer there?&lt;/td>
 &lt;td>pkg/controller/deployment.go - reconcileClusterMachineSet&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>is &lt;code>machineControl.DeleteMachine&lt;/code> a synchronous operation which will wait till the machine has been deleted? Also where is the &lt;code>DeletionTimestamp&lt;/code> set on the &lt;code>Machine&lt;/code>? Will it be automatically done by the API server?&lt;/td>
 &lt;td>pkg/controller/deployment.go - prepareMachineForDeletion&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="bugsenhancements">Bugs/Enhancements&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Statement + TODO&lt;/th>
 &lt;th>FilePath&lt;/th>
 &lt;th>Status&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>This defines QPS and Burst for its requests to the KAPI. Check if it would make sense to explicitly define a FlowSchema and PriorityLevelConfiguration to ensure that the requests from this controller are given a well-defined preference. What is the rational behind deciding these values?&lt;/td>
 &lt;td>pkg/options/types.go - MachineControllerManagerConfiguration&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>In function “validateMachineSpec” fldPath func parameter is never used.&lt;/td>
 &lt;td>pkg/apis/machine/validation/machine.go&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>If there is an update failure then this method recursively calls itself without any sort of delays which could lead to a LOT of load on the API server. (opened: &lt;a href="https://github.com/gardener/machine-controller-manager/issues/686">https://github.com/gardener/machine-controller-manager/issues/686&lt;/a>)&lt;/td>
 &lt;td>pkg/controller/deployment.go - updateMachineDeploymentFinalizers&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>We are updating &lt;code>filteredMachines&lt;/code> by invoking &lt;code>syncMachinesNodeTemplates&lt;/code>, &lt;code>syncMachinesConfig&lt;/code> and &lt;code>syncMachinesClassKind&lt;/code> but we do not create any deepCopy here. Everywhere else the general principle is when you mutate always make a deepCopy and then mutate the copy instead of the original as a lister is used and that changes the cached copy. &lt;br /> &lt;code>Fix&lt;/code>: &lt;code>SatisfiedExpectations&lt;/code> check has been commented and there is a TODO there to fix it. Is there a PR for this?&lt;/td>
 &lt;td>pkg/controller/machineset.go - reconcileClusterMachineSet&lt;/td>
 &lt;td>pending&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>Code references&lt;/p></description></item></channel></rss>