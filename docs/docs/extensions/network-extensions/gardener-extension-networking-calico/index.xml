<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Calico CNI on Gardener</title><link>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/</link><description>Recent content in Calico CNI on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/index.xml" rel="self" type="application/rss+xml"/><item><title>Deployment</title><link>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/deployment/</guid><description>&lt;h1 id="deployment-of-the-networking-calico-extension">Deployment of the networking Calico extension&lt;/h1>
&lt;p>&lt;strong>Disclaimer:&lt;/strong> This document is NOT a step by step deployment guide for the networking Calico extension and only contains some configuration specifics regarding the deployment of different components via the helm charts residing in the networking Calico extension &lt;a href="https://github.com/gardener/gardener-extension-networking-calico">repository&lt;/a>.&lt;/p>
&lt;h2 id="gardener-extension-admission-calico">gardener-extension-admission-calico&lt;/h2>
&lt;h3 id="authentication-against-the-garden-cluster">Authentication against the Garden cluster&lt;/h3>
&lt;p>There are several authentication possibilities depending on whether or not &lt;a href="https://github.com/gardener/garden-setup#concept-the-virtual-cluster">the concept of Virtual Garden&lt;/a> is used.&lt;/p>
&lt;h4 id="virtual-garden-is-not-used-ie-the-runtime-garden-cluster-is-also-the-target-garden-cluster">Virtual Garden is not used, i.e., the &lt;code>runtime&lt;/code> Garden cluster is also the &lt;code>target&lt;/code> Garden cluster.&lt;/h4>
&lt;h5 id="automounted-service-account-token">Automounted Service Account Token&lt;/h5>
&lt;p>The easiest way to deploy the &lt;code>gardener-extension-admission-calico&lt;/code> component will be to not provide &lt;code>kubeconfig&lt;/code> at all. This way in-cluster configuration and an automounted service account token will be used. The drawback of this approach is that the automounted token will not be automatically rotated.&lt;/p></description></item><item><title>Operations</title><link>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/operations/</guid><description>&lt;h1 id="using-the-calico-networking-extension-with-gardener-as-operator">Using the Calico networking extension with Gardener as operator&lt;/h1>
&lt;p>This document explains configuration options supported by the networking-calico extension.&lt;/p>
&lt;h3 id="run-calico-node-in-non-privileged-and-non-root-mode">Run calico-node in non-privileged and non-root mode&lt;/h3>
&lt;p>&lt;strong>Feature State&lt;/strong>: &lt;code>Alpha&lt;/code>&lt;/p>
&lt;h5 id="motivation">Motivation&lt;/h5>
&lt;p>Running containers in privileged mode is not recommended as privileged containers run with all &lt;a href="https://man7.org/linux/man-pages/man7/capabilities.7.html">linux capabilities&lt;/a> enabled and can access the host&amp;rsquo;s resources. Running containers in privileged mode opens number of security threats such as breakout to underlying host OS.&lt;/p>
&lt;h5 id="support-for-non-privileged-and-non-root-mode">Support for non-privileged and non-root mode&lt;/h5>
&lt;p>The Calico project has a preliminary support for running the calico-node component in non-privileged mode (see &lt;a href="https://projectcalico.docs.tigera.io/security/non-privileged">this guide&lt;/a>). Similar to &lt;a href="https://github.com/tigera/operator">Tigera Calico operator&lt;/a> the networking-calico extension can also run calico-node in non-privileged and non-root mode. This feature is controller via feature gate named &lt;code>NonPrivilegedCalicoNode&lt;/code>. The feature gates are configured in the &lt;a href="https://github.com/gardener/gardener-extension-networking-calico/blob/master/example/00-componentconfig.yaml">ControllerConfiguration&lt;/a> of networking-calico. The corresponding ControllerDeployment configuration that enables the &lt;code>NonPrivilegedCalicoNode&lt;/code> would look like:&lt;/p></description></item><item><title>Shoot Overlay Network</title><link>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/shoot_overlay_network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/shoot_overlay_network/</guid><description>&lt;h1 id="enable--disable-overlay-network-for-shoots-with-calico">Enable / disable overlay network for shoots with Calico&lt;/h1>
&lt;p>Gardener can be used with or without the overlay network.&lt;/p>
&lt;p>Starting versions:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-gcp/releases/tag/v1.25.0">provider-gcp@v1.25.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-alicloud/releases/tag/v1.43.0">provider-alicloud@v1.43.0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-aws/releases/tag/v1.38.2">provider-aws@v1.38.2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/gardener/gardener-extension-provider-openstack/releases/tag/v1.30.0">provider-openstack@v1.30.0&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The default configuration of shoot clusters is without overlay network.&lt;/p>
&lt;h2 id="understanding-overlay-network">Understanding overlay network&lt;/h2>
&lt;p>The Overlay networking permits the routing of packets between multiples pods located on multiple nodes, even if the pod and the node network are not the same.&lt;/p>
&lt;p>This is done through the encapsulation of pod packets in the node network so that the routing can be done as usual. We use &lt;code>ipip&lt;/code> encapsulation with calico as default in case the overlay network is enabled. This (simply put) sends an IP packet as workload in another IP packet.&lt;/p></description></item><item><title>Usage</title><link>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/network-extensions/gardener-extension-networking-calico/usage/</guid><description>&lt;h1 id="using-the-networking-calico-extension-with-gardener-as-end-user">Using the Networking Calico extension with Gardener as end-user&lt;/h1>
&lt;p>The &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-shoot.yaml">&lt;code>core.gardener.cloud/v1beta1.Shoot&lt;/code> resource&lt;/a> declares a &lt;code>networking&lt;/code> field that is meant to contain network-specific configuration.&lt;/p>
&lt;p>In this document we are describing how this configuration looks like for Calico and provide an example &lt;code>Shoot&lt;/code> manifest with minimal configuration that you can use to create a cluster.&lt;/p>
&lt;h2 id="calico-typha">Calico Typha&lt;/h2>
&lt;p>Calico Typha is an optional component of Project Calico designed to offload the Kubernetes API server. The Typha daemon sits between the datastore (such as the Kubernetes API server which is the one used by Gardener managed Kubernetes) and many instances of Felix. Typha’s main purpose is to increase scale by reducing each node’s impact on the datastore. You can opt-out Typha via &lt;code>.spec.networking.providerConfig.typha.enabled=false&lt;/code> of your Shoot manifest. By default the Typha is enabled.&lt;/p></description></item></channel></rss>