<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener â€“ Proposals</title><link>https://gardener.cloud/docs/other-components/etcd-druid/proposals/</link><description>Recent content in Proposals on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/other-components/etcd-druid/proposals/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 01 Multi Node Etcd Clusters</title><link>https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/proposals/01-multi-node-etcd-clusters/</guid><description>
&lt;h1 id="multi-node-etcd-cluster-instances-via-etcd-druid">Multi-node etcd cluster instances via etcd-druid&lt;/h1>
&lt;p>This document proposes an approach (along with some alternatives) to support provisioning and management of multi-node etcd cluster instances via &lt;a href="https://github.com/gardener/etcd-druid">etcd-druid&lt;/a> and &lt;a href="https://github.com/gardener/etcd-backup-restore">etcd-backup-restore&lt;/a>.&lt;/p>
&lt;h2 id="content">Content&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#multi-node-etcd-cluster-instances-via-etcd-druid">Multi-node etcd cluster instances via etcd-druid&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#content">Content&lt;/a>&lt;/li>
&lt;li>&lt;a href="#goal">Goal&lt;/a>&lt;/li>
&lt;li>&lt;a href="#background-and-motivation">Background and Motivation&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#single-node-etcd-cluster">Single-node etcd cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="#multi-node-etcd-cluster">Multi-node etcd-cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="#dynamic-multi-node-etcd-cluster">Dynamic multi-node etcd cluster&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#prior-art">Prior Art&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#etcd-operator-from-coreos">ETCD Operator from CoreOS&lt;/a>&lt;/li>
&lt;li>&lt;a href="#etcdadm-from-kubernetes-sigs">etcdadm from kubernetes-sigs&lt;/a>&lt;/li>
&lt;li>&lt;a href="#etcd-cluster-operator-from-improbable-engineering">Etcd Cluster Operator from Improbable-Engineering&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#general-approach-to-etcd-cluster-management">General Approach to ETCD Cluster Management&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#bootstrapping">Bootstrapping&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#assumptions">Assumptions&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#adding-a-new-member-to-an-etcd-cluster">Adding a new member to an etcd cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#note">Note&lt;/a>&lt;/li>
&lt;li>&lt;a href="#alternative">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#managing-failures">Managing Failures&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#removing-an-existing-member-from-an-etcd-cluster">Removing an existing member from an etcd cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="#restarting-an-existing-member-of-an-etcd-cluster">Restarting an existing member of an etcd cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recovering-an-etcd-cluster-from-failure-of-majority-of-members">Recovering an etcd cluster from failure of majority of members&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#kubernetes-context">Kubernetes Context&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#alternative-1">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#etcd-configuration">ETCD Configuration&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#alternative-2">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#data-persistence">Data Persistence&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#persistent">Persistent&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ephemeral">Ephemeral&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#disk">Disk&lt;/a>&lt;/li>
&lt;li>&lt;a href="#in-memory">In-memory&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#how-to-detect-if-valid-metadata-exists-in-an-etcd-member">How to detect if valid metadata exists in an etcd member&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#recommendation">Recommendation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#how-to-detect-if-valid-data-exists-in-an-etcd-member">How to detect if valid data exists in an etcd member&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommendation-1">Recommendation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#separating-peer-and-client-traffic">Separating peer and client traffic&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#cutting-off-client-requests">Cutting off client requests&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#manipulating-client-service-podselector">Manipulating Client Service podSelector&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#health-check">Health Check&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#backup-failure">Backup Failure&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#alternative-3">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#status">Status&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#members">Members&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#note-1">Note&lt;/a>&lt;/li>
&lt;li>&lt;a href="#member-name-as-the-key">Member name as the key&lt;/a>&lt;/li>
&lt;li>&lt;a href="#member-leases">Member Leases&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#conditions">Conditions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#clustersize">ClusterSize&lt;/a>&lt;/li>
&lt;li>&lt;a href="#alternative-4">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#decision-table-for-etcd-druid-based-on-the-status">Decision table for etcd-druid based on the status&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#1-pink-of-health">1. Pink of health&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#2-member-status-is-out-of-sync-with-their-leases">2. Member status is out of sync with their leases&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-1">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-1">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#3-all-members-are-ready-but-allmembersready-condition-is-stale">3. All members are &lt;code>Ready&lt;/code> but &lt;code>AllMembersReady&lt;/code> condition is stale&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-2">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-2">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#4-not-all-members-are-ready-but-allmembersready-condition-is-stale">4. Not all members are &lt;code>Ready&lt;/code> but &lt;code>AllMembersReady&lt;/code> condition is stale&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-3">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-3">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#5-majority-members-are-ready-but-ready-condition-is-stale">5. Majority members are &lt;code>Ready&lt;/code> but &lt;code>Ready&lt;/code> condition is stale&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-4">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-4">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#6-majority-members-are-notready-but-ready-condition-is-stale">6. Majority members are &lt;code>NotReady&lt;/code> but &lt;code>Ready&lt;/code> condition is stale&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-5">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-5">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#7-some-members-have-been-in-unknown-status-for-a-while">7. Some members have been in &lt;code>Unknown&lt;/code> status for a while&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-6">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-6">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#8-some-member-pods-are-not-ready-but-have-not-had-the-chance-to-update-their-status">8. Some member pods are not &lt;code>Ready&lt;/code> but have not had the chance to update their status&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-7">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-7">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#9-quorate-cluster-with-a-minority-of-members-notready">9. Quorate cluster with a minority of members &lt;code>NotReady&lt;/code>&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-8">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-8">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#10-quorum-lost-with-a-majority-of-members-notready">10. Quorum lost with a majority of members &lt;code>NotReady&lt;/code>&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-9">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-9">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#11-scale-up-of-a-healthy-cluster">11. Scale up of a healthy cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-10">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-10">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#12-scale-down-of-a-healthy-cluster">12. Scale down of a healthy cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-11">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-11">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#13-superfluous-member-entries-in-etcd-status">13. Superfluous member entries in &lt;code>Etcd&lt;/code> status&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-12">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-12">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#decision-table-for-etcd-backup-restore-during-initialization">Decision table for etcd-backup-restore during initialization&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#1-first-member-during-bootstrap-of-a-fresh-etcd-cluster">1. First member during bootstrap of a fresh etcd cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-13">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-13">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#2-addition-of-a-new-following-member-during-bootstrap-of-a-fresh-etcd-cluster">2. Addition of a new following member during bootstrap of a fresh etcd cluster&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-14">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-14">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#3-restart-of-an-existing-member-of-a-quorate-cluster-with-valid-metadata-and-data">3. Restart of an existing member of a quorate cluster with valid metadata and data&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-15">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-15">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#4-restart-of-an-existing-member-of-a-quorate-cluster-with-valid-metadata-but-without-valid-data">4. Restart of an existing member of a quorate cluster with valid metadata but without valid data&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-16">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-16">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#5-restart-of-an-existing-member-of-a-quorate-cluster-without-valid-metadata">5. Restart of an existing member of a quorate cluster without valid metadata&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-17">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-17">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#6-restart-of-an-existing-member-of-a-non-quorate-cluster-with-valid-metadata-and-data">6. Restart of an existing member of a non-quorate cluster with valid metadata and data&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-18">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-18">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#7-restart-of-the-first-member-of-a-non-quorate-cluster-without-valid-data">7. Restart of the first member of a non-quorate cluster without valid data&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-19">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-19">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#8-restart-of-a-following-member-of-a-non-quorate-cluster-without-valid-data">8. Restart of a following member of a non-quorate cluster without valid data&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#observed-state-20">Observed state&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recommended-action-20">Recommended Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#backup">Backup&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#leading-etcd-main-containers-sidecar-is-the-backup-leader">Leading ETCD main containerâ€™s sidecar is the backup leader&lt;/a>&lt;/li>
&lt;li>&lt;a href="#independent-leader-election-between-backup-restore-sidecars">Independent leader election between backup-restore sidecars&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#history-compaction">History Compaction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#defragmentation">Defragmentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#work-flows-in-etcd-backup-restore">Work-flows in etcd-backup-restore&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#work-flows-independent-of-leader-election-in-all-members">Work-flows independent of leader election in all members&lt;/a>&lt;/li>
&lt;li>&lt;a href="#work-flows-only-on-the-leading-member">Work-flows only on the leading member&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#high-availability">High Availability&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#zonal-cluster---single-availability-zone">Zonal Cluster - Single Availability Zone&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#alternative-5">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#regional-cluster---multiple-availability-zones">Regional Cluster - Multiple Availability Zones&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#alternative-6">Alternative&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#poddisruptionbudget">PodDisruptionBudget&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#rolling-updates-to-etcd-members">Rolling updates to etcd members&lt;/a>&lt;/li>
&lt;li>&lt;a href="#follow-up">Follow Up&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#ephemeral-volumes">Ephemeral Volumes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shoot-control-plane-migration">Shoot Control-Plane Migration&lt;/a>&lt;/li>
&lt;li>&lt;a href="#performance-impact-of-multi-node-etcd-clusters">Performance impact of multi-node etcd clusters&lt;/a>&lt;/li>
&lt;li>&lt;a href="#metrics-dashboards-and-alerts">Metrics, Dashboards and Alerts&lt;/a>&lt;/li>
&lt;li>&lt;a href="#costs">Costs&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#future-work">Future Work&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#gardener-ring">Gardener Ring&lt;/a>&lt;/li>
&lt;li>&lt;a href="#autonomous-shoot-clusters">Autonomous Shoot Clusters&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-of-recovery-from-non-quorate-cluster-with-some-member-containing-valid-data">Optimization of recovery from non-quorate cluster with some member containing valid data&lt;/a>&lt;/li>
&lt;li>&lt;a href="#optimization-of-rolling-updates-to-unhealthy-etcd-clusters">Optimization of rolling updates to unhealthy etcd clusters&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="goal">Goal&lt;/h2>
&lt;ul>
&lt;li>Enhance etcd-druid and etcd-backup-restore to support provisioning and management of multi-node etcd cluster instances within a single Kubernetes cluster.&lt;/li>
&lt;li>The etcd CRD interface should be simple to use. It should preferably work with just setting the &lt;code>spec.replicas&lt;/code> field to the desired value and should not require any more configuration in the CRD than currently required for the single-node etcd instances. The &lt;code>spec.replicas&lt;/code> field is part of the &lt;a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#scale-subresource">&lt;code>scale&lt;/code> sub-resource&lt;/a> &lt;a href="https://github.com/gardener/etcd-druid/blob/eaf04a2d0e6c7a4f2c8c220182b7a141aabfc70b/api/v1alpha1/etcd_types.go#L299">implementation&lt;/a> in &lt;code>Etcd&lt;/code> CRD.&lt;/li>
&lt;li>The single-node and multi-node scenarios must be automatically identified and managed by &lt;code>etcd-druid&lt;/code> and &lt;code>etcd-backup-restore&lt;/code>.&lt;/li>
&lt;li>The etcd clusters (single-node or multi-node) managed by &lt;code>etcd-druid&lt;/code> and &lt;code>etcd-backup-restore&lt;/code> must automatically recover from failures (even quorum loss) and disaster (e.g. etcd member persistence/data loss) as much as possible.&lt;/li>
&lt;li>It must be possible to dynamically scale an etcd cluster horizontally (even between single-node and multi-node scenarios) by simply scaling the &lt;code>Etcd&lt;/code> scale sub-resource.&lt;/li>
&lt;li>It must be possible to (optionally) schedule the individual members of an etcd clusters on different nodes or even infrastructure availability zones (within the hosting Kubernetes cluster).&lt;/li>
&lt;/ul>
&lt;p>Though this proposal tries to cover most aspects related to single-node and multi-node etcd clusters, there are some more points that are not goals for this document but are still in the scope of either etcd-druid/etcd-backup-restore and/or gardener.
In such cases, a high-level description of how they can be &lt;a href="#future-work">addressed in the future&lt;/a> are mentioned at the end of the document.&lt;/p>
&lt;h2 id="background-and-motivation">Background and Motivation&lt;/h2>
&lt;h3 id="single-node-etcd-cluster">Single-node etcd cluster&lt;/h3>
&lt;p>At present, &lt;code>etcd-druid&lt;/code> supports only single-node etcd cluster instances.
The advantages of this approach are given below.&lt;/p>
&lt;ul>
&lt;li>The problem domain is smaller.
There are no leader election and quorum related issues to be handled.
It is simpler to setup and manage a single-node etcd cluster.&lt;/li>
&lt;li>Single-node etcd clusters instances have &lt;a href="https://etcd.io/docs/v2/admin_guide/#optimal-cluster-size">less request latency&lt;/a> than multi-node etcd clusters because there is no requirement to replicate the changes to the other members before committing the changes.&lt;/li>
&lt;li>&lt;code>etcd-druid&lt;/code> provisions etcd cluster instances as pods (actually as &lt;code>statefulsets&lt;/code>) in a Kubernetes cluster and Kubernetes is quick (&amp;lt;&lt;code>20s&lt;/code>) to restart container/pods if they go down.&lt;/li>
&lt;li>Also, &lt;code>etcd-druid&lt;/code> is currently only used by gardener to provision etcd clusters to act as back-ends for Kubernetes control-planes and Kubernetes control-plane components (&lt;code>kube-apiserver&lt;/code>, &lt;code>kubelet&lt;/code>, &lt;code>kube-controller-manager&lt;/code>, &lt;code>kube-scheduler&lt;/code> etc.) can tolerate etcd going down and recover when it comes back up.&lt;/li>
&lt;li>Single-node etcd clusters incur less cost (CPU, memory and storage)&lt;/li>
&lt;li>It is easy to cut-off client requests if backups fail by using &lt;a href="https://github.com/gardener/etcd-druid/blob/eaf04a2d0e6c7a4f2c8c220182b7a141aabfc70b/charts/etcd/templates/etcd-statefulset.yaml#L54-L62">&lt;code>readinessProbe&lt;/code> on the &lt;code>etcd-backup-restore&lt;/code> healthz endpoint&lt;/a> to minimize the gap between the latest revision and the backup revision.&lt;/li>
&lt;/ul>
&lt;p>The disadvantages of using single-node etcd clusters are given below.&lt;/p>
&lt;ul>
&lt;li>The &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/doc/proposals/design.md#workflow">database verification&lt;/a> step by &lt;code>etcd-backup-restore&lt;/code> can introduce additional delays whenever etcd container/pod restarts (in total ~&lt;code>20-25s&lt;/code>).
This can be much longer if a database restoration is required.
Especially, if there are incremental snapshots that need to be replayed (this can be mitigated by &lt;a href="https://github.com/gardener/etcd-druid/issues/88">compacting the incremental snapshots in the background&lt;/a>).&lt;/li>
&lt;li>Kubernetes control-plane components can go into &lt;code>CrashloopBackoff&lt;/code> if etcd is down for some time. This is mitigated by the &lt;a href="https://github.com/gardener/gardener/blob/9e4a809008fb122a6d02045adc08b9c98b5cd564/charts/seed-bootstrap/charts/dependency-watchdog/templates/endpoint-configmap.yaml#L29-L41">dependency-watchdog&lt;/a>.
But Kubernetes control-plane components require a lot of resources and create a lot of load on the etcd cluster and the apiserver when they come out of &lt;code>CrashloopBackoff&lt;/code>.
Especially, in medium or large sized clusters (&amp;gt; &lt;code>20&lt;/code> nodes).&lt;/li>
&lt;li>Maintenance operations such as updates to etcd (and updates to &lt;code>etcd-druid&lt;/code> of &lt;code>etcd-backup-restore&lt;/code>), rolling updates to the nodes of the underlying Kubernetes cluster and vertical scaling of etcd pods are disruptive because they cause etcd pods to be restarted.
The vertical scaling of etcd pods is somewhat mitigated during scale down by doing it only during the target clusters&amp;rsquo; &lt;a href="https://github.com/gardener/gardener/blob/86aa30dfd095f7960ae50a81d2cee27c0d18408b/charts/seed-controlplane/charts/etcd/templates/etcd-hvpa.yaml#L53">maintenance window&lt;/a>.
But scale up is still disruptive.&lt;/li>
&lt;li>We currently use some form of elastic storage (via &lt;code>persistentvolumeclaims&lt;/code>) for storing which have some upper-bounds on the I/O latency and throughput. This can be potentially be a problem for large clusters (&amp;gt; &lt;code>220&lt;/code> nodes).
Also, some cloud providers (e.g. Azure) take a long time to attach/detach volumes to and from machines which increases the down time to the Kubernetes components that depend on etcd.
It is difficult to use ephemeral/local storage (to achieve better latency/throughput as well as to circumvent volume attachment/detachment) for single-node etcd cluster instances.&lt;/li>
&lt;/ul>
&lt;h3 id="multi-node-etcd-cluster">Multi-node etcd-cluster&lt;/h3>
&lt;p>The advantages of introducing support for multi-node etcd clusters via &lt;code>etcd-druid&lt;/code> are below.&lt;/p>
&lt;ul>
&lt;li>Multi-node etcd cluster is highly-available. It can tolerate disruption to individual etcd pods as long as the quorum is not lost (i.e. more than half the etcd member pods are healthy and ready).&lt;/li>
&lt;li>Maintenance operations such as updates to etcd (and updates to &lt;code>etcd-druid&lt;/code> of &lt;code>etcd-backup-restore&lt;/code>), rolling updates to the nodes of the underlying Kubernetes cluster and vertical scaling of etcd pods can be done non-disruptively by &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/disruptions/">respecting &lt;code>poddisruptionbudgets&lt;/code>&lt;/a> for the various multi-node etcd cluster instances hosted on that cluster.&lt;/li>
&lt;li>Kubernetes control-plane components do not see any etcd cluster downtime unless quorum is lost (which is expected to be lot less frequent than current frequency of etcd container/pod restarts).&lt;/li>
&lt;li>We can consider using ephemeral/local storage for multi-node etcd cluster instances because individual member restarts can afford to take time to restore from backup before (re)joining the etcd cluster because the remaining members serve the requests in the meantime.&lt;/li>
&lt;li>High-availability across availability zones is also possible by specifying (anti)affinity for the etcd pods (possibly via &lt;a href="https://github.com/gardener/kupid">&lt;code>kupid&lt;/code>&lt;/a>).&lt;/li>
&lt;/ul>
&lt;p>Some disadvantages of using multi-node etcd clusters due to which it might still be desirable, in some cases, to continue to use single-node etcd cluster instances in the gardener context are given below.&lt;/p>
&lt;ul>
&lt;li>Multi-node etcd cluster instances are more complex to manage.
The problem domain is larger including the following.
&lt;ul>
&lt;li>Leader election&lt;/li>
&lt;li>Quorum loss&lt;/li>
&lt;li>Managing rolling changes&lt;/li>
&lt;li>Backups to be taken from only the leading member.&lt;/li>
&lt;li>More complex to cut-off client requests if backups fail to minimize the gap between the latest revision and the backup revision is under control.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Multi-node etcd cluster instances incur more cost (CPU, memory and storage).&lt;/li>
&lt;/ul>
&lt;h3 id="dynamic-multi-node-etcd-cluster">Dynamic multi-node etcd cluster&lt;/h3>
&lt;p>Though it is &lt;a href="#non-goal">not part of this proposal&lt;/a>, it is conceivable to convert a single-node etcd cluster into a multi-node etcd cluster temporarily to perform some disruptive operation (etcd, &lt;code>etcd-backup-restore&lt;/code> or &lt;code>etcd-druid&lt;/code> updates, etcd cluster vertical scaling and perhaps even node rollout) and convert it back to a single-node etcd cluster once the disruptive operation has been completed. This will necessarily still involve a down-time because scaling from a single-node etcd cluster to a three-node etcd cluster will involve etcd pod restarts, it is still probable that it can be managed with a shorter down time than we see at present for single-node etcd clusters (on the other hand, converting a three-node etcd cluster to five node etcd cluster can be non-disruptive).&lt;/p>
&lt;p>This is &lt;em>definitely not&lt;/em> to argue in favour of such a dynamic approach in all cases (eventually, if/when dynamic multi-node etcd clusters are supported). On the contrary, it makes sense to make use of &lt;em>static&lt;/em> (fixed in size) multi-node etcd clusters for production scenarios because of the high-availability.&lt;/p>
&lt;h2 id="prior-art">Prior Art&lt;/h2>
&lt;h3 id="etcd-operator-from-coreos">ETCD Operator from CoreOS&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/coreos/etcd-operator#etcd-operator">etcd operator&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/coreos/etcd-operator#project-status-archived">Project status: archived&lt;/a>&lt;/p>
&lt;p>This project is no longer actively developed or maintained. The project exists here for historical reference. If you are interested in the future of the project and taking over stewardship, please contact &lt;a href="mailto:etcd-dev@googlegroups.com">etcd-dev@googlegroups.com&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h3 id="etcdadm-from-kubernetes-sigs">etcdadm from kubernetes-sigs&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/kubernetes-sigs/etcdadm#etcdadm">etcdadm&lt;/a> is a command-line tool for operating an etcd cluster. It makes it easy to create a new cluster, add a member to, or remove a member from an existing cluster. Its user experience is inspired by kubeadm.&lt;/p>
&lt;/blockquote>
&lt;p>It is a tool more tailored for manual command-line based management of etcd clusters with no API&amp;rsquo;s.
It also makes no assumptions about the underlying platform on which the etcd clusters are provisioned and hence, doesn&amp;rsquo;t leverage any capabilities of Kubernetes.&lt;/p>
&lt;h3 id="etcd-cluster-operator-from-improbable-engineering">Etcd Cluster Operator from Improbable-Engineering&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/improbable-eng/etcd-cluster-operator">Etcd Cluster Operator&lt;/a>&lt;/p>
&lt;p>Etcd Cluster Operator is an Operator for automating the creation and management of etcd inside of Kubernetes. It provides a custom resource definition (CRD) based API to define etcd clusters with Kubernetes resources, and enable management with native Kubernetes tooling._&lt;/p>
&lt;/blockquote>
&lt;p>Out of all the alternatives listed here, this one seems to be the only possible viable alternative.
Parts of its design/implementations are similar to some of the approaches mentioned in this proposal. However, we still don&amp;rsquo;t propose to use it as -&lt;/p>
&lt;ol>
&lt;li>The project is still in early phase and is not mature enough to be consumed as is in productive scenarios of ours.&lt;/li>
&lt;li>The resotration part is completely different which makes it difficult to adopt as-is and requries lot of re-work with the current restoration semantics with etcd-backup-restore making the usage counter-productive.&lt;/li>
&lt;/ol>
&lt;h2 id="general-approach-to-etcd-cluster-management">General Approach to ETCD Cluster Management&lt;/h2>
&lt;h3 id="bootstrapping">Bootstrapping&lt;/h3>
&lt;p>There are three ways to bootstrap an etcd cluster which are &lt;a href="https://etcd.io/docs/v3.4.0/op-guide/clustering/#static">static&lt;/a>, &lt;a href="https://etcd.io/docs/v3.4.0/op-guide/clustering/#etcd-discovery">etcd discovery&lt;/a> and &lt;a href="https://etcd.io/docs/v3.4.0/op-guide/clustering/#dns-discovery">DNS discovery&lt;/a>.
Out of these, the static way is the simplest (and probably faster to bootstrap the cluster) and has the least external dependencies.
Hence, it is preferred in this proposal.
But it requires that the initial (during bootstrapping) etcd cluster size (number of members) is already known before bootstrapping and that all of the members are already addressable (DNS,IP,TLS etc.).
Such information needs to be passed to the individual members during startup using the following static configuration.&lt;/p>
&lt;ul>
&lt;li>ETCD_INITIAL_CLUSTER
&lt;ul>
&lt;li>The list of peer URLs including all the members. This must be the same as the advertised peer URLs configuration. This can also be passed as &lt;code>initial-cluster&lt;/code> flag to etcd.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ETCD_INITIAL_CLUSTER_STATE
&lt;ul>
&lt;li>This should be set to &lt;code>new&lt;/code> while bootstrapping an etcd cluster.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ETCD_INITIAL_CLUSTER_TOKEN
&lt;ul>
&lt;li>This is a token to distinguish the etcd cluster from any other etcd cluster in the same network.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="assumptions">Assumptions&lt;/h4>
&lt;ul>
&lt;li>ETCD_INITIAL_CLUSTER can use DNS instead of IP addresses. We need to verify this by deleting a pod (as against scaling down the statefulset) to ensure that the pod IP changes and see if the recreated pod (by the statefulset controller) re-joins the cluster automatically.&lt;/li>
&lt;li>DNS for the individual members is known or computable. This is true in the case of etcd-druid setting up an etcd cluster using a single statefulset. But it may not necessarily be true in other cases (multiple statefulset per etcd cluster or deployments instead of statefulsets or in the case of etcd cluster with members distributed across more than one Kubernetes cluster.&lt;/li>
&lt;/ul>
&lt;h3 id="adding-a-new-member-to-an-etcd-cluster">Adding a new member to an etcd cluster&lt;/h3>
&lt;p>A &lt;a href="https://etcd.io/docs/v3.4.0/op-guide/runtime-configuration/#add-a-new-member">new member can be added&lt;/a> to an existing etcd cluster instance using the following steps.&lt;/p>
&lt;ol>
&lt;li>If the latest backup snapshot exists, restore the member&amp;rsquo;s etcd data to the latest backup snapshot. This can reduce the load on the leader to bring the new member up to date when it joins the cluster.
&lt;ol>
&lt;li>If the latest backup snapshot doesn&amp;rsquo;t exist or if the latest backup snapshot is not accessible (please see &lt;a href="#backup-failure">backup failure&lt;/a>) and if the cluster itself is quorate, then the new member can be started with an empty data. But this will will be suboptimal because the new member will fetch all the data from the leading member to get up-to-date.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>The cluster is informed that a new member is being added using the &lt;a href="https://github.com/etcd-io/etcd/blob/6e800b9b0161ef874784fc6c679325acd67e2452/client/v3/cluster.go#L40">&lt;code>MemberAdd&lt;/code> API&lt;/a> including information like the member name and its advertised peer URLs.&lt;/li>
&lt;li>The new etcd member is then started with &lt;code>ETCD_INITIAL_CLUSTER_STATE=existing&lt;/code> apart from other required configuration.&lt;/li>
&lt;/ol>
&lt;p>This proposal recommends this approach.&lt;/p>
&lt;h4 id="note">Note&lt;/h4>
&lt;ul>
&lt;li>If there are incremental snapshots (taken by &lt;code>etcd-backup-restore&lt;/code>), they cannot be applied because that requires the member to be started in isolation without joining the cluster which is not possible.
This is acceptable if the amount of incremental snapshots are managed to be relatively small.
This adds one more reason to increase the priority of the issue of &lt;a href="https://github.com/gardener/etcd-druid/issues/88">incremental snapshot compaction&lt;/a>.&lt;/li>
&lt;li>There is a time window, between the &lt;code>MemberAdd&lt;/code> call and the new member joining the cluster and getting up to date, where the cluster is &lt;a href="https://etcd.io/docs/v3.3.12/learning/learner/#background">vulnerable to leader elections which could be disruptive&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h4 id="alternative">Alternative&lt;/h4>
&lt;p>With &lt;code>v3.4&lt;/code>, the new &lt;a href="https://etcd.io/docs/v3.3.12/learning/learner/#raft-learner">raft learner approach&lt;/a> can be used to mitigate some of the possible disruptions mentioned &lt;a href="#note">above&lt;/a>.
Then the steps will be as follows.&lt;/p>
&lt;ol>
&lt;li>If the latest backup snapshot exists, restore the member&amp;rsquo;s etcd data to the latest backup snapshot. This can reduce the load on the leader to bring the new member up to date when it joins the cluster.&lt;/li>
&lt;li>The cluster is informed that a new member is being added using the &lt;a href="https://github.com/etcd-io/etcd/blob/6e800b9b0161ef874784fc6c679325acd67e2452/client/v3/cluster.go#L43">&lt;code>MemberAddAsLearner&lt;/code> API&lt;/a> including information like the member name and its advertised peer URLs.&lt;/li>
&lt;li>The new etcd member is then started with &lt;code>ETCD_INITIAL_CLUSTER_STATE=existing&lt;/code> apart from other required configuration.&lt;/li>
&lt;li>Once the new member (learner) is up to date, it can be promoted to a full voting member by using the &lt;a href="https://github.com/etcd-io/etcd/blob/6e800b9b0161ef874784fc6c679325acd67e2452/client/v3/cluster.go#L52">&lt;code>MemberPromote&lt;/code> API&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>This approach is new and involves more steps and is not recommended in this proposal.
It can be considered in future enhancements.&lt;/p>
&lt;h3 id="managing-failures">Managing Failures&lt;/h3>
&lt;p>A multi-node etcd cluster may face failures of &lt;a href="https://etcd.io/docs/v3.1.12/op-guide/failures/">diffent kinds&lt;/a> during its life-cycle.
The actions that need to be taken to manage these failures depend on the failure mode.&lt;/p>
&lt;h4 id="removing-an-existing-member-from-an-etcd-cluster">Removing an existing member from an etcd cluster&lt;/h4>
&lt;p>If a member of an etcd cluster becomes unhealthy, it must be explicitly removed from the etcd cluster, as soon as possible.
This can be done by using the &lt;a href="https://github.com/etcd-io/etcd/blob/6e800b9b0161ef874784fc6c679325acd67e2452/client/v3/cluster.go#L46">&lt;code>MemberRemove&lt;/code> API&lt;/a>.
This ensures that only healthy members participate as voting members.&lt;/p>
&lt;p>A member of an etcd cluster may be removed not just for managing failures but also for other reasons such as -&lt;/p>
&lt;ul>
&lt;li>The etcd cluster is being scaled down. I.e. the cluster size is being reduced&lt;/li>
&lt;li>An existing member is being replaced by a new one for some reason (e.g. upgrades)&lt;/li>
&lt;/ul>
&lt;p>If the majority of the members of the etcd cluster are healthy and the member that is unhealthy/being removed happens to be the &lt;a href="https://etcd.io/docs/v3.1.12/op-guide/failures/#leader-failure">leader&lt;/a> at that moment then the etcd cluster will automatically elect a new leader.
But if only a minority of etcd clusters are healthy after removing the member then the the cluster will no longer be &lt;a href="https://etcd.io/docs/v3.1.12/op-guide/failures/#majority-failure">quorate&lt;/a> and will stop accepting write requests.
Such an etcd cluster needs to be recovered via some kind of &lt;a href="#recovering-an-etcd-cluster-from-failure-of-majority-of-members">disaster-recovery&lt;/a>.&lt;/p>
&lt;h4 id="restarting-an-existing-member-of-an-etcd-cluster">Restarting an existing member of an etcd cluster&lt;/h4>
&lt;p>If the existing member of an etcd cluster restarts and retains an uncorrupted data directory after the restart, then it can simply re-join the cluster as an existing member without any API calls or configuration changes.
This is because the relevant metadata (including member ID and cluster ID) are &lt;a href="https://etcd.io/docs/v2/admin_guide/#lifecycle">maintained in the write ahead logs&lt;/a>.
However, if it doesn&amp;rsquo;t retain an uncorrupted data directory after the restart, then it must first be &lt;a href="#removing-an-existing-member-from-an-etcd-cluster">removed&lt;/a> and &lt;a href="#adding-a-new-member-to-an-etcd-cluster">added&lt;/a> as a new member.&lt;/p>
&lt;h4 id="recovering-an-etcd-cluster-from-failure-of-majority-of-members">Recovering an etcd cluster from failure of majority of members&lt;/h4>
&lt;p>If a majority of members of an etcd cluster fail but if they retain their uncorrupted data directory then they can be simply restarted and they will re-form the existing etcd cluster when they come up.
However, if they do not retain their uncorrupted data directory, then the etcd cluster must be &lt;a href="https://etcd.io/docs/v3.4.0/op-guide/recovery/#restoring-a-cluster">recovered from latest snapshot in the backup&lt;/a>.
This is very similar to &lt;a href="#bootstrapping">bootstrapping&lt;/a> with the additional initial step of restoring the latest snapshot in each of the members.
However, the same &lt;a href="#note">limitation&lt;/a> about incremental snapshots, as in the case of adding a new member, applies here.
But unlike in the case of &lt;a href="#adding-a-new-member-to-an-etcd-cluster">adding a new member&lt;/a>, not applying incremental snapshots is not acceptable in the case of etcd cluster recovery.
Hence, if incremental snapshots are required to be applied, the etcd cluster must be &lt;a href="https://etcd.io/docs/v3.4.0/op-guide/runtime-configuration/#restart-cluster-from-majority-failure">recovered&lt;/a> in the following steps.&lt;/p>
&lt;ol>
&lt;li>Restore a new single-member cluster using the latest snapshot.&lt;/li>
&lt;li>Apply incremental snapshots on the single-member cluster.&lt;/li>
&lt;li>Take a full snapshot which can now be used while adding the remaining members.&lt;/li>
&lt;li>&lt;a href="#adding-a-new-member-to-an-etcd-cluster">Add&lt;/a> new members using the latest snapshot created in the step above.&lt;/li>
&lt;/ol>
&lt;h2 id="kubernetes-context">Kubernetes Context&lt;/h2>
&lt;ul>
&lt;li>Users will provision an etcd cluster in a Kubernetes cluster by creating an etcd CRD resource instance.&lt;/li>
&lt;li>A multi-node etcd cluster is indicated if the &lt;code>spec.replicas&lt;/code> field is set to any value greater than 1. The etcd-druid will add validation to ensure that the &lt;code>spec.replicas&lt;/code> value is an odd number according to the requirements of etcd.&lt;/li>
&lt;li>The etcd-druid controller will provision a statefulset with the etcd main container and the etcd-backup-restore sidecar container. It will pass on the &lt;code>spec.replicas&lt;/code> field from the etcd resource to the statefulset. It will also supply the right pre-computed configuration to both the containers.&lt;/li>
&lt;li>The statefulset controller will create the pods based on the pod template in the statefulset spec and these individual pods will be the members that form the etcd cluster.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gardener.cloud/__resources/01-multi-node-etcd_1afcbd.png" alt="Component diagram">&lt;/p>
&lt;p>This approach makes it possible to satisfy the &lt;a href="#assumption">assumption&lt;/a> that the DNS for the individual members of the etcd cluster must be known/computable.
This can be achieved by using a &lt;code>headless&lt;/code> service (along with the statefulset) for each etcd cluster instance.
Then we can address individual pods/etcd members via the predictable DNS name of &lt;code>&amp;lt;statefulset_name&amp;gt;-{0|1|2|3|â€¦|n}.&amp;lt;headless_service_name&amp;gt;&lt;/code> from within the Kubernetes namespace (or from outside the Kubernetes namespace by appending &lt;code>.&amp;lt;namespace&amp;gt;.svc.&amp;lt;cluster_domain&amp;gt; suffix)&lt;/code>.
The etcd-druid controller can compute the above configurations automatically based on the &lt;code>spec.replicas&lt;/code> in the etcd resource.&lt;/p>
&lt;p>This proposal recommends this approach.&lt;/p>
&lt;h4 id="alternative-1">Alternative&lt;/h4>
&lt;p>One statefulset is used for each member (instead of one statefulset for all members).
While this approach gives a flexibility to have different pod specifications for the individual members, it makes managing the individual members (e.g. rolling updates) more complicated.
Hence, this approach is not recommended.&lt;/p>
&lt;h2 id="etcd-configuration">ETCD Configuration&lt;/h2>
&lt;p>As mentioned in the &lt;a href="#general-approach-to-etcd-cluster-management">general approach section&lt;/a>, there are differences in the configuration that needs to be passed to individual members of an etcd cluster in different scenarios such as &lt;a href="#bootstrapping">bootstrapping&lt;/a>, &lt;a href="#adding-a-new-member-to-an-etcd-cluster">adding&lt;/a> a new member, &lt;a href="#removing-an-existing-member-from-an-etcd-cluster">removing&lt;/a> a member, &lt;a href="#restarting-an-existing-member-of-an-etcd-cluster">restarting&lt;/a> an existing member etc.
Managing such differences in configuration for individual pods of a statefulset is tricky in the &lt;a href="#kubernetes-context">recommended approach&lt;/a> of using a single statefulset to manage all the member pods of an etcd cluster.
This is because statefulset uses the same pod template for all its pods.&lt;/p>
&lt;p>The recommendation is for &lt;code>etcd-druid&lt;/code> to provision the base configuration template in a &lt;code>ConfigMap&lt;/code> which is passed to all the pods via the pod template in the &lt;code>StatefulSet&lt;/code>.
The &lt;code>initialization&lt;/code> flow of &lt;code>etcd-backup-restore&lt;/code> (which is invoked every time the etcd container is (re)started) is then enhanced to generate the customized etcd configuration for the corresponding member pod (in a shared &lt;em>volume&lt;/em> between etcd and the backup-restore containers) based on the supplied template configuration.
This will require that &lt;code>etcd-backup-restore&lt;/code> will have to have a mechanism to detect which scenario listed &lt;a href="#etcd-configuration">above&lt;/a> applies during any given member container/pod restart.&lt;/p>
&lt;h3 id="alternative-2">Alternative&lt;/h3>
&lt;p>As mentioned &lt;a href="#alternative-1">above&lt;/a>, one statefulset is used for each member of the etcd cluster.
Then different configuration (generated directly by &lt;code>etcd-druid&lt;/code>) can be passed in the pod templates of the different statefulsets.
Though this approach is advantageous in the context of managing the different configuration, it is not recommended in this proposal because it makes the rest of the management (e.g. rolling updates) more complicated.&lt;/p>
&lt;h2 id="data-persistence">Data Persistence&lt;/h2>
&lt;p>The type of persistence used to store etcd data (including the member ID and cluster ID) has an impact on the steps that are needed to be taken when the member pods or containers (&lt;a href="#removing-an-existing-member-from-an-etcd-cluster">minority&lt;/a> of them or &lt;a href="#restarting-an-existing-member-of-an-etcd-cluster">majority&lt;/a>) need to be recovered.&lt;/p>
&lt;h3 id="persistent">Persistent&lt;/h3>
&lt;p>Like the single-node case, &lt;code>persistentvolumes&lt;/code> can be used to persist ETCD data for all the member pods. The individual member pods then get their own &lt;code>persistentvolumes&lt;/code>.
The advantage is that individual members retain their member ID across pod restarts and even pod deletion/recreation across Kubernetes nodes.
This means that member pods that crash (or are unhealthy) can be &lt;a href="#restarting-an-existing-member-of-an-etcd-cluster">restarted&lt;/a> automatically (by configuring &lt;code>livenessProbe&lt;/code>) and they will re-join the etcd cluster using their existing member ID without any need for explicit etcd cluster management).&lt;/p>
&lt;p>The disadvantages of this approach are as follows.&lt;/p>
&lt;ul>
&lt;li>The number of persistentvolumes increases linearly with the cluster size which is a cost-related concern.&lt;/li>
&lt;li>Network-mounted persistentvolumes might eventually become a performance bottleneck under heavy load for a latency-sensitive component like ETCD.&lt;/li>
&lt;li>&lt;a href="#single-node-etcd-cluster">Volume attach/detach issues&lt;/a> when associated with etcd cluster instances cause downtimes to the target shoot clusters that are backed by those etcd cluster instances.&lt;/li>
&lt;/ul>
&lt;h3 id="ephemeral">Ephemeral&lt;/h3>
&lt;p>The ephemeral volumes use-case is considered as an optimization and may be planned as a follow-up action.&lt;/p>
&lt;h4 id="disk">Disk&lt;/h4>
&lt;p>Ephemeral persistence can be achieved in Kubernetes by using either &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir">&lt;code>emptyDir&lt;/code>&lt;/a> volumes or &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#local">&lt;code>local&lt;/code> persistentvolumes&lt;/a> to persist ETCD data.
The advantages of this approach are as follows.&lt;/p>
&lt;ul>
&lt;li>Potentially faster disk I/O.&lt;/li>
&lt;li>The number of persistent volumes does not increase linearly with the cluster size (at least not technically).&lt;/li>
&lt;li>Issues related volume attachment/detachment can be avoided.&lt;/li>
&lt;/ul>
&lt;p>The main disadvantage of using ephemeral persistence is that the individual members may retain their identity and data across container restarts but not across pod deletion/recreation across Kubernetes nodes. If the data is lost then on restart of the member pod, the &lt;a href="#restarting-an-existing-member-of-an-etcd-cluster">older member (represented by the container) has to be removed and a new member has to be added&lt;/a>.&lt;/p>
&lt;p>Using &lt;code>emptyDir&lt;/code> ephemeral persistence has the disadvantage that the volume doesn&amp;rsquo;t have its own identity.
So, if the member pod is recreated but scheduled on the same node as before then it will not retain the identity as the persistence is lost.
But it has the advantage that scheduling of pods is unencumbered especially during pod recreation as they are free to be scheduled anywhere.&lt;/p>
&lt;p>Using &lt;code>local&lt;/code> persistentvolumes has the advantage that the volume has its own indentity and hence, a recreated member pod will retain its identity if scheduled on the same node.
But it has the disadvantage of tying down the member pod to a node which is a problem if the node becomes unhealthy requiring etcd druid to take additional actions (such as deleting the local persistent volume).&lt;/p>
&lt;p>Based on these constraints, if ephemeral persistence is opted for, it is recommended to use &lt;code>emptyDir&lt;/code> ephemeral persistence.&lt;/p>
&lt;h4 id="in-memory">In-memory&lt;/h4>
&lt;p>In-memory ephemeral persistence can be achieved in Kubernetes by using &lt;code>emptyDir&lt;/code> with &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes/#emptydir">&lt;code>medium: Memory&lt;/code>&lt;/a>.
In this case, a &lt;code>tmpfs&lt;/code> (RAM-backed file-system) volume will be used.
In addition to the advantages of &lt;a href="#ephemeral">ephemeral persistence&lt;/a>, this approach can achieve the fastest possible &lt;em>disk I/O&lt;/em>.
Similarly, in addition to the disadvantages of &lt;a href="#ephemeral">ephemeral persistence&lt;/a>, in-memory persistence has the following additional disadvantages.&lt;/p>
&lt;ul>
&lt;li>More memory required for the individual member pods.&lt;/li>
&lt;li>Individual members may not at all retain their data and identity across container restarts let alone across pod restarts/deletion/recreation across Kubernetes nodes.
I.e. every time an etcd container restarts, &lt;a href="#restarting-an-existing-member-of-an-etcd-cluster">the old member (represented by the container) will have to be removed and a new member has to be added&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="how-to-detect-if-valid-metadata-exists-in-an-etcd-member">How to detect if valid metadata exists in an etcd member&lt;/h3>
&lt;p>Since the likelyhood of a member not having valid metadata in the WAL files is much more likely in the &lt;a href="#ephemeral">ephemeral&lt;/a> persistence scenario, one option is to pass the information that ephemeral persistence is being used to the &lt;code>etcd-backup-restore&lt;/code> sidecar (say, via command-line flags or environment variables).&lt;/p>
&lt;p>But in principle, it might be better to determine this from the WAL files directly so that the possibility of corrupted WAL files also gets handled correctly.
To do this, the &lt;a href="https://github.com/etcd-io/etcd/tree/main/server/storage/wal">wal&lt;/a> package has &lt;a href="https://github.com/etcd-io/etcd/blob/57a092b45d0eae6c9e600e62513ffcd2f1f25a92/server/wal/wal.go#L324-L326">some&lt;/a> &lt;a href="https://github.com/etcd-io/etcd/blob/57a092b45d0eae6c9e600e62513ffcd2f1f25a92/server/wal/wal.go#L429-L548">functions&lt;/a> that might be useful.&lt;/p>
&lt;h4 id="recommendation">Recommendation&lt;/h4>
&lt;p>It might be possible that using the &lt;a href="https://github.com/etcd-io/etcd/tree/main/server/storage/wal">wal&lt;/a> package for verifying if valid metadata exists might be performance intensive.
So, the performance impact needs to be measured.
If the performance impact is acceptable (both in terms of resource usage and time), it is recommended to use this way to verify if the member contains valid metadata.
Otherwise, alternatives such as a simple check that WAL folder exists coupled with the static information about use of &lt;a href="#persistent">persistent&lt;/a> or &lt;a href="#ephemeral">ephemeral&lt;/a> storage might be considered.&lt;/p>
&lt;h3 id="how-to-detect-if-valid-data-exists-in-an-etcd-member">How to detect if valid data exists in an etcd member&lt;/h3>
&lt;p>The &lt;a href="#decision-table-for-etcd-backup-restore-during-initialization">initialization sequence&lt;/a> in &lt;code>etcd-backup-restore&lt;/code> already includes &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/c98f76c7c55f7d1039687cc293536d7caf893ba5/pkg/initializer/validator/datavalidator.go#L78-L94">database verification&lt;/a>.
This would suffice to determine if the member has valid data.&lt;/p>
&lt;h3 id="recommendation-1">Recommendation&lt;/h3>
&lt;p>Though &lt;a href="#ephemeral">ephemeral&lt;/a> persistence has performance and logistics advantages,
it is recommended to start with &lt;a href="#persistent">persistent&lt;/a> data for the member pods.
In addition to the reasons and concerns listed above, there is also the additional concern that in case of &lt;a href="#backup-failure">backup failure&lt;/a>, the risk of additional data loss is a bit higher if ephemeral persistence is used (simultaneous quoram loss is sufficient) when compared to persistent storage (simultaenous quorum loss with majority persistence loss is needed).
The risk might still be acceptable but the idea is to gain experience about how frequently member containers/pods get restarted/recreated, how frequently leader election happens among members of an etcd cluster and how frequently etcd clusters lose quorum.
Based on this experience, we can move towards using &lt;a href="#ephemeral">ephemeral&lt;/a> (perhaps even &lt;a href="#in-memory">in-memory&lt;/a>) persistence for the member pods.&lt;/p>
&lt;h2 id="separating-peer-and-client-traffic">Separating peer and client traffic&lt;/h2>
&lt;p>The current single-node ETCD cluster implementation in &lt;code>etcd-druid&lt;/code> and &lt;code>etcd-backup-restore&lt;/code> uses a single &lt;code>service&lt;/code> object to act as the entry point for the client traffic.
There is no separation or distinction between the client and peer traffic because there is not much benefit to be had by making that distinction.&lt;/p>
&lt;p>In the multi-node ETCD cluster scenario, it makes sense to distinguish between and separate the peer and client traffic.
This can be done by using two &lt;code>services&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>peer
&lt;ul>
&lt;li>To be used for peer communication. This could be a &lt;code>headless&lt;/code> service.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>client
&lt;ul>
&lt;li>To be used for client communication. This could be a normal &lt;code>ClusterIP&lt;/code> service like it is in the single-node case.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>The main advantage of this approach is that it makes it possible (if needed) to allow only peer to peer communication while blocking client communication. Such a thing might be required during some phases of some maintenance tasks (manual or automated).&lt;/p>
&lt;h3 id="cutting-off-client-requests">Cutting off client requests&lt;/h3>
&lt;p>At present, in the single-node ETCD instances, etcd-druid configures the readinessProbe of the etcd main container to probe the healthz endpoint of the etcd-backup-restore sidecar which considers the status of the latest backup upload in addition to the regular checks about etcd and the side car being up and healthy. This has the effect of setting the etcd main container (and hence the etcd pod) as not ready if the latest backup upload failed. This results in the endpoints controller removing the pod IP address from the endpoints list for the service which eventually cuts off ingress traffic coming into the etcd pod via the etcd client service. The rationale for this is to fail early when the backup upload fails rather than continuing to serve requests while the gap between the last backup and the current data increases which might lead to unacceptably large amount of data loss if disaster strikes.&lt;/p>
&lt;p>This approach will not work in the multi-node scenario because we need the individual member pods to be able to talk to each other to maintain the cluster quorum when backup upload fails but need to cut off only client ingress traffic.&lt;/p>
&lt;p>It is recommended to separate the backup health condition tracking taking appropriate remedial actions.
With that, the backup health condition tracking is now separated to the &lt;a href="#conditions">&lt;code>BackupReady&lt;/code> condition&lt;/a> in the &lt;a href="#status">&lt;code>Etcd&lt;/code> resource &lt;code>status&lt;/code>&lt;/a> and the cutting off of client traffic (which could now be done for more reasons than failed backups) can be achieved in a different way described &lt;a href="#manipulating-client-service-podselector">below&lt;/a>.&lt;/p>
&lt;h4 id="manipulating-client-service-podselector">Manipulating Client Service podSelector&lt;/h4>
&lt;p>The client traffic can be cut off by updating (manually or automatically by some component) the &lt;code>podSelector&lt;/code> of the client service to add an additional label (say, unhealthy or disabled) such that the &lt;code>podSelector&lt;/code> no longer matches the member pods created by the statefulset.
This will result in the client ingress traffic being cut off.
The peer service is left unmodified so that peer communication is always possible.&lt;/p>
&lt;h2 id="health-check">Health Check&lt;/h2>
&lt;p>The etcd main container and the etcd-backup-restore sidecar containers will be configured with livenessProbe and readinessProbe which will indicate the health of the containers and effectively the corresponding ETCD cluster member pod.&lt;/p>
&lt;h3 id="backup-failure">Backup Failure&lt;/h3>
&lt;p>As described &lt;a href="#cutting-off-client-requests">above&lt;/a> using &lt;code>readinessProbe&lt;/code> failures based on latest backup failure is not viable in the multi-node ETCD scenario.&lt;/p>
&lt;p>Though cutting off traffic by &lt;a href="#manipulating-client-service-podselector">manipulating client &lt;code>service&lt;/code> &lt;code>podSelector&lt;/code>&lt;/a> is workable, it may not be desirable.&lt;/p>
&lt;p>It is recommended that on backup failure, the leading &lt;code>etcd-backup-restore&lt;/code> sidecar (the one that is responsible for taking backups at that point in time, as explained in the &lt;a href="#backup">backup section below&lt;/a>, updates the &lt;a href="#conditions">&lt;code>BackupReady&lt;/code> condition&lt;/a> in the &lt;a href="#status">&lt;code>Etcd&lt;/code> status&lt;/a> and raises a high priority alert to the landscape operators but &lt;em>&lt;em>does not&lt;/em>&lt;/em> cut off the client traffic.&lt;/p>
&lt;p>The reasoning behind this decision to not cut off the client traffic on backup failure is to allow the Kubernetes cluster&amp;rsquo;s control plane (which relies on the ETCD cluster) to keep functioning as long as possible and to avoid bringing down the control-plane due to a missed backup.&lt;/p>
&lt;p>The risk of this approach is that with a cascaded sequence of failures (on top of the backup failure), there is a chance of more data loss than the frequency of backup would otherwise indicate.&lt;/p>
&lt;p>To be precise, the risk of such an additional data loss manifests only when backup failure as well as a special case of quorum loss (majority of the members are not ready) happen in such a way that the ETCD cluster needs to be re-bootstrapped from the backup.
As described &lt;a href="#recovering-an-etcd-cluster-from-failure-of-majority-of-members">here&lt;/a>, re-bootstrapping the ETCD cluster requires restoration from the latest backup only when a majority of members no longer have uncorrupted data persistence.&lt;/p>
&lt;p>If &lt;a href="#persistent">persistent storage&lt;/a> is used, this will happen only when backup failure as well as a majority of the disks/volumes backing the ETCD cluster members fail simultaneously.
This would indeed be rare and might be an acceptable risk.&lt;/p>
&lt;p>If &lt;a href="#ephemeral">ephemeral storage&lt;/a> is used (especially, &lt;a href="#in-memory">in-memory&lt;/a>), the data loss will happen if a majority of the ETCD cluster members become &lt;code>NotReady&lt;/code> (requiring a pod restart) at the same time as the backup failure.
This may not be as rare as majority members&amp;rsquo; disk/volume failure.
The risk can be somewhat mitigated at least for planned maintenance operations by postponing potentially disruptive maintenance operations when &lt;code>BackupReady&lt;/code> condition is &lt;code>false&lt;/code> (vertical scaling, rolling updates, evictions due to node roll-outs).&lt;/p>
&lt;p>But in practice (when &lt;a href="#ephemeral">ephemeral storage&lt;/a> is used), the current proposal suggests restoring from the latest full backup even when a minority of ETCD members (even a single pod) &lt;a href="#restarting-an-existing-member-of-an-etcd-cluster">restart&lt;/a> both to speed up the process of the new member catching up to the latest revision but also to avoid load on the leading member which needs to supply the data to bring the new member up-to-date.
But as described &lt;a href="#adding-a-new-member-to-an-etcd-cluster">here&lt;/a>, in case of a minority member failure while using ephemeral storage, it is possible to restart the new member with empty data and let it fetch all the data from the leading member (only if backup is not accessible).
Though this is suboptimal, it is workable given the constraints and conditions.
With this, the risk of additional data loss in the case of ephemeral storage is only if backup failure as well as quorum loss happens.
While this is still less rare than the risk of additional data loss in case of persistent storage, the risk might be tolerable. Provided the risk of quorum loss is not too high. This needs to be monitored/evaluated before opting for ephemeral storage.&lt;/p>
&lt;p>Given these constraints, it is better to dynamically avoid/postpone some potentially disruptive operations when &lt;code>BackupReady&lt;/code> condition is &lt;code>false&lt;/code>.
This has the effect of allowing &lt;code>n/2&lt;/code> members to be evicted when the backups are healthy and completely disabling evictions when backups are not healthy.&lt;/p>
&lt;ol>
&lt;li>Skip/postpone potentially disruptive maintenance operations (listed below) when the &lt;code>BackupReady&lt;/code> condition is &lt;code>false&lt;/code>.&lt;/li>
&lt;li>Vertical scaling.&lt;/li>
&lt;li>Rolling updates, Basically, any updates to the &lt;code>StatefulSet&lt;/code> spec which includes vertical scaling.&lt;/li>
&lt;li>Dynamically toggle the &lt;code>minAvailable&lt;/code> field of the &lt;a href="#poddisruptionbudget">&lt;code>PodDisruptionBudget&lt;/code>&lt;/a> between &lt;code>n/2 + 1&lt;/code> and &lt;code>n&lt;/code> (where &lt;code>n&lt;/code> is the ETCD desired cluster size) whenever the &lt;code>BackupReady&lt;/code> condition toggles between &lt;code>true&lt;/code> and &lt;code>false&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>This will mean that &lt;code>etcd-backup-restore&lt;/code> becomes Kubernetes-aware. But there might be reasons for making &lt;code>etcd-backup-restore&lt;/code> Kubernetes-aware anyway (e.g. to update the &lt;code>etcd&lt;/code> resource &lt;a href="#status">status&lt;/a> with latest full snapshot details).
This enhancement should keep &lt;code>etcd-backup-restore&lt;/code> backward compatible.
I.e. it should be possible to use &lt;code>etcd-backup-restore&lt;/code> Kubernetes-unaware as before this proposal.
This is possible either by auto-detecting the existence of kubeconfig or by an explicit command-line flag (such as &lt;code>--enable-client-service-updates&lt;/code> which can be defaulted to &lt;code>false&lt;/code> for backward compatibility).&lt;/p>
&lt;h5 id="alternative-3">Alternative&lt;/h5>
&lt;p>The alternative is for &lt;code>etcd-druid&lt;/code> to implement the &lt;a href="#manipulating-client-service-podselector">above functionality&lt;/a>.&lt;/p>
&lt;p>But &lt;code>etcd-druid&lt;/code> is centrally deployed in the host Kubernetes cluster and cannot scale well horizontally.
So, it can potentially be a bottleneck if it is involved in regular health check mechanism for all the etcd clusters it manages.
Also, the recommended approach above is more robust because it can work even if &lt;code>etcd-druid&lt;/code> is down when the backup upload of a particular etcd cluster fails.&lt;/p>
&lt;h2 id="status">Status&lt;/h2>
&lt;p>It is desirable (for the &lt;code>etcd-druid&lt;/code> and landscape administrators/operators) to maintain/expose status of the etcd cluster instances in the &lt;code>status&lt;/code> sub-resource of the &lt;code>Etcd&lt;/code> CRD.
The proposed structure for maintaining the status is as shown in the example below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: druid.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Etcd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: etcd-main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> replicas: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conditions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: Ready &lt;span style="color:#008000"># Condition type for the readiness of the ETCD cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;True&amp;#34;&lt;/span> &lt;span style="color:#008000"># Indicates of the ETCD Cluster is ready or not&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastHeartbeatTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: Quorate &lt;span style="color:#008000"># Quorate|QuorumLost&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: AllMembersReady &lt;span style="color:#008000"># Condition type for the readiness of all the member of the ETCD cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;True&amp;#34;&lt;/span> &lt;span style="color:#008000"># Indicates if all the members of the ETCD Cluster are ready&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastHeartbeatTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: AllMembersReady &lt;span style="color:#008000"># AllMembersReady|NotAllMembersReady&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: BackupReady &lt;span style="color:#008000"># Condition type for the readiness of the backup of the ETCD cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: &lt;span style="color:#a31515">&amp;#34;True&amp;#34;&lt;/span> &lt;span style="color:#008000"># Indicates if the backup of the ETCD cluster is ready&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastHeartbeatTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: FullBackupSucceeded &lt;span style="color:#008000"># FullBackupSucceeded|IncrementalBackupSucceeded|FullBackupFailed|IncrementalBackupFailed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clusterSize: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> replicas: 3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> members:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: etcd-main-0 &lt;span style="color:#008000"># member pod name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: 272e204152 &lt;span style="color:#008000"># member Id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> role: Leader &lt;span style="color:#008000"># Member|Leader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: Ready &lt;span style="color:#008000"># Ready|NotReady|Unknown&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: LeaseSucceeded &lt;span style="color:#008000"># LeaseSucceeded|LeaseExpired|UnknownGracePeriodExceeded|PodNotRead&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: etcd-main-1 &lt;span style="color:#008000"># member pod name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: 272e204153 &lt;span style="color:#008000"># member Id&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> role: Member &lt;span style="color:#008000"># Member|Leader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> status: Ready &lt;span style="color:#008000"># Ready|NotReady|Unknown&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lastTransitionTime: &lt;span style="color:#a31515">&amp;#34;2020-11-10T12:48:01Z&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reason: LeaseSucceeded &lt;span style="color:#008000"># LeaseSucceeded|LeaseExpired|UnknownGracePeriodExceeded|PodNotRead&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This proposal recommends that &lt;code>etcd-druid&lt;/code> (preferrably, the &lt;code>custodian&lt;/code> controller in &lt;code>etcd-druid&lt;/code>) maintains most of the information in the &lt;code>status&lt;/code> of the &lt;code>Etcd&lt;/code> resources described above.&lt;/p>
&lt;p>One exception to this is the &lt;code>BackupReady&lt;/code> condition which is recommended to be maintained by the &lt;em>leading&lt;/em> &lt;code>etcd-backup-restore&lt;/code> sidecar container.
This will mean that &lt;code>etcd-backup-restore&lt;/code> becomes Kubernetes-aware. But there are other reasons for making &lt;code>etcd-backup-restore&lt;/code> Kubernetes-aware anyway (e.g. to &lt;a href="#health-check">maintain health conditions&lt;/a>).
This enhancement should keep &lt;code>etcd-backup-restore&lt;/code> backward compatible.
But it should be possible to use &lt;code>etcd-backup-restore&lt;/code> Kubernetes-unaware as before this proposal. This is possible either by auto-detecting the existence of kubeconfig or by an explicit command-line flag (such as &lt;code>--enable-etcd-status-updates&lt;/code> which can be defaulted to &lt;code>false&lt;/code> for backward compatibility).&lt;/p>
&lt;h3 id="members">Members&lt;/h3>
&lt;p>The &lt;code>members&lt;/code> section of the status is intended to be maintained by &lt;code>etcd-druid&lt;/code> (preferraby, the &lt;code>custodian&lt;/code> controller of &lt;code>etcd-druid&lt;/code>) based on the &lt;a href="#member-leases">&lt;code>leases&lt;/code> of the individual members&lt;/a>.&lt;/p>
&lt;h4 id="note-1">Note&lt;/h4>
&lt;p>An earlier design in this proposal was for the individual &lt;code>etcd-backup-restore&lt;/code> sidecars to update the corresponding &lt;code>status.members&lt;/code> entries themselves. But this was redesigned to use &lt;a href="#member-leases">member &lt;code>leases&lt;/code>&lt;/a> to avoid conflicts rising from frequent updates and the limitations in the support for &lt;a href="https://kubernetes.io/docs/reference/using-api/server-side-apply/">Server-Side Apply&lt;/a> in some versions of Kubernetes.&lt;/p>
&lt;p>The &lt;code>spec.holderIdentity&lt;/code> field in the &lt;code>leases&lt;/code> is used to communicate the ETCD member &lt;code>id&lt;/code> and &lt;code>role&lt;/code> between the &lt;code>etcd-backup-restore&lt;/code> sidecars and &lt;code>etcd-druid&lt;/code>.&lt;/p>
&lt;h4 id="member-name-as-the-key">Member name as the key&lt;/h4>
&lt;p>In an ETCD cluster, the member &lt;code>id&lt;/code> is the &lt;a href="https://etcd.io/docs/v3.4/dev-guide/api_reference_v3/#message-member-etcdserveretcdserverpbrpcproto">unique identifier for a member&lt;/a>.
However, this proposal recommends using a &lt;a href="#kubernetes-context">single &lt;code>StatefulSet&lt;/code>&lt;/a> whose pods form the members of the ETCD cluster and &lt;code>Pods&lt;/code> of a &lt;code>StatefulSet&lt;/code> have &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#ordinal-index">uniquely indexed names&lt;/a> as well as &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#stable-network-id">uniquely addressible DNS&lt;/a>.&lt;/p>
&lt;p>This proposal recommends that the &lt;code>name&lt;/code> of the member (which is the same as the name of the member &lt;code>Pod&lt;/code>) be used as the unique key to identify a member in the &lt;code>members&lt;/code> array.
This can minimise the need to cleanup superfluous entries in the &lt;code>members&lt;/code> array after the member pods are gone to some extent because the replacement pods for any member will share the same &lt;code>name&lt;/code> and will overwrite the entry with a &lt;a href="#restarting-an-existing-member-of-an-etcd-cluster">possibly new&lt;/a> member &lt;code>id&lt;/code>.&lt;/p>
&lt;p>There is still the possibility of not only &lt;a href="#13-superfluous-member-entries-in-etcd-status">superfluous entries in the &lt;code>members&lt;/code> array&lt;/a> but also &lt;a href="#work-flows-only-on-the-leading-member">superfluous &lt;code>members&lt;/code> in the ETCD cluster&lt;/a> for which there is no corresponding pod in the &lt;code>StatefulSet&lt;/code> anymore.&lt;/p>
&lt;p>For example, if an ETCD cluster is scaled up from &lt;code>3&lt;/code> to &lt;code>5&lt;/code> and the new members were failing constantly due to insufficient resources and then if the ETCD client is scaled back down to &lt;code>3&lt;/code> and failing member pods may not have the chance to clean up their &lt;code>member&lt;/code> entries (from the &lt;code>members&lt;/code> array as well as from the ETCD cluster) leading to superfluous members in the cluster that may have adverse effect on quorum of the cluster.&lt;/p>
&lt;p>Hence, the superfluous entries in both &lt;code>members&lt;/code> array as well as the ETCD cluster need to be &lt;a href="#recommended-action-12">cleaned up&lt;/a> &lt;a href="#work-flows-only-on-the-leading-member">as appropriate&lt;/a>.&lt;/p>
&lt;h4 id="member-leases">Member Leases&lt;/h4>
&lt;p>One &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/lease-v1/">Kubernetes &lt;code>lease&lt;/code> object&lt;/a> per desired ETCD member is maintained by &lt;code>etcd-druid&lt;/code> (preferrably, the &lt;code>custodian&lt;/code> controller in &lt;code>etcd-druid&lt;/code>).
The &lt;code>lease&lt;/code> objects will be created in the same &lt;code>namespace&lt;/code> as their owning &lt;code>Etcd&lt;/code> object and will have the same &lt;code>name&lt;/code> as the member to which they correspond (which, in turn would be the same as &lt;a href="#member-name-as-the-key">the &lt;code>pod&lt;/code> name in which the member ETCD process runs&lt;/a>).&lt;/p>
&lt;p>The &lt;code>lease&lt;/code> objects are created and deleted only by &lt;code>etcd-druid&lt;/code> but are continually renewed within the &lt;code>leaseDurationSeconds&lt;/code> by the &lt;a href="#work-flows-independent-of-leader-election-in-all-members">individual &lt;code>etcd-backup-restore&lt;/code> sidecars&lt;/a> (corresponding to their members) if the the corresponding ETCD member is ready and is part of the ETCD cluster.&lt;/p>
&lt;p>This will mean that &lt;code>etcd-backup-restore&lt;/code> becomes Kubernetes-aware. But there are other reasons for making &lt;code>etcd-backup-restore&lt;/code> Kubernetes-aware anyway (e.g. to &lt;a href="#health-check">maintain health conditions&lt;/a>).
This enhancement should keep &lt;code>etcd-backup-restore&lt;/code> backward compatible.
But it should be possible to use &lt;code>etcd-backup-restore&lt;/code> Kubernetes-unaware as before this proposal. This is possible either by auto-detecting the existence of kubeconfig or by an explicit command-line flag (such as &lt;code>--enable-etcd-lease-renewal&lt;/code> which can be defaulted to &lt;code>false&lt;/code> for backward compatibility).&lt;/p>
&lt;p>A &lt;code>member&lt;/code> entry in the &lt;code>Etcd&lt;/code> resource &lt;a href="#status">&lt;code>status&lt;/code>&lt;/a> would be marked as &lt;code>Ready&lt;/code> (with &lt;code>reason: LeaseSucceeded&lt;/code>) if the corresponding &lt;code>pod&lt;/code> is ready and the corresponding &lt;code>lease&lt;/code> has not yet expired.
The &lt;code>member&lt;/code> entry would be marked as &lt;code>NotReady&lt;/code> if the corresponding &lt;code>pod&lt;/code> is not ready (with reason &lt;code>PodNotReady&lt;/code>) or as &lt;code>Unknown&lt;/code> if the corresponding &lt;code>lease&lt;/code> has expired (with &lt;code>reason: LeaseExpired&lt;/code>).&lt;/p>
&lt;p>While renewing the lease, the &lt;code>etcd-backup-restore&lt;/code> sidecars also maintain the ETCD member &lt;code>id&lt;/code> and their &lt;code>role&lt;/code> (&lt;code>Leader&lt;/code> or &lt;code>Member&lt;/code>) separated by &lt;code>:&lt;/code> in the &lt;code>spec.holderIdentity&lt;/code> field of the corresponding &lt;code>lease&lt;/code> object since this information is only available to the &lt;code>ETCD&lt;/code> member processes and the &lt;code>etcd-backup-restore&lt;/code> sidecars (e.g. &lt;code>272e204152:Leader&lt;/code> or &lt;code>272e204153:Member&lt;/code>).
When the &lt;code>lease&lt;/code> objects are created by &lt;code>etcd-druid&lt;/code>, the &lt;code>spec.holderIdentity&lt;/code> field would be empty.&lt;/p>
&lt;p>The value in &lt;code>spec.holderIdentity&lt;/code> in the &lt;code>leases&lt;/code> is parsed and copied onto the &lt;code>id&lt;/code> and &lt;code>role&lt;/code> fields of the corresponding &lt;code>status.members&lt;/code> by &lt;code>etcd-druid&lt;/code>.&lt;/p>
&lt;h3 id="conditions">Conditions&lt;/h3>
&lt;p>The &lt;code>conditions&lt;/code> section in the status describe the overall condition of the ETCD cluster.
The condition type &lt;code>Ready&lt;/code> indicates if the ETCD cluster as a whole is ready to serve requests (i.e. the cluster is quorate) even though some minority of the members are not ready.
The condition type &lt;code>AllMembersReady&lt;/code> indicates of all the members of the ETCD cluster are ready.
The distinction between these conditions could be significant for both external consumers of the status as well as &lt;code>etcd-druid&lt;/code> itself.
Some maintenance operations might be safe to do (e.g. rolling updates) only when all members of the cluster are ready.
The condition type &lt;code>BackupReady&lt;/code> indicates of the most recent backup upload (full or incremental) succeeded.
This information also might be significant because some maintenance operations might be safe to do (e.g. anything that involves re-bootstrapping the ETCD cluster) only when backup is ready.&lt;/p>
&lt;p>The &lt;code>Ready&lt;/code> and &lt;code>AllMembersReady&lt;/code> conditions can be maintained by &lt;code>etcd-druid&lt;/code> based on the status in the &lt;a href="#members">&lt;code>members&lt;/code> section&lt;/a>.
The &lt;code>BackupReady&lt;/code> condition will be maintained by the leading &lt;code>etcd-backup-restore&lt;/code> sidecar that is in charge of taking backups.&lt;/p>
&lt;p>More condition types could be introduced in the future if specific purposes arise.&lt;/p>
&lt;h3 id="clustersize">ClusterSize&lt;/h3>
&lt;p>The &lt;code>clusterSize&lt;/code> field contains the current size of the ETCD cluster. It will be actively kept up-to-date by &lt;code>etcd-druid&lt;/code> in all scenarios.&lt;/p>
&lt;ul>
&lt;li>Before &lt;a href="#bootstrapping">bootstrapping&lt;/a> the ETCD cluster (during cluster creation or later bootstrapping because of &lt;a href="#recommended-action-9">quorum failure&lt;/a>), &lt;code>etcd-druid&lt;/code> will clear the &lt;code>status.members&lt;/code> array and set &lt;code>status.clusterSize&lt;/code> to be equal to &lt;code>spec.replicas&lt;/code>.&lt;/li>
&lt;li>While the ETCD cluster is quorate, &lt;code>etcd-druid&lt;/code> will actively set &lt;code>status.clusterSize&lt;/code> to be equal to length of the &lt;code>status.members&lt;/code> whenever the length of the array changes (say, due to scaling of the ETCD cluster).&lt;/li>
&lt;/ul>
&lt;p>Given that &lt;code>clusterSize&lt;/code> reliably represents the size of the ETCD cluster, it can be used to calculate the &lt;code>Ready&lt;/code> &lt;a href="#conditions">condition&lt;/a>.&lt;/p>
&lt;h3 id="alternative-4">Alternative&lt;/h3>
&lt;p>The alternative is for &lt;code>etcd-druid&lt;/code> to maintain the status in the &lt;code>Etcd&lt;/code> status sub-resource.
But &lt;code>etcd-druid&lt;/code> is centrally deployed in the host Kubernetes cluster and cannot scale well horizontally.
So, it can potentially be a bottleneck if it is involved in regular health check mechanism for all the etcd clusters it manages.
Also, the recommended approach above is more robust because it can work even if &lt;code>etcd-druid&lt;/code> is down when the backup upload of a particular etcd cluster fails.&lt;/p>
&lt;h2 id="decision-table-for-etcd-druid-based-on-the-status">Decision table for etcd-druid based on the status&lt;/h2>
&lt;p>The following decision table describes the various criteria &lt;code>etcd-druid&lt;/code> takes into consideration to determine the different etcd cluster management scenarios and the corresponding reconciliation actions it must take.
The general principle is to detect the scenario and take the minimum action to move the cluster along the path to good health.
The path from any one scenario to a state of good health will typically involve going through multiple reconciliation actions which probably take the cluster through many other cluster management scenarios.
Especially, it is proposed that individual members auto-heal where possible, even in the case of the failure of a majority of members of the etcd cluster and that &lt;code>etcd-druid&lt;/code> takes action only if the auto-healing doesn&amp;rsquo;t happen for a configured period of time.&lt;/p>
&lt;h3 id="1-pink-of-health">1. Pink of health&lt;/h3>
&lt;h4 id="observed-state">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: &lt;code>true&lt;/code>&lt;/li>
&lt;li>AllMembersReady: &lt;code>true&lt;/code>&lt;/li>
&lt;li>BackupReady: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action">Recommended Action&lt;/h4>
&lt;p>Nothing to do&lt;/p>
&lt;h3 id="2-member-status-is-out-of-sync-with-their-leases">2. Member status is out of sync with their leases&lt;/h3>
&lt;h4 id="observed-state-1">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: &lt;code>l&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: &lt;code>true&lt;/code>&lt;/li>
&lt;li>AllMembersReady: &lt;code>true&lt;/code>&lt;/li>
&lt;li>BackupReady: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-1">Recommended Action&lt;/h4>
&lt;p>Mark the &lt;code>l&lt;/code> members corresponding to the expired &lt;code>leases&lt;/code> as &lt;code>Unknown&lt;/code> with reason &lt;code>LeaseExpired&lt;/code> and with &lt;code>id&lt;/code> populated from &lt;code>spec.holderIdentity&lt;/code> of the &lt;code>lease&lt;/code> if they are not already updated so.&lt;/p>
&lt;p>Mark the &lt;code>n - l&lt;/code> members corresponding to the active &lt;code>leases&lt;/code> as &lt;code>Ready&lt;/code> with reason &lt;code>LeaseSucceeded&lt;/code> and with &lt;code>id&lt;/code> populated from &lt;code>spec.holderIdentity&lt;/code> of the &lt;code>lease&lt;/code> if they are not already updated so.&lt;/p>
&lt;p>Please refer &lt;a href="#member-leases">here&lt;/a> for more details.&lt;/p>
&lt;h3 id="3-all-members-are-ready-but-allmembersready-condition-is-stale">3. All members are &lt;code>Ready&lt;/code> but &lt;code>AllMembersReady&lt;/code> condition is stale&lt;/h3>
&lt;h4 id="observed-state-2">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: N/A&lt;/li>
&lt;li>AllMembersReady: false&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-2">Recommended Action&lt;/h4>
&lt;p>Mark the status condition type &lt;code>AllMembersReady&lt;/code> to &lt;code>true&lt;/code>.&lt;/p>
&lt;h3 id="4-not-all-members-are-ready-but-allmembersready-condition-is-stale">4. Not all members are &lt;code>Ready&lt;/code> but &lt;code>AllMembersReady&lt;/code> condition is stale&lt;/h3>
&lt;h4 id="observed-state-3">Observed state&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Cluster Size&lt;/p>
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>StatefulSet&lt;/code> replicas&lt;/p>
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Etcd&lt;/code> status&lt;/p>
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: N/A&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>0 &amp;lt;= r &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>nr&lt;/code> where &lt;code>0 &amp;lt; nr &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>u&lt;/code> where &lt;code>0 &amp;lt; u &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: &lt;code>h&lt;/code> where &lt;code>0 &amp;lt; h &amp;lt; n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: N/A&lt;/li>
&lt;li>AllMembersReady: true&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>where &lt;code>(nr + u + h) &amp;gt; 0&lt;/code> or &lt;code>r &amp;lt; n&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-3">Recommended Action&lt;/h4>
&lt;p>Mark the status condition type &lt;code>AllMembersReady&lt;/code> to &lt;code>false&lt;/code>.&lt;/p>
&lt;h3 id="5-majority-members-are-ready-but-ready-condition-is-stale">5. Majority members are &lt;code>Ready&lt;/code> but &lt;code>Ready&lt;/code> condition is stale&lt;/h3>
&lt;h4 id="observed-state-4">Observed state&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Cluster Size&lt;/p>
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>StatefulSet&lt;/code> replicas&lt;/p>
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Etcd&lt;/code> status&lt;/p>
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>r &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>nr&lt;/code> where &lt;code>0 &amp;lt; nr &amp;lt; n/2&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>u&lt;/code> where &lt;code>0 &amp;lt; u &amp;lt; n/2&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: &lt;code>false&lt;/code>&lt;/li>
&lt;li>AllMembersReady: N/A&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>where &lt;code>0 &amp;lt; (nr + u + h) &amp;lt; n/2&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-4">Recommended Action&lt;/h4>
&lt;p>Mark the status condition type &lt;code>Ready&lt;/code> to &lt;code>true&lt;/code>.&lt;/p>
&lt;h3 id="6-majority-members-are-notready-but-ready-condition-is-stale">6. Majority members are &lt;code>NotReady&lt;/code> but &lt;code>Ready&lt;/code> condition is stale&lt;/h3>
&lt;h4 id="observed-state-5">Observed state&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Cluster Size&lt;/p>
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>StatefulSet&lt;/code> replicas&lt;/p>
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Etcd&lt;/code> status&lt;/p>
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>0 &amp;lt; r &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>nr&lt;/code> where &lt;code>0 &amp;lt; nr &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>u&lt;/code> where &lt;code>0 &amp;lt; u &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: &lt;code>true&lt;/code>&lt;/li>
&lt;li>AllMembersReady: N/A&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>where &lt;code>(nr + u + h) &amp;gt; n/2&lt;/code> or &lt;code>r &amp;lt; n/2&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-5">Recommended Action&lt;/h4>
&lt;p>Mark the status condition type &lt;code>Ready&lt;/code> to &lt;code>false&lt;/code>.&lt;/p>
&lt;h3 id="7-some-members-have-been-in-unknown-status-for-a-while">7. Some members have been in &lt;code>Unknown&lt;/code> status for a while&lt;/h3>
&lt;h4 id="observed-state-6">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: N/A&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: N/A&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>u&lt;/code> where &lt;code>u &amp;lt;= n&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: N/A&lt;/li>
&lt;li>AllMembersReady: N/A&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-6">Recommended Action&lt;/h4>
&lt;p>Mark the &lt;code>u&lt;/code> members as &lt;code>NotReady&lt;/code> in &lt;code>Etcd&lt;/code> status with &lt;code>reason: UnknownGracePeriodExceeded&lt;/code>.&lt;/p>
&lt;h3 id="8-some-member-pods-are-not-ready-but-have-not-had-the-chance-to-update-their-status">8. Some member pods are not &lt;code>Ready&lt;/code> but have not had the chance to update their status&lt;/h3>
&lt;h4 id="observed-state-7">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>s&lt;/code> where &lt;code>s &amp;lt; n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: N/A&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: N/A&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: N/A&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: N/A&lt;/li>
&lt;li>AllMembersReady: N/A&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-7">Recommended Action&lt;/h4>
&lt;p>Mark the &lt;code>n - s&lt;/code> members (corresponding to the pods that are not &lt;code>Ready&lt;/code>) as &lt;code>NotReady&lt;/code> in &lt;code>Etcd&lt;/code> status with &lt;code>reason: PodNotReady&lt;/code>&lt;/p>
&lt;h3 id="9-quorate-cluster-with-a-minority-of-members-notready">9. Quorate cluster with a minority of members &lt;code>NotReady&lt;/code>&lt;/h3>
&lt;h4 id="observed-state-8">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n - f&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>f&lt;/code> where &lt;code>f &amp;lt; n/2&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: true&lt;/li>
&lt;li>AllMembersReady: false&lt;/li>
&lt;li>BackupReady: true&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-8">Recommended Action&lt;/h4>
&lt;p>Delete the &lt;code>f&lt;/code> &lt;code>NotReady&lt;/code> member pods to force restart of the pods if they do not automatically restart via failed &lt;code>livenessProbe&lt;/code>. The expectation is that they will either re-join the cluster as an existing member or remove themselves and join as new members on restart of the container or pod and &lt;a href="#member-leases">renew their &lt;code>leases&lt;/code>&lt;/a>.&lt;/p>
&lt;h3 id="10-quorum-lost-with-a-majority-of-members-notready">10. Quorum lost with a majority of members &lt;code>NotReady&lt;/code>&lt;/h3>
&lt;h4 id="observed-state-9">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n - f&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: &lt;code>f&lt;/code> where &lt;code>f &amp;gt;= n/2&lt;/code>&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: N/A&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: false&lt;/li>
&lt;li>AllMembersReady: false&lt;/li>
&lt;li>BackupReady: true&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-9">Recommended Action&lt;/h4>
&lt;p>Scale down the &lt;code>StatefulSet&lt;/code> to &lt;code>replicas: 0&lt;/code>. Ensure that all member pods are deleted. Ensure that all the members are removed from &lt;code>Etcd&lt;/code> status. Delete and recreate all the &lt;a href="#member-leases">member &lt;code>leases&lt;/code>&lt;/a>. Recover the cluster from loss of quorum as discussed &lt;a href="#recovering-an-etcd-cluster-from-failure-of-majority-of-members">here&lt;/a>.&lt;/p>
&lt;h3 id="11-scale-up-of-a-healthy-cluster">11. Scale up of a healthy cluster&lt;/h3>
&lt;h4 id="observed-state-10">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: &lt;code>d&lt;/code>&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code> where &lt;code>d &amp;gt; n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: 0&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: 0&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: true&lt;/li>
&lt;li>AllMembersReady: true&lt;/li>
&lt;li>BackupReady: true&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-10">Recommended Action&lt;/h4>
&lt;p>Add &lt;code>d - n&lt;/code> new members by scaling the &lt;code>StatefulSet&lt;/code> to &lt;code>replicas: d&lt;/code>. The rest of the &lt;code>StatefulSet&lt;/code> spec need not be updated until the next cluster bootstrapping (alternatively, the rest of the &lt;code>StatefulSet&lt;/code> spec can be updated pro-actively once the new members join the cluster. This will trigger a rolling update).&lt;/p>
&lt;p>Also, create the additional &lt;a href="#member-leases">member &lt;code>leases&lt;/code>&lt;/a> for the &lt;code>d - n&lt;/code> new members.&lt;/p>
&lt;h3 id="12-scale-down-of-a-healthy-cluster">12. Scale down of a healthy cluster&lt;/h3>
&lt;h4 id="observed-state-11">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: &lt;code>d&lt;/code>&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code> where &lt;code>d &amp;lt; n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>n&lt;/code>&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: 0&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: 0&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: 0&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: true&lt;/li>
&lt;li>AllMembersReady: true&lt;/li>
&lt;li>BackupReady: true&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-11">Recommended Action&lt;/h4>
&lt;p>Remove &lt;code>d - n&lt;/code> existing members (numbered &lt;code>d&lt;/code>, &lt;code>d + 1&lt;/code> &amp;hellip; &lt;code>n&lt;/code>) by scaling the &lt;code>StatefulSet&lt;/code> to &lt;code>replicas: d&lt;/code>. The &lt;code>StatefulSet&lt;/code> spec need not be updated until the next cluster bootstrapping (alternatively, the &lt;code>StatefulSet&lt;/code> spec can be updated pro-actively once the superfluous members exit the cluster. This will trigger a rolling update).&lt;/p>
&lt;p>Also, delete the &lt;a href="#member-leases">member &lt;code>leases&lt;/code>&lt;/a> for the &lt;code>d - n&lt;/code> members being removed.&lt;/p>
&lt;p>The &lt;a href="#13-superfluous-member-entries-in-etcd-status">superfluous entries in the &lt;code>members&lt;/code> array&lt;/a> will be cleaned up as explained &lt;a href="#recommended-action-12">here&lt;/a>.
The superfluous members in the ETCD cluster will be cleaned up by the &lt;a href="#work-flows-only-on-the-leading-member">leading &lt;code>etcd-backup-restore&lt;/code> sidecar&lt;/a>.&lt;/p>
&lt;h3 id="13-superfluous-member-entries-in-etcd-status">13. Superfluous member entries in &lt;code>Etcd&lt;/code> status&lt;/h3>
&lt;h4 id="observed-state-12">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size
&lt;ul>
&lt;li>Desired: N/A&lt;/li>
&lt;li>Current: &lt;code>n&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>StatefulSet&lt;/code> replicas
&lt;ul>
&lt;li>Desired: n&lt;/li>
&lt;li>Ready: n&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status
&lt;ul>
&lt;li>members
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>m &amp;gt; n&lt;/code>&lt;/li>
&lt;li>Ready: N/A&lt;/li>
&lt;li>Members &lt;code>NotReady&lt;/code> for long enough to be evicted, i.e. &lt;code>lastTransitionTime &amp;gt; notReadyGracePeriod&lt;/code>: N/A&lt;/li>
&lt;li>Members with readiness status &lt;code>Unknown&lt;/code> long enough to be considered &lt;code>NotReady&lt;/code>, i.e. &lt;code>lastTransitionTime &amp;gt; unknownGracePeriod&lt;/code>: N/A&lt;/li>
&lt;li>Members with expired &lt;code>lease&lt;/code>: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>conditions:
&lt;ul>
&lt;li>Ready: N/A&lt;/li>
&lt;li>AllMembersReady: N/A&lt;/li>
&lt;li>BackupReady: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-12">Recommended Action&lt;/h4>
&lt;p>Remove the superfluous &lt;code>m - n&lt;/code> member entries from &lt;code>Etcd&lt;/code> status (numbered &lt;code>n&lt;/code>, &lt;code>n+1&lt;/code> &amp;hellip; &lt;code>m&lt;/code>).
Remove the superfluous &lt;code>m - n&lt;/code> &lt;a href="#member-leases">member &lt;code>leases&lt;/code>&lt;/a> if they exist.
The superfluous members in the ETCD cluster will be cleaned up by the &lt;a href="#work-flows-only-on-the-leading-member">leading &lt;code>etcd-backup-restore&lt;/code> sidecar&lt;/a>.&lt;/p>
&lt;h2 id="decision-table-for-etcd-backup-restore-during-initialization">Decision table for etcd-backup-restore during initialization&lt;/h2>
&lt;p>As discussed above, the initialization sequence of &lt;code>etcd-backup-restore&lt;/code> in a member pod needs to &lt;a href="#etcd-configuration">generate suitable etcd configuration&lt;/a> for its etcd container.
It also might have to handle the etcd database verification and restoration functionality differently in &lt;a href="#restarting-an-existing-member-of-an-etcd-cluster">different&lt;/a> &lt;a href="#recovering-an-etcd-cluster-from-failure-of-majority-of-members">scenarios&lt;/a>.&lt;/p>
&lt;p>The initialization sequence itself is proposed to be as follows.
It is an enhancement of the &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/doc/proposals/design.md#workflow">existing&lt;/a> initialization sequence.
&lt;img src="https://gardener.cloud/__resources/01-etcd-member-initialization-sequence_364f5e.png" alt="etcd member initialization sequence">&lt;/p>
&lt;p>The details of the decisions to be taken during the initialization are given below.&lt;/p>
&lt;h3 id="1-first-member-during-bootstrap-of-a-fresh-etcd-cluster">1. First member during bootstrap of a fresh etcd cluster&lt;/h3>
&lt;h4 id="observed-state-13">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: &lt;code>false&lt;/code>&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: &lt;code>false&lt;/code>&lt;/li>
&lt;li>Backup has incremental snapshots: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-13">Recommended Action&lt;/h4>
&lt;p>Generate etcd configuration with &lt;code>n&lt;/code> initial cluster peer URLs and initial cluster state new and return success.&lt;/p>
&lt;h3 id="2-addition-of-a-new-following-member-during-bootstrap-of-a-fresh-etcd-cluster">2. Addition of a new following member during bootstrap of a fresh etcd cluster&lt;/h3>
&lt;h4 id="observed-state-14">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>0 &amp;lt; m &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>m&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: &lt;code>false&lt;/code>&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: &lt;code>false&lt;/code>&lt;/li>
&lt;li>Backup has incremental snapshots: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-14">Recommended Action&lt;/h4>
&lt;p>Generate etcd configuration with &lt;code>n&lt;/code> initial cluster peer URLs and initial cluster state new and return success.&lt;/p>
&lt;h3 id="3-restart-of-an-existing-member-of-a-quorate-cluster-with-valid-metadata-and-data">3. Restart of an existing member of a quorate cluster with valid metadata and data&lt;/h3>
&lt;h4 id="observed-state-15">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>m &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>r &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: &lt;code>true&lt;/code>&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: N/A&lt;/li>
&lt;li>Backup has incremental snapshots: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-15">Recommended Action&lt;/h4>
&lt;p>Re-use previously generated etcd configuration and return success.&lt;/p>
&lt;h3 id="4-restart-of-an-existing-member-of-a-quorate-cluster-with-valid-metadata-but-without-valid-data">4. Restart of an existing member of a quorate cluster with valid metadata but without valid data&lt;/h3>
&lt;h4 id="observed-state-16">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>m &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>r &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: &lt;code>true&lt;/code>&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: N/A&lt;/li>
&lt;li>Backup has incremental snapshots: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-16">Recommended Action&lt;/h4>
&lt;p>&lt;a href="#removing-an-existing-member-from-an-etcd-cluster">Remove&lt;/a> self as a member (old member ID) from the etcd cluster as well as &lt;code>Etcd&lt;/code> status. &lt;a href="#adding-a-new-member-to-an-etcd-cluster">Add&lt;/a> self as a new member of the etcd cluster as well as in the &lt;code>Etcd&lt;/code> status. If backups do not exist, create an empty data and WAL directory. If backups exist, restore only the latest full snapshot (please see &lt;a href="#recovering-an-etcd-cluster-from-failure-of-majority-of-members">here&lt;/a> for the reason for not restoring incremental snapshots). Generate etcd configuration with &lt;code>n&lt;/code> initial cluster peer URLs and initial cluster state &lt;code>existing&lt;/code> and return success.&lt;/p>
&lt;h3 id="5-restart-of-an-existing-member-of-a-quorate-cluster-without-valid-metadata">5. Restart of an existing member of a quorate cluster without valid metadata&lt;/h3>
&lt;h4 id="observed-state-17">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>m &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>r &amp;gt; n/2&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: &lt;code>false&lt;/code>&lt;/li>
&lt;li>Data directory is valid and up-to-date: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: N/A&lt;/li>
&lt;li>Backup has incremental snapshots: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-17">Recommended Action&lt;/h4>
&lt;p>&lt;a href="#removing-an-existing-member-from-an-etcd-cluster">Remove&lt;/a> self as a member (old member ID) from the etcd cluster as well as &lt;code>Etcd&lt;/code> status. &lt;a href="#adding-a-new-member-to-an-etcd-cluster">Add&lt;/a> self as a new member of the etcd cluster as well as in the &lt;code>Etcd&lt;/code> status. If backups do not exist, create an empty data and WAL directory. If backups exist, restore only the latest full snapshot (please see &lt;a href="#recovering-an-etcd-cluster-from-failure-of-majority-of-members">here&lt;/a> for the reason for not restoring incremental snapshots). Generate etcd configuration with &lt;code>n&lt;/code> initial cluster peer URLs and initial cluster state &lt;code>existing&lt;/code> and return success.&lt;/p>
&lt;h3 id="6-restart-of-an-existing-member-of-a-non-quorate-cluster-with-valid-metadata-and-data">6. Restart of an existing member of a non-quorate cluster with valid metadata and data&lt;/h3>
&lt;h4 id="observed-state-18">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>m &amp;lt; n/2&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>r &amp;lt; n/2&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: &lt;code>true&lt;/code>&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>true&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: N/A&lt;/li>
&lt;li>Backup has incremental snapshots: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-18">Recommended Action&lt;/h4>
&lt;p>Re-use previously generated etcd configuration and return success.&lt;/p>
&lt;h3 id="7-restart-of-the-first-member-of-a-non-quorate-cluster-without-valid-data">7. Restart of the first member of a non-quorate cluster without valid data&lt;/h3>
&lt;h4 id="observed-state-19">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>0&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: N/A&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: N/A&lt;/li>
&lt;li>Backup has incremental snapshots: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-19">Recommended Action&lt;/h4>
&lt;p>If backups do not exist, create an empty data and WAL directory. If backups exist, restore the latest full snapshot. Start a single-node embedded etcd with initial cluster peer URLs containing only own peer URL and initial cluster state &lt;code>new&lt;/code>. If incremental snapshots exist, apply them serially (honouring source transactions). Take and upload a full snapshot after incremental snapshots are applied successfully (please see &lt;a href="#recovering-an-etcd-cluster-from-failure-of-majority-of-members">here&lt;/a> for more reasons why). Generate etcd configuration with &lt;code>n&lt;/code> initial cluster peer URLs and initial cluster state &lt;code>new&lt;/code> and return success.&lt;/p>
&lt;h3 id="8-restart-of-a-following-member-of-a-non-quorate-cluster-without-valid-data">8. Restart of a following member of a non-quorate cluster without valid data&lt;/h3>
&lt;h4 id="observed-state-20">Observed state&lt;/h4>
&lt;ul>
&lt;li>Cluster Size: &lt;code>n&lt;/code>&lt;/li>
&lt;li>&lt;code>Etcd&lt;/code> status members:
&lt;ul>
&lt;li>Total: &lt;code>m&lt;/code> where &lt;code>1 &amp;lt; m &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Ready: &lt;code>r&lt;/code> where &lt;code>1 &amp;lt; r &amp;lt; n&lt;/code>&lt;/li>
&lt;li>Status contains own member: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Data persistence
&lt;ul>
&lt;li>WAL directory has cluster/ member metadata: N/A&lt;/li>
&lt;li>Data directory is valid and up-to-date: &lt;code>false&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backup
&lt;ul>
&lt;li>Backup exists: N/A&lt;/li>
&lt;li>Backup has incremental snapshots: N/A&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="recommended-action-20">Recommended Action&lt;/h4>
&lt;p>If backups do not exist, create an empty data and WAL directory. If backups exist, restore only the latest full snapshot (please see &lt;a href="#recovering-an-etcd-cluster-from-failure-of-majority-of-members">here&lt;/a> for the reason for not restoring incremental snapshots). Generate etcd configuration with &lt;code>n&lt;/code> initial cluster peer URLs and initial cluster state &lt;code>existing&lt;/code> and return success.&lt;/p>
&lt;h2 id="backup">Backup&lt;/h2>
&lt;p>Only one of the etcd-backup-restore sidecars among the members are required to take the backup for a given ETCD cluster. This can be called a &lt;code>backup leader&lt;/code>. There are two possibilities to ensure this.&lt;/p>
&lt;h3 id="leading-etcd-main-containers-sidecar-is-the-backup-leader">Leading ETCD main containerâ€™s sidecar is the backup leader&lt;/h3>
&lt;p>The backup-restore sidecar could poll the etcd cluster and/or its own etcd main container to see if it is the leading member in the etcd cluster.
This information can be used by the backup-restore sidecars to decide that sidecar of the leading etcd main container is the backup leader (i.e. responsible to for taking/uploading backups regularly).&lt;/p>
&lt;p>The advantages of this approach are as follows.&lt;/p>
&lt;ul>
&lt;li>The approach is operationally and conceptually simple. The leading etcd container and backup-restore sidecar are always located in the same pod.&lt;/li>
&lt;li>Network traffic between the backup container and the etcd cluster will always be local.&lt;/li>
&lt;/ul>
&lt;p>The disadvantage is that this approach may not age well in the future if we think about moving the backup-restore container as a separate pod rather than a sidecar container.&lt;/p>
&lt;h3 id="independent-leader-election-between-backup-restore-sidecars">Independent leader election between backup-restore sidecars&lt;/h3>
&lt;p>We could use the etcd &lt;code>lease&lt;/code> mechanism to perform leader election among the backup-restore sidecars. For example, using something like &lt;a href="https://pkg.go.dev/go.etcd.io/etcd/clientv3/concurrency#Election.Campaign">&lt;code>go.etcd.io/etcd/clientv3/concurrency&lt;/code>&lt;/a>.&lt;/p>
&lt;p>The advantage and disadvantages are pretty much the opposite of the approach &lt;a href="#leading-etcd-main-containers-sidecar-is-the-backup-leader">above&lt;/a>.
The advantage being that this approach may age well in the future if we think about moving the backup-restore container as a separate pod rather than a sidecar container.&lt;/p>
&lt;p>The disadvantages are as follows.&lt;/p>
&lt;ul>
&lt;li>The approach is operationally and conceptually a bit complex. The leading etcd container and backup-restore sidecar might potentially belong to different pods.&lt;/li>
&lt;li>Network traffic between the backup container and the etcd cluster might potentially be across nodes.&lt;/li>
&lt;/ul>
&lt;h2 id="history-compaction">History Compaction&lt;/h2>
&lt;p>This proposal recommends to configure &lt;a href="https://etcd.io/docs/v3.2.17/op-guide/maintenance/#history-compaction">automatic history compaction&lt;/a> on the individual members.&lt;/p>
&lt;h2 id="defragmentation">Defragmentation&lt;/h2>
&lt;p>Defragmentation is already &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/0dfdd50fbfc5ebc88238be3bc79c3ac3fc242c08/cmd/options.go#L209">triggered periodically&lt;/a> by &lt;code>etcd-backup-restore&lt;/code>.
This proposal recommends to enhance this functionality to be performed only by the &lt;a href="#backup">leading&lt;/a> backup-restore container.
The defragmentation must be performed only when etcd cluster is in full health and must be done in a rolling manner for each members to &lt;a href="https://etcd.io/docs/v3.2.17/op-guide/maintenance/#defragmentation">avoid disruption&lt;/a>.
The leading member should be defragmented last after all the rest of the members have been defragmented to minimise potential leadership changes caused by defragmentation.
If the etcd cluster is unhealthy when it is time to trigger scheduled defragmentation, the defragmentation must be postponed until the cluster becomes healthy. This check must be done before triggering defragmentation for each member.&lt;/p>
&lt;h2 id="work-flows-in-etcd-backup-restore">Work-flows in etcd-backup-restore&lt;/h2>
&lt;p>There are different work-flows in etcd-backup-restore.
Some existing flows like initialization, scheduled backups and defragmentation have been enhanced or modified.
Some new work-flows like status updates have been introduced.
Some of these work-flows are sensitive to which &lt;code>etcd-backup-restore&lt;/code> container is &lt;a href="#backup">leading&lt;/a> and some are not.&lt;/p>
&lt;p>The life-cycle of these work-flows is shown below.
&lt;img src="https://gardener.cloud/__resources/01-etcd-backup-restore-work-flows-life-cycle_eec586.png" alt="etcd-backup-restore work-flows life-cycle">&lt;/p>
&lt;h3 id="work-flows-independent-of-leader-election-in-all-members">Work-flows independent of leader election in all members&lt;/h3>
&lt;ul>
&lt;li>Serve the &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/master/pkg/server/httpAPI.go#L101-L107">HTTP API&lt;/a> that all members are expected to support currently but some HTTP API call which are used to take &lt;a href="https://github.com/gardener/etcd-backup-restore/blob/5dfcc1f848a9f325d41a24eae4defb70d997c215/pkg/server/httpAPI.go#L103-L105">out-of-sync delta or full snapshot&lt;/a> should delegate the incoming HTTP requests to the &lt;code>leading-sidecar&lt;/code> and one of the possible approach to achieve this is via an &lt;a href="https://pkg.go.dev/net/http/httputil#ReverseProxy.ServeHTTP">HTTP reverse proxy&lt;/a>.&lt;/li>
&lt;li>Check the health of the respective etcd member and renew the corresponding &lt;a href="#member-leases">member &lt;code>lease&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="work-flows-only-on-the-leading-member">Work-flows only on the leading member&lt;/h3>
&lt;ul>
&lt;li>Take &lt;a href="#backup">backups&lt;/a> (full and incremental) at configured regular intervals&lt;/li>
&lt;li>&lt;a href="#defragmentation">Defragment&lt;/a> all the members sequentially at configured regular intervals&lt;/li>
&lt;li>Cleanup superflous members from the ETCD cluster for which there is no corresponding pod (the &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#ordinal-index">ordinal&lt;/a> in the pod name is greater than the &lt;a href="#clustersize">cluster size&lt;/a>) at regular intervals (or whenever the &lt;code>Etcd&lt;/code> resource &lt;a href="#status">status&lt;/a> changes by watching it)
&lt;ul>
&lt;li>The cleanup of &lt;a href="#13-superfluous-member-entries-in-etcd-status">superfluous entries in &lt;code>status.members&lt;/code> array&lt;/a> is already covered &lt;a href="#recommended-action-12">here&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="high-availability">High Availability&lt;/h2>
&lt;p>Considering that high-availability is the primary reason for using a multi-node etcd cluster, it makes sense to distribute the individual member pods of the etcd cluster across different physical nodes.
If the underlying Kubernetes cluster has nodes from multiple availability zones, it makes sense to also distribute the member pods across nodes from different availability zones.&lt;/p>
&lt;p>One possibility to do this is via &lt;a href="https://kubernetes.io/docs/reference/scheduling/policies/#priorities">&lt;code>SelectorSpreadPriority&lt;/code>&lt;/a> of &lt;code>kube-scheduler&lt;/code> but this is only &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/#topologykubernetesiozone">best-effort&lt;/a> and may not always be enforced strictly.&lt;/p>
&lt;p>It is better to use &lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity">pod anti-affinity&lt;/a> to enforce such distribution of member pods.&lt;/p>
&lt;h3 id="zonal-cluster---single-availability-zone">Zonal Cluster - Single Availability Zone&lt;/h3>
&lt;p>A zonal cluster is configured to consist of nodes belonging to only a single availability zone in a region of the cloud provider.
In such a case, we can at best distribute the member pods of a multi-node etcd cluster instance only across different nodes in the configured availability zone.&lt;/p>
&lt;p>This can be done by specifying &lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity">pod anti-affinity&lt;/a> in the specification of the member pods using &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/#kubernetes-io-hostname">&lt;code>kubernetes.io/hostname&lt;/code>&lt;/a> as the topology key.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: apps/v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: StatefulSet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> affinity:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> podAntiAffinity:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requiredDuringSchedulingIgnoredDuringExecution:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - labelSelector: {} &lt;span style="color:#008000"># podSelector that matches the member pods of the given etcd cluster instance&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> topologyKey: &lt;span style="color:#a31515">&amp;#34;kubernetes.io/hostname&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The recommendation is to keep &lt;code>etcd-druid&lt;/code> agnostic of such topics related scheduling and cluster-topology and to use &lt;a href="https://github.com/gardener/kupid">kupid&lt;/a> to &lt;a href="https://github.com/gardener/kupid#mutating-higher-order-controllers">orthogonally inject&lt;/a> the desired &lt;a href="https://github.com/gardener/kupid/blob/master/config/samples/cpsp-pod-affinity-anti-affinity.yaml">pod anti-affinity&lt;/a>.&lt;/p>
&lt;h4 id="alternative-5">Alternative&lt;/h4>
&lt;p>Another option is to build the functionality into &lt;code>etcd-druid&lt;/code> to include the required pod anti-affinity when it provisions the &lt;code>StatefulSet&lt;/code> that manages the member pods.
While this has the advantage of avoiding a dependency on an external component like &lt;a href="https://github.com/gardener/kupid">kupid&lt;/a>, the disadvantage is that we might need to address development or testing use-cases where it might be desirable to avoid distributing member pods and schedule them on as less number of nodes as possible.
Also, as mentioned &lt;a href="#regional-cluster---multiple-availability-zones">below&lt;/a>, &lt;a href="https://github.com/gardener/kupid">kupid&lt;/a> can be used to distribute member pods of an etcd cluster instance across nodes in a single availability zone as well as across nodes in multiple availability zones with very minor variation.
This keeps the solution uniform regardless of the topology of the underlying Kubernetes cluster.&lt;/p>
&lt;h3 id="regional-cluster---multiple-availability-zones">Regional Cluster - Multiple Availability Zones&lt;/h3>
&lt;p>A regional cluster is configured to consist of nodes belonging to multiple availability zones (typically, three) in a region of the cloud provider.
In such a case, we can distribute the member pods of a multi-node etcd cluster instance across nodes belonging to different availability zones.&lt;/p>
&lt;p>This can be done by specifying &lt;a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity">pod anti-affinity&lt;/a> in the specification of the member pods using &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/#topologykubernetesiozone">&lt;code>topology.kubernetes.io/zone&lt;/code>&lt;/a> as the topology key.
In Kubernetes clusters using Kubernetes release older than &lt;code>1.17&lt;/code>, the older (and now deprecated) &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/#failure-domainbetakubernetesiozone">&lt;code>failure-domain.beta.kubernetes.io/zone&lt;/code>&lt;/a> might have to be used as the topology key.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: apps/v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: StatefulSet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> affinity:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> podAntiAffinity:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> requiredDuringSchedulingIgnoredDuringExecution:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - labelSelector: {} &lt;span style="color:#008000"># podSelector that matches the member pods of the given etcd cluster instance&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> topologyKey: &amp;#34;topology.kubernetes.io/zone
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The recommendation is to keep &lt;code>etcd-druid&lt;/code> agnostic of such topics related scheduling and cluster-topology and to use &lt;a href="https://github.com/gardener/kupid">kupid&lt;/a> to &lt;a href="https://github.com/gardener/kupid#mutating-higher-order-controllers">orthogonally inject&lt;/a> the desired &lt;a href="https://github.com/gardener/kupid/blob/master/config/samples/cpsp-pod-affinity-anti-affinity.yaml">pod anti-affinity&lt;/a>.&lt;/p>
&lt;h4 id="alternative-6">Alternative&lt;/h4>
&lt;p>Another option is to build the functionality into &lt;code>etcd-druid&lt;/code> to include the required pod anti-affinity when it provisions the &lt;code>StatefulSet&lt;/code> that manages the member pods.
While this has the advantage of avoiding a dependency on an external component like &lt;a href="https://github.com/gardener/kupid">kupid&lt;/a>, the disadvantage is that such built-in support necessarily limits what kind of topologies of the underlying cluster will be supported.
Hence, it is better to keep &lt;code>etcd-druid&lt;/code> altogether agnostic of issues related to scheduling and cluster-topology.&lt;/p>
&lt;h3 id="poddisruptionbudget">PodDisruptionBudget&lt;/h3>
&lt;p>This proposal recommends that &lt;code>etcd-druid&lt;/code> should deploy &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/disruptions/#pod-disruption-budgets">&lt;code>PodDisruptionBudget&lt;/code>&lt;/a> (&lt;code>minAvailable&lt;/code> set to &lt;code>floor(&amp;lt;cluster size&amp;gt;/2) + 1&lt;/code>) for multi-node etcd clusters (if &lt;code>AllMembersReady&lt;/code> &lt;a href="#conditions">condition&lt;/a> is &lt;code>true&lt;/code>) to ensure that any planned disruptive operation can try and honour the disruption budget to ensure high availability of the etcd cluster while making potentially disrupting maintenance operations.&lt;/p>
&lt;p>Also, it is recommended to toggle the &lt;code>minAvailable&lt;/code> field between &lt;code>floor(&amp;lt;cluster size&amp;gt;/2)&lt;/code> and &lt;code>&amp;lt;number of members with status Ready true&amp;gt;&lt;/code> whenever the &lt;code>AllMembersReady&lt;/code> condition toggles between &lt;code>true&lt;/code> and &lt;code>false&lt;/code>.
This is to disable eviction of any member pods when not all members are &lt;code>Ready&lt;/code>.&lt;/p>
&lt;p>In case of a conflict, the recommendation is to use the highest of the applicable values for &lt;code>minAvailable&lt;/code>.&lt;/p>
&lt;h2 id="rolling-updates-to-etcd-members">Rolling updates to etcd members&lt;/h2>
&lt;p>Any changes to the &lt;code>Etcd&lt;/code> resource spec that might result in a change to &lt;code>StatefulSet&lt;/code> spec or otherwise result in a rolling update of member pods should be applied/propagated by &lt;code>etcd-druid&lt;/code> only when the etcd cluster is fully healthy to reduce the risk of quorum loss during the updates.
This would include vertical autoscaling changes (via, &lt;a href="https://github.com/gardener/hvpa-controller">HVPA&lt;/a>).
If the cluster &lt;a href="#status">status&lt;/a> unhealthy (i.e. if either &lt;code>AllMembersReady&lt;/code> or &lt;code>BackupReady&lt;/code> &lt;a href="#conditions">conditions&lt;/a> are &lt;code>false&lt;/code>), &lt;code>etcd-druid&lt;/code> must restore it to full health &lt;a href="#backup-failure">before proceeding&lt;/a> with such operations that lead to rolling updates.
This can be further optimized in the future to handle the cases where rolling updates can still be performed on an etcd cluster that is not fully healthy.&lt;/p>
&lt;h2 id="follow-up">Follow Up&lt;/h2>
&lt;h3 id="ephemeral-volumes">Ephemeral Volumes&lt;/h3>
&lt;p>See section &lt;em>&lt;a href="#Ephemeral_Volumes">Ephemeral Volumes&lt;/a>&lt;/em>.&lt;/p>
&lt;h3 id="shoot-control-plane-migration">Shoot Control-Plane Migration&lt;/h3>
&lt;p>This proposal adds support for multi-node etcd clusters but it should not have significant impact on &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/07-shoot-control-plane-migration.md">shoot control-plane migration&lt;/a> any more than what already present in the single-node etcd cluster scenario.
But to be sure, this needs to be discussed further.&lt;/p>
&lt;h3 id="performance-impact-of-multi-node-etcd-clusters">Performance impact of multi-node etcd clusters&lt;/h3>
&lt;p>Multi-node etcd clusters incur a cost on &lt;a href="https://etcd.io/docs/v2/admin_guide/#optimal-cluster-size">write performance&lt;/a> as compared to single-node etcd clusters.
This performance impact needs to be measured and documented.
Here, we should compare different persistence option for the multi-nodeetcd clusters so that we have all the information necessary to take the decision balancing the high-availability, performance and costs.&lt;/p>
&lt;h3 id="metrics-dashboards-and-alerts">Metrics, Dashboards and Alerts&lt;/h3>
&lt;p>There are already metrics exported by etcd and &lt;code>etcd-backup-restore&lt;/code> which are visualized in monitoring dashboards and also used in triggering alerts.
These might have hidden assumptions about single-node etcd clusters.
These might need to be enhanced and potentially new metrics, dashboards and alerts configured to cover the multi-node etcd cluster scenario.&lt;/p>
&lt;p>Especially, a high priority alert must be raised if &lt;code>BackupReady&lt;/code> &lt;a href="#condition">condition&lt;/a> becomes &lt;a href="#backup-failure">&lt;code>false&lt;/code>&lt;/a>.&lt;/p>
&lt;h3 id="costs">Costs&lt;/h3>
&lt;p>Multi-node etcd clusters will clearly involve higher cost (when compared with single-node etcd clusters) just going by the CPU and memory usage for the additional members.
Also, the &lt;a href="#data-persistence">different options&lt;/a> for persistence for etcd data for the members will have different cost implications.
Such cost impact needs to be assessed and documented to help navigate the trade offs between high availability, performance and costs.&lt;/p>
&lt;h2 id="future-work">Future Work&lt;/h2>
&lt;h3 id="gardener-ring">Gardener Ring&lt;/h3>
&lt;p>&lt;a href="https://github.com/gardener/gardener/issues/233">Gardener Ring&lt;/a>, requires provisioning and management of an etcd cluster with the members distributed across more than one Kubernetes cluster.
This cannot be achieved by etcd-druid alone which has only the view of a single Kubernetes cluster.
An additional component that has the view of all the Kubernetes clusters involved in setting up the gardener ring will be required to achieve this.
However, etcd-druid can be used by such a higher-level component/controller (for example, by supplying the initial cluster configuration) such that individual etcd-druid instances in the individual Kubernetes clusters can manage the corresponding etcd cluster members.&lt;/p>
&lt;h3 id="autonomous-shoot-clusters">Autonomous Shoot Clusters&lt;/h3>
&lt;p>&lt;a href="https://github.com/gardener/gardener/issues/2906">Autonomous Shoot Clusters&lt;/a> also will require a highly availble etcd cluster to back its control-plane and the multi-node support proposed here can be leveraged in that context.
However, the current proposal will not meet all the needs of a autonomous shoot cluster.
Some additional components will be required that have the overall view of the autonomous shoot cluster and they can use etcd-druid to manage the multi-node etcd cluster. But this scenario may be different from that of &lt;a href="#gardener-ring">Gardener Ring&lt;/a> in that the individual etcd members of the cluster may not be hosted on different Kubernetes clusters.&lt;/p>
&lt;h3 id="optimization-of-recovery-from-non-quorate-cluster-with-some-member-containing-valid-data">Optimization of recovery from non-quorate cluster with some member containing valid data&lt;/h3>
&lt;p>It might be possible to optimize the actions during the recovery of a non-quorate cluster where some of the members contain valid data and some other don&amp;rsquo;t.
The optimization involves verifying the data of the valid members to determine the data of which member is the most recent (even considering the latest backup) so that the &lt;a href="#recovering-an-etcd-cluster-from-failure-of-majority-of-members">full snapshot&lt;/a> can be taken from it before recovering the etcd cluster.
Such an optimization can be attempted in the future.&lt;/p>
&lt;h3 id="optimization-of-rolling-updates-to-unhealthy-etcd-clusters">Optimization of rolling updates to unhealthy etcd clusters&lt;/h3>
&lt;p>As mentioned &lt;a href="#rolling-updates-to-etcd-members">above&lt;/a>, optimizations to proceed with rolling updates to unhealthy etcd clusters (without first restoring the cluster to full health) can be pursued in future work.&lt;/p></description></item><item><title>Docs: 02 Snapshot Compaction</title><link>https://gardener.cloud/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/proposals/02-snapshot-compaction/</guid><description>
&lt;h1 id="snapshot-compaction-for-etcd">Snapshot Compaction for Etcd&lt;/h1>
&lt;h2 id="current-problem">Current Problem&lt;/h2>
&lt;p>To ensure recoverability of Etcd, backups of the database are taken at regular interval.
Backups are of two types: Full Snapshots and Incremental Snapshots.&lt;/p>
&lt;h3 id="full-snapshots">Full Snapshots&lt;/h3>
&lt;p>Full snapshot is a snapshot of the complete database at given point in time.The size of the database keeps changing with time and typically the size is relatively large (measured in 100s of megabytes or even in gigabytes. For this reason, full snapshots are taken after some large intervals.&lt;/p>
&lt;h3 id="incremental-snapshots">Incremental Snapshots&lt;/h3>
&lt;p>Incremental Snapshots are collection of events on Etcd database, obtained through running WATCH API Call on Etcd. After some short intervals, all the events that are accumulated through WATCH API Call are saved in a file and named as Incremental Snapshots at relatively short time intervals.&lt;/p>
&lt;h3 id="recovery-from-the-snapshots">Recovery from the Snapshots&lt;/h3>
&lt;h4 id="recovery-from-full-snapshots">Recovery from Full Snapshots&lt;/h4>
&lt;p>As the full snapshots are snapshots of the complete database, the whole database can be recovered from a full snapshot in one go. Etcd provides API Call to restore the database from a full snapshot file.&lt;/p>
&lt;h4 id="recovery-from-incremental-snapshots">Recovery from Incremental Snapshots&lt;/h4>
&lt;p>Delta snapshots are collection of retrospective Etcd events. So, to restore from Incremental snapshot file, the events from the file are needed to be applied sequentially on Etcd database through Etcd Put/Delete API calls. As it is heavily dependent on Etcd calls sequentially, restoring from Incremental Snapshot files can take long if there are numerous commands captured in Incremental Snapshot files.&lt;/p>
&lt;p>Delta snapshots are applied on top of running Etcd database. So, if there is inconsistency between the state of database at the point of applying and the state of the database when the delta snapshot commands were captured, restoration will fail.&lt;/p>
&lt;p>Currently, in Gardener setup, Etcd is restored from the last full snapshot and then the delta snapshots, which were captured after the last full snapshot.&lt;/p>
&lt;p>The main problem with this is that the complete restoration time can be unacceptably large if the rate of change coming into the etcd database is quite high because there are large number of events in the delta snapshots to be applied sequentially.
A secondary problem is that, though auto-compaction is enabled for etcd, it is not quick enough to compact all the changes from the incremental snapshots being re-applied during the relatively short period of time of restoration (as compared to the actual period of time when the incremental snapshots were accumulated). This may lead to the etcd pod (the backup-restore sidecar container, to be precise) to run out of memory and/or storage space even if it is sufficient for normal operations.&lt;/p>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;h3 id="compaction-command">Compaction command&lt;/h3>
&lt;p>To help with the problem mentioned earlier, our proposal is to introduce &lt;code>compact&lt;/code> subcommand with &lt;code>etcdbrctl&lt;/code>. On execution of &lt;code>compact&lt;/code> command, A separate embedded Etcd process will be started where the Etcd data will be restored from the snapstore (exactly as in the restoration scenario today). Then the new Etcd database will be compacted and defragmented using Etcd API calls. The compaction will strip off the Etcd database of old revisions as per the Etcd auto-compaction configuration. The defragmentation will free up the unused fragment memory space released after compaction. Then a full snapshot of the compacted database will be saved in snapstore which then can be used as the base snapshot during any subsequent restoration (or backup compaction).&lt;/p>
&lt;h3 id="how-the-solution-works">How the solution works&lt;/h3>
&lt;p>The newly introduced compact command does not disturb the running Etcd while compacting the backup snapshots. The command is designed to run potentially separately (from the main Etcd process/container/pod). Etcd Druid can be configured to run the newly introduced compact command as a separate job (scheduled periodically) based on total number of Etcd events accumulated after the most recent full snapshot.&lt;/p>
&lt;h3 id="druid-flags">Druid flags:&lt;/h3>
&lt;p>Etcd druid introduced following flags to configure the compaction job:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--enable-backup-compaction&lt;/code> (default &lt;code>false&lt;/code>): Set this flag to &lt;code>true&lt;/code> to enable the automatic compaction of etcd backups when &lt;code>etcd-events-threshold&lt;/code> is exceeded.&lt;/li>
&lt;li>&lt;code>--compaction-workers&lt;/code> (default &lt;code>3&lt;/code>): If this flag is set to zero, no compaction job will be running. If it&amp;rsquo;s set to any value greater than zero, druid controller will have that many threads to kickstart the compaction job.&lt;/li>
&lt;li>&lt;code>--etcd-events-threshold&lt;/code> (default &lt;code>1000000&lt;/code>): Set this flag with the value which will signify the number of Etcd events allowed after the most recent full snapshot. Once the number of Etcd events crosses the value mentioned in this flag, compaction job will be kickstarted.&lt;/li>
&lt;li>&lt;code>--active-deadline-duration&lt;/code> (default &lt;code>3h&lt;/code>): This flag signifies the maximum duration till which a compaction job won&amp;rsquo;t be garbage-collected.&lt;/li>
&lt;/ul>
&lt;h3 id="points-to-take-care-while-saving-the-compacted-snapshot">&lt;strong>Points to take care while saving the compacted snapshot:&lt;/strong>&lt;/h3>
&lt;p>As compacted snapshot and the existing periodic full snapshots are taken by different processes running in different pods but accessing same store to save the snapshots, some problems may arise:&lt;/p>
&lt;ol>
&lt;li>When uploading the compacted snapshot to the snapstore, there is the problem of how does the restorer know when to start using the newly compacted snapshot. This communication needs to be atomic.&lt;/li>
&lt;li>With a regular schedule for compaction that happens potentially separately from the main etcd pod, is there a need for regular scheduled full snapshots anymore?&lt;/li>
&lt;li>We are planning to introduce new directory structure, under v2 prefix, for saving the snapshots (compacted and full), as mentioned in details below. But for backward compatibility, we also need to consider the older directory, which is currently under v1 prefix, during accessing snapshots.&lt;/li>
&lt;/ol>
&lt;h4 id="how-to-swap-full-snapshot-with-compacted-snapshot-atomically">&lt;strong>How to swap full snapshot with compacted snapshot atomically&lt;/strong>&lt;/h4>
&lt;p>Currently, full snapshots and the subsequent delta snapshots are grouped under same prefix path in the snapstore. When a full snapshot is created, it is placed under a prefix/directory with the name comprising of timestamp. Then subsequent delta snapshots are also pushed into the same directory. Thus each prefix/directory contains a single full snapshot and the subsequent delta snapshots. So far, it is the job of ETCDBR to start main Etcd process and snapshotter process which takes full snapshot and delta snapshot periodically. But as per our proposal, compaction will be running as parallel process to main Etcd process and snapshotter process. So we can&amp;rsquo;t reliably co-ordinate between the processes to achieve switching to the compacted snapshot as the base snapshot atomically.&lt;/p>
&lt;h5 id="current-directory-structure">&lt;strong>Current Directory Structure&lt;/strong>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>- Backup-192345
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-0-1-192345
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-1-100-192355
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-100-200-192365
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-200-300-192375
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- Backup-192789
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-0-300-192789
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-300-400-192799
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-400-500-192809
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-500-600-192819
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To solve the problem, proposal is:&lt;/p>
&lt;ol>
&lt;li>ETCDBR will take the first full snapshot after it starts main Etcd Process and snapshotter process. After taking the first full snapshot, snapshotter will continue taking full snapshots. On the other hand, ETCDBR compactor command will be run as periodic job in a separate pod and use the existing full or compacted snapshots to produce further compacted snapshots. Full snapshots and compacted snapshots will be named after same fashion. So, there is no need of any mechanism to choose which snapshots(among full and compacted snapshot) to consider as base snapshots.&lt;/li>
&lt;li>Flatten the directory structure of backup folder. Save all the full snapshots, delta snapshots and compacted snapshots under same directory/prefix. Restorer will restore from full/compacted snapshots and delta snapshots sorted based on the revision numbers in name (or timestamp if the revision numbers are equal).&lt;/li>
&lt;/ol>
&lt;h5 id="proposed-directory-structure">&lt;strong>Proposed Directory Structure&lt;/strong>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>Backup :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-0-1-192355 (Taken by snapshotter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-1-100-192365
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-100-200-192375
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-revision-0-200-192379 (Taken by snapshotter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-200-300-192385
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-revision-0-300-192386 (Taken by compaction job)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-300-400-192396
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-400-500-192406
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-500-600-192416
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-revision-0-600-192419 (Taken by snapshotter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-revision-0-600-192420 (Taken by compaction job)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="what-happens-to-the-delta-snapshots-that-were-compacted">What happens to the delta snapshots that were compacted?&lt;/h5>
&lt;p>The proposed &lt;code>compaction&lt;/code> sub-command in &lt;code>etcdbrctl&lt;/code> (and hence, the &lt;code>CronJob&lt;/code> provisioned by &lt;code>etcd-druid&lt;/code> that will schedule it at a regular interval) would only upload the compacted full snapshot.
It will not delete the snapshots (delta or full snapshots) that were compacted.
These snapshots which were superseded by a freshly uploaded compacted snapshot would follow the same life-cycle as other older snapshots.
I.e. they will be garbage collected according to the configured backup snapshot retention policy.
For example, if an &lt;code>exponential&lt;/code> retention policy is configured and if compaction is done every &lt;code>30m&lt;/code> then there might be at most &lt;code>48&lt;/code> additional (compacted) full snapshots (&lt;code>24h * 2&lt;/code>) in the backup for the latest day. As time rolls forward to the next day, these additional compacted snapshots (along with the delta snapshots that were compacted into them) will get garbage collected retaining only one full snapshot for the day before according to the retention policy.&lt;/p>
&lt;h5 id="future-work">&lt;strong>Future work&lt;/strong>&lt;/h5>
&lt;p>In the future, we have plan to stop the snapshotter just after taking the first full snapshot. Then, the compaction job will be solely responsible for taking subsequent full snapshots. The directory structure would be looking like following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>Backup :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-0-1-192355 (Taken by snapshotter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-1-100-192365
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-100-200-192375
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-200-300-192385
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-revision-0-300-192386 (Taken by compaction job)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-300-400-192396
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-400-500-192406
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Incremental-Snapshot-revision-500-600-192416
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Full-Snapshot-revision-0-600-192420 (Taken by compaction job)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="backward-compatibility">Backward Compatibility&lt;/h4>
&lt;ol>
&lt;li>&lt;strong>Restoration&lt;/strong> : The changes to handle the newly proposed backup directory structure must be backward compatible with older structures at least for restoration because we need have to restore from backups in the older structure. This includes the support for restoring from a backup without a metadata file if that is used in the actual implementation.&lt;/li>
&lt;li>&lt;strong>Backup&lt;/strong> : For new snapshots (even on a backup containing the older structure), the new structure may be used. The new structure must be setup automatically including creating the base full snapshot.&lt;/li>
&lt;li>&lt;strong>Garbage collection&lt;/strong> : The existing functionality of garbage collection of snapshots (full and incremental) according to the backup retention policy must be compatible with both old and new backup folder structure. I.e. the snapshots in the older backup structure must be retained in their own structure and the snapshots in the proposed backup structure should be retained in the proposed structure. Once all the snapshots in the older backup structure go out of the retention policy and are garbage collected, we can think of removing the support for older backup folder structure.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Note:&lt;/strong> Compactor will run parallel to current snapshotter process and work only if there is any full snapshot already present in the store. By current design, a full snapshot will be taken if there is already no full snapshot or the existing full snapshot is older than 24 hours. It is not limitation but a design choice. As per proposed design, the backup storage will contain both periodic full snapshots as well as periodic compacted snapshot. Restorer will pickup the base snapshot whichever is latest one.&lt;/p></description></item><item><title>Docs: 03 Scaling Up An Etcd Cluster</title><link>https://gardener.cloud/docs/other-components/etcd-druid/proposals/03-scaling-up-an-etcd-cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/proposals/03-scaling-up-an-etcd-cluster/</guid><description>
&lt;h1 id="scaling-up-a-single-node-to-multi-node-etcd-cluster-deployed-by-etcd-druid">Scaling-up a single-node to multi-node etcd cluster deployed by etcd-druid&lt;/h1>
&lt;p>To mark a cluster for scale-up from single node to multi-node etcd, just patch the etcd custom resource&amp;rsquo;s &lt;code>.spec.replicas&lt;/code> from &lt;code>1&lt;/code> to &lt;code>3&lt;/code> (for example).&lt;/p>
&lt;h2 id="challenges-for-scale-up">Challenges for scale-up&lt;/h2>
&lt;ol>
&lt;li>Etcd cluster with single replica don&amp;rsquo;t have any peers, so no peer communication is required hence peer URL may or may not be TLS enabled. However, while scaling up from single node etcd to multi-node etcd, there will be a requirement to have peer communication between members of the etcd cluster. Peer communication is required for various reasons, for instance for members to sync up cluster state, data, and to perform leader election or any cluster wide operation like removal or addition of a member etc. Hence in a multi-node etcd cluster we need to have TLS enable peer URL for peer communication.&lt;/li>
&lt;li>Providing the correct configuration to start new etcd members as it is different from boostrapping a cluster since these new etcd members will join an existing cluster.&lt;/li>
&lt;/ol>
&lt;h2 id="approach">Approach&lt;/h2>
&lt;p>We first went through the etcd doc of &lt;a href="https://etcd.io/docs/v3.4/op-guide/runtime-configuration/#update-advertise-peer-urls">update-advertise-peer-urls&lt;/a> to find out information regarding peer URL updation. Interestingly, etcd doc has mentioned the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>To update the advertise peer URLs of a member, first update it explicitly via member command and then restart the member.
&lt;/code>&lt;/pre>&lt;p>But we can&amp;rsquo;t assume peer URL is not TLS enabled for single-node cluster as it depends on end-user. A user may or may not enable the TLS for peer URL for a single node etcd cluster. So, How do we detect whether peer URL was enabled or not when cluster is marked for scale-up?&lt;/p>
&lt;h2 id="detecting-if-peerurl-tls-is-enabled-or-not">Detecting if peerURL TLS is enabled or not&lt;/h2>
&lt;p>For this we use an annotation in member lease object &lt;code>member.etcd.gardener.cloud/tls-enabled&lt;/code> set by backup-restore sidecar of etcd. As etcd configuration is provided by backup-restore, so it can find out whether TLS is enabled or not and accordingly set this annotation &lt;code>member.etcd.gardener.cloud/tls-enabled&lt;/code> to either &lt;code>true&lt;/code> or &lt;code>false&lt;/code> in member lease object.
And with the help of this annotation and config-map values etcd-druid is able to detect whether there is a change in a peer URL or not.&lt;/p>
&lt;h2 id="etcd-druid-helps-in-scaling-up-etcd-cluster">Etcd-Druid helps in scaling up etcd cluster&lt;/h2>
&lt;p>Now, it is detected whether peer URL was TLS enabled or not for single node etcd cluster. Etcd-druid can now use this information to take action:&lt;/p>
&lt;ul>
&lt;li>If peer URL was already TLS enabled then no action is required from etcd-druid side. Etcd-druid can proceed with scaling up the cluster.&lt;/li>
&lt;li>If peer URL was not TLS enabled then etcd-druid has to intervene and make sure peer URL should be TLS enabled first for the single node before marking the cluster for scale-up.&lt;/li>
&lt;/ul>
&lt;h2 id="action-taken-by-etcd-druid-to-enable-the-peerurl-tls">Action taken by etcd-druid to enable the peerURL TLS&lt;/h2>
&lt;ol>
&lt;li>Etcd-druid will update the &lt;code>etcd-bootstrap&lt;/code> config-map with new config like initial-cluster,initial-advertise-peer-urls etc. Backup-restore will detect this change and update the member lease annotation to &lt;code>member.etcd.gardener.cloud/tls-enabled: &amp;quot;true&amp;quot;&lt;/code>.&lt;/li>
&lt;li>In case the peer URL TLS has been changed to &lt;code>enabled&lt;/code>: Etcd-druid will add tasks to the deployment flow.
&lt;ul>
&lt;li>To ensure that the TLS enablement of peer URL is properly reflected in etcd, the existing etcd StatefulSet pods should be restarted twice.&lt;/li>
&lt;li>The first restart pushes a new configuration which contains Peer URL TLS configuration. Backup-restore will update the member peer url. This will result in the change of the peer url in the etcd&amp;rsquo;s database, but it may not reflect in the already running etcd container. Ideally a restart of an etcd container would have been sufficient but currently k8s doesn&amp;rsquo;t expose an API to force restart a single container within a pod. Therefore, we need to restart the StatefulSet pod(s) once again. When the pod(s) is restarted the second time it will now start etcd with the correct peer url which will be TLS enabled.&lt;/li>
&lt;li>To achieve 2 restarts following is done:
&lt;ul>
&lt;li>An update is made to the spec mounting the peer URL TLS secrets. This will cause a rolling update of the existing pod.&lt;/li>
&lt;li>Once the update is successfully completed, then we delete StatefulSet pods, causing a restart by the StatefulSet controller.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="after-peerurl-is-tls-enabled">After PeerURL is TLS enabled&lt;/h2>
&lt;p>After peer URL TLS enablement for single node etcd cluster, now etcd-druid adds a scale-up annotation: &lt;code>gardener.cloud/scaled-to-multi-node&lt;/code> to the etcd statefulset and etcd-druid will patch the statefulsets &lt;code>.spec.replicas&lt;/code> to &lt;code>3&lt;/code>(for example). The statefulset controller will then bring up new pods(etcd with backup-restore as a sidecar). Now etcd&amp;rsquo;s sidecar i.e backup-restore will check whether this member is already a part of a cluster or not and incase it is unable to check (may be due to some network issues) then backup-restore checks presence of this annotation: &lt;code>gardener.cloud/scaled-to-multi-node&lt;/code> in etcd statefulset to detect scale-up. If it finds out it is the scale-up case then backup-restore adds new etcd member as a &lt;a href="https://etcd.io/docs/v3.3/learning/learner/">learner&lt;/a> first and then starts the etcd learner by providing the correct configuration. Once learner gets in sync with the etcd cluster leader, it will get promoted to a voting member.&lt;/p>
&lt;h2 id="providing-the-correct-etcd-config">Providing the correct etcd config&lt;/h2>
&lt;p>As backup-restore detects that it&amp;rsquo;s a scale-up scenario, backup-restore sets &lt;code>initial-cluster-state&lt;/code> to &lt;code>existing&lt;/code> as this member will join an existing cluster and it calculates the rest of the config from the updated config-map provided by etcd-druid.&lt;/p>
&lt;p>&lt;img src="https://gardener.cloud/__resources/03-scale-up-sequenceDiagram_76558b.png" alt="Sequence diagram">&lt;/p>
&lt;h2 id="future-improvements">Future improvements:&lt;/h2>
&lt;p>The need of restarting etcd pods twice will change in the future. please refer: &lt;a href="https://github.com/gardener/etcd-backup-restore/issues/538">https://github.com/gardener/etcd-backup-restore/issues/538&lt;/a>&lt;/p></description></item><item><title>Docs: DEP Title</title><link>https://gardener.cloud/docs/other-components/etcd-druid/proposals/00-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/other-components/etcd-druid/proposals/00-template/</guid><description>
&lt;h1 id="dep-nn-your-short-descriptive-title">DEP-NN: Your short, descriptive title&lt;/h1>
&lt;h2 id="table-of-contents">Table of Contents&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#summary">Summary&lt;/a>&lt;/li>
&lt;li>&lt;a href="#motivation">Motivation&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#goals">Goals&lt;/a>&lt;/li>
&lt;li>&lt;a href="#non-goals">Non-Goals&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#proposal">Proposal&lt;/a>&lt;/li>
&lt;li>&lt;a href="#alternatives">Alternatives&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;h3 id="goals">Goals&lt;/h3>
&lt;h3 id="non-goals">Non-Goals&lt;/h3>
&lt;h2 id="proposal">Proposal&lt;/h2>
&lt;h2 id="alternatives">Alternatives&lt;/h2></description></item></channel></rss>