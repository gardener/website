<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Resources on Gardener</title><link>https://gardener.cloud/docs/gardener/extensions/resources/</link><description>Recent content in Resources on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/gardener/extensions/resources/index.xml" rel="self" type="application/rss+xml"/><item><title>BackupBucket</title><link>https://gardener.cloud/docs/gardener/extensions/resources/backupbucket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/backupbucket/</guid><description>&lt;h1 id="contract-backupbucket-resource">Contract: &lt;code>BackupBucket&lt;/code> Resource&lt;/h1>
&lt;p>The Gardener project features a sub-project called &lt;a href="https://github.com/gardener/etcd-backup-restore">etcd-backup-restore&lt;/a> to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) to be created and configured externally with appropriate credentials. The &lt;code>BackupBucket&lt;/code> resource takes this responsibility in Gardener.&lt;/p>
&lt;p>Before introducing the &lt;code>BackupBucket&lt;/code> extension resource, Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see &lt;a href="https://github.com/gardener/gardener/tree/0.27.0/charts/seed-terraformer/charts/aws-backup">AWS Backup&lt;/a>).
Now, Gardener commissions an external, provider-specific controller to take over this task. You can also refer to &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/02-backupinfra.md">backupInfra proposal documentation&lt;/a> to get an idea about how the transition was done and understand the resource in a broader scope.&lt;/p></description></item><item><title>BackupEntry</title><link>https://gardener.cloud/docs/gardener/extensions/resources/backupentry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/backupentry/</guid><description>&lt;h1 id="contract-backupentry-resource">Contract: &lt;code>BackupEntry&lt;/code> Resource&lt;/h1>
&lt;p>The Gardener project features a sub-project called &lt;a href="https://github.com/gardener/etcd-backup-restore">etcd-backup-restore&lt;/a> to take periodic backups of etcd backing Shoot clusters. It demands the bucket (or its equivalent in different object store providers) access credentials to be created and configured externally with appropriate credentials. The &lt;code>BackupEntry&lt;/code> resource takes this responsibility in Gardener to provide this information by creating a secret specific to the component.&lt;/p>
&lt;p>That being said, the core motivation for introducing this resource was to support retention of backups post deletion of &lt;code>Shoot&lt;/code>. The etcd-backup-restore components take responsibility of garbage collecting old backups out of the defined period. Once a shoot is deleted, we need to persist the backups for few days. Hence, Gardener uses the &lt;code>BackupEntry&lt;/code> resource for this housekeeping work post deletion of a &lt;code>Shoot&lt;/code>. The &lt;code>BackupEntry&lt;/code> resource is responsible for shoot specific prefix under referred bucket.&lt;/p></description></item><item><title>Bastion</title><link>https://gardener.cloud/docs/gardener/extensions/resources/bastion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/bastion/</guid><description>&lt;h1 id="contract-bastion-resource">Contract: &lt;code>Bastion&lt;/code> Resource&lt;/h1>
&lt;p>The Gardener project allows users to connect to Shoot worker nodes via SSH. As nodes are usually firewalled and not directly accessible from the public internet, &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/15-manage-bastions-and-ssh-key-pair-rotation.md">GEP-15&lt;/a> introduced the concept of &amp;ldquo;Bastions&amp;rdquo;. A bastion is a dedicated server that only serves to allow SSH ingress to the worker nodes.&lt;/p>
&lt;p>&lt;code>Bastion&lt;/code> resources contain the user&amp;rsquo;s public SSH key and IP address, in order to provision the server accordingly: The public key is put onto the Bastion and SSH ingress is only authorized for the given IP address (in fact, it&amp;rsquo;s not a single IP address, but a set of IP ranges, however for most purposes a single IP is be used).&lt;/p></description></item><item><title>ContainerRuntime</title><link>https://gardener.cloud/docs/gardener/extensions/resources/containerruntime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/containerruntime/</guid><description>&lt;h1 id="contract-containerruntime-resource">Contract: &lt;code>ContainerRuntime&lt;/code> Resource&lt;/h1>
&lt;p>At the lowest layers of a Kubernetes node is the software that, among other things, starts and stops containers. It is called “Container Runtime”.
The most widely known container runtime is Docker, but it is not alone in this space. In fact, the container runtime space has been rapidly evolving.&lt;/p>
&lt;p>Kubernetes supports different container runtimes using Container Runtime Interface (CRI) – a plugin interface which enables kubelet to use a wide variety of container runtimes.&lt;/p></description></item><item><title>ControlPlane</title><link>https://gardener.cloud/docs/gardener/extensions/resources/controlplane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/controlplane/</guid><description>&lt;h1 id="contract-controlplane-resource">Contract: &lt;code>ControlPlane&lt;/code> Resource&lt;/h1>
&lt;p>Most Kubernetes clusters require a &lt;code>cloud-controller-manager&lt;/code> or CSI drivers in order to work properly.
Before introducing the &lt;code>ControlPlane&lt;/code> extension resource Gardener was having several different Helm charts for the &lt;code>cloud-controller-manager&lt;/code> deployments for the various providers.
Now, Gardener commissions an external, provider-specific controller to take over this task.&lt;/p>
&lt;h2 id="which-control-plane-resources-are-required">Which control plane resources are required?&lt;/h2>
&lt;p>As mentioned in the &lt;a href="https://gardener.cloud/docs/gardener/extensions/controlplane-webhooks/">controlplane customization webhooks&lt;/a> document, Gardener shall not deploy any &lt;code>cloud-controller-manager&lt;/code> or any other provider-specific component.
Instead, it creates a &lt;code>ControlPlane&lt;/code> CRD that should be picked up by provider extensions.
Its purpose is to trigger the deployment of such provider-specific components in the shoot namespace in the seed cluster.&lt;/p></description></item><item><title>ControlPlane Exposure</title><link>https://gardener.cloud/docs/gardener/extensions/resources/controlplane-exposure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/controlplane-exposure/</guid><description>&lt;blockquote class="alert alert-warning">
 &lt;div class="alert-title">
 &lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">&lt;title>alert-outline&lt;/title>&lt;path d="M12,2L1,21H23M12,6L19.53,19H4.47M11,10V14H13V10M11,16V18H13V16" />&lt;/svg>
 &lt;p>
 
 Warning
 
 &lt;/p>
 &lt;/div>
 &lt;p>The &lt;code>ControlPlane&lt;/code> resource with purpose &lt;code>exposure&lt;/code> is deprecated and will be removed in Gardener v1.123. Since the enablement of SNI, the &lt;code>exposure&lt;/code> purpose is no longer used.&lt;/p>

 &lt;/blockquote>

&lt;h1 id="contract-controlplane-resource-with-purpose-exposure">Contract: &lt;code>ControlPlane&lt;/code> Resource with Purpose &lt;code>exposure&lt;/code>&lt;/h1>
&lt;p>Some Kubernetes clusters require an additional deployments required by the seed cloud provider in order to work properly, e.g. AWS Load Balancer Readvertiser.
Before using ControlPlane resources with purpose &lt;code>exposure&lt;/code>, Gardener was having different Helm charts for the deployments for the various providers.
Now, Gardener commissions an external, provider-specific controller to take over this task.&lt;/p></description></item><item><title>DNS Record</title><link>https://gardener.cloud/docs/gardener/extensions/resources/dnsrecord/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/dnsrecord/</guid><description>&lt;h1 id="contract-dnsrecord-resources">Contract: &lt;code>DNSRecord&lt;/code> Resources&lt;/h1>
&lt;p>Every shoot cluster requires external DNS records that are publicly resolvable.
The management of these DNS records requires provider-specific knowledge which is to be developed outside the Gardener&amp;rsquo;s core repository.&lt;/p>
&lt;p>Currently, Gardener uses &lt;code>DNSProvider&lt;/code> and &lt;code>DNSEntry&lt;/code> resources. However, this introduces undesired coupling of Gardener to a controller that does not adhere to the Gardener extension contracts. Because of this, we plan to stop using &lt;code>DNSProvider&lt;/code> and &lt;code>DNSEntry&lt;/code> resources for Gardener DNS records in the future and use the &lt;code>DNSRecord&lt;/code> resources described here instead.&lt;/p></description></item><item><title>Extension</title><link>https://gardener.cloud/docs/gardener/extensions/resources/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/extension/</guid><description>&lt;h1 id="contract-extension-resource">Contract: &lt;code>Extension&lt;/code> Resource&lt;/h1>
&lt;p>Gardener defines common procedures which must be passed to create a functioning shoot cluster. Well known steps are represented by special resources like &lt;code>Infrastructure&lt;/code>, &lt;code>OperatingSystemConfig&lt;/code> or &lt;code>DNS&lt;/code>. These resources are typically reconciled by dedicated controllers setting up the infrastructure on the hyperscaler or managing DNS entries, etc.&lt;/p>
&lt;p>But, some requirements don&amp;rsquo;t match with those special resources or don&amp;rsquo;t depend on being proceeded at a specific step in the creation / deletion flow of the shoot. They require a more generic hook. Therefore, Gardener offers the &lt;code>Extension&lt;/code> resource.&lt;/p></description></item><item><title>Infrastructure</title><link>https://gardener.cloud/docs/gardener/extensions/resources/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/infrastructure/</guid><description>&lt;h1 id="contract-infrastructure-resource">Contract: &lt;code>Infrastructure&lt;/code> Resource&lt;/h1>
&lt;p>Every Kubernetes cluster requires some low-level infrastructure to be setup in order to work properly.
Examples for that are networks, routing entries, security groups, IAM roles, etc.
Before introducing the &lt;code>Infrastructure&lt;/code> extension resource Gardener was using Terraform in order to create and manage these provider-specific resources (e.g., see &lt;a href="https://github.com/gardener/gardener/tree/0.20.0/charts/seed-terraformer/charts/aws-infra">here&lt;/a>).
Now, Gardener commissions an external, provider-specific controller to take over this task.&lt;/p>
&lt;h2 id="which-infrastructure-resources-are-required">Which infrastructure resources are required?&lt;/h2>
&lt;p>Unfortunately, there is no general answer to this question as it is highly provider specific.
Consider the above mentioned resources, i.e., VPC, subnets, route tables, security groups, IAM roles, SSH key pairs.
Most of the resources are required in order to create VMs (the shoot cluster worker nodes), load balancers, and volumes.&lt;/p></description></item><item><title>Network</title><link>https://gardener.cloud/docs/gardener/extensions/resources/network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/network/</guid><description>&lt;h1 id="contract-network-resource">Contract: &lt;code>Network&lt;/code> Resource&lt;/h1>
&lt;p>Gardener is an open-source project that provides a nested user model. Basically, there are two types of services provided by Gardener to its users:&lt;/p>
&lt;ul>
&lt;li>Managed: end-users only request a Kubernetes cluster (Clusters-as-a-Service)&lt;/li>
&lt;li>Hosted: operators utilize Gardener to provide their own managed version of Kubernetes (Cluster-Provisioner-as-a-service)&lt;/li>
&lt;/ul>
&lt;p>Whether a user is an operator or an end-user, it makes sense to provide choice. For example, for an end-user it might make sense to
choose a network-plugin that would support enforcing network policies (some plugins does not come with network-policy support by default).
For operators however, choice only matters for delegation purposes, i.e., when providing an own managed-service, it becomes important to also provide choice over which network-plugins to use.&lt;/p></description></item><item><title>OperatingSystemConfig</title><link>https://gardener.cloud/docs/gardener/extensions/resources/operatingsystemconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/operatingsystemconfig/</guid><description>&lt;h1 id="contract-operatingsystemconfig-resource">Contract: &lt;code>OperatingSystemConfig&lt;/code> Resource&lt;/h1>
&lt;p>Gardener uses the machine API and leverages the functionalities of the &lt;a href="https://github.com/gardener/machine-controller-manager">machine-controller-manager&lt;/a> (MCM) in order to manage the worker nodes of a shoot cluster.
The machine-controller-manager itself simply takes a reference to an OS-image and (optionally) some user-data (a script or configuration that is executed when a VM is bootstrapped), and forwards both to the provider&amp;rsquo;s API when creating VMs.
MCM does not have any restrictions regarding supported operating systems as it does not modify or influence the machine&amp;rsquo;s configuration in any way - it just creates/deletes machines with the provided metadata.&lt;/p></description></item><item><title>Worker</title><link>https://gardener.cloud/docs/gardener/extensions/resources/worker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/resources/worker/</guid><description>&lt;h1 id="contract-worker-resource">Contract: &lt;code>Worker&lt;/code> Resource&lt;/h1>
&lt;p>While the control plane of a shoot cluster is living in the seed and deployed as native Kubernetes workload, the worker nodes of the shoot clusters are normal virtual machines (VMs) in the end-users infrastructure account.
The Gardener project features a sub-project called &lt;a href="https://github.com/gardener/machine-controller-manager">machine-controller-manager&lt;/a>.
This controller is extending the Kubernetes API using custom resource definitions to represent actual VMs as &lt;code>Machine&lt;/code> objects inside a Kubernetes system.
This approach unlocks the possibility to manage virtual machines in the Kubernetes style and benefit from all its design principles.&lt;/p></description></item></channel></rss>