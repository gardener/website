<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gardener – Provider Equinix Metal</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-equinix-metal/</link><description>Recent content in Provider Equinix Metal on Gardener</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-equinix-metal/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Usage As End User</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-equinix-metal/docs/usage-as-end-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-equinix-metal/docs/usage-as-end-user/</guid><description>
&lt;h1 id="using-the-equinix-metal-provider-extension-with-gardener-as-end-user">Using the Equinix Metal provider extension with Gardener as end-user&lt;/h1>
&lt;p>The &lt;a href="https://github.com/gardener/gardener/blob/master/example/90-shoot.yaml">&lt;code>core.gardener.cloud/v1beta1.Shoot&lt;/code> resource&lt;/a> declares a few fields that are meant to contain provider-specific configuration.&lt;/p>
&lt;p>In this document we are describing how this configuration looks like for Equinix Metal and provide an example &lt;code>Shoot&lt;/code> manifest with minimal configuration that you can use to create an Equinix Metal cluster (modulo the landscape-specific information like cloud profile names, secret binding names, etc.).&lt;/p>
&lt;h2 id="provider-secret-data">Provider secret data&lt;/h2>
&lt;p>Every shoot cluster references a &lt;code>SecretBinding&lt;/code> which itself references a &lt;code>Secret&lt;/code>, and this &lt;code>Secret&lt;/code> contains the provider credentials of your Equinix Metal project.
This &lt;code>Secret&lt;/code> must look as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: v1
kind: Secret
metadata:
name: my-secret
namespace: garden-dev
type: Opaque
data:
apiToken: base64(api-token)
projectID: base64(project-id)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please look up &lt;a href="https://metal.equinix.com/developers/api/">https://metal.equinix.com/developers/api/&lt;/a> as well.&lt;/p>
&lt;p>With &lt;code>Secret&lt;/code> created, create a &lt;code>SecretBinding&lt;/code> resource referencing it. It may look like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: SecretBinding
metadata:
name: my-secret
namespace: garden-dev
secretRef:
name: my-secret
quotas: []
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="infrastructureconfig">&lt;code>InfrastructureConfig&lt;/code>&lt;/h2>
&lt;p>Currently, there is no infrastructure configuration possible for the Equinix Metal environment.&lt;/p>
&lt;p>An example &lt;code>InfrastructureConfig&lt;/code> for the Equinix Metal extension looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: equinixmetal.provider.extensions.gardener.cloud/v1alpha1
kind: InfrastructureConfig
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Equinix Metal extension will only create a key pair.&lt;/p>
&lt;h2 id="controlplaneconfig">&lt;code>ControlPlaneConfig&lt;/code>&lt;/h2>
&lt;p>The control plane configuration mainly contains values for the Equinix Metal-specific control plane components.
Today, the Equinix Metal extension deploys the &lt;code>cloud-controller-manager&lt;/code> and the CSI controllers, however, it doesn&amp;rsquo;t offer any configuration options at the moment.&lt;/p>
&lt;p>An example &lt;code>ControlPlaneConfig&lt;/code> for the Equinix Metal extension looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: equinixmetal.provider.extensions.gardener.cloud/v1alpha1
kind: ControlPlaneConfig
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="workerconfig">&lt;code>WorkerConfig&lt;/code>&lt;/h2>
&lt;p>The Equinix Metal extension supports specifying IDs for reserved devices that should be used for the machines of a specific worker pool.&lt;/p>
&lt;p>An example &lt;code>WorkerConfig&lt;/code> for the Equinix Metal extension looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: equinixmetal.provider.extensions.gardener.cloud/v1alpha1
kind: WorkerConfig
reservationIDs:
- my-reserved-device-1
- my-reserved-device-2
reservedDevicesOnly: &lt;span style="color:#00f">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.reservationIDs[]&lt;/code> list contains the list of IDs of the reserved devices.
The &lt;code>.reservedDevicesOnly&lt;/code> field indicates whether only reserved devices from the provided list of reservation IDs should be used when new machines are created.
It always will attempt to create a device from one of the reservation IDs.
If none is available, the behaviour depends on the setting:&lt;/p>
&lt;ul>
&lt;li>&lt;code>true&lt;/code>: return an error&lt;/li>
&lt;li>&lt;code>false&lt;/code>: request a regular on-demand device&lt;/li>
&lt;/ul>
&lt;p>The default value is &lt;code>false&lt;/code>.&lt;/p>
&lt;h2 id="example-shoot-manifest">Example &lt;code>Shoot&lt;/code> manifest&lt;/h2>
&lt;p>Please find below an example &lt;code>Shoot&lt;/code> manifest:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1alpha1
kind: Shoot
metadata:
name: my-shoot
namespace: garden-dev
spec:
cloudProfileName: equinix-metal
region: ny &lt;span style="color:#008000"># Corresponds to a metro&lt;/span>
secretBindingName: my-secret
provider:
type: equinixmetal
infrastructureConfig:
apiVersion: equinixmetal.provider.extensions.gardener.cloud/v1alpha1
kind: InfrastructureConfig
controlPlaneConfig:
apiVersion: equinixmetal.provider.extensions.gardener.cloud/v1alpha1
kind: ControlPlaneConfig
workers:
- name: worker-pool1
minimum: 2
maximum: 2
volume:
size: 50Gi
type: storage_1
zones: &lt;span style="color:#008000"># Optional list of facilities, all of which MUST be in the metro; if not provided, then random facilities within the metro will be chosen for each machine.&lt;/span>
- ewr1
- ny5
- name: reserved-pool
machine:
type: t1.small
minimum: 1
maximum: 2
providerConfig:
apiVersion: equinixmetal.provider.extensions.gardener.cloud/v1alpha1
kind: WorkerConfig
reservationIDs:
- reserved-device1
- reserved-device2
reservedDevicesOnly: &lt;span style="color:#00f">true&lt;/span>
volume:
size: 50Gi
type: storage_1
networking:
type: calico
kubernetes:
version: 1.20.2
maintenance:
autoUpdate:
kubernetesVersion: &lt;span style="color:#00f">true&lt;/span>
machineImageVersion: &lt;span style="color:#00f">true&lt;/span>
addons:
kubernetes-dashboard:
enabled: &lt;span style="color:#00f">true&lt;/span>
nginx-ingress:
enabled: &lt;span style="color:#00f">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>⚠️ Note that if you specify multiple facilities in the &lt;code>.spec.provider.workers[].zones[]&lt;/code> list then new machines are randomly created in one of the provided facilities.
Particularly, it is not ensured that all facilities are used or that all machines are equally or unequally distributed.&lt;/p>
&lt;h2 id="kubernetes-versions-per-worker-pool">Kubernetes Versions per Worker Pool&lt;/h2>
&lt;p>This extension supports &lt;code>gardener/gardener&lt;/code>&amp;rsquo;s &lt;code>WorkerPoolKubernetesVersion&lt;/code> feature gate, i.e., having &lt;a href="https://github.com/gardener/gardener/blob/8a9c88866ec5fce59b5acf57d4227eeeb73669d7/example/90-shoot.yaml#L69-L70">worker pools with overridden Kubernetes versions&lt;/a> since &lt;code>gardener-extension-provider-equinix-metal@v2.2&lt;/code>.&lt;/p></description></item><item><title>Docs: Usage As Operator</title><link>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-equinix-metal/docs/usage-as-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/extensions/infrastructure-extensions/gardener-extension-provider-equinix-metal/docs/usage-as-operator/</guid><description>
&lt;h1 id="using-the-equinix-metal-provider-extension-with-gardener-as-operator">Using the Equinix Metal provider extension with Gardener as operator&lt;/h1>
&lt;p>The &lt;a href="https://github.com/gardener/gardener/blob/master/example/30-cloudprofile.yaml">&lt;code>core.gardener.cloud/v1alpha1.CloudProfile&lt;/code> resource&lt;/a> declares a &lt;code>providerConfig&lt;/code> field that is meant to contain provider-specific configuration.&lt;/p>
&lt;p>In this document we are describing how this configuration looks like for Equinix Metal and provide an example &lt;code>CloudProfile&lt;/code> manifest with minimal configuration that you can use to allow creating Equinix Metal shoot clusters.&lt;/p>
&lt;h2 id="example-cloudprofile-manifest">Example &lt;code>CloudProfile&lt;/code> manifest&lt;/h2>
&lt;p>Please find below an example &lt;code>CloudProfile&lt;/code> manifest:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: core.gardener.cloud/v1beta1
kind: CloudProfile
metadata:
name: equinix-metal
spec:
type: equinixmetal
kubernetes:
versions:
- version: 1.20.2
- version: 1.19.7
- version: 1.18.15
&lt;span style="color:#008000">#expirationDate: &amp;#34;2020-04-05T01:02:03Z&amp;#34;&lt;/span>
machineImages:
- name: flatcar
versions:
- version: 0.0.0-stable
machineTypes:
- name: t1.small
cpu: &lt;span style="color:#a31515">&amp;#34;4&amp;#34;&lt;/span>
gpu: &lt;span style="color:#a31515">&amp;#34;0&amp;#34;&lt;/span>
memory: 8Gi
usable: &lt;span style="color:#00f">true&lt;/span>
regions: &lt;span style="color:#008000"># List of offered metros&lt;/span>
- name: ny
zones: &lt;span style="color:#008000"># List of offered facilities within the respective metro&lt;/span>
- name: ewr1
- name: ny5
- name: ny7
providerConfig:
apiVersion: equinixmetal.provider.extensions.gardener.cloud/v1alpha1
kind: CloudProfileConfig
machineImages:
- name: flatcar
versions:
- version: 0.0.0-stable
id: flatcar_stable
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cloudprofileconfig">&lt;code>CloudProfileConfig&lt;/code>&lt;/h2>
&lt;p>The cloud profile configuration contains information about the real machine image IDs in the Equinix Metal environment (IDs).
You have to map every version that you specify in &lt;code>.spec.machineImages[].versions&lt;/code> here such that the Equinix Metal extension knows the ID for every version you want to offer.&lt;/p>
&lt;p>An example &lt;code>CloudProfileConfig&lt;/code> for the Equinix Metal extension looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">apiVersion: equinixmetal.provider.extensions.gardener.cloud/v1alpha1
kind: CloudProfileConfig
machineImages:
- name: flatcar
versions:
- version: 0.0.0-stable
id: flatcar_stable
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>NOTE: &lt;code>CloudProfileConfig&lt;/code> is not a Custom Resource, so you cannot create it directly.&lt;/p>
&lt;/blockquote></description></item></channel></rss>