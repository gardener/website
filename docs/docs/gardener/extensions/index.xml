<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Extensions on Gardener</title><link>https://gardener.cloud/docs/gardener/extensions/</link><description>Recent content in Extensions on Gardener</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://gardener.cloud/docs/gardener/extensions/index.xml" rel="self" type="application/rss+xml"/><item><title>Access to the Garden Cluster for Extensions</title><link>https://gardener.cloud/docs/gardener/extensions/garden-api-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/garden-api-access/</guid><description>&lt;h1 id="access-to-the-garden-cluster-for-extensions">Access to the Garden Cluster for Extensions&lt;/h1>
&lt;p>Gardener offers different means to provide or equip registered extensions with a kubeconfig which may be used to connect to the garden cluster.&lt;/p>
&lt;h2 id="admission-controllers">Admission Controllers&lt;/h2>
&lt;p>For extensions with an admission controller deployment, &lt;code>gardener-operator&lt;/code> injects a token-based kubeconfig as a volume and volume mount.
The token is valid for &lt;code>12h&lt;/code>, automatically renewed, and associated with a dedicated &lt;code>ServiceAccount&lt;/code> in the garden cluster.
The path to this kubeconfig is revealed under the &lt;code>GARDEN_KUBECONFIG&lt;/code> environment variable, also added to the pod spec(s).&lt;/p></description></item><item><title>CA Rotation</title><link>https://gardener.cloud/docs/gardener/extensions/ca-rotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/ca-rotation/</guid><description>&lt;h1 id="ca-rotation-in-extensions">CA Rotation in Extensions&lt;/h1>
&lt;p>&lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/18-shoot-CA-rotation.md">GEP-18&lt;/a> proposes adding support for automated rotation of Shoot cluster certificate authorities (CAs).
This document outlines all the requirements that Gardener extensions need to fulfill in order to support the CA rotation feature.&lt;/p>
&lt;h2 id="requirements-for-shoot-cluster-ca-rotation">Requirements for Shoot Cluster CA Rotation&lt;/h2>
&lt;ul>
&lt;li>Extensions must not rely on static CA &lt;code>Secret&lt;/code> names managed by the gardenlet, because their names are changing during CA rotation.&lt;/li>
&lt;li>Extensions cannot issue or use client certificates for authenticating against shoot API servers. Instead, they should use short-lived auto-rotated &lt;code>ServiceAccount&lt;/code> tokens via gardener-resource-manager&amp;rsquo;s &lt;code>TokenRequestor&lt;/code>. Also see &lt;a href="https://gardener.cloud/docs/gardener/extensions/conventions/">Conventions&lt;/a> and &lt;a href="https://gardener.cloud/docs/gardener/concepts/resource-manager/#tokenrequestor">&lt;code>TokenRequestor&lt;/code>&lt;/a> documents.&lt;/li>
&lt;li>Extensions need to generate dedicated CAs for signing server certificates (e.g. &lt;code>cloud-controller-manager&lt;/code>). There should be one CA per controller and purpose in order to bind the lifecycle to the reconciliation cycle of the respective object for which it is created.&lt;/li>
&lt;li>CAs managed by extensions should be rotated in lock-step with the shoot cluster CA.
When the user triggers a rotation, the gardenlet writes phase and initiation time to &lt;code>Shoot.status.credentials.rotation.certificateAuthorities.{phase,lastInitiationTime}&lt;/code>. See &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/18-shoot-CA-rotation.md#rotation-sequence-for-cluster-and-client-ca">GEP-18&lt;/a> for a detailed description on what needs to happen in each phase.
Extensions can retrieve this information from &lt;a href="https://gardener.cloud/docs/gardener/extensions/cluster/">&lt;code>Cluster.shoot.status&lt;/code>&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="utilities-for-secrets-management">Utilities for Secrets Management&lt;/h2>
&lt;p>In order to fulfill the requirements listed above, extension controllers can reuse the &lt;a href="https://gardener.cloud/docs/gardener/secrets_management/">&lt;code>SecretsManager&lt;/code>&lt;/a> that the gardenlet uses to manage all shoot cluster CAs, certificates, and other secrets as well.
It implements the core logic for managing secrets that need to be rotated, auto-renewed, etc.&lt;/p></description></item><item><title>Cluster</title><link>https://gardener.cloud/docs/gardener/extensions/cluster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/cluster/</guid><description>&lt;h1 id="cluster-resource">&lt;code>Cluster&lt;/code> Resource&lt;/h1>
&lt;p>As part of the extensibility epic, a lot of responsibility that was previously taken over by Gardener directly has now been shifted to extension controllers running in the seed clusters.
These extensions often serve a well-defined purpose (e.g., the management of &lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/dnsrecord/">DNS records&lt;/a>, &lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/infrastructure/">infrastructure&lt;/a>).
We have introduced a couple of extension CRDs in the seeds whose specification is written by Gardener, and which are acted up by the extensions.&lt;/p>
&lt;p>However, the extensions sometimes require more information that is not directly part of the specification.
One example of that is the GCP infrastructure controller which needs to know the shoot&amp;rsquo;s pod and service network.
Another example is the Azure infrastructure controller which requires some information out of the &lt;code>CloudProfile&lt;/code> resource.
The problem is that Gardener does not know which extension requires which information so that it can write it into their specific CRDs.&lt;/p></description></item><item><title>ControlPlane Webhooks</title><link>https://gardener.cloud/docs/gardener/extensions/controlplane-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/controlplane-webhooks/</guid><description>&lt;h1 id="controlplane-customization-webhooks">ControlPlane Customization Webhooks&lt;/h1>
&lt;p>Gardener creates the Shoot controlplane in several steps of the Shoot flow. At different point of this flow, it:&lt;/p>
&lt;ul>
&lt;li>Deploys standard controlplane components such as kube-apiserver, kube-controller-manager, and kube-scheduler by creating the corresponding deployments, services, and other resources in the Shoot namespace.&lt;/li>
&lt;li>Initiates the deployment of custom controlplane components by &lt;a href="https://gardener.cloud/docs/gardener/extensions/resources/controlplane/">ControlPlane controllers&lt;/a> by creating a &lt;code>ControlPlane&lt;/code> resource in the Shoot namespace.&lt;/li>
&lt;/ul>
&lt;p>In order to apply any provider-specific changes to the configuration provided by Gardener for the standard controlplane components, cloud extension providers can install mutating admission webhooks for the resources created by Gardener in the Shoot namespace.&lt;/p></description></item><item><title>Conventions</title><link>https://gardener.cloud/docs/gardener/extensions/conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/conventions/</guid><description>&lt;h1 id="general-conventions">General Conventions&lt;/h1>
&lt;p>All the extensions that are registered to Gardener are deployed to the seed clusters on which they are required (also see &lt;a href="https://gardener.cloud/docs/gardener/extensions/controllerregistration/">ControllerRegistration&lt;/a>).&lt;/p>
&lt;p>Some of these extensions might need to create global resources in the seed (e.g., &lt;code>ClusterRole&lt;/code>s), i.e., it&amp;rsquo;s important to have a naming scheme to avoid conflicts as it cannot be checked or validated upfront that two extensions don&amp;rsquo;t use the same names.&lt;/p>
&lt;p>Consequently, this page should help answering some general questions that might come up when it comes to developing an extension.&lt;/p></description></item><item><title>Force Deletion</title><link>https://gardener.cloud/docs/gardener/extensions/force-deletion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/force-deletion/</guid><description>&lt;h1 id="force-deletion">Force Deletion&lt;/h1>
&lt;p>From &lt;code>v1.81&lt;/code>, Gardener supports &lt;a href="https://gardener.cloud/docs/gardener/shoot-operations/shoot_operations/#force-deletion">Shoot Force Deletion&lt;/a>. All extension controllers should also properly support it. This document outlines some important points that extension maintainers should keep in mind to support force deletion in their extensions.&lt;/p>
&lt;h2 id="overall-principles">Overall Principles&lt;/h2>
&lt;p>The following principles should always be upheld:&lt;/p>
&lt;ul>
&lt;li>All resources pertaining to the extension and managed by it should be appropriately handled and cleaned up by the extension when force deletion is initiated.&lt;/li>
&lt;/ul>
&lt;h2 id="implementation-details">Implementation Details&lt;/h2>
&lt;h3 id="forcedelete-actuator-methods">ForceDelete Actuator Methods&lt;/h3>
&lt;p>Most extension controller implementations follow a common pattern where a generic &lt;code>Reconciler&lt;/code> implementation delegates to an &lt;code>Actuator&lt;/code> interface that contains the methods &lt;code>Reconcile&lt;/code>, &lt;code>Delete&lt;/code>, &lt;code>Migrate&lt;/code> and &lt;code>Restore&lt;/code> provided by the extension. A new method, &lt;code>ForceDelete&lt;/code> has been added to all such &lt;code>Actuator&lt;/code> interfaces; see &lt;a href="https://github.com/gardener/gardener/blob/master/extensions/pkg/controller/infrastructure/actuator.go">the infrastructure &lt;code>Actuator&lt;/code> interface&lt;/a> as an example. The generic reconcilers call this method if the Shoot has annotation &lt;code>confirmation.gardener.cloud/force-deletion=true&lt;/code>. Thus, it should be implemented by the extension controller to forcefully delete resources if not possible to delete them gracefully. If graceful deletion is possible, then in the &lt;code>ForceDelete&lt;/code>, they can simply call the &lt;code>Delete&lt;/code> method.&lt;/p></description></item><item><title>Healthcheck Library</title><link>https://gardener.cloud/docs/gardener/extensions/healthcheck-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/healthcheck-library/</guid><description>&lt;h1 id="health-check-library">Health Check Library&lt;/h1>
&lt;h2 id="goal">Goal&lt;/h2>
&lt;p>Typically, an extension reconciles a specific resource (Custom Resource Definitions (CRDs)) and creates / modifies resources in the cluster (via helm, managed resources, kubectl, &amp;hellip;).
We call these API Objects &amp;lsquo;dependent objects&amp;rsquo; - as they are bound to the lifecycle of the extension.&lt;/p>
&lt;p>The goal of this library is to enable extensions to setup health checks for their &amp;lsquo;dependent objects&amp;rsquo; with minimal effort.&lt;/p>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>The library provides a generic controller with the ability to register any resource that satisfies the &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types.go">extension object interface&lt;/a>.
An example is &lt;a href="https://github.com/gardener/gardener/blob/master/pkg/apis/extensions/v1alpha1/types_worker.go">the &lt;code>Worker&lt;/code> CRD&lt;/a>.&lt;/p></description></item><item><title>Heartbeat</title><link>https://gardener.cloud/docs/gardener/extensions/heartbeat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/heartbeat/</guid><description>&lt;h1 id="heartbeat-controller">Heartbeat Controller&lt;/h1>
&lt;p>The heartbeat controller renews a dedicated &lt;code>Lease&lt;/code> object named &lt;code>gardener-extension-heartbeat&lt;/code> at regular 30 second intervals by default. This &lt;code>Lease&lt;/code> is used for heartbeats similar to how &lt;code>gardenlet&lt;/code> uses &lt;code>Lease&lt;/code> objects for seed heartbeats (see &lt;a href="https://gardener.cloud/docs/gardener/concepts/gardenlet/#heartbeats">gardenlet heartbeats&lt;/a>).&lt;/p>
&lt;p>The &lt;code>gardener-extension-heartbeat&lt;/code> &lt;code>Lease&lt;/code> can be checked by other controllers to verify that the corresponding extension controller is still running. Currently, &lt;code>gardenlet&lt;/code> checks this &lt;code>Lease&lt;/code> when performing shoot health checks and expects to find the &lt;code>Lease&lt;/code> inside the namespace where the extension controller is deployed by the corresponding &lt;code>ControllerInstallation&lt;/code>. For each extension resource deployed in the Shoot control plane, &lt;code>gardenlet&lt;/code> finds the corresponding &lt;code>gardener-extension-heartbeat&lt;/code> &lt;code>Lease&lt;/code> resource and checks whether the &lt;code>Lease&lt;/code>&amp;rsquo;s &lt;code>.spec.renewTime&lt;/code> is older than the allowed threshold for stale extension health checks - in this case, &lt;code>gardenlet&lt;/code> considers the health check report for an extension resource as &amp;ldquo;outdated&amp;rdquo; and reflects this in the &lt;code>Shoot&lt;/code> status.&lt;/p></description></item><item><title>Logging And Monitoring</title><link>https://gardener.cloud/docs/gardener/extensions/logging-and-monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/logging-and-monitoring/</guid><description>&lt;h1 id="logging-and-monitoring-for-extensions">Logging and Monitoring for Extensions&lt;/h1>
&lt;p>Gardener provides an integrated logging and monitoring stack for alerting, monitoring, and troubleshooting of its managed components by operators or end users. For further information how to make use of it in these roles, refer to the corresponding guides for &lt;a href="https://github.com/gardener/logging/tree/master/docs/usage/README.md">exploring logs&lt;/a> and for &lt;a href="https://github.com/credativ/plutono">monitoring with Plutono&lt;/a>.&lt;/p>
&lt;p>The components that constitute the logging and monitoring stack are managed by Gardener. By default, it deploys &lt;a href="https://prometheus.io/">Prometheus&lt;/a> and &lt;a href="https://prometheus.io/docs/alerting/latest/alertmanager/">Alertmanager&lt;/a> (managed via &lt;a href="https://github.com/prometheus-operator/prometheus-operator">&lt;code>prometheus-operator&lt;/code>&lt;/a>, and &lt;a href="https://github.com/credativ/plutono">Plutono&lt;/a> into the &lt;code>garden&lt;/code> namespace of all seed clusters. If the logging is enabled in the &lt;code>gardenlet&lt;/code> configuration (&lt;code>logging.enabled&lt;/code>), it will deploy &lt;a href="https://github.com/fluent/fluent-operator">fluent-operator&lt;/a> and &lt;a href="https://github.com/credativ/plutono">Vali&lt;/a> in the &lt;code>garden&lt;/code> namespace too.&lt;/p></description></item><item><title>Managedresources</title><link>https://gardener.cloud/docs/gardener/extensions/managedresources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/managedresources/</guid><description>&lt;h1 id="deploy-resources-to-the-shoot-cluster">Deploy Resources to the Shoot Cluster&lt;/h1>
&lt;p>We have introduced a component called &lt;a href="https://gardener.cloud/docs/gardener/concepts/resource-manager/">&lt;code>gardener-resource-manager&lt;/code>&lt;/a> that is deployed as part of every shoot control plane in the seed.
One of its tasks is to manage CRDs, so called &lt;code>ManagedResource&lt;/code>s.
Managed resources contain Kubernetes resources that shall be created, reconciled, updated, and deleted by the gardener-resource-manager.&lt;/p>
&lt;p>Extension controllers may create these &lt;code>ManagedResource&lt;/code>s in the shoot namespace if they need to create any resource in the shoot cluster itself, for example RBAC roles (or anything else).&lt;/p></description></item><item><title>Migration</title><link>https://gardener.cloud/docs/gardener/extensions/migration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/migration/</guid><description>&lt;h1 id="control-plane-migration">Control Plane Migration&lt;/h1>
&lt;p>&lt;em>Control Plane Migration&lt;/em> is a new Gardener feature that has been recently implemented as proposed in &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/07-shoot-control-plane-migration.md">GEP-7 Shoot Control Plane Migration&lt;/a>. It should be properly supported by all extensions controllers. This document outlines some important points that extension maintainers should keep in mind to properly support migration in their extensions.&lt;/p>
&lt;h2 id="overall-principles">Overall Principles&lt;/h2>
&lt;p>The following principles should always be upheld:&lt;/p>
&lt;ul>
&lt;li>All states maintained by the extension that is external from the seed cluster, for example infrastructure resources in a cloud provider, DNS entries, etc., should be kept during the migration. No such state should be deleted and then recreated, as this might cause disruption in the availability of the shoot cluster.&lt;/li>
&lt;li>All Kubernetes resources maintained by the extension in the shoot cluster itself should also be kept during the migration. No such resources should be deleted and then recreated.&lt;/li>
&lt;/ul>
&lt;h2 id="migrate-and-restore-operations">Migrate and Restore Operations&lt;/h2>
&lt;p>Two new operations have been introduced in Gardener. They can be specified as values of the &lt;code>gardener.cloud/operation&lt;/code> annotation on an extension resource to indicate that an operation different from a normal &lt;code>reconcile&lt;/code> should be performed by the corresponding extension controller:&lt;/p></description></item><item><title>Overview</title><link>https://gardener.cloud/docs/gardener/extensions/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/overview/</guid><description>&lt;h1 id="extensibility-overview">Extensibility Overview&lt;/h1>
&lt;p>Initially, everything was developed in-tree in the Gardener project. All cloud providers and the configuration for all the supported operating systems were released together with the Gardener core itself.
But as the project grew, it got more and more difficult to add new providers and maintain the existing code base.
As a consequence and in order to become agile and flexible again, we proposed &lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md">GEP-1&lt;/a> (Gardener Enhancement Proposal).
The document describes an out-of-tree extension architecture that keeps the Gardener core logic independent of provider-specific knowledge (similar to what Kubernetes has achieved with &lt;a href="https://github.com/kubernetes/enhancements/issues/88">out-of-tree cloud providers&lt;/a> or with &lt;a href="https://github.com/kubernetes/community/pull/1258">CSI volume plugins&lt;/a>).&lt;/p></description></item><item><title>Project Roles</title><link>https://gardener.cloud/docs/gardener/extensions/project-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/project-roles/</guid><description>&lt;h1 id="extending-project-roles">Extending Project Roles&lt;/h1>
&lt;p>The &lt;code>Project&lt;/code> resource allows to specify a list of roles for every member (&lt;code>.spec.members[*].roles&lt;/code>).
There are a few standard roles defined by Gardener itself.
Please consult &lt;a href="https://gardener.cloud/docs/gardener/project/projects/">Projects&lt;/a> for further information.&lt;/p>
&lt;p>However, extension controllers running in the garden cluster may also create &lt;code>CustomResourceDefinition&lt;/code>s that project members might be able to CRUD.
For this purpose, Gardener also allows to specify extension roles.&lt;/p>
&lt;p>An extension role is prefixed with &lt;code>extension:&lt;/code>, e.g.&lt;/p></description></item><item><title>Provider Local</title><link>https://gardener.cloud/docs/gardener/extensions/provider-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/provider-local/</guid><description>&lt;h1 id="local-provider-extension">Local Provider Extension&lt;/h1>
&lt;p>The &amp;ldquo;local provider&amp;rdquo; extension is used to allow the usage of seed and shoot clusters which run entirely locally without any real infrastructure or cloud provider involved.
It implements Gardener&amp;rsquo;s extension contract (&lt;a href="https://github.com/gardener/gardener/blob/master/docs/proposals/01-extensibility.md">GEP-1&lt;/a>) and thus comprises several controllers and webhooks acting on resources in seed and shoot clusters.&lt;/p>
&lt;p>The code is maintained in &lt;a href="https://github.com/gardener/gardener/tree/master/pkg/provider-local">&lt;code>pkg/provider-local&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>The motivation for maintaining such extension is the following:&lt;/p>
&lt;ul>
&lt;li>🛡 Output Qualification: Run fast and cost-efficient end-to-end tests, locally and in CI systems (increased confidence ⛑ before merging pull requests)&lt;/li>
&lt;li>⚙️ Development Experience: Develop Gardener entirely on a local machine without any external resources involved (improved costs 💰 and productivity 🚀)&lt;/li>
&lt;li>🤝 Open Source: Quick and easy setup for a first evaluation of Gardener and a good basis for first contributions&lt;/li>
&lt;/ul>
&lt;h2 id="current-limitations">Current Limitations&lt;/h2>
&lt;p>The following enlists the current limitations of the implementation.
Please note that all of them are not technical limitations/blockers, but simply advanced scenarios that we haven&amp;rsquo;t had invested yet into.&lt;/p></description></item><item><title>Reconcile Trigger</title><link>https://gardener.cloud/docs/gardener/extensions/reconcile-trigger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/reconcile-trigger/</guid><description>&lt;h1 id="reconcile-trigger">Reconcile Trigger&lt;/h1>
&lt;p>Gardener dictates the time of reconciliation for resources of the API group &lt;code>extensions.gardener.cloud&lt;/code>.
It does that by annotating the respected resource with &lt;code>gardener.cloud/operation=reconcile&lt;/code>.
Extension controllers shall react to this annotation and start reconciling the resource.
They have to remove this annotation as soon as they begin with their reconcile operation and maintain the &lt;code>status&lt;/code> of the extension resource accordingly.&lt;/p>
&lt;p>The reason for this behaviour is that it is possible to configure Gardener to reconcile only in the shoots&amp;rsquo; maintenance time windows.
In order to avoid that, extension controllers reconcile outside of the shoot&amp;rsquo;s maintenance time window we have introduced this contract.
This way extension controllers don&amp;rsquo;t need to care about when the shoot maintenance time window happens.
Gardener keeps control and decides when the shoot shall be reconciled/updated.&lt;/p></description></item><item><title>Referenced Resources</title><link>https://gardener.cloud/docs/gardener/extensions/referenced-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/referenced-resources/</guid><description>&lt;h1 id="referenced-resources">Referenced Resources&lt;/h1>
&lt;p>The Shoot resource can include a list of resources (usually secrets) that can be referenced by name in the extension &lt;code>providerConfig&lt;/code> and other Shoot sections, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: crazy-botany
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> extensions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - type: foobar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: foobar.extensions.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: FooBarConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> foo: bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secretRef: foobar-secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resources:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: foobar-secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resourceRef:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: v1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: Secret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: my-foobar-secret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Gardener expects to find these referenced resources in the project namespace (e.g., &lt;code>garden-dev&lt;/code>) and will copy them to the Shoot namespace in the Seed cluster when reconciling a Shoot, adding a prefix to their names to avoid naming collisions with Gardener&amp;rsquo;s own resources.&lt;/p></description></item><item><title>Registering Extension Controllers</title><link>https://gardener.cloud/docs/gardener/extensions/controllerregistration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/controllerregistration/</guid><description>&lt;h1 id="registering-extension-controllers">Registering Extension Controllers&lt;/h1>
&lt;p>Extensions are registered in the garden cluster via &lt;a href="https://github.com/gardener/gardener/blob/master/example/25-controllerregistration.yaml">&lt;code>ControllerRegistration&lt;/code>&lt;/a> resources.
Deployment for respective extensions are specified via &lt;a href="https://github.com/gardener/gardener/blob/master/example/25-controllerdeployment.yaml">&lt;code>ControllerDeployment&lt;/code>&lt;/a> resources.
Gardener evaluates the registrations and deployments and creates &lt;a href="https://github.com/gardener/gardener/blob/master/example/25-controllerinstallation.yaml">&lt;code>ControllerInstallation&lt;/code>&lt;/a> resources which describe the request &amp;ldquo;please install this controller &lt;code>X&lt;/code> to this seed &lt;code>Y&lt;/code>&amp;rdquo;.&lt;/p>
&lt;p>Similar to how &lt;code>CloudProfile&lt;/code> or &lt;code>Seed&lt;/code> resources get into the system, the Gardener administrator must deploy the &lt;code>ControllerRegistration&lt;/code> and &lt;code>ControllerDeployment&lt;/code> resources (this does not happen automatically in any way - the administrator decides which extensions shall be enabled).&lt;/p></description></item><item><title>Resource Admission in the Garden Cluster</title><link>https://gardener.cloud/docs/gardener/extensions/admission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/admission/</guid><description>&lt;h1 id="resource-admission-in-the-garden-cluster">Resource Admission in the Garden Cluster&lt;/h1>
&lt;p>The &lt;code>Shoot&lt;/code> resource itself can contain some extension-specific data blobs (see &lt;code>providerConfig&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>apiVersion: core.gardener.cloud/v1beta1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kind: Shoot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>metadata:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name: johndoe-aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> namespace: garden-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>spec:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> region: eu-west-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> provider:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> type: aws
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> providerConfig:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> apiVersion: aws.cloud.gardener.cloud/v1alpha1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kind: InfrastructureConfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> networks:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vpc: &lt;span style="color:#008000"># specify either &amp;#39;id&amp;#39; or &amp;#39;cidr&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000"># id: vpc-123456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cidr: 10.250.0.0/16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> internal:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 10.250.112.0/22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> public:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 10.250.96.0/22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> workers:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 10.250.0.0/19
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zones:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - eu-west-1a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above example, Gardener itself does not understand the AWS-specific provider configuration for the infrastructure. However, if this part of the &lt;code>Shoot&lt;/code> resource should be validated, then you should run an AWS-specific component in the garden cluster that registers a webhook. The same is true for values defaulting via &lt;code>MutatingWebhookConfiguration&lt;/code>. Similarly to how Gardener is deployed to the garden cluster, these components must be deployed and managed by the Gardener administrator.&lt;/p></description></item><item><title>Shoot Health Status Conditions</title><link>https://gardener.cloud/docs/gardener/extensions/shoot-health-status-conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/shoot-health-status-conditions/</guid><description>&lt;h1 id="contributing-to-shoot-health-status-conditions">Contributing to Shoot Health Status Conditions&lt;/h1>
&lt;p>Gardener checks regularly (every minute by default) the health status of all shoot clusters.
It categorizes its checks into five different types:&lt;/p>
&lt;ul>
&lt;li>&lt;code>APIServerAvailable&lt;/code>: This type indicates whether the shoot&amp;rsquo;s kube-apiserver is available or not.&lt;/li>
&lt;li>&lt;code>ControlPlaneHealthy&lt;/code>: This type indicates whether the core components of the Shoot controlplane (ETCD, KAPI, KCM..) are healthy.&lt;/li>
&lt;li>&lt;code>EveryNodeReady&lt;/code>: This type indicates whether all &lt;code>Node&lt;/code>s and all &lt;code>Machine&lt;/code> objects report healthiness.&lt;/li>
&lt;li>&lt;code>ObservabilityComponentsHealthy&lt;/code>: This type indicates whether the observability components of the Shoot control plane (Prometheus, Vali, Plutono..) are healthy.&lt;/li>
&lt;li>&lt;code>SystemComponentsHealthy&lt;/code>: This type indicates whether all system components deployed to the &lt;code>kube-system&lt;/code> namespace in the shoot do exist and are running fine.&lt;/li>
&lt;/ul>
&lt;p>In case of workerless &lt;code>Shoot&lt;/code>, &lt;code>EveryNodeReady&lt;/code> condition is not present in the &lt;code>Shoot&lt;/code>&amp;rsquo;s conditions since there are no nodes in the cluster.&lt;/p></description></item><item><title>Shoot Maintenance</title><link>https://gardener.cloud/docs/gardener/extensions/shoot-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/shoot-maintenance/</guid><description>&lt;h1 id="shoot-maintenance">Shoot Maintenance&lt;/h1>
&lt;p>There is a general &lt;a href="https://gardener.cloud/docs/gardener/shoot/shoot_maintenance/">document about shoot maintenance&lt;/a> that you might want to read.
Here, we describe how you can influence certain operations that happen during a shoot maintenance.&lt;/p>
&lt;h2 id="restart-control-plane-controllers">Restart Control Plane Controllers&lt;/h2>
&lt;p>As outlined in the above linked document, Gardener offers to restart certain control plane controllers running in the seed during a shoot maintenance.&lt;/p>
&lt;p>Extension controllers can extend the amount of pods being affected by these restarts.
If your Gardener extension manages pods of a shoot&amp;rsquo;s control plane (shoot namespace in seed) and it could potentially profit from a regular restart, please consider labeling it with &lt;code>maintenance.gardener.cloud/restart=true&lt;/code>.&lt;/p></description></item><item><title>Shoot Webhooks</title><link>https://gardener.cloud/docs/gardener/extensions/shoot-webhooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gardener.cloud/docs/gardener/extensions/shoot-webhooks/</guid><description>&lt;h1 id="shoot-resource-customization-webhooks">Shoot Resource Customization Webhooks&lt;/h1>
&lt;p>Gardener deploys several components/resources into the shoot cluster.
Some of these resources are essential (like the &lt;code>kube-proxy&lt;/code>), others are optional addons (like the &lt;code>kubernetes-dashboard&lt;/code> or the &lt;code>nginx-ingress-controller&lt;/code>).
In either case, some provider extensions might need to mutate these resources and inject provider-specific bits into it.&lt;/p>
&lt;h2 id="whats-the-approach-to-implement-such-mutations">What&amp;rsquo;s the approach to implement such mutations?&lt;/h2>
&lt;p>Similar to how &lt;a href="https://gardener.cloud/docs/gardener/extensions/controlplane-webhooks/">control plane components in the seed&lt;/a> are modified, we are using &lt;code>MutatingWebhookConfiguration&lt;/code>s to achieve the same for resources in the shoot.
Both the provider extension and the kube-apiserver of the shoot cluster are running in the same seed.
Consequently, the kube-apiserver can talk cluster-internally to the provider extension webhook, which makes such operations even faster.&lt;/p></description></item></channel></rss>